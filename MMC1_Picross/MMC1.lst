#[1]   MMC1.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/RamDefines.asm
   14                       .include "Defines/RamDefines.asm"
    1                             ;; define 0 page stuff here, and SRAM stuff if we have it
    2                             
#[3]   Defines/GeneralVars.asm
    3                             .include "Defines/GeneralVars.asm"
    1                             
    2           0000      temp1  .rs 1
    3           0001      temp2  .rs 1
    4           0002      temp3  .rs 1
    5           0003      temp4  .rs 1
    6           0004      sleeping .rs 1
    7           0005      game_mode  .rs 1
    8           0006      game_mode_switching .rs 1
    9           0007      table_address  .rs 2
   10           0009      jump_address  .rs 2
   11                     
#[2]   Defines/RamDefines.asm
#[3]   Defines/MapperVars.asm
    4                             .include "Defines/MapperVars.asm"
    1                             
    2           000B      mapper_address .rs 2
    3           000D      currentCHRBank .rs 1
    4           000E      currentPRGBank .rs 1
    5           000F      mapperDebugVar .rs 1
    6                     
    7                     
#[2]   Defines/RamDefines.asm
#[3]   Defines/ControllerVars.asm
    5                             .include "Defines/ControllerVars.asm"
    1                             
    2           0010      gamepad .rs 1
    3           0011      gamepadLast .rs 1
    4           0012      gamepadPressed .rs 1
#[2]   Defines/RamDefines.asm
    6                     
#[1]   MMC1.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/LoadAllPalMacro.asm
    3                             .include "Macros/LoadAllPalMacro.asm"
    1                     ;;macro to load all pallets in 1 go
    2                     ;; \1 = label to start at
    3                     ;; A, X, and tableAddress are clobbered here, Y is clobbered in the implementation
    4                     MACROLoadAllPal .macro
    5                     
    6                             LDY \1
    7                             TYA
    8                             ASL A
    9                             TAY
   10                             LDA (Palettes), y
   11                             INY
   12                             LDX (Palettes), y
   13                             JSR SetTableAddress
   14                             JSR loadAllPal_impl
   15                             
   16                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/LoadFullBackMacro.asm
    4                             .include "Macros/LoadFullBackMacro.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label to start at
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROLoadFullBackground .macro
    5                     
    6                             LDY \1
    7                             TYA
    8                             ASL A
    9                             TAY
   10                             LDA (NameTables), y
   11                             INY
   12                             LDX (NameTables), y
   13                             JSR SetTableAddress
   14                             JSR loadFullBackground_impl
   15                       
   16                       .endm
#[2]   Macros/Macros.asm
#[1]   MMC1.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1           0000        .bank 0
    2           8000        .org $8000
    3                       
    4  00:8000            TestBankA:
    5  00:8000  A9 01             LDA #$01
    6  00:8002  8D 0F 00          STA mapperDebugVar
    7  00:8005  60                RTS
    8                     
    9           0001        .bank 1
   10           A000        .org $A000
   11  01:A000  AD 01 00    LDA $01
#[1]   MMC1.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
    4  02:8000            TestBankB:
    5  02:8000  A9 02             LDA #$02
    6  02:8002  8D 0F 00          STA mapperDebugVar
    7  02:8005  60                RTS
    8                     
    9           0003        .bank 3
   10           A000        .org $A000
   11  03:A000  AD 02 00    LDA $02
#[1]   MMC1.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
    4  04:8000            TestBankC:
    5  04:8000  A9 03             LDA #$03
    6  04:8002  8D 0F 00          STA mapperDebugVar
    7  04:8005  60                RTS
    8                     
    9           0005        .bank 5
   10           A000        .org $A000
   11  05:A000  AD 03 00    LDA $03
#[1]   MMC1.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Init.asm
   34                       .include "Routines/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 4D C1    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 51 C1    JSR SetMapperControls
   34                       
   35  06:C040  20 8E C1    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   MMC1.asm
   35                     
   36                     
   37  06:C048  A9 00       LDA #TITLE_IDX
   38  06:C04A  20 12 C1    JSR ChangeGameMode
   39                     
   40                     ;LoadSprites:
   41                     ;  LDX #$00              ; start at 0
   42                     ;LoadSpritesLoop:
   43                     ;  LDA sprites, x        ; load data from address (sprites +  x)
   44                     ;  STA $0200, x          ; store into RAM address ($0200 + x)
   45                     ;  INX                   ; X = X + 1
   46                     ;  CPX #$10              ; Compare X to hex $10, decimal 16
   47                     ;  BNE LoadSpritesLoop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
   48                                             ; if compare was equal to 16, keep going down   
   49                     
   50  06:C04D  A9 90       LDA #%10010000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   51  06:C04F  8D 00 20    STA $2000
   52                     
   53  06:C052  A9 1E       LDA #%00011110   ; enable sprites, enable background, no clipping on left side
   54  06:C054  8D 01 20    STA $2001
   55                       
   56                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   57                     ;;     Main Program         ;;
   58                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   59                     
   60  06:C057            Forever:
   61                     
   62  06:C057  EE 04 00    INC sleeping
   63                     
   64  06:C05A            .loop
   65  06:C05A  AD 04 00    LDA sleeping
   66  06:C05D  D0 FB       BNE .loop
   67                     
   68  06:C05F  20 6E C0    JSR Dynamic_Jump
   69  06:C062  20 81 C0    JSR CallDynamicSubroutine
   70                     
   71  06:C065  4C 57 C0    JMP Forever     ;jump back to Forever, infinite loop
   72                       
   73                     ;; dynamic jump table
   74                     
   75  06:C068            JumpTable:
   76                     
   77  06:C068  84 C0       .word UpdateTitle
   78  06:C06A  8F C0       .word UpdateGame
   79  06:C06C  CC C0       .word UpdateGameOver
   80                       
   81  06:C06E            Dynamic_Jump:
   82                     
   83                       ;;load up the label from the table above
   84  06:C06E  AD 05 00    LDA game_mode
   85  06:C071  0A          ASL A
   86  06:C072  A8          TAY
   87  06:C073  BE 68 C0    LDX (JumpTable), y
   88  06:C076  C8          INY
   89  06:C077  B9 68 C0    LDA (JumpTable), y
   90  06:C07A  8E 09 00    STX jump_address
   91  06:C07D  8D 0A 00    STA jump_address+1
   92  06:C080  60          RTS
   93                       
   94  06:C081            CallDynamicSubroutine:
   95  06:C081  6C 09 00    JMP [jump_address]
   96                       ;;RTS is called in the subroutine
   97                     
   98                       
#[2]   States/UpdateTitle.asm
   99                       .include "States/UpdateTitle.asm"
    1  06:C084            UpdateTitle:
    2                     
    3  06:C084  AD 10 00    LDA gamepad
    4  06:C087  F0 05       BEQ .noInputDetected
    5                       
    6  06:C089  A9 01         LDA #GAME_IDX
    7  06:C08B  20 12 C1          JSR ChangeGameMode
    8                      
    9  06:C08E            .noInputDetected:
   10                      
   11  06:C08E  60          RTS
#[1]   MMC1.asm
#[2]   States/UpdateGame.asm
  100                       .include "States/UpdateGame.asm"
    1  06:C08F            UpdateGame:
    2                     
    3  06:C08F  AD 12 00    LDA gamepadPressed
    4  06:C092  F0 37       BEQ .noInputDetected
    5                       
    6  06:C094  20 4D C1          JSR ResetMapper
    7  06:C097  EE 0D 00          INC currentCHRBank
    8  06:C09A  AD 0D 00          LDA currentCHRBank
    9  06:C09D  C9 03             CMP #$03
   10  06:C09F  D0 02             BNE .dontModCHR
   11                             
   12  06:C0A1  A9 00             LDA #$00
   13                             
   14  06:C0A3            .dontModCHR:
   15  06:C0A3  8D 0D 00          STA currentCHRBank 
   16                             ;4kb switches- all the banks are seqential, so we gotta add 1 and mult by 2 for BG tiles
   17  06:C0A6  0A                ASL A
   18  06:C0A7  18                CLC 
   19  06:C0A8  69 01             ADC #$01
   20  06:C0AA  20 72 C1          JSR LoadCHRBankB
   21                             
   22  06:C0AD  20 4D C1          JSR ResetMapper
   23  06:C0B0  EE 0E 00          INC currentPRGBank
   24  06:C0B3  AD 0E 00          LDA currentPRGBank
   25  06:C0B6  C9 03             CMP #$03
   26  06:C0B8  D0 02             BNE .dontModPRG
   27                             
   28  06:C0BA  A9 00             LDA #$00
   29                             
   30  06:C0BC            .dontModPRG:
   31  06:C0BC  8D 0E 00          STA currentPRGBank
   32  06:C0BF  20 5C C1          JSR LoadPRGBank
   33                      
   34  06:C0C2  20 00 80          JSR TestBankA
   35  06:C0C5  AD 0F 00          LDA mapperDebugVar
   36  06:C0C8  8D 00 60          STA $6000
   37                      
   38  06:C0CB            .noInputDetected:
   39                      
   40  06:C0CB  60          RTS
#[1]   MMC1.asm
#[2]   States/UpdateGameOver.asm
  101                       .include "States/UpdateGameOver.asm"
    1  06:C0CC            UpdateGameOver:
    2  06:C0CC  60          RTS
#[1]   MMC1.asm
  102                       
  103                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  104                     ;;     Routines             ;;
  105                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  106                     
  107                       
#[2]   Routines/BackgroundUtil.asm
  108                       .include "Routines/BackgroundUtil.asm"
    1                     ;;macro to load all pallets in 1 go
    2                     ;; table_address should be set in the preceding macro
    3                     ;; y is clobbered
    4  06:C0CD            loadAllPal_impl:
    5  06:C0CD  AD 02 20    LDA $2002             ; read PPU status to reset the high/low latch
    6  06:C0D0  A9 3F       LDA #$3F
    7  06:C0D2  8D 06 20    STA $2006             ; write the high byte of $3F00 address
    8  06:C0D5  A9 00       LDA #$00
    9  06:C0D7  8D 06 20    STA $2006             ; write the low byte of $3F00 address
   10  06:C0DA  A0 00       LDY #$00              ; start out at 0
   11  06:C0DC            loadPalettesLoop:
   12  06:C0DC  B1 07       LDA [table_address], y        ; load data from address (palette + the value in x)
   13  06:C0DE  8D 07 20    STA $2007             ; write to PPU
   14  06:C0E1  C8          INY                   ; X = X + 1
   15  06:C0E2  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   16  06:C0E4  D0 F6       BNE loadPalettesLoop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   17  06:C0E6  60          RTS
   18                     
   19  06:C0E7            loadFullBackground_impl:
   20                     
   21  06:C0E7  AD 02 20          LDA $2002             ; read PPU status to reset the high/low latch
   22  06:C0EA  A9 20             LDA #$20
   23  06:C0EC  8D 06 20          STA $2006             ; write the high byte of $2000 address
   24  06:C0EF  A9 00             LDA #$00
   25  06:C0F1  8D 06 20          STA $2006             ; write the low byte of $2000 address
   26                             
   27                             ;;set pointer
   28                             ;; set counters
   29  06:C0F4  A0 00             LDY #$00
   30  06:C0F6  A2 00             LDX #$00
   31                             
   32                             ;;start loop
   33                     
   34  06:C0F8            .outerloop:
   35                     
   36  06:C0F8            .innerloop:
   37                     
   38  06:C0F8  B1 07             LDA [table_address], y
   39  06:C0FA  8D 07 20          STA $2007
   40  06:C0FD  C8                INY
   41  06:C0FE  C0 00             CPY #$00
   42  06:C100  D0 F6             BNE .innerloop
   43                     
   44  06:C102  EE 08 00          INC table_address+1
   45                             
   46  06:C105  E8                INX
   47  06:C106  E0 04             CPX #$04
   48  06:C108  D0 EE             BNE .outerloop
   49  06:C10A  60                RTS
   50                             
   51  06:C10B            SetTableAddress:
   52                             
   53                             ;;A is low, X is high
   54  06:C10B  8D 07 00          STA table_address
   55  06:C10E  8E 08 00          STX table_address+1
   56  06:C111  60                RTS
   57                             
   58  06:C112            ChangeGameMode:
   59                     
   60  06:C112  8D 05 00    STA game_mode
   61  06:C115  8D 06 00    STA game_mode_switching
   62  06:C118  A9 00       LDA #$00
   63  06:C11A  8D 01 20    STA $2001    ; disable rendering- reenable on NMI when not updating
   64  06:C11D  20 26 C1    JSR LoadGameModeBackground
   65  06:C120  A9 00       LDA #$00
   66  06:C122  8D 06 00    STA game_mode_switching
   67  06:C125  60          RTS
   68                             
   69                             
   70  06:C126            LoadGameModeBackground:
   71                     
   72                             MACROLoadAllPal game_mode
                          
       06:C126  AC 05 00          LDY game_mode
       06:C129  98                TYA
       06:C12A  0A                ASL A
       06:C12B  A8                TAY
       06:C12C  B9 10 E0          LDA (Palettes), y
       06:C12F  C8                INY
       06:C130  BE 10 E0          LDX (Palettes), y
       06:C133  20 0B C1          JSR SetTableAddress
       06:C136  20 CD C0          JSR loadAllPal_impl
                                  
   73                             MACROLoadFullBackground game_mode
                          
       06:C139  AC 05 00          LDY game_mode
       06:C13C  98                TYA
       06:C13D  0A                ASL A
       06:C13E  A8                TAY
       06:C13F  B9 16 E0          LDA (NameTables), y
       06:C142  C8                INY
       06:C143  BE 16 E0          LDX (NameTables), y
       06:C146  20 0B C1          JSR SetTableAddress
       06:C149  20 E7 C0          JSR loadFullBackground_impl
                            
   74  06:C14C  60                RTS
   75                             
   76                       
#[1]   MMC1.asm
#[2]   Routines/MapperUtils.asm
  109                       .include "Routines/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:C14D            ResetMapper:
    7  06:C14D  EE 4D C1    inc ResetMapper
    8  06:C150  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:C151            SetMapperControls:
   23                       ;;A = controls
   24  06:C151  AA          TAX
   25  06:C152  A9 80       LDA #MAPPERCONTROL
   26  06:C154  8D 0C 00    STA mapper_address+1
   27  06:C157  8A          TXA
   28  06:C158  20 7D C1    JSR SendMapperCommand
   29  06:C15B  60          RTS
   30                     
   31  06:C15C            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:C15C  AA                TAX
   35  06:C15D  A9 E0             LDA #PRGBANK
   36  06:C15F  8D 0C 00          STA mapper_address+1
   37  06:C162  8A                TXA
   38  06:C163  20 7D C1          JSR SendMapperCommand
   39  06:C166  60                RTS
   40                             
   41  06:C167            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:C167  AA                TAX
   44  06:C168  A9 A0             LDA #CHRBANK1
   45  06:C16A  8D 0C 00          STA mapper_address+1
   46  06:C16D  8A                TXA
   47  06:C16E  20 7D C1          JSR SendMapperCommand
   48  06:C171  60                RTS
   49                             
   50  06:C172            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:C172  AA                TAX
   53  06:C173  A9 C0             LDA #CHRBANK2
   54  06:C175  8D 0C 00          STA mapper_address+1
   55  06:C178  8A                TXA
   56  06:C179  20 7D C1          JSR SendMapperCommand
   57  06:C17C  60                RTS
   58                             
   59  06:C17D            SendMapperCommand:
   60                     
   61  06:C17D  A0 00             LDY #$00
   62                             
   63  06:C17F  91 0B             STA [mapper_address], y
   64  06:C181  4A                LSR A
   65  06:C182  91 0B             STA [mapper_address], y
   66  06:C184  4A                LSR A
   67  06:C185  91 0B             STA [mapper_address], y
   68  06:C187  4A                LSR A 
   69  06:C188  91 0B             STA [mapper_address], y
   70  06:C18A  4A                LSR A
   71  06:C18B  91 0B             STA [mapper_address], y
   72                             
   73  06:C18D  60                RTS
   74                             
   75  06:C18E            ResetBanks:
   76                     
   77  06:C18E  20 4D C1          JSR ResetMapper
   78  06:C191  A9 00             LDA #$00
   79  06:C193  20 5C C1          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:C196  20 4D C1          JSR ResetMapper
   83  06:C199  A9 00             LDA #$00
   84  06:C19B  20 67 C1          JSR LoadCHRBankA
   85  06:C19E  A9 01             LDA #$01
   86  06:C1A0  20 72 C1          JSR LoadCHRBankB
   87  06:C1A3  60                RTS
   88                             
   89                       
#[1]   MMC1.asm
  110                       
  111                       
  112                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  113                     ;;     NMI                  ;;
  114                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  115                     
#[2]   Routines/NMI.asm
  116                       .include "Routines/NMI.asm"
    1                      
    2  06:C1A4            NMI:
    3                     
    4  06:C1A4  48          PHA                              ;protect the registers
    5  06:C1A5  8A          TXA
    6  06:C1A6  48          PHA
    7  06:C1A7  98          TYA
    8  06:C1A8  48          PHA
    9                       
   10  06:C1A9            nmi_started:
   11  06:C1A9  A9 00       LDA #$00
   12  06:C1AB  8D 03 20    STA $2003       ; set the low byte (00) of the RAM address
   13  06:C1AE  A9 02       LDA #$02
   14  06:C1B0  8D 14 40    STA $4014       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:C1B3  AD 06 00    LDA game_mode_switching
   17  06:C1B6  F0 03       BEQ update_controllers
   18  06:C1B8  4C 02 C2    JMP WakeUp
   19                     
   20  06:C1BB            update_controllers:
   21                     
#[3]   Routines/ReadControllers.asm
   22                       .include "Routines/ReadControllers.asm"
    1                     
    2  06:C1BB  8A            TXA
    3  06:C1BC  48                PHA
    4  06:C1BD  98                TYA
    5  06:C1BE  48                PHA
    6                     
    7  06:C1BF  A2 00             LDX #$00
    8                     
    9  06:C1C1            GamePadCheck:
   10  06:C1C1  A9 01             LDA #$01        ;load 1
   11  06:C1C3  8D 16 40          STA $4016       ; turn latch on
   12                             ;STA gamepad2
   13  06:C1C6  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   14  06:C1C7  8D 16 40          STA $4016       ;turn latch off
   15                             
   16                             ;do a ring counter technique- load %10000000 into both
   17  06:C1CA  A9 80             LDA #$80
   18  06:C1CC  8D 10 00          STA gamepad
   19                     
   20  06:C1CF            ReadControllerABytesLoop:
   21  06:C1CF  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   22  06:C1D2  29 03             AND #%00000011  ;acc: %00000001 c: 0
   23  06:C1D4  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   24                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   25  06:C1D6  6E 10 00          ROR gamepad             ;gamepad: %11000000
   26                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   27  06:C1D9  90 F4             BCC ReadControllerABytesLoop
   28                             
   29                             ;;comapre last to current, find the pressed buttons this frame
   30  06:C1DB  AD 11 00          LDA gamepadLast
   31  06:C1DE  49 FF             EOR #$FF
   32  06:C1E0  2D 10 00          AND gamepad
   33  06:C1E3  8D 12 00          STA gamepadPressed
   34                             
   35                             
   36  06:C1E6  AD 10 00          LDA gamepad
   37  06:C1E9  8D 11 00          STA gamepadLast
   38                             
   39                             ;return x and y... before resetting them all over again- always good to make sure we're clean
   40  06:C1EC  68                PLA
   41  06:C1ED  A8                TAY
   42  06:C1EE  68                PLA
   43  06:C1EF  AA                TAX     
#[2]   Routines/NMI.asm
   23                       
   24                         ;;This is the PPU clean up section, so rendering the next frame starts properly.
   25  06:C1F0  A9 90       LDA #%10010000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   26  06:C1F2  8D 00 20    STA $2000
   27  06:C1F5  A9 1E       LDA #%00011110   ; enable sprites, enable background, no clipping on left side
   28  06:C1F7  8D 01 20    STA $2001
   29  06:C1FA  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   30  06:C1FC  8D 05 20    STA $2005
   31  06:C1FF  8D 05 20    STA $2005
   32                       
   33  06:C202            WakeUp:
   34  06:C202  A9 00       LDA #$00
   35  06:C204  8D 04 00    STA sleeping
   36                       
   37  06:C207  68          PLA                              ;restore the registers
   38  06:C208  A8          TAY 
   39  06:C209  68          PLA
   40  06:C20A  AA          TAX
   41  06:C20B  68          PLA
   42                     
   43  06:C20C  40          RTI             ; return from interrupt
#[1]   MMC1.asm
  117                       
  118                     ;;**************************;;
  119                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  120                     ;;       PRG ROM DATA       ;;
  121                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  122                     ;;**************************;; 
  123                       
  124                       
  125           0007        .bank 7
  126           E000        .org $E000
  127                     
#[2]   NameTables/Tables.asm
  128                       .include "NameTables/Tables.asm"
    1  07:E000            sprites:
    2                          ;vert tile attr horiz
    3  07:E000  80 32 00    .db $80, $32, $00, $80   ;sprite 0
       07:E003  80        
    4  07:E004  80 33 00    .db $80, $33, $00, $88   ;sprite 1
       07:E007  88        
    5  07:E008  88 34 00    .db $88, $34, $00, $80   ;sprite 2
       07:E00B  80        
    6  07:E00C  88 35 00    .db $88, $35, $00, $88   ;sprite 3
       07:E00F  88        
    7                     
    8                     
    9           0000      TITLE_IDX = $00
   10           0001      GAME_IDX = $01
   11           0002      GAMEOVER_IDX = $02
   12                     
   13                     
   14  07:E010            Palettes:
   15                     
   16  07:E010  1C E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E012  2C E0     
       07:E014  3C E0     
   17                     
   18  07:E016            NameTables:
   19                     
   20  07:E016  4C E0       .word Title_Screen, Game_Screen, GameOver_Screen
       07:E018  4C E4     
       07:E01A  4C E8     
   21                     
   22  07:E01C            Title_Palette:
   23                     
   24  07:E01C              .incbin "NameTables/Title_PAL.pal"
   25                       
   26  07:E02C            Game_Palette:
   27                     
   28  07:E02C              .incbin "NameTables/Game_PAL.pal"
   29                       
   30  07:E03C            GameOver_Palette:
   31                     
   32  07:E03C              .incbin "NameTables/GameOver_PAL.pal"
   33                       
   34  07:E04C            Title_Screen:
   35                     
   36  07:E04C              .incbin "NameTables/Title_NT.nam"
   37                       
   38  07:E44C            Game_Screen: 
   39                     
   40  07:E44C              .incbin "NameTables/Game_NT.nam"
   41                       
   42  07:E84C            GameOver_Screen:
   43                     
   44  07:E84C              .incbin "NameTables/Game_NT.nam"
   45                       
   46                     
   47                       
   48                      
   49                             
#[1]   MMC1.asm
  129                     
  130           FFFA        .org $FFFA     ;first of the three vectors starts here
  131  07:FFFA  A4 C1       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  132                                        ;processor will jump to the label NMI:
  133  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  134                                        ;to the label RESET:
  135  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  136                       
  137                     ;;**************************;;
  138                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  139                     ;;      CHR ROM DATA        ;;
  140                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  141                     ;;**************************;; 
  142                       
  143           0008        .bank 8
  144           0000        .org $0000
  145  08:0000              .incbin "CHRROM/Bank0.chr"   ;includes 8KB graphics file from SMB1
  146                       
  147           0009        .bank 9
  148           0000        .org $0000
  149  09:0000              .incbin "CHRROM/Bank1.chr"
  150                       
  151           000A        .bank 10
  152           0000        .org $0000
  153  0A:0000              .incbin "CHRROM/Bank2.chr"
  154                       
  155           000B        .bank 11
  156           0000        .org $0000
  157  0B:0000              .incbin "CHRROM/Bank3.chr"
