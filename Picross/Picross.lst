#[1]   Picross.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/Defines.asm
   14                       .include "Defines/Defines.asm"
    1                     ;; define 0 page stuff here, and SRAM stuff if we have it
    2                     
    3           0000        .rsset $0000
#[3]   Defines/GeneralVars.asm
    4                       .include "Defines/GeneralVars.asm"
    1           0000      temp1                   .rs 1
    2           0001      temp2                   .rs 1
    3           0002      temp3                   .rs 1
    4           0003      temp4                   .rs 1
    5           0004      tempx                   .rs 1
    6           0005      tempy                   .rs 1
    7           0006      time                    .rs 1
    8           0007      sleeping                .rs 1
    9           0008      game_mode               .rs 1
   10           0009      mode_state              .rs 1
   11           000A      NMI_locks               .rs 1
   12           000B      game_locks              .rs 1
   13           000C      pointer_address .rs 2
   14           000E      table_address   .rs 2
   15           0010      jump_address    .rs 2
   16                     
   17                     ;game modes
   18           0000      TITLE_IDX = $00
   19           0001      GAME_IDX = $01
   20           0002      GAMEOVER_IDX = $02
   21                     
   22                     ;locks for input and rendering
   23           0001      BGLOAD_NMI_LOCK = %00000001
   24           0001      EFFECT_GAME_LOCK = %00000001
   25                     
   26                     
   27                     
#[2]   Defines/Defines.asm
#[3]   Defines/ControllerVars.asm
    5                       .include "Defines/ControllerVars.asm"
    1           0010      GAMEPAD_UP = $10
    2           0020      GAMEPAD_DOWN = $20
    3           0040      GAMEPAD_LEFT = $40
    4           0080      GAMEPAD_RIGHT = $80
    5           0001      GAMEPAD_A = $01
    6           0002      GAMEPAD_B = $02
    7           0004      GAMEPAD_SELECT = $04
    8           0008      GAMEPAD_START = $08
    9                     
   10           00C0      GAMEPAD_HORI = $C0
   11           0030      GAMEPAD_VERT = $30
   12           00F0      GAMEPAD_MOVE = $F0
   13                     
   14           0003      GAMEPAD_AB = $03
   15                     
   16           0009      GAMEPAD_CONFIRM = $09
   17                     
   18           0012      gamepad                 .rs 1
   19           0013      gamepadLast     .rs 1
   20           0014      gamepadPressed  .rs 1
#[2]   Defines/Defines.asm
#[3]   Defines/PPUVariables.asm
    6                       .include "Defines/PPUVariables.asm"
    1           0015      PPU_Control                     .rs 1
    2           0016      PPU_Mask                        .rs 1
    3           0017      PPU_ScrollX                     .rs 1
    4           0018      PPU_ScrollY                     .rs 1
    5           0019      PPU_ScrollNT            .rs 1   ;first two bits
    6           001A      PPU_NT                          .rs 1
    7                     
    8           001B      PPU_PendingWrite        .rs 1
    9           001C      PPU_StringIdx           .rs 1
   10           001D      PPU_String                      .rs 128
   11                     
   12           004F      PPU_STRINGMAX = $4F ;up to size of a full nametable, I think
   13                     
   14           0000      SPRITE_YPOS = $00
   15           0001      SPRITE_ID   = $01
   16           0003      SPRITE_XPOS = $03
   17           0200      SPRITE_DATA = $0200
   18                     
   19           2000      PPU_CTRL = $2000
   20           2001      PPU_MASK = $2001
   21           2002      PPU_STATUS = $2002
   22           2003      OAM_LO = $2003
   23           2004      OAM_DATA = $2004
   24           2005      PPU_SCROLL = $2005
   25           2006      PPU_ADDR = $2006
   26           2007      PPU_DATA = $2007
   27           4014      OAM_HI = $4014
   28                     
   29           0080      DRAW_VERTICAL = $80
   30           0000      DRAW_HORIZONTAL = $00
   31                     
   32           0040      SPRITE_0_MASK = %01000000
#[2]   Defines/Defines.asm
#[3]   Defines/MapperVars.asm
    7                       .include "Defines/MapperVars.asm"
    1           009D      mapper_address  .rs 2
    2           009F      currentCHRBankA .rs 1
    3           00A0      currentCHRBankB .rs 1
    4           00A1      currentPRGBank  .rs 1
    5           00A2      mapperDebugVar  .rs 1
    6                     
    7                     
#[2]   Defines/Defines.asm
#[3]   Defines/TitleVariables.asm
    8                       .include "Defines/TitleVariables.asm"
    1                     
#[2]   Defines/Defines.asm
#[3]   Defines/GameVariables.asm
    9                       .include "Defines/GameVariables.asm"
    1           00A3      puzzle_address          .rs 2
    2           00A5      clues_address           .rs 2
    3           00A7      clue_start_address      .rs 2
    4           00A9      clue_draw_address       .rs 2
    5           00AB      clueTableIndex          .rs 1
    6           00AC      clueLineIndex           .rs 1
    7           00AD      clueOffsetShift         .rs 1
    8           00AE      clueDrawOffset          .rs 2
    9           00B0      clueDrawAdd                     .rs 1
   10           00B1      clueDrawDecSize         .rs 1
   11           00B2      clueParity                      .rs 1
   12           00B3      mouse_location          .rs 2
   13           00B5      mouse_index                     .rs 2
   14           00B7      currentPaintTile        .rs 1
   15           00B8      solutionCount           .rs 1
   16           00B9      nonSolutionCount        .rs 1
   17           00BA      holdTimer                       .rs 1
   18           00BB      GameTime                        .rs 4   ;in order - second, ten second, minute, 10 minute - max out at 99 minutes
#[2]   Defines/Defines.asm
   10                     ;; 0100 is the stack
   11                     ;; 0200 is sprite ram
   12           0300        .rsset $0300
   13           0400        .rsset $0400
   14           0500        .rsset $0500
   15           0600        .rsset $0600
   16           0700        .rsset $0700
   17           6000        .rsset $6000
#[3]   Defines/ScreenStateVariables.asm
   18                       .include "Defines/ScreenStateVariables.asm"
    1           6000      Screen_Copy             .rs 1024
    2           6400      ScreenB_Copy    .rs 1024
    3           6800      Palette_Copy    .rs 32
#[2]   Defines/Defines.asm
   19           7000        .rsset $7000
#[3]   Defines/SaveVariables.asm
   20                       .include "Defines/SaveVariables.asm"
    1           7000      bank_index      .rs 1
    2           7001      puzzle_index .rs 1
    3                     
#[2]   Defines/Defines.asm
   21                     
#[1]   Picross.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/PPUMacros.asm
    3                             .include "Macros/PPUMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetPPUControl .macro
    6                     
    7                       LDA #\1  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    8                       STA PPU_CTRL
    9                       LDA #\2   ; enable sprites, enable background, no clipping on left side
   10                       STA PPU_MASK
   11                             
   12                       .endm
   13                       
   14                     MACROSetPPUAddress .macro
   15                     
   16                       LDA PPU_STATUS             ; read PPU status to reset the high/low latch
   17                       LDA #HIGH(\1)
   18                       STA PPU_ADDR            ; write the high byte of $2000 address
   19                       LDA #LOW(\1)
   20                       STA PPU_ADDR           ; write the low byte of $2000 address
   21                       
   22                       .endm
   23                         
   24                     
   25                     MACROAddPPUStringEntryRawData .macro
   26                     
   27                       LDA #$01
   28                       STA PPU_PendingWrite
   29                       LDA \1
   30                       JSR WriteToPPUString
   31                       LDA \2
   32                       JSR WriteToPPUString
   33                       LDA \3
   34                       JSR WriteToPPUString
   35                       LDA \4 
   36                       JSR WriteToPPUString
   37                       
   38                       .endm
   39                     
   40                     MACROAddPPUStringEntryRepeat .macro
   41                     
   42                       LDA #$01
   43                       STA PPU_PendingWrite
   44                       LDA \1
   45                       JSR WriteToPPUString
   46                       LDA \2
   47                       JSR WriteToPPUString
   48                       LDA #$40
   49                       ORA \3
   50                       ORA \4
   51                       JSR WriteToPPUString
   52                       LDA \5
   53                       JSR WriteToPPUString
   54                       
   55                       .endm
   56                       
   57                     MACROAddPPUStringEntryTable .macro
   58                      
   59                       LDA #$01
   60                       STA PPU_PendingWrite
   61                       LDA \1
   62                       JSR WriteToPPUString
   63                       LDA \2
   64                       JSR WriteToPPUString
   65                       LDA #$20
   66                       ORA \3
   67                       JSR WriteToPPUString
   68                       LDA #LOW(\4)
   69                       JSR WriteToPPUString
   70                       LDA #HIGH(\4)
   71                       JSR WriteToPPUString
   72                      
   73                       .endm
   74                     
   75                     
#[2]   Macros/Macros.asm
#[3]   Macros/CallDynamicJump.asm
    4                             .include "Macros/CallDynamicJump.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROCallDynamicJump .macro
    6                     
    7                       LDA \1
    8                       JSR Dynamic_Jump
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetDoubleIndex.asm
    5                             .include "Macros/GetDoubleIndex.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = index to double
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROGetDoubleIndex .macro
    5                     
    6                             LDA \1
    7                             ASL A
    8                             TAY
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetLabelPointer.asm
    6                             .include "Macros/GetLabelPointer.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label we want address of
    3                     ;; \2 = address to store address to
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROGetLabelPointer .macro
    6                     
    7                             LDA #HIGH(\1)
    8                             LDX #LOW(\1)
    9                             
   10                             STX \2
   11                             STA \2+1
   12                             
   13                       .endm
   14                       
   15                     MACROGetPointer .macro
   16                     
   17                             LDA \1
   18                             STA \2
   19                             LDA \1+1
   20                             STA \2+1
   21                     
   22                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/FlagMacros.asm
    7                             .include "Macros/FlagMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetFlags .macro
    6                     
    7                       LDA \1
    8                       ORA #\2
    9                       STA \1
   10                             
   11                       .endm
   12                       
   13                     MACROClearFlags .macro
   14                     
   15                       LDA #\2
   16                       EOR #$FF
   17                       AND \1  
   18                       STA \1
   19                     
   20                       .endm
#[2]   Macros/Macros.asm
#[1]   Picross.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1           0000        .bank 0
    2           8000        .org $8000
    3                       
#[3]   Puzzles/house.asm
    4                       .include "Puzzles/house.asm" 
    1  00:8000            house:
    2  00:8000  03 82 00    .db $03, $82, $00, $21
       00:8003  21        
    3  00:8004  01 E0 0F    .db $01, $E0, $0F, $00, $78, $36, $C1, $08, $03, $80, $E7, $CE, $ED, $EE, $47, $44, $47, $44, $FF, $FE, $FF, $FE, $FF, $FE, $AB, $AA, $03, $80, $FF, $FE
       00:8007  00 78 36  
       00:800A  C1 08 03  
       00:800D  80 E7 CE  
       00:8010  ED EE 47  
       00:8013  44 47 44  
       00:8016  FF FE FF  
       00:8019  FE FF FE  
       00:801C  AB AA 03  
       00:801F  80 FF FE  
    4  00:8022  14 21 FF    .db $14, $21, $FF, $17, $20, $FF, $14, $21, $FF, $13, $10, $FF, $14, $12, $FF, $17, $10, $FF, $82, $10, $FF, $C2, $FF, $63, $10, $FF, $17, $10, $FF, $14, $11, $10, $FF, $13, $10, $FF, $14, $21, $FF, $17, $10, $FF, $14, $21, $FF
       00:8025  17 20 FF  
       00:8028  14 21 FF  
       00:802B  13 10 FF  
       00:802E  14 12 FF  
       00:8031  17 10 FF  
       00:8034  82 10 FF  
       00:8037  C2 FF 63  
       00:803A  10 FF 17  
       00:803D  10 FF 14  
       00:8040  11 10 FF  
       00:8043  13 10 FF  
       00:8046  14 21 FF  
       00:8049  17 10 FF  
       00:804C  14 21 FF  
    5  00:804F  40 FF 40    .db $40, $FF, $40, $FF, $22, $40, $FF, $11, $20, $FF, $30, $FF, $35, $30, $FF, $34, $23, $FF, $11, $31, $FF, $11, $31, $FF, $F0, $FF, $F0, $FF, $F0, $FF, $11, $13, $11, $10, $FF, $30, $FF, $F0, $FF
       00:8052  FF 22 40  
       00:8055  FF 11 20  
       00:8058  FF 30 FF  
       00:805B  35 30 FF  
       00:805E  34 23 FF  
       00:8061  11 31 FF  
       00:8064  11 31 FF  
       00:8067  F0 FF F0  
       00:806A  FF F0 FF  
       00:806D  11 13 11  
       00:8070  10 FF 30  
       00:8073  FF F0 FF  
    6  00:8076            houseImage:
    7  00:8076  AA AB FE   .db $AA, $AB, $FE, $AA, $AB, $FE, $AA, $AB, $FE, $AA, $FB, $FE, $AA, $2A, $BA, $AA, $A3, $2A, $A9, $5A, $3F, $29, $54, $63, $3F, $24, $62, $AF, $CE, $A2, $8A, $BF, $3A, $89, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $77, $75, $77, $77, $FF, $D5, $FF, $F5, $55, $55, $55, $40, $FF
       00:8079  AA AB FE  
       00:807C  AA AB FE  
       00:807F  AA FB FE  
       00:8082  AA 2A BA  
       00:8085  AA A3 2A  
       00:8088  A9 5A 3F  
       00:808B  29 54 63  
       00:808E  3F 24 62  
       00:8091  AF CE A2  
       00:8094  8A BF 3A  
       00:8097  89 55 55  
       00:809A  55 55 55  
       00:809D  55 55 55  
       00:80A0  55 55 55  
       00:80A3  77 75 77  
       00:80A6  77 FF D5  
       00:80A9  FF F5 55  
       00:80AC  55 55 40  
       00:80AF  FF        
    8  00:80B0            houseName:
    9  00:80B0  05 11 18    .db $05, $11, $18, $1E, $1C, $0E, $FF
       00:80B3  1E 1C 0E  
       00:80B6  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test.asm
    5                       .include "Puzzles/test.asm"
    1  00:80B7            test:
    2  00:80B7  03 01 00    .db $03, $01, $00, $00
       00:80BA  00        
    3  00:80BB  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:80BE  00 00 00  
       00:80C1  00 00 00  
       00:80C4  00 00 00  
       00:80C7  00 00 00  
       00:80CA  00 00 00  
       00:80CD  00 00 00  
       00:80D0  00 00 00  
       00:80D3  00 00 00  
       00:80D6  00 00 00  
    4  00:80D9  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80DC  FF 00 FF  
       00:80DF  00 FF 00  
       00:80E2  FF 00 FF  
       00:80E5  00 FF 00  
       00:80E8  FF 00 FF  
       00:80EB  00 FF 00  
       00:80EE  FF 00 FF  
       00:80F1  00 FF 00  
       00:80F4  FF 00 FF  
    5  00:80F7  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80FA  FF 00 FF  
       00:80FD  00 FF 00  
       00:8100  FF 00 FF  
       00:8103  00 FF 00  
       00:8106  FF 00 FF  
       00:8109  00 FF 00  
       00:810C  FF 00 FF  
       00:810F  00 FF 00  
       00:8112  FF 00 FF  
    6  00:8115            testImage:
    7  00:8115  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8118  1B 1B 1B  
       00:811B  1B 1B 1B  
       00:811E  1B 1B 1B  
       00:8121  1B 1B 1B  
       00:8124  1B 1B 1B  
       00:8127  1B 1B 1B  
       00:812A  1B 1B 1B  
       00:812D  1B 1B 1B  
       00:8130  1B 1B 1B  
       00:8133  1B 1B 1B  
       00:8136  1B 1B 1B  
       00:8139  1B 1B 1B  
       00:813C  1B 1B 1B  
       00:813F  1B 1B 1B  
       00:8142  1B 1B 1B  
       00:8145  1B 1B 1B  
       00:8148  1B 1B 1B  
       00:814B  1B 1B 00  
       00:814E  FF        
    8  00:814F            testName:
    9  00:814F  04 1D 0E    .db $04, $1D, $0E, $1C, $1D, $FF
       00:8152  1C 1D FF  
#[2]   Banks/Bank0.asm
    6                     
    7           0001        .bank 1
    8           A000        .org $A000
    9                       
   10  01:A000  00 80       .word house, test
       01:A002  B7 80     
   11                       
   12           BFFA        .org $BFFA     ;first of the three vectors starts here
   13  01:BFFA  8D CC       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   14                                        ;processor will jump to the label NMI:
   15  01:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   16                                        ;to the label RESET:
   17  01:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
#[3]   Puzzles/frog.asm
    4                       .include "Puzzles/frog.asm"
    1  02:8000            frog:
    2  02:8000  03 62 00    .db $03, $62, $00, $19
       02:8003  19        
    3  02:8004  00 00 00    .db $00, $00, $00, $00, $18, $30, $24, $48, $2C, $68, $1F, $F0, $3F, $F8, $7F, $FC, $7F, $FC, $60, $0C, $33, $98, $18, $30, $0F, $E0, $3C, $78, $78, $3C
       02:8007  00 18 30  
       02:800A  24 48 2C  
       02:800D  68 1F F0  
       02:8010  3F F8 7F  
       02:8013  FC 7F FC  
       02:8016  60 0C 33  
       02:8019  98 18 30  
       02:801C  0F E0 3C  
       02:801F  78 78 3C  
    4  02:8022  00 FF 13    .db $00, $FF, $13, $FF, $25, $20, $FF, $22, $41, $FF, $45, $10, $FF, $26, $FF, $11, $40, $FF, $11, $40, $FF, $11, $40, $FF, $26, $FF, $45, $10, $FF, $22, $41, $FF, $25, $20, $FF, $13, $FF, $00, $FF
       02:8025  FF 25 20  
       02:8028  FF 22 41  
       02:802B  FF 45 10  
       02:802E  FF 26 FF  
       02:8031  11 40 FF  
       02:8034  11 40 FF  
       02:8037  11 40 FF  
       02:803A  26 FF 45  
       02:803D  10 FF 22  
       02:8040  41 FF 25  
       02:8043  20 FF 13  
       02:8046  FF 00 FF  
    5  02:8049  00 FF 00    .db $00, $FF, $00, $FF, $22, $FF, $11, $11, $FF, $12, $21, $FF, $90, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $22, $FF, $23, $20, $FF, $22, $FF, $70, $FF, $44, $FF, $44, $FF
       02:804C  FF 22 FF  
       02:804F  11 11 FF  
       02:8052  12 21 FF  
       02:8055  90 FF B0  
       02:8058  FF D0 FF  
       02:805B  D0 FF 22  
       02:805E  FF 23 20  
       02:8061  FF 22 FF  
       02:8064  70 FF 44  
       02:8067  FF 44 FF  
    6  02:806A            frogImage:
    7  02:806A  55 55 55   .db $55, $55, $55, $55, $55, $55, $55, $55, $69, $55, $A5, $56, $F9, $5B, $E5, $5B, $25, $63, $95, $5A, $AA, $A9, $55, $AA, $22, $A9, $5A, $AA, $AA, $A9, $6A, $AA, $AA, $A5, $A0, $00, $02, $95, $A0, $54, $29, $55, $A0, $02, $95, $55, $AA, $A9, $55, $6A, $BF, $AA, $56, $AB, $FF, $AA, $40, $FF
       02:806D  55 55 55  
       02:8070  55 55 69  
       02:8073  55 A5 56  
       02:8076  F9 5B E5  
       02:8079  5B 25 63  
       02:807C  95 5A AA  
       02:807F  A9 55 AA  
       02:8082  22 A9 5A  
       02:8085  AA AA A9  
       02:8088  6A AA AA  
       02:808B  A5 A0 00  
       02:808E  02 95 A0  
       02:8091  54 29 55  
       02:8094  A0 02 95  
       02:8097  55 AA A9  
       02:809A  55 6A BF  
       02:809D  AA 56 AB  
       02:80A0  FF AA 40  
       02:80A3  FF        
    8  02:80A4            frogName:
    9  02:80A4  04 0F 1B    .db $04, $0F, $1B, $18, $10, $FF
       02:80A7  18 10 FF  
#[2]   Banks/Bank1.asm
    5                     
    6           0003        .bank 3
    7           A000        .org $A000
    8                     
    9  03:A000  00 80       .word frog
   10                     
   11           BFFA        .org $BFFA     ;first of the three vectors starts here
   12  03:BFFA  8D CC       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   13                                        ;processor will jump to the label NMI:
   14  03:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   15                                        ;to the label RESET:
   16  03:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
#[3]   Puzzles/cat.asm
    4                       .include "Puzzles/cat.asm"
    1  04:8000            cat:
    2  04:8000  03 7E 00    .db $03, $7E, $00, $0A
       04:8003  0A        
    3  04:8004  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $47, $C4, $7B, $BC, $7F, $FC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       04:8007  60 1E F0  
       04:800A  3E F8 3F  
       04:800D  F8 7F FC  
       04:8010  7F FC 47  
       04:8013  C4 7B BC  
       04:8016  7F FC 7C  
       04:8019  7C 76 DC  
       04:801C  39 38 1F  
       04:801F  F0 00 00  
    4  04:8022  00 FF 70    .db $00, $FF, $70, $FF, $54, $FF, $65, $FF, $23, $60, $FF, $13, $70, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $70, $FF, $23, $60, $FF, $65, $FF, $54, $FF, $70, $FF, $00, $FF
       04:8025  FF 54 FF  
       04:8028  65 FF 23  
       04:802B  60 FF 13  
       04:802E  70 FF 11  
       04:8031  80 FF 26  
       04:8034  FF 11 80  
       04:8037  FF 13 70  
       04:803A  FF 23 60  
       04:803D  FF 65 FF  
       04:8040  54 FF 70  
       04:8043  FF 00 FF  
    5  04:8046  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $15, $10, $FF, $43, $40, $FF, $D0, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       04:8049  FF 44 FF  
       04:804C  55 FF B0  
       04:804F  FF D0 FF  
       04:8052  D0 FF 15  
       04:8055  10 FF 43  
       04:8058  40 FF D0  
       04:805B  FF 55 FF  
       04:805E  32 23 FF  
       04:8061  31 30 FF  
       04:8064  90 FF 00  
       04:8067  FF        
    6  04:8068            catImage:
    7  04:8068  55 55 55   .db $55, $55, $55, $55, $56, $95, $A5, $55, $6A, $9A, $A5, $56, $AA, $6A, $A5, $5A, $AA, $AA, $95, $AA, $66, $6A, $96, $AA, $9A, $AA, $58, $0A, $E8, $09, $6A, $8F, $CA, $A5, $9A, $FF, $E9, $96, $AF, $57, $EA, $59, $CF, $7C, $D9, $5F, $C3, $0F, $D5, $5F, $FF, $FD, $55, $55, $55, $55, $40, $FF
       04:806B  55 56 95  
       04:806E  A5 55 6A  
       04:8071  9A A5 56  
       04:8074  AA 6A A5  
       04:8077  5A AA AA  
       04:807A  95 AA 66  
       04:807D  6A 96 AA  
       04:8080  9A AA 58  
       04:8083  0A E8 09  
       04:8086  6A 8F CA  
       04:8089  A5 9A FF  
       04:808C  E9 96 AF  
       04:808F  57 EA 59  
       04:8092  CF 7C D9  
       04:8095  5F C3 0F  
       04:8098  D5 5F FF  
       04:809B  FD 55 55  
       04:809E  55 55 40  
       04:80A1  FF        
    8  04:80A2            catName:
    9  04:80A2  03 0C 0A    .db $03, $0C, $0A, $1D, $FF
       04:80A5  1D FF     
#[2]   Banks/Bank2.asm
    5                     
    6           0005        .bank 5
    7           A000        .org $A000
    8  05:A000  00 80       .word cat
    9                     
   10           BFFA        .org $BFFA     ;first of the three vectors starts here
   11  05:BFFA  8D CC       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   12                                        ;processor will jump to the label NMI:
   13  05:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   14                                        ;to the label RESET:
   15  05:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Common/Init.asm
   34                       .include "Routines/Common/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 55 CA    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 59 CA    JSR SetMapperControls
   34                       
   35  06:C040  20 96 CA    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   Picross.asm
   35                     
   36  06:C048  A9 00       LDA #TITLE_IDX
   37  06:C04A  20 6C C7    JSR ChangeGameMode
   38  06:C04D  20 DA C9    JSR InitPPUControl
   39                       
   40                     
   41                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   42                     ;;     Main Program         ;;
   43                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   44                     
   45  06:C050            Forever:
   46                     
   47  06:C050  EE 07 00    INC sleeping
   48                     
   49  06:C053            .loop
   50  06:C053  AD 07 00    LDA sleeping
   51  06:C056  D0 FB       BNE .loop
   52                     
   53  06:C058  EE 06 00    INC time  
   54  06:C05B  20 61 C0    JSR GameLoop
   55                     
   56                     
   57  06:C05E  4C 50 C0    JMP Forever     ;jump back to Forever, infinite loop
   58                       
   59                     ;; dynamic jump table
   60                     
   61  06:C061            GameLoop:
   62                     
   63                       MACROCallDynamicJump game_mode
                          
       06:C061  AD 08 00    LDA game_mode
       06:C064  20 1C C8    JSR Dynamic_Jump
                                  
   64                       ;; we'll pop the return address here as the table index, so 
   65                       ;; the routine we pick will return us to whatever called Game Loop
   66                       ;; when it returns
   67                     
   68  06:C067            GameLoopJumpTable:
   69                     
   70  06:C067  6D C0       .word UpdateTitle
   71  06:C069  62 C2       .word UpdateGame
   72  06:C06B  1D C7       .word UpdateGameOver
   73                       
   74                     
   75                       ;;RTS is called in the subroutine
   76                     
   77                       
#[2]   Routines/Game_States/UpdateTitle.asm
   78                       .include "Routines/Game_States/UpdateTitle.asm"
    1  06:C06D            UpdateTitle:
    2                     
    3  06:C06D  AD 0A 00    LDA NMI_locks
    4  06:C070  F0 01       BEQ .unlocked
    5                       
    6  06:C072  60          RTS
    7                       
    8  06:C073            .unlocked:
    9                     
   10  06:C073  20 77 C0    JSR DoUpdateTitle  
   11  06:C076  60          RTS
   12                       
   13  06:C077            DoUpdateTitle:
   14                     
   15  06:C077  AD 09 00    LDA mode_state
   16  06:C07A  20 1C C8    JSR Dynamic_Jump
   17                         
   18  06:C07D            UpdateTitleJumpTable:
   19                     
   20  06:C07D  89 C0       .word UpdateTitleInit
   21  06:C07F  9A C0       .word UpdateBankSelection
   22  06:C081  B3 C0       .word UpdateScroll
   23  06:C083  D5 C0       .word UpdatePuzzleSelection
   24  06:C085  16 C1       .word UpdateScrollBack
   25  06:C087  33 C1       .word UpdateTitleExit
   26                     
   27                       
   28                     ;;title should have two steps- the bank selection and the puzzle selection
   29                     ;;top half of screen can be used as the title screen, and the bottom half will have the selectable options
   30                     ;;
   31                     ;;starting options list: BANK 0, BANK 1, BANK 2
   32                     ;;select one, then scroll over to the right, with numbers for puzzles 
   33                     
   34  06:C089            UpdateTitleInit:
   35                     
   36  06:C089  20 B6 C9    JSR TurnOnSprites
   37                       
   38  06:C08C  A9 00       LDA #$00
   39  06:C08E  8D B5 00    STA mouse_index
   40  06:C091  A9 00       LDA #$00
   41  06:C093  8D B6 00    STA mouse_index+1
   42                     
   43  06:C096            .changeModeState:
   44                     
   45  06:C096  EE 09 00    INC mode_state
   46  06:C099            .leave:
   47  06:C099  60          RTS
   48                       
   49  06:C09A            UpdateBankSelection:
   50                     
   51  06:C09A  20 BA C1    JSR UpdateBankPointer
   52                       
   53  06:C09D  AD 14 00    LDA gamepadPressed
   54  06:C0A0  29 01       AND #GAMEPAD_A
   55  06:C0A2  F0 0E       BEQ .leave
   56                       
   57  06:C0A4            .changeModeState:
   58                     
   59  06:C0A4  AD B5 00    LDA mouse_index
   60  06:C0A7  8D 00 70    STA bank_index
   61  06:C0AA  A9 FF       LDA #$FF
   62  06:C0AC  20 A2 C1    JSR SetPointerSprite
   63                       
   64  06:C0AF  EE 09 00    INC mode_state
   65  06:C0B2            .leave:
   66  06:C0B2  60          RTS
   67                       
   68  06:C0B3            UpdateScroll:
   69  06:C0B3  EE 17 00    INC PPU_ScrollX
   70  06:C0B6  EE 17 00    INC PPU_ScrollX
   71  06:C0B9  EE 17 00    INC PPU_ScrollX
   72  06:C0BC  EE 17 00    INC PPU_ScrollX
   73  06:C0BF  D0 13       BNE .leave
   74  06:C0C1  AD 19 00    LDA PPU_ScrollNT
   75  06:C0C4  49 01       EOR #%00000001
   76  06:C0C6  8D 19 00    STA PPU_ScrollNT
   77                       
   78  06:C0C9            .changeModeState:
   79  06:C0C9  A9 01       LDA #$01
   80  06:C0CB  20 A2 C1    JSR SetPointerSprite
   81  06:C0CE  20 68 C1    JSR InitPuzzlePointer
   82  06:C0D1  EE 09 00    INC mode_state
   83  06:C0D4            .leave:
   84  06:C0D4  60          RTS
   85                       
   86  06:C0D5            UpdatePuzzleSelection:
   87                     
   88  06:C0D5  20 F7 C1    JSR UpdatePuzzlePointer
   89                       
   90  06:C0D8  AD 14 00    LDA gamepadPressed
   91  06:C0DB  29 02       AND #GAMEPAD_B
   92  06:C0DD  D0 10       BNE .changeToScrollBack
   93  06:C0DF  AD 14 00    LDA gamepadPressed
   94  06:C0E2  29 09       AND #GAMEPAD_CONFIRM
   95  06:C0E4  F0 2F       BEQ .leave
   96                       
   97  06:C0E6  EE 09 00    INC mode_state
   98  06:C0E9  EE 09 00    INC mode_state
   99  06:C0EC  4C 15 C1    JMP .leave
  100                       
  101  06:C0EF            .changeToScrollBack:
  102                      
  103  06:C0EF  A9 FF       LDA #$FF
  104  06:C0F1  20 A2 C1    JSR SetPointerSprite
  105  06:C0F4  20 60 C1    JSR InitBankPointer
  106  06:C0F7  AD 00 70    LDA bank_index
  107  06:C0FA  8D B5 00    STA mouse_index
  108  06:C0FD  20 EC C1    JSR SetBankPointerFromIndex
  109                       
  110  06:C100  A9 00       LDA #$00
  111  06:C102  8D 18 00    STA PPU_ScrollY
  112  06:C105  A9 FC       LDA #$FC
  113  06:C107  8D 17 00    STA PPU_ScrollX
  114  06:C10A  AD 19 00    LDA PPU_ScrollNT
  115  06:C10D  29 FE       AND #$FE
  116  06:C10F  8D 19 00    STA PPU_ScrollNT
  117                       
  118  06:C112  EE 09 00    INC mode_state
  119  06:C115            .leave:
  120  06:C115  60          RTS
  121                       
  122  06:C116            UpdateScrollBack:
  123                     
  124  06:C116  CE 17 00    DEC PPU_ScrollX
  125  06:C119  CE 17 00    DEC PPU_ScrollX
  126  06:C11C  CE 17 00    DEC PPU_ScrollX
  127  06:C11F  CE 17 00    DEC PPU_ScrollX
  128  06:C122  D0 0E       BNE .leave
  129                       
  130  06:C124            .changeModeState:
  131                     
  132  06:C124  A9 01       LDA #$01
  133  06:C126  20 A2 C1    JSR SetPointerSprite
  134  06:C129  CE 09 00    DEC mode_state
  135  06:C12C  CE 09 00    DEC mode_state
  136  06:C12F  CE 09 00    DEC mode_state
  137                       
  138  06:C132            .leave:
  139  06:C132  60          RTS
  140                       
  141  06:C133            UpdateTitleExit:
  142                     
  143                       ;;reset screen scroll
  144  06:C133  A9 00       LDA #$00
  145  06:C135  8D 17 00    STA PPU_ScrollX
  146  06:C138  8D 19 00    STA PPU_ScrollNT
  147                       
  148                       ;;load bank
  149                     
  150  06:C13B  20 55 CA    JSR ResetMapper
  151  06:C13E  AD 00 70    LDA bank_index
  152  06:C141  8D A1 00    STA currentPRGBank
  153  06:C144  20 64 CA    JSR LoadPRGBank
  154                     
  155                       ;; we can also pick out the puzzle index
  156                       ;; we have the mouse indexes - one vert, one hori
  157                       ;; take vert, mult by 9- alternatively, mult by 8, add index 
  158                       ;; IE - ind = 1, mult 8 = 8, add 1 = 9
  159                       ;; add X index
  160  06:C147  AD B5 00    LDA mouse_index
  161  06:C14A  0A          ASL A
  162  06:C14B  0A          ASL A
  163  06:C14C  0A          ASL A
  164  06:C14D  18          CLC
  165  06:C14E  6D B5 00    ADC mouse_index
  166  06:C151  6D B6 00    ADC mouse_index+1
  167  06:C154  8D 01 70    STA puzzle_index
  168                     
  169  06:C157  20 BF C9    JSR TurnOffSprites
  170                     
  171  06:C15A  A9 01       LDA #GAME_IDX
  172  06:C15C  20 6C C7    JSR ChangeGameMode
  173                       
  174  06:C15F            .leave
  175  06:C15F  60          RTS
  176                       
  177  06:C160            InitBankPointer:
  178                     
  179  06:C160  A2 A0       LDX #$A0
  180  06:C162  A9 60       LDA #$60
  181  06:C164  20 7B C1    JSR InitPointer
  182                       
  183  06:C167  60          RTS  
  184                       
  185  06:C168            InitPuzzlePointer:
  186                       
  187  06:C168  A2 AE       LDX #$AE
  188  06:C16A  A9 10       LDA #$10
  189  06:C16C  20 7B C1    JSR InitPointer
  190                       
  191  06:C16F  60          RTS
  192                     
  193  06:C170            ResetMouseIndex:
  194                     
  195  06:C170  A9 00       LDA #$00
  196  06:C172  8D B5 00    STA mouse_index
  197  06:C175  A9 00       LDA #$00
  198  06:C177  8D B6 00    STA mouse_index+1
  199  06:C17A  60          RTS
  200                     
  201  06:C17B            InitPointer:
  202                     
  203  06:C17B  20 82 C1    JSR SetPointerPosition
  204  06:C17E  20 70 C1    JSR ResetMouseIndex
  205  06:C181  60          RTS  
  206                       
  207  06:C182            SetPointerPosition:
  208                     
  209  06:C182  48          PHA
  210  06:C183  8A          TXA
  211  06:C184  20 8C C1    JSR SetPointerYPosition
  212  06:C187  68          PLA
  213  06:C188  20 97 C1    JSR SetPointerXPosition
  214                      
  215  06:C18B  60          RTS
  216                       
  217  06:C18C            SetPointerYPosition:
  218                       
  219  06:C18C  48          PHA
  220  06:C18D  A9 00       LDA #SPRITE_YPOS
  221  06:C18F  20 AD C1    JSR GetPointerDataIndexInX
  222  06:C192  68          PLA
  223  06:C193  9D 00 02    STA SPRITE_DATA, x
  224  06:C196  60          RTS
  225                       
  226  06:C197            SetPointerXPosition:  
  227                       
  228  06:C197  48          PHA
  229  06:C198  A9 03       LDA #SPRITE_XPOS
  230  06:C19A  20 AD C1    JSR GetPointerDataIndexInX
  231  06:C19D  68          PLA
  232  06:C19E  9D 00 02    STA SPRITE_DATA, x 
  233  06:C1A1  60          RTS
  234                     
  235  06:C1A2            SetPointerSprite:
  236                     
  237                     ;; A has aprite we want
  238  06:C1A2  48          PHA
  239  06:C1A3  A9 01       LDA #SPRITE_ID
  240  06:C1A5  20 AD C1    JSR GetPointerDataIndexInX
  241  06:C1A8  68          PLA
  242  06:C1A9  9D 00 02    STA SPRITE_DATA, x
  243  06:C1AC  60          RTS
  244                       
  245  06:C1AD            GetPointerDataIndexInX:
  246                     
  247  06:C1AD  8D 02 00    STA temp3
  248  06:C1B0  A9 01       LDA #$01
  249  06:C1B2  0A          ASL A
  250  06:C1B3  0A          ASL A
  251  06:C1B4  18          CLC
  252  06:C1B5  6D 02 00    ADC temp3
  253  06:C1B8  AA          TAX
  254                       
  255  06:C1B9  60          RTS
  256                       
  257                       
  258  06:C1BA            UpdateBankPointer:
  259                      
  260                       ;;bank pointer is 1D, will loop between 0->3
  261  06:C1BA  AD 14 00    LDA gamepadPressed
  262  06:C1BD  D0 01       BNE .continue
  263  06:C1BF            .leaveEarly:
  264  06:C1BF  60          RTS
  265                       
  266  06:C1C0            .continue:
  267  06:C1C0  A9 00       LDA #$00
  268  06:C1C2  8D 00 00    STA temp1
  269                       
  270  06:C1C5            .parseInputs:
  271  06:C1C5  AD 14 00    LDA gamepadPressed
  272  06:C1C8  29 30       AND #GAMEPAD_VERT
  273  06:C1CA  F0 F3       BEQ .leaveEarly
  274  06:C1CC  0A          ASL A
  275  06:C1CD  0A          ASL A
  276  06:C1CE            .checkDown:
  277  06:C1CE  0A          ASL A
  278  06:C1CF  90 03       BCC .checkUp
  279  06:C1D1  EE 00 00    INC temp1
  280  06:C1D4            .checkUp:
  281  06:C1D4  0A          ASL A
  282  06:C1D5  90 03       BCC .move
  283  06:C1D7  CE 00 00    DEC temp1
  284  06:C1DA            .move:
  285                       
  286  06:C1DA  AD B5 00    LDA mouse_index
  287  06:C1DD  18          CLC
  288  06:C1DE  6D 00 00    ADC temp1
  289  06:C1E1  C9 02       CMP #$02
  290  06:C1E3  F0 04       BEQ .skipMod
  291  06:C1E5  90 02       BCC .skipMod
  292  06:C1E7  A9 00       LDA #$00
  293  06:C1E9            .skipMod:
  294  06:C1E9  8D B5 00    STA mouse_index
  295                       ;; mult mouse_index by 16
  296  06:C1EC            SetBankPointerFromIndex:
  297                     
  298  06:C1EC  0A          ASL A
  299  06:C1ED  0A          ASL A
  300  06:C1EE  0A          ASL A
  301  06:C1EF  0A          ASL A
  302  06:C1F0  18          CLC
  303  06:C1F1  69 A0       ADC #$A0
  304  06:C1F3  20 8C C1    JSR SetPointerYPosition
  305                     
  306  06:C1F6            .leave:
  307                       
  308  06:C1F6  60          RTS
  309                       
  310  06:C1F7            UpdatePuzzlePointer:
  311                     
  312                       ;;puzzle pointer is 2D, will loop between 0-9 and 0-2
  313  06:C1F7  AD 14 00    LDA gamepadPressed
  314  06:C1FA  F0 65       BEQ .leave 
  315                       
  316  06:C1FC  A9 00       LDA #$00
  317  06:C1FE  8D 00 00    STA temp1
  318  06:C201  8D 01 00    STA temp2
  319                       
  320  06:C204            .parseInputs:
  321  06:C204  AD 14 00    LDA gamepadPressed
  322  06:C207  29 F0       AND #GAMEPAD_MOVE
  323  06:C209  F0 56       BEQ .leave
  324  06:C20B  0A          ASL A
  325  06:C20C  90 03       BCC .checkLeft
  326  06:C20E  EE 00 00    INC temp1
  327  06:C211            .checkLeft:
  328  06:C211  0A          ASL A
  329  06:C212  90 03       BCC .checkDown
  330  06:C214  CE 00 00    DEC temp1
  331  06:C217            .checkDown:
  332  06:C217  0A          ASL A
  333  06:C218  90 03       BCC .checkUp
  334  06:C21A  EE 01 00    INC temp2
  335  06:C21D            .checkUp:
  336  06:C21D  0A          ASL A
  337  06:C21E  90 03       BCC .move
  338  06:C220  CE 01 00    DEC temp2
  339                       
  340  06:C223            .move:
  341                     
  342  06:C223  AD B5 00    LDA mouse_index
  343  06:C226  18          CLC
  344  06:C227  6D 01 00    ADC temp2
  345  06:C22A  C9 02       CMP #$02
  346  06:C22C  F0 04       BEQ .skipYMod
  347  06:C22E  90 02       BCC .skipYMod
  348  06:C230  A9 00       LDA #$00
  349  06:C232            .skipYMod:
  350  06:C232  8D B5 00    STA mouse_index
  351                       ;; mult mouse_index by 16
  352  06:C235  0A          ASL A
  353  06:C236  0A          ASL A
  354  06:C237  0A          ASL A
  355  06:C238  0A          ASL A
  356  06:C239  18          CLC
  357  06:C23A  69 AE       ADC #$AE
  358  06:C23C  20 8C C1    JSR SetPointerYPosition
  359                       
  360  06:C23F  AD B6 00    LDA mouse_index+1
  361  06:C242  18          CLC
  362  06:C243  6D 00 00    ADC temp1
  363  06:C246  C9 08       CMP #$08
  364  06:C248  F0 04       BEQ .skipXMod
  365  06:C24A  90 02       BCC .skipXMod
  366  06:C24C  A9 00       LDA #$00
  367  06:C24E            .skipXMod:
  368  06:C24E  8D B6 00    STA mouse_index+1
  369                       ;; we need to move 3 tiles each- so index * 3 * 8,
  370  06:C251  18          CLC
  371  06:C252  6D B6 00    ADC mouse_index+1
  372  06:C255  6D B6 00    ADC mouse_index+1
  373  06:C258  0A          ASL A
  374  06:C259  0A          ASL A
  375  06:C25A  0A          ASL A
  376  06:C25B  18          CLC
  377  06:C25C  69 10       ADC #$10
  378  06:C25E  20 97 C1    JSR SetPointerXPosition
  379                       
  380  06:C261            .leave:
  381                       
  382  06:C261  60          RTS
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGame.asm
   79                       .include "Routines/Game_States/UpdateGame.asm"
    1                     ;;VERT_CLUES = $206E
    2                     ;;HORI_CLUES = $2145
    3                     
    4           214E      VERT_CLUES = $214E
    5           218C      HORI_CLUES = $218C
    6           20A8      BANK_LEVEL = $20A8
    7           20E5      TIMER_LOC = $20E5
    8                     
    9                     ;;this will change with puzzle sizes
   10           005A      VERT_MIN = $5A ;12 - 1
   11           00DA      VERT_MAX = $DA
   12           006A      HORI_MIN = $6A ;14 - 1
   13           00EA      HORI_MAX = $EA
   14                     
   15           618E      MOUSE_START = $618E
   16                     
   17           0010      HOLD_TIME = $10
   18           0004      HOLD_FREQ = $04
   19                     
   20  06:C262            UpdateGame:
   21                     
   22  06:C262  AD 0A 00    LDA NMI_locks
   23  06:C265  F0 01       BEQ .unlocked
   24                       
   25  06:C267  60          RTS
   26                       
   27  06:C268            .unlocked:
   28                     
   29  06:C268  20 6C C2    JSR DoUpdateGame
   30  06:C26B  60          RTS
   31                       
   32  06:C26C            DoUpdateGame:
   33                     
   34  06:C26C  AD 09 00    LDA mode_state
   35  06:C26F  20 1C C8    JSR Dynamic_Jump
   36                       
   37  06:C272            UpdateGameJumpTable:
   38                     
   39  06:C272  84 C2       .word UpdateGameInit
   40  06:C274  24 C3       .word UpdateDrawVertClues
   41  06:C276  4C C3       .word UpdateDrawHoriClues
   42  06:C278  8F C3       .word UpdateGamePlay
   43  06:C27A  FE C4       .word UpdateClearPuzzle
   44  06:C27C  11 C5       .word UpdateMoveScreen
   45  06:C27E  77 C5       .word UpdateDrawImage
   46  06:C280  EF C5       .word UpdateWaitInput
   47  06:C282  F8 C5       .word UpdateGameExit
   48                     
   49  06:C284            UpdateGameInit:
   50                     
   51                       ;; get the puzzle table in the puzzle address
   52                       MACROGetLabelPointer $A000, table_address
                          
       06:C284  A9 A0             LDA #HIGH($A000)
       06:C286  A2 00             LDX #LOW($A000)
                                  
       06:C288  8E 0E 00          STX table_address
       06:C28B  8D 0F 00          STA table_address+1
                                  
   53                       MACROGetDoubleIndex puzzle_index
                          
       06:C28E  AD 01 70          LDA puzzle_index
       06:C291  0A                ASL A
       06:C292  A8                TAY
                                  
   54  06:C293  20 42 C8    JSR GetTableAtIndex
   55                       MACROGetPointer table_address, puzzle_address
                          
       06:C296  AD 0E 00          LDA table_address
       06:C299  8D A3 00          STA puzzle_address
       06:C29C  AD 0F 00          LDA table_address+1
       06:C29F  8D A4 00          STA puzzle_address+1
                          
   56                       MACROGetLabelPointer MOUSE_START, mouse_location
                          
       06:C2A2  A9 61             LDA #HIGH(MOUSE_START)
       06:C2A4  A2 8E             LDX #LOW(MOUSE_START)
                                  
       06:C2A6  8E B3 00          STX mouse_location
       06:C2A9  8D B4 00          STA mouse_location+1
                                  
   57                       
   58                       ;;for clues, we need to get past the header- for a 15x15 puzzle, that's 34 bytes ahead
   59  06:C2AC  AD A3 00    LDA puzzle_address
   60  06:C2AF  18          CLC
   61  06:C2B0  69 22       ADC #34
   62  06:C2B2  8D A5 00    STA clues_address
   63  06:C2B5  A9 00       LDA #$00
   64  06:C2B7  6D A4 00    ADC puzzle_address+1
   65  06:C2BA  8D A6 00    STA clues_address+1
   66                     
   67  06:C2BD  A9 00       LDA #$00
   68  06:C2BF  8D AB 00    STA clueTableIndex
   69  06:C2C2  8D AC 00    STA clueLineIndex
   70  06:C2C5  8D B2 00    STA clueParity
   71  06:C2C8  8D AD 00    STA clueOffsetShift
   72  06:C2CB  8D B5 00    STA mouse_index
   73  06:C2CE  8D B6 00    STA mouse_index+1
   74  06:C2D1  8D B8 00    STA solutionCount
   75  06:C2D4  8D B9 00    STA nonSolutionCount
   76  06:C2D7  8D BB 00    STA GameTime
   77  06:C2DA  8D BC 00    STA GameTime+1
   78  06:C2DD  8D BD 00    STA GameTime+2
   79  06:C2E0  8D BE 00    STA GameTime+3
   80                             
   81  06:C2E3  A9 20       LDA #$20
   82  06:C2E5  8D B0 00    STA clueDrawAdd
   83                        
   84                       MACROGetLabelPointer VERT_CLUES, clue_start_address
                          
       06:C2E8  A9 21             LDA #HIGH(VERT_CLUES)
       06:C2EA  A2 4E             LDX #LOW(VERT_CLUES)
                                  
       06:C2EC  8E A7 00          STX clue_start_address
       06:C2EF  8D A8 00          STA clue_start_address+1
                                  
   85  06:C2F2  20 24 CB    JSR ResetClueDrawAddress
   86                       
   87                       MACROAddPPUStringEntryRawData #HIGH(BANK_LEVEL), #LOW(BANK_LEVEL), #DRAW_HORIZONTAL, #$03
                          
       06:C2F5  A9 01       LDA #$01
       06:C2F7  8D 1B 00    STA PPU_PendingWrite
       06:C2FA  A9 20       LDA #HIGH(BANK_LEVEL)
       06:C2FC  20 6E C9    JSR WriteToPPUString
       06:C2FF  A9 A8       LDA #LOW(BANK_LEVEL)
       06:C301  20 6E C9    JSR WriteToPPUString
       06:C304  A9 00       LDA #DRAW_HORIZONTAL
       06:C306  20 6E C9    JSR WriteToPPUString
       06:C309  A9 03       LDA #$03 
       06:C30B  20 6E C9    JSR WriteToPPUString
                            
   88  06:C30E  AD 00 70    LDA bank_index
   89  06:C311  20 6E C9    JSR WriteToPPUString
   90  06:C314  A9 60       LDA #$60
   91  06:C316  20 6E C9    JSR WriteToPPUString
   92  06:C319  AE 01 70    LDX puzzle_index
   93  06:C31C  E8          INX
   94  06:C31D  8A          TXA 
   95  06:C31E  20 6E C9    JSR WriteToPPUString
   96                       
   97  06:C321  EE 09 00    INC mode_state
   98                     
   99  06:C324            UpdateDrawVertClues:
  100                       
  101  06:C324  20 AC CA    JSR PopulateClues
  102  06:C327  90 22       BCC .leave
  103                       
  104  06:C329            .changeModeState:
  105                     
  106  06:C329  A9 00       LDA #$00
  107  06:C32B  8D AC 00    STA clueLineIndex
  108  06:C32E  8D B2 00    STA clueParity
  109                       
  110  06:C331  A9 05       LDA #$05
  111  06:C333  8D AD 00    STA clueOffsetShift
  112                       
  113  06:C336  A9 01       LDA #$01
  114  06:C338  8D B0 00    STA clueDrawAdd
  115                        
  116                       MACROGetLabelPointer HORI_CLUES, clue_start_address
                          
       06:C33B  A9 21             LDA #HIGH(HORI_CLUES)
       06:C33D  A2 8C             LDX #LOW(HORI_CLUES)
                                  
       06:C33F  8E A7 00          STX clue_start_address
       06:C342  8D A8 00          STA clue_start_address+1
                                  
  117  06:C345  20 24 CB    JSR ResetClueDrawAddress
  118                     
  119  06:C348  EE 09 00    INC mode_state
  120  06:C34B            .leave:
  121  06:C34B  60          RTS
  122                       
  123  06:C34C            UpdateDrawHoriClues:
  124                     
  125  06:C34C  20 AC CA    JSR PopulateClues
  126  06:C34F  90 3D       BCC .leave
  127                     
  128  06:C351            .changeModeState:
  129  06:C351  20 B6 C9    JSR TurnOnSprites
  130                       
  131                       ;;set the timer to 00
  132                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C354  A9 01       LDA #$01
       06:C356  8D 1B 00    STA PPU_PendingWrite
       06:C359  A9 20       LDA #HIGH(TIMER_LOC)
       06:C35B  20 6E C9    JSR WriteToPPUString
       06:C35E  A9 E5       LDA #LOW(TIMER_LOC)
       06:C360  20 6E C9    JSR WriteToPPUString
       06:C363  A9 00       LDA #DRAW_HORIZONTAL
       06:C365  20 6E C9    JSR WriteToPPUString
       06:C368  A9 05       LDA #$05 
       06:C36A  20 6E C9    JSR WriteToPPUString
                            
  133  06:C36D  A9 00       LDA #$00
  134  06:C36F  20 6E C9    JSR WriteToPPUString
  135  06:C372  A9 00       LDA #$00
  136  06:C374  20 6E C9    JSR WriteToPPUString
  137  06:C377  A9 61       LDA #$61
  138  06:C379  20 6E C9    JSR WriteToPPUString
  139  06:C37C  A9 00       LDA #$00
  140  06:C37E  20 6E C9    JSR WriteToPPUString
  141  06:C381  A9 00       LDA #$00
  142  06:C383  20 6E C9    JSR WriteToPPUString
  143                       
  144                       ;;reset time
  145  06:C386  A9 00       LDA #$00
  146  06:C388  8D 06 00    STA time
  147                       
  148  06:C38B  EE 09 00    INC mode_state
  149  06:C38E            .leave:
  150  06:C38E  60          RTS
  151                       
  152  06:C38F            UpdateGamePlay:
  153                         
  154  06:C38F  20 9E C6    JSR UpdateTimeDisplay
  155                             
  156  06:C392  A9 00       LDA #$00
  157  06:C394  8D 00 00    STA temp1
  158  06:C397  8D 01 00    STA temp2
  159  06:C39A  8D 02 00    STA temp3
  160                       
  161  06:C39D            .checkPressed:  
  162                     
  163  06:C39D  AD 14 00    LDA gamepadPressed
  164  06:C3A0  29 F0       AND #GAMEPAD_MOVE
  165  06:C3A2  F0 0B       BEQ .checkHeld
  166                       
  167  06:C3A4  A9 10       LDA #HOLD_TIME
  168  06:C3A6  8D BA 00    STA holdTimer 
  169  06:C3A9  AD 14 00    LDA gamepadPressed
  170  06:C3AC  4C C3 C3    JMP .parseInputs
  171                       
  172  06:C3AF            .checkHeld:
  173                       
  174  06:C3AF  AD 12 00    LDA gamepad
  175  06:C3B2  29 F0       AND #GAMEPAD_MOVE
  176  06:C3B4  F0 2F       BEQ .checkPaintPress
  177                       
  178                       ;;decrement the hold timer
  179  06:C3B6  CE BA 00    DEC holdTimer
  180  06:C3B9  D0 2A       BNE .checkPaintPress
  181  06:C3BB  A9 04       LDA #HOLD_FREQ
  182  06:C3BD  8D BA 00    STA holdTimer
  183  06:C3C0  AD 12 00    LDA gamepad
  184                     
  185  06:C3C3            .parseInputs:
  186                     
  187  06:C3C3  29 F0       AND #GAMEPAD_MOVE
  188  06:C3C5  F0 1E       BEQ .checkPaintPress
  189  06:C3C7  0A          ASL A
  190  06:C3C8  90 03       BCC .checkLeft
  191  06:C3CA  EE 00 00    INC temp1
  192  06:C3CD            .checkLeft:
  193  06:C3CD  0A          ASL A
  194  06:C3CE  90 03       BCC .checkDown
  195  06:C3D0  CE 00 00    DEC temp1
  196  06:C3D3            .checkDown:
  197  06:C3D3  0A          ASL A
  198  06:C3D4  90 03       BCC .checkUp
  199  06:C3D6  EE 01 00    INC temp2
  200  06:C3D9            .checkUp:
  201  06:C3D9  0A          ASL A
  202  06:C3DA  90 03       BCC .move
  203  06:C3DC  CE 01 00    DEC temp2
  204                       
  205  06:C3DF            .move:
  206                      
  207  06:C3DF  20 09 C6    JSR MoveMouse
  208  06:C3E2  20 4A C6    JSR UpdateMouseScreenPos
  209                       
  210  06:C3E5            .checkPaintPress:
  211                     
  212  06:C3E5  AD 14 00    LDA gamepadPressed
  213  06:C3E8  29 03       AND #GAMEPAD_AB
  214  06:C3EA  F0 41       BEQ .updatePaint
  215                       ;;A or B pressed, get current tile
  216                       
  217  06:C3EC  8D 00 00    STA temp1
  218                       
  219  06:C3EF  A0 00       LDY #$00
  220  06:C3F1  B1 B3       LDA [mouse_location], y
  221  06:C3F3  8D 01 00    STA temp2
  222                       
  223                         ;;A treats X and Clear as clear
  224                             ;;B treats mark and clear as clear
  225                             ;;clear->mark->x
  226                             
  227                     
  228  06:C3F6  C9 7C       CMP #$7C      ;check if this is a marked tile
  229  06:C3F8  B0 0F       BCS .getClearTile
  230                       ;;cleared tile- store off marked tile to paint with instead
  231                       ;;not a clear tile- a mark or an x - check A or B  
  232  06:C3FA  4E 00 00    LSR temp1
  233  06:C3FD  B0 05       BCS .getMarkTile
  234                       
  235  06:C3FF            .getXTile:
  236  06:C3FF  A9 80       LDA #$80
  237  06:C401  4C 27 C4    JMP .finishGetTile
  238                       
  239  06:C404            .getMarkTile:
  240  06:C404  A9 70       LDA #$70
  241  06:C406  4C 27 C4    JMP .finishGetTile
  242                     
  243  06:C409            .getClearTile:
  244                       
  245  06:C409  4E 00 00    LSR temp1
  246  06:C40C  90 0A       BCC .checkB
  247  06:C40E  AD 01 00    LDA temp2
  248  06:C411  C9 8C       CMP #$8C                      ;; check if in X tiles - will be if >=
  249  06:C413  90 0D       BCC .clearTile
  250  06:C415  4C 04 C4    JMP .getMarkTile
  251                       
  252  06:C418            .checkB:
  253                       
  254  06:C418  AD 01 00   LDA temp2
  255  06:C41B  C9 8C      CMP #$8C
  256  06:C41D  B0 03      BCS .clearTile
  257  06:C41F  4C FF C3   JMP .getXTile
  258                       
  259  06:C422            .clearTile:
  260  06:C422  A9 60       LDA #$60
  261  06:C424  4C 27 C4    JMP .finishGetTile
  262                       
  263  06:C427            .finishGetTile:
  264  06:C427  8D B7 00    STA currentPaintTile
  265  06:C42A  4C 35 C4    JMP .setTile
  266                     
  267                     ;;we'll keep a copy of the puzzle tiles in memory, since we can't easily access tiles in the PPU
  268                     ;;might be best to just keep an entire copy of the nametable instead of trying to index it and deal with 16 bit math
  269                     ;;we can load the nametable into memory as we draw it
  270                     
  271  06:C42D            .updatePaint:
  272                     
  273  06:C42D  AD 12 00    LDA gamepad
  274  06:C430  29 03       AND #GAMEPAD_AB
  275  06:C432  D0 01       BNE .setTile
  276  06:C434  60          RTS  
  277                       
  278  06:C435            .setTile:
  279                     
  280                       ;;take Y position, mult by 2 to get starting index in puzzle solution
  281  06:C435  AD B6 00    LDA mouse_index+1
  282  06:C438  0A          ASL A
  283  06:C439  18          CLC
  284  06:C43A  69 04       ADC #$04 ;; add to get past header
  285  06:C43C  8D 00 00    STA temp1
  286                       
  287                       ;;div X position by 8 to get the byte index
  288  06:C43F  AD B5 00    LDA mouse_index
  289  06:C442  4A          LSR A
  290  06:C443  4A          LSR A
  291  06:C444  4A          LSR A
  292  06:C445  F0 03       BEQ .getMask
  293                       
  294  06:C447  EE 00 00    INC temp1
  295                       
  296  06:C44A            .getMask:
  297                       
  298  06:C44A  AD B5 00    LDA mouse_index
  299  06:C44D  29 07       AND #$07
  300  06:C44F  AA          TAX
  301  06:C450  A9 80       LDA #$80
  302  06:C452  E0 00       CPX #$00
  303  06:C454  F0 04       BEQ .storeMask
  304                     
  305  06:C456            .maskLoop:
  306  06:C456  4A          LSR A
  307  06:C457  CA          DEX
  308  06:C458  D0 FC       BNE .maskLoop
  309  06:C45A            .storeMask:
  310  06:C45A  8D 01 00    STA temp2
  311                     
  312  06:C45D  AC 00 00    LDY temp1
  313  06:C460  B1 A3       LDA [puzzle_address], y
  314  06:C462  2D 01 00    AND temp2
  315  06:C465  8D 00 00    STA temp1     ;get the 0/non zero solution flag 
  316                     
  317  06:C468  A0 00       LDY #$00
  318  06:C46A  B1 B3       LDA [mouse_location], y
  319  06:C46C  8D 02 00    STA temp3
  320  06:C46F  29 F0       AND #$F0
  321  06:C471  CD B7 00    CMP currentPaintTile
  322  06:C474  D0 01       BNE .diffTiles
  323  06:C476  60          RTS
  324                       
  325  06:C477            .diffTiles:
  326                       ;;tiles are different- check if the current tile is marked as a solution tile
  327  06:C477  C9 70       CMP #$70
  328  06:C479  D0 0B       BNE .checkNewMark
  329                       ;;if erasing a mark, check if the tile was part of the solution
  330  06:C47B  AD 00 00    LDA temp1
  331  06:C47E  D0 18       BNE .antiMark
  332  06:C480  CE B9 00    DEC nonSolutionCount
  333  06:C483  4C A1 C4    JMP .overwriteTile
  334                       
  335  06:C486            .checkNewMark:
  336                     
  337  06:C486  AD B7 00    LDA currentPaintTile
  338  06:C489  C9 70       CMP #$70
  339  06:C48B  D0 14       BNE .overwriteTile
  340                       
  341  06:C48D  AD 00 00    LDA temp1
  342  06:C490  D0 0C       BNE .proMark
  343  06:C492  EE B9 00    INC nonSolutionCount 
  344  06:C495  4C A1 C4    JMP .overwriteTile  
  345                       
  346  06:C498            .antiMark:
  347  06:C498  CE B8 00    DEC solutionCount
  348  06:C49B  4C A1 C4    JMP .overwriteTile
  349  06:C49E            .proMark:   
  350                       
  351  06:C49E  EE B8 00    INC solutionCount
  352                       
  353  06:C4A1            .overwriteTile:
  354                       ;;overwrite tile
  355  06:C4A1  AD 02 00    LDA temp3
  356  06:C4A4  29 0F       AND #$0F
  357  06:C4A6  0D B7 00    ORA currentPaintTile
  358  06:C4A9  A0 00       LDY #$00
  359  06:C4AB  91 B3       STA [mouse_location], y
  360  06:C4AD  8D 00 00    STA temp1
  361                       
  362  06:C4B0  AD B4 00    LDA mouse_location+1
  363  06:C4B3  29 3F       AND #$3F
  364  06:C4B5  8D 01 00    STA temp2
  365                         
  366                       MACROAddPPUStringEntryRawData temp2, mouse_location, #DRAW_HORIZONTAL, #$01
                          
       06:C4B8  A9 01       LDA #$01
       06:C4BA  8D 1B 00    STA PPU_PendingWrite
       06:C4BD  AD 01 00    LDA temp2
       06:C4C0  20 6E C9    JSR WriteToPPUString
       06:C4C3  AD B3 00    LDA mouse_location
       06:C4C6  20 6E C9    JSR WriteToPPUString
       06:C4C9  A9 00       LDA #DRAW_HORIZONTAL
       06:C4CB  20 6E C9    JSR WriteToPPUString
       06:C4CE  A9 01       LDA #$01 
       06:C4D0  20 6E C9    JSR WriteToPPUString
                            
  367  06:C4D3  AD 00 00    LDA temp1
  368  06:C4D6  20 6E C9    JSR WriteToPPUString
  369                       
  370  06:C4D9            .checkSolution: 
  371                     
  372  06:C4D9  A0 01       LDY #$01
  373  06:C4DB  B1 A3       LDA [puzzle_address], y
  374  06:C4DD  CD B8 00    CMP solutionCount
  375  06:C4E0  D0 1B       BNE .leave
  376  06:C4E2  AD B9 00    LDA nonSolutionCount
  377  06:C4E5  F0 03       BEQ .changeModeState
  378                       
  379  06:C4E7  4C FD C4    JMP .leave
  380                       
  381                       ;;update the painting
  382  06:C4EA            .changeModeState:
  383                      
  384  06:C4EA  20 BF C9    JSR TurnOffSprites
  385                        
  386  06:C4ED  A9 00       LDA #$00
  387  06:C4EF  8D A9 00    STA clue_draw_address
  388  06:C4F2  8D AC 00    STA clueLineIndex
  389  06:C4F5  A9 20       LDA #$20
  390  06:C4F7  8D AA 00    STA clue_draw_address+1
  391                       
  392  06:C4FA  EE 09 00    INC mode_state
  393                     
  394  06:C4FD            .leave:
  395                      
  396  06:C4FD  60          RTS
  397                       
  398  06:C4FE            UpdateClearPuzzle:
  399                     
  400  06:C4FE  20 98 CB    JSR ClearPuzzle
  401  06:C501  AD AC 00    LDA clueLineIndex
  402  06:C504  C9 1E       CMP #30
  403  06:C506  D0 08       BNE .leave
  404                       
  405  06:C508            .changeModeState:
  406                     
  407  06:C508  A9 00       LDA #$00
  408  06:C50A  8D AC 00    STA clueLineIndex ;using this as a scroller
  409  06:C50D  EE 09 00    INC mode_state
  410                     
  411  06:C510            .leave:
  412                      
  413  06:C510  60          RTS
  414  06:C511            UpdateMoveScreen:
  415                       
  416                       ;for 15x15, move 5 tiles left and 5 tiles up- let's do 1 at a time
  417                       ;we'll take the lower nibble of the clue line index as our scroll counter, and the higher nibble as the x/y flag
  418                       
  419  06:C511  AD AC 00    LDA clueLineIndex
  420  06:C514  29 10       AND #$10
  421  06:C516  D0 1D       BNE .scrollY
  422                       
  423                       ;;scroll X over
  424  06:C518  AD AC 00    LDA clueLineIndex
  425  06:C51B  29 0F       AND #$0F
  426  06:C51D  0A          ASL A
  427  06:C51E  0A          ASL A
  428  06:C51F  0A          ASL A ;mult by 8
  429  06:C520  8D 17 00    STA PPU_ScrollX
  430                       
  431  06:C523  EE AC 00    INC clueLineIndex
  432  06:C526  AD AC 00    LDA clueLineIndex
  433  06:C529  C9 06       CMP #$06
  434  06:C52B  D0 49       BNE .leave
  435  06:C52D  A9 10       LDA #$10
  436  06:C52F  8D AC 00    STA clueLineIndex
  437  06:C532  4C 76 C5    JMP .leave
  438                       
  439  06:C535            .scrollY:
  440                     
  441  06:C535  AD AC 00    LDA clueLineIndex
  442  06:C538  29 0F       AND #$0F
  443  06:C53A  0A          ASL A
  444  06:C53B  0A          ASL A
  445  06:C53C  0A          ASL A ;mult by 8
  446  06:C53D  8D 18 00    STA PPU_ScrollY
  447                     
  448  06:C540  EE AC 00    INC clueLineIndex
  449  06:C543  AD AC 00    LDA clueLineIndex
  450  06:C546  29 0F       AND #$0F
  451  06:C548  C9 05       CMP #$05
  452  06:C54A  D0 2A       BNE .leave
  453                       
  454  06:C54C            .changeModeState:
  455                     
  456  06:C54C  A9 8E       LDA #$8E
  457  06:C54E  8D A9 00    STA clue_draw_address
  458  06:C551  A9 21       LDA #$21
  459  06:C553  8D AA 00    STA clue_draw_address+1
  460                       
  461  06:C556  AD A5 00    LDA clues_address
  462  06:C559  18          CLC
  463  06:C55A  6D AB 00    ADC clueTableIndex
  464  06:C55D  8D A5 00    STA clues_address
  465  06:C560  AD A6 00    LDA clues_address+1
  466  06:C563  69 00       ADC #$00
  467  06:C565  8D A6 00    STA clues_address+1
  468                       
  469  06:C568  A9 00       LDA #$00
  470  06:C56A  8D AB 00    STA clueTableIndex
  471  06:C56D  8D AC 00    STA clueLineIndex
  472  06:C570  8D AD 00    STA clueOffsetShift
  473                     
  474  06:C573  EE 09 00    INC mode_state
  475                     
  476  06:C576            .leave:
  477                      
  478  06:C576  60          RTS
  479  06:C577            UpdateDrawImage:
  480  06:C577  20 E4 CB    JSR DrawImage
  481  06:C57A  AD AC 00    LDA clueLineIndex
  482  06:C57D  C9 E1       CMP #225
  483  06:C57F  D0 6D       BNE .leave
  484                       
  485  06:C581            .changeModeState:
  486                     
  487                       ;;do a palette draw
  488                       ;;puzzle address + 03 has the desired palette offset
  489                     
  490  06:C581  A0 03       LDY #$03
  491  06:C583  B1 A3       LDA [puzzle_address],y
  492  06:C585  29 0F       AND #$0F
  493  06:C587  AA          TAX
  494                       
  495  06:C588  B1 A3       LDA [puzzle_address],y
  496  06:C58A  29 10       AND #$10
  497  06:C58C  F0 15       BEQ .storeBottomVals
  498                       
  499  06:C58E  8A          TXA
  500  06:C58F  09 10       ORA #$10
  501  06:C591  8D 00 00    STA temp1
  502  06:C594  8A          TXA
  503  06:C595  09 20       ORA #$20
  504  06:C597  8D 01 00    STA temp2
  505  06:C59A  8A          TXA
  506  06:C59B  09 30       ORA #$30
  507  06:C59D  8D 02 00    STA temp3
  508                     
  509  06:C5A0  4C B5 C5    JMP .checkKeepWhite
  510                       
  511  06:C5A3            .storeBottomVals:
  512                     
  513  06:C5A3  8A          TXA
  514  06:C5A4  09 00       ORA #$00
  515  06:C5A6  8D 00 00    STA temp1
  516  06:C5A9  8A          TXA
  517  06:C5AA  09 10       ORA #$10
  518  06:C5AC  8D 01 00    STA temp2
  519  06:C5AF  8A          TXA
  520  06:C5B0  09 20       ORA #$20
  521  06:C5B2  8D 02 00    STA temp3
  522                       
  523  06:C5B5            .checkKeepWhite:
  524                       
  525  06:C5B5  B1 A3       LDA [puzzle_address],y
  526  06:C5B7  29 20       AND #$20
  527  06:C5B9  F0 05       BEQ .loadPalToPPUStr
  528                       
  529  06:C5BB  A9 30       LDA #$30
  530  06:C5BD  8D 02 00    STA temp3
  531                       
  532                       
  533  06:C5C0            .loadPalToPPUStr:
  534                       
  535                       MACROAddPPUStringEntryRawData #$3F, #$01, #DRAW_HORIZONTAL, #03
                          
       06:C5C0  A9 01       LDA #$01
       06:C5C2  8D 1B 00    STA PPU_PendingWrite
       06:C5C5  A9 3F       LDA #$3F
       06:C5C7  20 6E C9    JSR WriteToPPUString
       06:C5CA  A9 01       LDA #$01
       06:C5CC  20 6E C9    JSR WriteToPPUString
       06:C5CF  A9 00       LDA #DRAW_HORIZONTAL
       06:C5D1  20 6E C9    JSR WriteToPPUString
       06:C5D4  A9 03       LDA #03 
       06:C5D6  20 6E C9    JSR WriteToPPUString
                            
  536  06:C5D9  AD 00 00    LDA temp1
  537  06:C5DC  20 6E C9    JSR WriteToPPUString
  538  06:C5DF  AD 01 00    LDA temp2
  539  06:C5E2  20 6E C9    JSR WriteToPPUString
  540  06:C5E5  AD 02 00    LDA temp3
  541  06:C5E8  20 6E C9    JSR WriteToPPUString
  542                       
  543  06:C5EB  EE 09 00    INC mode_state
  544                     
  545  06:C5EE            .leave:
  546                      
  547  06:C5EE  60          RTS
  548  06:C5EF            UpdateWaitInput:
  549                     
  550  06:C5EF  AD 14 00    LDA gamepadPressed
  551  06:C5F2  F0 03       BEQ .leave
  552                       
  553  06:C5F4            .changeModeState:
  554                     
  555  06:C5F4  EE 09 00    INC mode_state
  556                     
  557  06:C5F7            .leave:
  558                      
  559  06:C5F7  60          RTS
  560                       
  561  06:C5F8            UpdateGameExit:
  562                     
  563  06:C5F8  A9 00       LDA #$00
  564  06:C5FA  8D 17 00    STA PPU_ScrollX
  565  06:C5FD  8D 18 00    STA PPU_ScrollY
  566  06:C600  8D 19 00    STA PPU_ScrollNT
  567                       
  568  06:C603  A9 02       LDA #GAMEOVER_IDX
  569  06:C605  20 6C C7    JSR ChangeGameMode
  570  06:C608  60          RTS
  571                       
  572  06:C609            MoveMouse:
  573                     
  574  06:C609  AD 00 00    LDA temp1
  575  06:C60C  0E 00 00    ASL temp1
  576  06:C60F  0E 00 00    ASL temp1
  577  06:C612  0E 00 00    ASL temp1
  578                       
  579  06:C615  AD 01 00    LDA temp2
  580  06:C618  0E 01 00    ASL temp2 
  581  06:C61B  0E 01 00    ASL temp2
  582  06:C61E  0E 01 00    ASL temp2
  583                       
  584  06:C621  A2 03       LDX #SPRITE_XPOS
  585  06:C623  BD 00 02    LDA SPRITE_DATA, x
  586  06:C626  18          CLC
  587  06:C627  6D 00 00    ADC temp1
  588                       ;;check against borders
  589  06:C62A  C9 6A       CMP #HORI_MIN
  590  06:C62C  F0 07       BEQ .moveVert
  591  06:C62E  C9 EA       CMP #HORI_MAX
  592  06:C630  F0 03       BEQ .moveVert
  593  06:C632  9D 00 02    STA SPRITE_DATA, x
  594                     
  595  06:C635            .moveVert:
  596                     
  597  06:C635  A2 00       LDX #SPRITE_YPOS
  598  06:C637  BD 00 02    LDA SPRITE_DATA, x
  599  06:C63A  18          CLC
  600  06:C63B  6D 01 00    ADC temp2
  601                       ;;check against borders
  602  06:C63E  C9 5A       CMP #VERT_MIN
  603  06:C640  F0 07       BEQ .leave
  604  06:C642  C9 DA       CMP #VERT_MAX
  605  06:C644  F0 03       BEQ .leave
  606  06:C646  9D 00 02    STA SPRITE_DATA, x
  607                     
  608  06:C649            .leave:
  609  06:C649  60          RTS
  610                             
  611  06:C64A            UpdateMouseScreenPos:
  612                     
  613  06:C64A  A2 00       LDX #$00
  614  06:C64C  BD 00 02    LDA SPRITE_DATA, x;ypos       ;yyyy y...
  615  06:C64F  4A          LSR A                                         ;0yyy yy..
  616  06:C650  4A          LSR A                                         ;00yy yyy.
  617  06:C651  4A          LSR A                                         ;000y yyyy
  618  06:C652  8D 00 00    STA temp1
  619  06:C655  8D B6 00    STA mouse_index+1
  620  06:C658  E8          INX
  621  06:C659  E8          INX
  622  06:C65A  E8          INX   
  623  06:C65B  BD 00 02    LDA SPRITE_DATA, x ;xpos  ;  xxxx x...
  624  06:C65E  29 F8       AND #$F8                       ;              ;  xxxx x000
  625  06:C660  8D 01 00    STA temp2                      ;      ;  
  626  06:C663  4E 00 00    LSR temp1                      ;              ;  0000 yyyy y
  627  06:C666  6E 01 00    ROR temp2                      ;      ;  yxxx xx00
  628  06:C669  4E 00 00    LSR temp1                      ;              ;  0000 0yyy y
  629  06:C66C  6E 01 00    ROR temp2                      ;              ;  yyxx xxx0
  630  06:C66F  4E 00 00    LSR temp1              ;              ;  0000 00yy y
  631  06:C672  6E 01 00    ROR temp2                      ;              ;  yyyx xxxx
  632  06:C675  AD 01 00    LDA temp2
  633  06:C678  29 1F       AND #$1F
  634  06:C67A  8D B5 00    STA mouse_index
  635                       
  636  06:C67D  AD B5 00    LDA mouse_index
  637  06:C680  38          SEC 
  638  06:C681  E9 0E       SBC #$0E
  639  06:C683  8D B5 00    STA mouse_index
  640                       
  641  06:C686  AD B6 00    LDA mouse_index+1
  642  06:C689  38          SEC 
  643  06:C68A  E9 0C       SBC #$0C
  644  06:C68C  8D B6 00    STA mouse_index+1
  645                       
  646                       ;subtract starting offsets for mouse index
  647                       
  648  06:C68F  AD 00 00    LDA temp1                      ;              ;  0000 00yy
  649  06:C692  09 60       ORA #$60                       ;              ;  0110 00yy
  650                       
  651  06:C694  8D B4 00    STA mouse_location+1
  652  06:C697  AD 01 00    LDA temp2
  653  06:C69A  8D B3 00    STA mouse_location
  654                       
  655  06:C69D            .leave:
  656  06:C69D  60          RTS
  657                       
  658  06:C69E            UpdateTimeDisplay:
  659                     
  660  06:C69E  AD 06 00    LDA time
  661  06:C6A1  C9 3C       CMP #60
  662  06:C6A3  D0 77       BNE .leave
  663                       
  664  06:C6A5  A9 00       LDA #$00
  665  06:C6A7  8D 06 00    STA time
  666                       
  667  06:C6AA  EE BB 00    INC GameTime
  668  06:C6AD  AD BB 00    LDA GameTime
  669  06:C6B0  C9 0A       CMP #10
  670  06:C6B2  D0 32       BNE .printTime
  671                       
  672  06:C6B4  A9 00       LDA #$00
  673  06:C6B6  8D BB 00    STA GameTime
  674  06:C6B9  EE BC 00    INC GameTime+1
  675  06:C6BC  AD BC 00    LDA GameTime+1
  676  06:C6BF  C9 06       CMP #6
  677  06:C6C1  D0 23       BNE .printTime
  678                       
  679  06:C6C3  A9 00       LDA #$00
  680  06:C6C5  8D BC 00    STA GameTime+1
  681  06:C6C8  EE BD 00    INC GameTime+2
  682  06:C6CB  AD BD 00    LDA GameTime+2
  683  06:C6CE  C9 0A       CMP #10
  684  06:C6D0  D0 14       BNE .printTime
  685                       
  686  06:C6D2  A9 00       LDA #$00
  687  06:C6D4  8D BD 00    STA GameTime+2
  688  06:C6D7  EE BE 00    INC GameTime+3
  689  06:C6DA  AD BE 00    LDA GameTime+3
  690  06:C6DD  C9 0A       CMP #10
  691  06:C6DF  D0 05       BNE .printTime
  692                       
  693  06:C6E1  A9 00       LDA #$00
  694  06:C6E3  8D BE 00    STA GameTime+3
  695                       
  696  06:C6E6            .printTime:
  697                     
  698                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C6E6  A9 01       LDA #$01
       06:C6E8  8D 1B 00    STA PPU_PendingWrite
       06:C6EB  A9 20       LDA #HIGH(TIMER_LOC)
       06:C6ED  20 6E C9    JSR WriteToPPUString
       06:C6F0  A9 E5       LDA #LOW(TIMER_LOC)
       06:C6F2  20 6E C9    JSR WriteToPPUString
       06:C6F5  A9 00       LDA #DRAW_HORIZONTAL
       06:C6F7  20 6E C9    JSR WriteToPPUString
       06:C6FA  A9 05       LDA #$05 
       06:C6FC  20 6E C9    JSR WriteToPPUString
                            
  699  06:C6FF  AD BE 00    LDA GameTime+3
  700  06:C702  20 6E C9    JSR WriteToPPUString
  701  06:C705  AD BD 00    LDA GameTime+2
  702  06:C708  20 6E C9    JSR WriteToPPUString
  703  06:C70B  A9 61       LDA #$61
  704  06:C70D  20 6E C9    JSR WriteToPPUString
  705  06:C710  AD BC 00    LDA GameTime+1
  706  06:C713  20 6E C9    JSR WriteToPPUString
  707  06:C716  AD BB 00    LDA GameTime
  708  06:C719  20 6E C9    JSR WriteToPPUString
  709                       
  710                       
  711                       
  712  06:C71C            .leave: 
  713  06:C71C  60          RTS  
  714                     
  715                     ;;using the line index and a given count based on the direction, 
  716                       
  717                     ;;      JSR ResetMapper
  718                     ;;      INC currentCHRBank
  719                     ;;      LDA currentCHRBank
  720                     ;;      CMP #$03
  721                     ;;      BNE .dontModCHR
  722                             
  723                     ;;      LDA #$00
  724                     
  725                     ;;.dontModCHR:
  726                     ;;      STA currentCHRBank 
  727                     ;;      ;4kb switches- all the banks are seqential, so we gotta add 1 and mult by 2 for BG tiles
  728                     ;;      ASL A
  729                     ;;      CLC 
  730                     ;;      ADC #$01
  731                     ;;      JSR LoadCHRBankB
  732                     ;;      
  733                     ;;      JSR ResetMapper
  734                     ;;      INC currentPRGBank
  735                     ;;      LDA currentPRGBank
  736                     ;;      CMP #$03
  737                     ;;      BNE .dontModPRG
  738                             
  739                     ;;      LDA #$00
  740                             
  741                     ;;.dontModPRG:
  742                     ;;       STA currentPRGBank
  743                     ;;       JSR LoadPRGBank
  744                      
  745                     ;;       JSR TestBankA
  746                     ;;       LDA mapperDebugVar
  747                     ;;       STA $6000
  748                     ;;       JMP .noInputDetected
  749                     
  750                     
  751                       
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGameOver.asm
   80                       .include "Routines/Game_States/UpdateGameOver.asm"
    1  06:C71D            UpdateGameOver:
    2                     
    3  06:C71D  AD 0A 00    LDA NMI_locks
    4  06:C720  F0 01       BEQ .unlocked
    5                       
    6  06:C722  60          RTS
    7                       
    8  06:C723            .unlocked:
    9                     
   10  06:C723  20 27 C7    JSR DoUpdateGameOver 
   11  06:C726  60          RTS
   12                       
   13  06:C727            DoUpdateGameOver:
   14                     
   15  06:C727  AD 09 00    LDA mode_state
   16  06:C72A  20 1C C8    JSR Dynamic_Jump
   17                         
   18  06:C72D            UpdateGameOverJumpTable:
   19                     
   20  06:C72D  35 C7       .word UpdateGameOverInit
   21  06:C72F  3C C7       .word UpdateGameOverWaitInput
   22  06:C731  4A C7       .word UpdateGameOverFadeOut
   23  06:C733  5F C7       .word UpdateGameOverExit
   24                       
   25  06:C735            UpdateGameOverInit:
   26                     
   27  06:C735  20 B6 C9    JSR TurnOnSprites
   28  06:C738  EE 09 00    INC mode_state
   29  06:C73B  60          RTS
   30                     
   31  06:C73C            UpdateGameOverWaitInput:
   32                     
   33  06:C73C  AD 14 00    LDA gamepadPressed
   34  06:C73F  F0 08       BEQ .leave
   35                     
   36  06:C741            .changeModeState:
   37                     
   38  06:C741  A9 00       LDA #$00
   39  06:C743  8D 06 00    STA time
   40  06:C746  EE 09 00    INC mode_state
   41  06:C749            .leave:
   42  06:C749  60          RTS
   43                     
   44  06:C74A            UpdateGameOverFadeOut:
   45                     
   46  06:C74A  AD 06 00    LDA time
   47  06:C74D  29 07       AND #$07
   48  06:C74F  D0 0D       BNE .leave
   49                       ;;every 8 frames, decrement the palettes
   50  06:C751  20 EB C9    JSR FadeOutPalettes
   51  06:C754  B0 08       BCS .leave
   52                     
   53  06:C756            .changeModeState:
   54  06:C756  A9 00       LDA #$00
   55  06:C758  8D 06 00    STA time
   56  06:C75B  EE 09 00    INC mode_state
   57  06:C75E            .leave:
   58  06:C75E  60          RTS
   59                     
   60  06:C75F            UpdateGameOverExit:
   61                     
   62  06:C75F  AD 06 00    LDA time
   63  06:C762  29 0F       AND #$0F
   64  06:C764  D0 05       BNE .leave
   65                     
   66  06:C766  A9 00       LDA #TITLE_IDX
   67  06:C768  20 6C C7    JSR ChangeGameMode
   68                       
   69  06:C76B            .leave:
   70  06:C76B  60          RTS
#[1]   Picross.asm
   81                       
   82                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   83                     ;;     Routines             ;;
   84                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   85                     
   86                     
#[2]   Routines/Common/GameModeRoutines.asm
   87                       .include "Routines/Common/GameModeRoutines.asm"
    1  06:C76C            ChangeGameMode:
    2  06:C76C  8D 08 00    STA game_mode
    3  06:C76F  A9 00       LDA #$00
    4  06:C771  8D 09 00    STA mode_state
    5  06:C774  20 82 C9    JSR ClearPPUString
    6  06:C777  20 7B C7    JSR LoadGameModeScreen
    7  06:C77A  60          RTS
    8                       
    9  06:C77B            LoadGameModeScreen:
   10                     
   11                       MACROSetFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:C77B  AD 0A 00    LDA NMI_locks
       06:C77E  09 01       ORA #BGLOAD_NMI_LOCK
       06:C780  8D 0A 00    STA NMI_locks
                                  
   12                       
   13  06:C783  A9 00       LDA #$00
   14  06:C785  8D 01 20    STA PPU_MASK    ; disable rendering- reenable on NMI when not updating
   15                     
   16  06:C788  20 B6 C7    JSR LoadGameModeBackground
   17  06:C78B  20 F9 C7    JSR LoadGameModeSprites
   18                     
   19                       MACROClearFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:C78E  A9 01       LDA #BGLOAD_NMI_LOCK
       06:C790  49 FF       EOR #$FF
       06:C792  2D 0A 00    AND NMI_locks  
       06:C795  8D 0A 00    STA NMI_locks
                          
   20                     
   21                       
   22                       ;; load the CHR bank for this mode
   23  06:C798  20 55 CA    JSR ResetMapper
   24                       ;;remember, we're loading the SECOND set in each chr bank
   25                       ;;so we'll take the index from the game mode chr table and add one mult 2
   26  06:C79B  AE 08 00    LDX game_mode
   27  06:C79E  BD 16 C8    LDA gameModeInitCHRROMB, x
   28  06:C7A1  0A          ASL A
   29  06:C7A2  18          CLC 
   30  06:C7A3  69 01       ADC #$01
   31  06:C7A5  20 7A CA    JSR LoadCHRBankB
   32                       
   33  06:C7A8  20 55 CA    JSR ResetMapper
   34  06:C7AB  AE 08 00    LDX game_mode
   35  06:C7AE  BD 19 C8    LDA gameModeInitCHRROMA, x
   36  06:C7B1  0A          ASL A
   37  06:C7B2  20 6F CA    JSR LoadCHRBankA
   38                       
   39                       
   40                       
   41  06:C7B5  60          RTS
   42                       
   43  06:C7B6            LoadGameModeBackground:
   44                             
   45                       MACROGetDoubleIndex game_mode
                          
       06:C7B6  AD 08 00          LDA game_mode
       06:C7B9  0A                ASL A
       06:C7BA  A8                TAY
                                  
   46  06:C7BB  8C 00 00    STY temp1
   47                             
   48                       MACROGetLabelPointer Palettes, table_address
                          
       06:C7BE  A9 E0             LDA #HIGH(Palettes)
       06:C7C0  A2 00             LDX #LOW(Palettes)
                                  
       06:C7C2  8E 0E 00          STX table_address
       06:C7C5  8D 0F 00          STA table_address+1
                                  
   49  06:C7C8  20 42 C8    JSR GetTableAtIndex
   50                     
   51  06:C7CB  20 4F C8    JSR LoadFullPaletteFromTable
   52                             
   53  06:C7CE  AC 00 00    LDY temp1
   54                       MACROGetLabelPointer NameTables, table_address
                          
       06:C7D1  A9 E0             LDA #HIGH(NameTables)
       06:C7D3  A2 06             LDX #LOW(NameTables)
                                  
       06:C7D5  8E 0E 00          STX table_address
       06:C7D8  8D 0F 00          STA table_address+1
                                  
   55  06:C7DB  20 42 C8    JSR GetTableAtIndex
   56                             
   57  06:C7DE  A9 00       LDA #$00
   58  06:C7E0  20 6F C8    JSR LoadFullBackgroundFromTable
   59                       
   60  06:C7E3  AC 00 00    LDY temp1
   61                       MACROGetLabelPointer NameTables2, table_address
                          
       06:C7E6  A9 E0             LDA #HIGH(NameTables2)
       06:C7E8  A2 0C             LDX #LOW(NameTables2)
                                  
       06:C7EA  8E 0E 00          STX table_address
       06:C7ED  8D 0F 00          STA table_address+1
                                  
   62  06:C7F0  20 42 C8    JSR GetTableAtIndex
   63                       
   64  06:C7F3  A9 01       LDA #$01
   65  06:C7F5  20 6F C8    JSR LoadFullBackgroundFromTable
   66                       
   67  06:C7F8  60          RTS
   68                       
   69  06:C7F9            LoadGameModeSprites:
   70                     
   71                       MACROGetDoubleIndex game_mode  
                          
       06:C7F9  AD 08 00          LDA game_mode
       06:C7FC  0A                ASL A
       06:C7FD  A8                TAY
                                  
   72                       MACROGetLabelPointer Sprites, table_address
                          
       06:C7FE  A9 F4             LDA #HIGH(Sprites)
       06:C800  A2 72             LDX #LOW(Sprites)
                                  
       06:C802  8E 0E 00          STX table_address
       06:C805  8D 0F 00          STA table_address+1
                                  
   73  06:C808  20 42 C8    JSR GetTableAtIndex
   74  06:C80B  A0 00       LDY #$00
   75  06:C80D  B1 0E       LDA [table_address],y
   76  06:C80F  EE 0E 00    INC table_address
   77  06:C812  20 57 C9    JSR LoadSprites_impl
   78                       
   79  06:C815  60          RTS
   80                       
   81  06:C816            gameModeInitCHRROMB:
   82  06:C816  00 02 02          .db $00, $02, $02
   83  06:C819            gameModeInitCHRROMA:
   84  06:C819  00 02 02          .db $00, $02, $02
   85                             
#[1]   Picross.asm
#[2]   Routines/Utils/PointerUtils.asm
   88                       .include "Routines/Utils/PointerUtils.asm"
    1  06:C81C            Dynamic_Jump:
    2                     
    3  06:C81C  0A          ASL A                                 ;; double the index passed into A
    4  06:C81D  8E 04 00    STX tempx
    5  06:C820  8C 05 00    STY tempy
    6  06:C823  A8          TAY
    7  06:C824  C8          INY  
    8  06:C825  68          PLA
    9  06:C826  8D 10 00    STA jump_address
   10  06:C829  68          PLA 
   11  06:C82A  8D 11 00    STA jump_address+1            
   12  06:C82D  B1 10       LDA [jump_address], y
   13  06:C82F  AA          TAX
   14  06:C830  C8          INY
   15  06:C831  B1 10       LDA [jump_address], y
   16  06:C833  8E 10 00    STX jump_address
   17  06:C836  8D 11 00    STA jump_address+1
   18  06:C839  AE 04 00    LDX tempx
   19  06:C83C  AC 05 00    LDY tempy
   20  06:C83F  6C 10 00    JMP [jump_address]
   21                       
   22  06:C842            GetTableAtIndex:
   23                     
   24  06:C842  B1 0E             LDA [table_address], y
   25  06:C844  AA                TAX
   26  06:C845  C8                INY
   27  06:C846  B1 0E             LDA [table_address], y
   28                             
   29  06:C848            SetTableAddress:
   30                             
   31                             ;;A is hi, X is lo
   32  06:C848  8E 0E 00          STX table_address
   33  06:C84B  8D 0F 00          STA table_address+1
   34  06:C84E  60                RTS
#[1]   Picross.asm
#[2]   Routines/Utils/PPUUtils.asm
   89                       .include "Routines/Utils/PPUUtils.asm"
    1  06:C84F            LoadFullPaletteFromTable:
    2                     
    3                       MACROSetPPUAddress $3F00
                          
       06:C84F  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:C852  A9 3F       LDA #HIGH($3F00)
       06:C854  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:C857  A9 00       LDA #LOW($3F00)
       06:C859  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
    4  06:C85C  A0 00       LDY #$00              ; start out at 0
    5  06:C85E  A2 00       LDX #$00
    6  06:C860            .loop:
    7  06:C860  B1 0E       LDA [table_address], y        ; load data from address (palette + the value in x)
    8  06:C862  8D 07 20    STA PPU_DATA            ; write to PPU
    9  06:C865  9D 00 68    STA Palette_Copy, x
   10  06:C868  C8          INY                   ; X = X + 1
   11  06:C869  E8          INX
   12  06:C86A  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   13  06:C86C  D0 F2       BNE .loop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   14  06:C86E  60          RTS
   15                     
   16  06:C86F            LoadFullBackgroundFromTable:
   17                     
   18                         ;;use A as an index for which nametable to write to
   19  06:C86F  20 A2 C9          JSR SetNametableFromIndex
   20  06:C872  8A                TXA
   21  06:C873  4A                LSR A
   22  06:C874  29 01             AND #$01
   23  06:C876  D0 0D             BNE .copyScreenB
   24                             MACROGetLabelPointer Screen_Copy, pointer_address
                          
       06:C878  A9 60             LDA #HIGH(Screen_Copy)
       06:C87A  A2 00             LDX #LOW(Screen_Copy)
                                  
       06:C87C  8E 0C 00          STX pointer_address
       06:C87F  8D 0D 00          STA pointer_address+1
                                  
   25  06:C882  4C 8F C8          JMP .setCounters
   26                             
   27  06:C885            .copyScreenB:
   28                             MACROGetLabelPointer ScreenB_Copy, pointer_address
                          
       06:C885  A9 64             LDA #HIGH(ScreenB_Copy)
       06:C887  A2 00             LDX #LOW(ScreenB_Copy)
                                  
       06:C889  8E 0C 00          STX pointer_address
       06:C88C  8D 0D 00          STA pointer_address+1
                                  
   29                             
   30                             ;;set pointer
   31                             ;; set counters
   32  06:C88F            .setCounters:
   33  06:C88F  A0 00             LDY #$00
   34  06:C891  A2 00             LDX #$00
   35                             
   36                             ;;start loop
   37                     
   38  06:C893            .outerloop:
   39                     
   40  06:C893            .innerloop:
   41                     
   42  06:C893  B1 0E             LDA [table_address], y
   43  06:C895  8D 07 20          STA PPU_DATA
   44  06:C898  91 0C             STA [pointer_address],y
   45  06:C89A  C8                INY
   46  06:C89B  C0 00             CPY #$00
   47  06:C89D  D0 F4             BNE .innerloop
   48                     
   49  06:C89F  EE 0D 00          INC pointer_address+1
   50  06:C8A2  EE 0F 00          INC table_address+1
   51                             
   52  06:C8A5  E8                INX
   53  06:C8A6  E0 04             CPX #$04
   54  06:C8A8  D0 E9             BNE .outerloop
   55  06:C8AA  60                RTS
   56                             
   57                     
   58           0000      DATA_LEN = temp1
   59           0001      WRITE_SETTINGS = temp2
   60                             
   61  06:C8AB            ProcessPPUString:
   62                     
   63  06:C8AB  AD 1B 00          LDA PPU_PendingWrite
   64  06:C8AE  D0 01             BNE .continueProcess
   65  06:C8B0  60                RTS
   66                             
   67  06:C8B1            .continueProcess:
   68  06:C8B1  A0 00             LDY #$00
   69                             
   70  06:C8B3  A9 1D             LDA #LOW(PPU_String)
   71  06:C8B5  8D 0C 00          STA pointer_address
   72  06:C8B8  A9 00             LDA #HIGH(PPU_String)
   73  06:C8BA  8D 0D 00          STA pointer_address + 1
   74                     
   75  06:C8BD            .outerloop:
   76  06:C8BD  AD 02 20          LDA PPU_STATUS
   77  06:C8C0  B1 0C             LDA [pointer_address], y
   78  06:C8C2  F0 79             BEQ .finish
   79  06:C8C4  8D 06 20          STA PPU_ADDR
   80  06:C8C7  C8                INY
   81  06:C8C8  B1 0C             LDA [pointer_address], y
   82  06:C8CA  8D 06 20          STA PPU_ADDR
   83  06:C8CD  C8            INY 
   84  06:C8CE  B1 0C             LDA [pointer_address], y
   85  06:C8D0  8D 01 00          STA WRITE_SETTINGS
   86  06:C8D3  C8                INY
   87                             
   88  06:C8D4  AD 00 20          LDA PPU_CTRL
   89  06:C8D7  29 FB             AND #$FB
   90  06:C8D9  8D 00 20          STA PPU_CTRL
   91                             
   92  06:C8DC  AD 01 00          LDA WRITE_SETTINGS      ;check horizontal or vertical write
   93  06:C8DF  29 80             AND #%10000000
   94  06:C8E1  F0 06             BEQ .checkRepeat
   95  06:C8E3  0D 00 20          ORA PPU_CTRL 
   96  06:C8E6  8D 00 20          STA PPU_CTRL 
   97                             
   98                             
   99  06:C8E9            .checkRepeat:
  100  06:C8E9  AD 01 00    LDA WRITE_SETTINGS
  101  06:C8EC  29 40       AND #%01000000
  102  06:C8EE  F0 19       BEQ .checkTable
  103                       
  104  06:C8F0  AD 01 00    LDA WRITE_SETTINGS
  105  06:C8F3  29 3F       AND #$3F
  106  06:C8F5  8D 00 00    STA DATA_LEN
  107                       ;;the usual data length byte is now the repeatable byte
  108  06:C8F8  A2 00       LDX #$00
  109                       
  110  06:C8FA            .repeatLoop:
  111  06:C8FA  B1 0C       LDA [pointer_address], y
  112  06:C8FC  8D 07 20    STA PPU_DATA
  113  06:C8FF  E8          INX 
  114  06:C900  EC 00 00    CPX DATA_LEN
  115  06:C903  D0 F5       BNE .repeatLoop
  116  06:C905  C8          INY
  117  06:C906  4C BD C8    JMP .outerloop
  118                             
  119  06:C909            .checkTable:
  120  06:C909  AD 01 00          LDA WRITE_SETTINGS
  121  06:C90C  29 20             AND #%00100000
  122  06:C90E  F0 16             BEQ .rawData
  123                             
  124  06:C910  B1 0C             LDA [pointer_address], y
  125  06:C912  8D 0E 00          STA table_address
  126  06:C915  C8                INY 
  127  06:C916  B1 0C             LDA [pointer_address], y
  128  06:C918  8D 0F 00          STA table_address + 1
  129  06:C91B  C8                INY
  130  06:C91C  98                TYA 
  131  06:C91D  48                PHA
  132  06:C91E  20 41 C9          JSR WriteToPPUFromTable
  133  06:C921  68                PLA
  134  06:C922  A8                TAY
  135  06:C923  4C BD C8          JMP .outerloop
  136                             
  137  06:C926            .rawData:
  138                     
  139  06:C926  B1 0C             LDA [pointer_address], y
  140  06:C928  C8                INY
  141  06:C929  8D 00 00          STA DATA_LEN
  142                     
  143  06:C92C  A2 00             LDX #$00
  144                     
  145  06:C92E            .innerloop:
  146                             
  147  06:C92E  B1 0C             LDA [pointer_address], y
  148  06:C930  8D 07 20          STA PPU_DATA
  149  06:C933  C8                INY
  150  06:C934  E8                INX
  151  06:C935  EC 00 00          CPX DATA_LEN
  152  06:C938  D0 F4             BNE .innerloop
  153  06:C93A  4C BD C8          JMP .outerloop
  154                             
  155  06:C93D            .finish:
  156  06:C93D  20 82 C9          JSR ClearPPUString
  157  06:C940            .leave:
  158  06:C940  60                RTS
  159                             
  160  06:C941            WriteToPPUFromTable:
  161  06:C941  A0 00             LDY #$00
  162  06:C943  B1 0E             LDA [table_address], y
  163  06:C945  C8                INY
  164  06:C946  8D 00 00          STA DATA_LEN
  165  06:C949            .innerloop:
  166  06:C949  B1 0E             LDA [table_address], y
  167  06:C94B  8D 07 20          STA PPU_DATA
  168  06:C94E  C8                INY
  169  06:C94F  CC 00 00          CPY DATA_LEN
  170  06:C952  90 F5             BCC .innerloop ;table should have the size in it, but since we count the byte count, we'll want to wait till we go over it
  171  06:C954  F0 F3             BEQ .innerloop
  172  06:C956  60                RTS
  173                       
  174  06:C957            LoadSprites_impl:
  175                       ;;A will be the amount of sprites to load
  176  06:C957  8D 00 00    STA DATA_LEN
  177  06:C95A  0E 00 00    ASL DATA_LEN
  178  06:C95D  0E 00 00    ASL DATA_LEN
  179                       
  180  06:C960  A0 00       LDY #$00              ; start at 0
  181                       
  182  06:C962            .loop:
  183  06:C962  B1 0E       LDA [table_address], y; load data from address (sprites +  x)
  184  06:C964  99 00 02    STA SPRITE_DATA, y    ; store into RAM address ($0200 + x)
  185  06:C967  C8          INY                   ; X = X + 1
  186  06:C968  CC 00 00    CPY DATA_LEN             ; Compare X to hex $10, decimal 16
  187  06:C96B  D0 F5       BNE .loop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
  188                                             ; if compare was equal to 16, keep going down   
  189  06:C96D  60          RTS
  190                     
  191                     
  192  06:C96E            WriteToPPUString:
  193                     
  194  06:C96E  AE 1C 00          LDX PPU_StringIdx
  195  06:C971  E0 4F             CPX #PPU_STRINGMAX
  196  06:C973  F0 0C             BEQ .finish
  197                             
  198  06:C975  9D 1D 00          STA PPU_String, x
  199  06:C978  EE 1C 00          INC PPU_StringIdx
  200  06:C97B  E8                INX
  201  06:C97C  A9 00             LDA #$00
  202  06:C97E  9D 1D 00          STA PPU_String, x
  203                                     
  204  06:C981            .finish:
  205  06:C981  60                RTS
  206                     
  207  06:C982            ClearPPUString:
  208                             
  209  06:C982  A9 00             LDA #$00
  210  06:C984  8D 1C 00          STA PPU_StringIdx
  211  06:C987  8D 1D 00          STA PPU_String
  212  06:C98A  8D 1B 00          STA PPU_PendingWrite
  213  06:C98D  60                RTS
  214                     
  215  06:C98E            DetectSprite0:
  216  06:C98E            WaitNotSprite0:
  217  06:C98E  AD 02 20    lda PPU_STATUS
  218  06:C991  29 40       and #SPRITE_0_MASK
  219  06:C993  D0 F9       bne WaitNotSprite0   ; wait until sprite 0 not hit
  220                     
  221  06:C995            WaitSprite0:
  222  06:C995  AD 02 20    lda $2002
  223  06:C998  29 40       and #SPRITE_0_MASK
  224  06:C99A  F0 F9       beq WaitSprite0      ; wait until sprite 0 is hit
  225                     
  226  06:C99C  A2 05       ldx #$05                              ;do a scanline wait
  227  06:C99E            WaitScanline:
  228  06:C99E  CA          dex
  229  06:C99F  D0 FD       bne WaitScanline
  230  06:C9A1  60          RTS
  231                     
  232                     
  233  06:C9A2            SetNametableFromIndex:
  234                     
  235  06:C9A2  48          PHA
  236  06:C9A3  AD 02 20    LDA PPU_STATUS
  237  06:C9A6  68          PLA
  238  06:C9A7  0A          ASL A
  239  06:C9A8  AA          TAX
  240  06:C9A9  BD 3E CA    LDA NameTableMemList+1, x
  241  06:C9AC  8D 06 20    STA PPU_ADDR
  242  06:C9AF  BD 3D CA    LDA NameTableMemList, x
  243  06:C9B2  8D 06 20    STA PPU_ADDR
  244  06:C9B5  60          RTS
  245                       
  246  06:C9B6            TurnOnSprites:
  247                      
  248  06:C9B6  AD 16 00    LDA PPU_Mask
  249  06:C9B9  09 10       ORA #%00010000
  250  06:C9BB  8D 16 00    STA PPU_Mask
  251  06:C9BE  60          RTS
  252                       
  253  06:C9BF            TurnOffSprites:
  254                       
  255  06:C9BF  AD 16 00    LDA PPU_Mask
  256  06:C9C2  29 EF       AND #%11101111
  257  06:C9C4  8D 16 00    STA PPU_Mask
  258  06:C9C7  60          RTS
  259                     
  260  06:C9C8            UpdatePPUControl:
  261                     
  262  06:C9C8  AD 15 00    LDA PPU_Control
  263  06:C9CB  29 FC       AND #$FC
  264  06:C9CD  0D 1A 00    ORA PPU_NT
  265  06:C9D0  8D 00 20    STA PPU_CTRL
  266  06:C9D3  AD 16 00    LDA PPU_Mask
  267  06:C9D6  8D 01 20    STA PPU_MASK
  268  06:C9D9  60          RTS
  269                       
  270  06:C9DA            InitPPUControl:
  271                       
  272                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
  273                       ; enable sprites, enable background, no clipping on left side
  274  06:C9DA  A9 90       LDA #%10010000
  275  06:C9DC  8D 00 20    STA PPU_CTRL
  276  06:C9DF  8D 15 00    STA PPU_Control
  277  06:C9E2  A9 1E       LDA #%00011110
  278  06:C9E4  8D 01 20    STA PPU_MASK
  279  06:C9E7  8D 16 00    STA PPU_Mask
  280  06:C9EA  60          RTS
  281                       
  282  06:C9EB            FadeOutPalettes:
  283                     
  284                     ;;take the current values, and decrement the lower nibbles
  285                     ;;we can access from the palette copy 
  286                     ;;we'll make this fade out one level per call
  287                     ;;once all the palettes are blacked out we'll return true, so we'll keep the carry flag as a return result
  288                     
  289                     ;;go through the palette copy, decrement, make a raw data PPU string and add all the bytes into it
  290                     ;;for any palette color already in the 0x range, change it to 0f to get black
  291                     
  292                       MACROGetLabelPointer Palette_Copy, table_address
                          
       06:C9EB  A9 68             LDA #HIGH(Palette_Copy)
       06:C9ED  A2 00             LDX #LOW(Palette_Copy)
                                  
       06:C9EF  8E 0E 00          STX table_address
       06:C9F2  8D 0F 00          STA table_address+1
                                  
  293                     ;;palette copy address is now X accessable
  294                     
  295  06:C9F5  A0 00       LDY #$00
  296                       MACROAddPPUStringEntryRawData #$3F, #$00, #DRAW_HORIZONTAL, #$20  
                          
       06:C9F7  A9 01       LDA #$01
       06:C9F9  8D 1B 00    STA PPU_PendingWrite
       06:C9FC  A9 3F       LDA #$3F
       06:C9FE  20 6E C9    JSR WriteToPPUString
       06:CA01  A9 00       LDA #$00
       06:CA03  20 6E C9    JSR WriteToPPUString
       06:CA06  A9 00       LDA #DRAW_HORIZONTAL
       06:CA08  20 6E C9    JSR WriteToPPUString
       06:CA0B  A9 20       LDA #$20 
       06:CA0D  20 6E C9    JSR WriteToPPUString
                            
  297                     
  298  06:CA10  A9 00       LDA #$00
  299  06:CA12  8D 00 00    STA temp1
  300                       
  301  06:CA15            .loop:
  302                     
  303  06:CA15  B1 0E       LDA [table_address], y
  304  06:CA17  C9 0F       CMP #$0F
  305  06:CA19  F0 15       BEQ .addToString
  306  06:CA1B  C9 10       CMP #$10
  307  06:CA1D  90 0D       BCC .setBlack
  308                       
  309  06:CA1F  A9 80       LDA #$80
  310  06:CA21  8D 00 00    STA temp1
  311                       
  312  06:CA24  B1 0E       LDA [table_address], y
  313  06:CA26  38          SEC
  314  06:CA27  E9 10       SBC #$10
  315  06:CA29  4C 2E CA    JMP .setColor
  316                     
  317  06:CA2C            .setBlack:
  318                     
  319  06:CA2C  A9 0F       LDA #$0F
  320                     
  321  06:CA2E            .setColor:
  322  06:CA2E  91 0E       STA [table_address], y
  323                     
  324  06:CA30            .addToString:
  325                     
  326  06:CA30  20 6E C9    JSR WriteToPPUString
  327                     
  328  06:CA33            .incY:
  329                       
  330  06:CA33  C8          INY
  331  06:CA34  C0 20       CPY #$20
  332  06:CA36  D0 DD       BNE .loop
  333                     
  334  06:CA38  0E 00 00    ASL temp1     ;get carry out, if we have one
  335                     
  336  06:CA3B  60          RTS
  337                       
  338  06:CA3C            FadeInPalettes:
  339                     
  340                     ;;need to be able to store off a target palette first
  341                     ;;we can use the palette copy we make during the game mode change as the target
  342  06:CA3C  60          RTS
  343                     
  344  06:CA3D            NameTableMemList:
  345  06:CA3D  00 20       .word $2000, $2400, $2800, $2C00
       06:CA3F  00 24     
       06:CA41  00 28     
       06:CA43  00 2C     
  346  06:CA45            PalettesMemList:
  347  06:CA45  00 3F       .word $3F00, $3F04, $3F08, $3F0C
       06:CA47  04 3F     
       06:CA49  08 3F     
       06:CA4B  0C 3F     
  348  06:CA4D  10 3F       .word $3F10, $3F14, $3F18, $3F1C  
       06:CA4F  14 3F     
       06:CA51  18 3F     
       06:CA53  1C 3F     
  349                       
  350           0024      BLANK_TILE = $24
#[1]   Picross.asm
#[2]   Routines/Utils/MapperUtils.asm
   90                       .include "Routines/Utils/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:CA55            ResetMapper:
    7  06:CA55  EE 55 CA    inc ResetMapper
    8  06:CA58  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:CA59            SetMapperControls:
   23                       ;;A = controls
   24  06:CA59  AA          TAX
   25  06:CA5A  A9 80       LDA #MAPPERCONTROL
   26  06:CA5C  8D 9E 00    STA mapper_address+1
   27  06:CA5F  8A          TXA
   28  06:CA60  20 85 CA    JSR SendMapperCommand
   29  06:CA63  60          RTS
   30                     
   31  06:CA64            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:CA64  AA                TAX
   35  06:CA65  A9 E0             LDA #PRGBANK
   36  06:CA67  8D 9E 00          STA mapper_address+1
   37  06:CA6A  8A                TXA
   38  06:CA6B  20 85 CA          JSR SendMapperCommand
   39  06:CA6E  60                RTS
   40                             
   41  06:CA6F            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:CA6F  AA                TAX
   44  06:CA70  A9 A0             LDA #CHRBANK1
   45  06:CA72  8D 9E 00          STA mapper_address+1
   46  06:CA75  8A                TXA
   47  06:CA76  20 85 CA          JSR SendMapperCommand
   48  06:CA79  60                RTS
   49                             
   50  06:CA7A            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:CA7A  AA                TAX
   53  06:CA7B  A9 C0             LDA #CHRBANK2
   54  06:CA7D  8D 9E 00          STA mapper_address+1
   55  06:CA80  8A                TXA
   56  06:CA81  20 85 CA          JSR SendMapperCommand
   57  06:CA84  60                RTS
   58                             
   59  06:CA85            SendMapperCommand:
   60                     
   61  06:CA85  A0 00             LDY #$00
   62                             
   63  06:CA87  91 9D             STA [mapper_address], y
   64  06:CA89  4A                LSR A
   65  06:CA8A  91 9D             STA [mapper_address], y
   66  06:CA8C  4A                LSR A
   67  06:CA8D  91 9D             STA [mapper_address], y
   68  06:CA8F  4A                LSR A 
   69  06:CA90  91 9D             STA [mapper_address], y
   70  06:CA92  4A                LSR A
   71  06:CA93  91 9D             STA [mapper_address], y
   72                             
   73  06:CA95  60                RTS
   74                             
   75  06:CA96            ResetBanks:
   76                     
   77  06:CA96  20 55 CA          JSR ResetMapper
   78  06:CA99  A9 00             LDA #$00
   79  06:CA9B  20 64 CA          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:CA9E  20 55 CA          JSR ResetMapper
   83  06:CAA1  A9 00             LDA #$00
   84  06:CAA3  20 6F CA          JSR LoadCHRBankA
   85  06:CAA6  A9 01             LDA #$01
   86  06:CAA8  20 7A CA          JSR LoadCHRBankB
   87  06:CAAB  60                RTS
   88                             
   89                       
#[1]   Picross.asm
#[2]   Routines/Game_Routines/ScreenEffects.asm
   91                       .include "Routines/Game_Routines/ScreenEffects.asm"
    1  06:CAAC            PopulateClues:
    2                     
    3  06:CAAC            .getByte:
    4  06:CAAC  AC AB 00    LDY clueTableIndex
    5  06:CAAF  B1 A5       LDA [clues_address], y
    6  06:CAB1  D0 07       BNE .checkNewLine
    7  06:CAB3  EE AB 00    INC clueTableIndex
    8  06:CAB6  A9 00       LDA #$00
    9  06:CAB8  F0 38       BEQ .drawClue
   10                       ;was 0, set up a draw
   11  06:CABA            .checkNewLine
   12  06:CABA  C9 FF       CMP #$FF
   13  06:CABC  D0 17       BNE .getClue
   14                       
   15                       ;;was FF- need to inc stuff
   16  06:CABE  EE AB 00    INC clueTableIndex
   17  06:CAC1  A9 00       LDA #$00
   18  06:CAC3  8D B2 00    STA clueParity
   19                       
   20  06:CAC6  EE AC 00    INC clueLineIndex
   21  06:CAC9  AD AC 00    LDA clueLineIndex
   22  06:CACC  C9 0F       CMP #$0F
   23                       ;CMP #$01
   24  06:CACE  F0 28       BEQ .leave    ;carry will be set
   25                       
   26  06:CAD0  20 6A CB    JSR CreateOffsetFromIndex
   27                      
   28  06:CAD3  D0 D7       BNE .getByte
   29                       
   30  06:CAD5            .getClue:
   31                       ;;clues go from high nibble to low nibble
   32  06:CAD5  48          PHA 
   33  06:CAD6  AD B2 00    LDA clueParity
   34  06:CAD9  D0 0A       BNE .getSecondClue
   35  06:CADB  EE B2 00    INC clueParity
   36  06:CADE  68          PLA
   37  06:CADF  4A          LSR A
   38  06:CAE0  4A          LSR A
   39  06:CAE1  4A          LSR A
   40  06:CAE2  4A          LSR A         ;move clue over to lower nibble
   41  06:CAE3  D0 0D       BNE .drawClue
   42                       
   43  06:CAE5            .getSecondClue:
   44                     
   45  06:CAE5  CE B2 00    DEC clueParity
   46  06:CAE8  EE AB 00    INC clueTableIndex
   47  06:CAEB  68          PLA 
   48  06:CAEC  29 0F       AND #$0F
   49  06:CAEE  D0 02       BNE .drawClue
   50                       ;;if 0, skip
   51  06:CAF0  F0 BA       BEQ .getByte
   52                      
   53  06:CAF2            .drawClue:
   54                       
   55  06:CAF2  09 40       ORA #$40
   56  06:CAF4  20 F9 CA    JSR WriteClueByteToPPUString
   57  06:CAF7  18          CLC
   58                       
   59  06:CAF8            .leave:
   60  06:CAF8  60          RTS
   61                       
   62  06:CAF9            WriteClueByteToPPUString:
   63                     
   64  06:CAF9  8D 00 00    STA temp1 ;store off the tile value
   65                     
   66                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:CAFC  A9 01       LDA #$01
       06:CAFE  8D 1B 00    STA PPU_PendingWrite
       06:CB01  AD AA 00    LDA clue_draw_address+1
       06:CB04  20 6E C9    JSR WriteToPPUString
       06:CB07  AD A9 00    LDA clue_draw_address
       06:CB0A  20 6E C9    JSR WriteToPPUString
       06:CB0D  A9 00       LDA #DRAW_HORIZONTAL
       06:CB0F  20 6E C9    JSR WriteToPPUString
       06:CB12  A9 01       LDA #$01 
       06:CB14  20 6E C9    JSR WriteToPPUString
                            
   67  06:CB17  AD 00 00    LDA temp1
   68  06:CB1A  20 6E C9    JSR WriteToPPUString
   69                       
   70  06:CB1D  AD B0 00    LDA clueDrawAdd
   71  06:CB20  20 47 CB    JSR SubFromClueDrawAddress
   72                         
   73  06:CB23  60          RTS
   74                       
   75  06:CB24            ResetClueDrawAddress:
   76                     
   77                       MACROGetPointer clue_start_address, clue_draw_address
                          
       06:CB24  AD A7 00          LDA clue_start_address
       06:CB27  8D A9 00          STA clue_draw_address
       06:CB2A  AD A8 00          LDA clue_start_address+1
       06:CB2D  8D AA 00          STA clue_draw_address+1
                          
   78                       
   79  06:CB30  60          RTS
   80                       
   81  06:CB31            AddToClueDrawAddress:
   82                     
   83  06:CB31  8D 00 00    STA temp1
   84                       
   85  06:CB34  AD A9 00    LDA clue_draw_address
   86  06:CB37  18          CLC
   87  06:CB38  6D 00 00    ADC temp1
   88  06:CB3B  8D A9 00    STA clue_draw_address
   89  06:CB3E  AD AA 00    LDA clue_draw_address+1
   90  06:CB41  69 00       ADC #$00
   91  06:CB43  8D AA 00    STA clue_draw_address+1
   92                       
   93  06:CB46  60          RTS
   94                         
   95  06:CB47            SubFromClueDrawAddress:
   96                     
   97  06:CB47  8D 00 00    STA temp1
   98                       
   99  06:CB4A  AD A9 00    LDA clue_draw_address
  100  06:CB4D  38          SEC
  101  06:CB4E  ED 00 00    SBC temp1
  102  06:CB51  8D A9 00    STA clue_draw_address
  103  06:CB54  AD AA 00    LDA clue_draw_address+1
  104  06:CB57  E9 00       SBC #$00
  105  06:CB59  8D AA 00    STA clue_draw_address+1
  106                       
  107  06:CB5C  60          RTS
  108                       
  109  06:CB5D            AddToClueDrawAddressHi:
  110                     
  111  06:CB5D  8D 00 00    STA temp1
  112                       
  113  06:CB60  AD AA 00    LDA clue_draw_address+1
  114  06:CB63  6D 00 00    ADC temp1
  115  06:CB66  8D AA 00    STA clue_draw_address+1
  116                       
  117  06:CB69  60          RTS
  118                       
  119  06:CB6A            CreateOffsetFromIndex:
  120                     
  121                       ;;would be this, but we need to be able to go further- so we'll make a doulbe offset
  122  06:CB6A  AD AC 00    LDA clueLineIndex
  123  06:CB6D  8D AE 00    STA clueDrawOffset
  124  06:CB70  A9 00       LDA #$00
  125  06:CB72  8D AF 00    STA clueDrawOffset+1
  126                       
  127  06:CB75  AD AD 00    LDA clueOffsetShift   
  128  06:CB78  F0 0E       BEQ .addOffset
  129                       
  130  06:CB7A  A2 00       LDX #$00
  131                       
  132  06:CB7C            .loopShift:
  133  06:CB7C  0E AE 00    ASL clueDrawOffset
  134  06:CB7F  2E AF 00    ROL clueDrawOffset+1
  135  06:CB82  E8          INX
  136  06:CB83  EC AD 00    CPX clueOffsetShift
  137  06:CB86  D0 F4       BNE .loopShift
  138                       
  139  06:CB88            .addOffset:
  140                       
  141  06:CB88  20 24 CB    JSR ResetClueDrawAddress
  142  06:CB8B  AD AE 00    LDA clueDrawOffset
  143  06:CB8E  20 31 CB    JSR AddToClueDrawAddress 
  144  06:CB91  AD AF 00    LDA clueDrawOffset+1
  145  06:CB94  20 5D CB    JSR AddToClueDrawAddressHi
  146                       
  147  06:CB97  60          RTS  
  148                       
  149  06:CB98            ClearPuzzle:
  150                     
  151                       ;we'll assume clue draw address has been set to the top of the 1st nametable
  152                      
  153                       MACROGetLabelPointer ClearLineDefTables, table_address
                          
       06:CB98  A9 CC             LDA #HIGH(ClearLineDefTables)
       06:CB9A  A2 6D             LDX #LOW(ClearLineDefTables)
                                  
       06:CB9C  8E 0E 00          STX table_address
       06:CB9F  8D 0F 00          STA table_address+1
                                  
  154  06:CBA2  A0 00       LDY #$00
  155  06:CBA4  20 42 C8    JSR GetTableAtIndex
  156                       
  157                       
  158  06:CBA7  AC AC 00    LDY clueLineIndex
  159  06:CBAA  B1 0E       LDA [table_address], y
  160  06:CBAC  8D 00 00    STA temp1
  161                       MACROAddPPUStringEntryRepeat clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp1, #$24
                          
       06:CBAF  A9 01       LDA #$01
       06:CBB1  8D 1B 00    STA PPU_PendingWrite
       06:CBB4  AD AA 00    LDA clue_draw_address+1
       06:CBB7  20 6E C9    JSR WriteToPPUString
       06:CBBA  AD A9 00    LDA clue_draw_address
       06:CBBD  20 6E C9    JSR WriteToPPUString
       06:CBC0  A9 40       LDA #$40
       06:CBC2  09 00       ORA #DRAW_HORIZONTAL
       06:CBC4  0D 00 00    ORA temp1
       06:CBC7  20 6E C9    JSR WriteToPPUString
       06:CBCA  A9 24       LDA #$24
       06:CBCC  20 6E C9    JSR WriteToPPUString
                            
  162                       ;;no need to load anything else
  163                       
  164  06:CBCF  AD A9 00    LDA clue_draw_address
  165  06:CBD2  18          CLC
  166  06:CBD3  69 20       ADC #32
  167  06:CBD5  8D A9 00    STA clue_draw_address
  168  06:CBD8  AD AA 00    LDA clue_draw_address+1
  169  06:CBDB  69 00       ADC #$00
  170  06:CBDD  8D AA 00    STA clue_draw_address+1
  171                       
  172  06:CBE0  EE AC 00    INC clueLineIndex
  173  06:CBE3  60          RTS
  174                       
  175  06:CBE4            DrawImage:
  176                     
  177                       ;;we have clueTableIndex, which should be at the image bytes now
  178                       ;;clue line index will keep track of our place in a byte
  179                        
  180  06:CBE4  A9 00       LDA #$00
  181  06:CBE6  8D 00 00    STA temp1
  182                       
  183  06:CBE9  AD AC 00    LDA clueLineIndex
  184  06:CBEC  29 03       AND #$03
  185  06:CBEE  8D 01 00    STA temp2
  186                     
  187  06:CBF1  AC AB 00    LDY clueTableIndex
  188  06:CBF4  B1 A5       LDA [clues_address], y
  189                     
  190  06:CBF6  A2 00       LDX #$00
  191  06:CBF8            .loop:
  192  06:CBF8  0A          ASL A
  193  06:CBF9  2E 00 00    ROL temp1
  194  06:CBFC  0A          ASL A
  195  06:CBFD  2E 00 00    ROL temp1
  196  06:CC00  E8          INX
  197  06:CC01  EC 01 00    CPX temp2
  198  06:CC04  90 F2       BCC .loop
  199  06:CC06  F0 F0       BEQ .loop
  200                       
  201  06:CC08  AD 00 00    LDA temp1
  202  06:CC0B  29 03       AND #$03
  203  06:CC0D  18          CLC
  204  06:CC0E  69 24       ADC #$24
  205  06:CC10  8D 00 00    STA temp1
  206                       
  207                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:CC13  A9 01       LDA #$01
       06:CC15  8D 1B 00    STA PPU_PendingWrite
       06:CC18  AD AA 00    LDA clue_draw_address+1
       06:CC1B  20 6E C9    JSR WriteToPPUString
       06:CC1E  AD A9 00    LDA clue_draw_address
       06:CC21  20 6E C9    JSR WriteToPPUString
       06:CC24  A9 00       LDA #DRAW_HORIZONTAL
       06:CC26  20 6E C9    JSR WriteToPPUString
       06:CC29  A9 01       LDA #$01 
       06:CC2B  20 6E C9    JSR WriteToPPUString
                            
  208  06:CC2E  AD 00 00    LDA temp1
  209  06:CC31  20 6E C9    JSR WriteToPPUString
  210                       
  211  06:CC34  EE AD 00    INC clueOffsetShift
  212  06:CC37  EE AC 00    INC clueLineIndex
  213  06:CC3A  AD AC 00    LDA clueLineIndex
  214  06:CC3D  29 03       AND #$03
  215  06:CC3F  D0 03       BNE .incDrawIndex
  216  06:CC41  EE AB 00    INC clueTableIndex
  217                       
  218                       
  219  06:CC44            .incDrawIndex:  
  220  06:CC44  AD AD 00    LDA clueOffsetShift
  221  06:CC47  C9 0F       CMP #$0F
  222  06:CC49  D0 19       BNE .incOnly
  223                       ;;add 32-15 = 17 to the draw address
  224  06:CC4B  AD A9 00    LDA clue_draw_address
  225  06:CC4E  18          CLC
  226  06:CC4F  69 12       ADC #18
  227  06:CC51  8D A9 00    STA clue_draw_address
  228  06:CC54  AD AA 00    LDA clue_draw_address+1
  229  06:CC57  69 00       ADC #$00
  230  06:CC59  8D AA 00    STA clue_draw_address+1
  231                       
  232  06:CC5C  A9 00       LDA #$00
  233  06:CC5E  8D AD 00    STA clueOffsetShift
  234                       
  235  06:CC61  4C 6C CC    JMP .leave
  236                       
  237  06:CC64            .incOnly:
  238                     
  239  06:CC64  EE A9 00    INC clue_draw_address
  240  06:CC67  D0 03       BNE .leave
  241  06:CC69  EE AA 00    INC clue_draw_address+1
  242                       
  243  06:CC6C            .leave:
  244  06:CC6C  60          RTS
  245                     
  246  06:CC6D            ClearLineDefTables:
  247                     
  248  06:CC6D  6F CC       .word Clear15x15LineDefs
  249                     
  250  06:CC6F            Clear15x15LineDefs:
  251  06:CC6F  20 20 20    .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
       06:CC72  20 20 20  
       06:CC75  20 20 20  
       06:CC78  20 20     
  252  06:CC7A  0D 0D 0D    .db $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D
       06:CC7D  0D 0D 0D  
       06:CC80  0D 0D 0D  
       06:CC83  0D 0D 0D  
       06:CC86  0D 0D 0D  
       06:CC89  0D 0D     
  253  06:CC8B  20 20       .db $20, $20
#[1]   Picross.asm
   92                       
   93                       
   94                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   95                     ;;     NMI                  ;;
   96                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   97                     
#[2]   Routines/Common/NMI.asm
   98                       .include "Routines/Common/NMI.asm"
    1                      
    2  06:CC8D            NMI:
    3                     
    4  06:CC8D  48          PHA                              ;protect the registers
    5  06:CC8E  8A          TXA
    6  06:CC8F  48          PHA
    7  06:CC90  98          TYA
    8  06:CC91  48          PHA
    9                       
   10  06:CC92            nmi_started:
   11  06:CC92  A9 00       LDA #$00
   12  06:CC94  8D 03 20    STA OAM_LO      ; set the low byte (00) of the RAM address
   13  06:CC97  A9 02       LDA #$02
   14  06:CC99  8D 14 40    STA OAM_HI       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:CC9C  AD 0A 00    LDA NMI_locks
   17  06:CC9F  F0 03       BEQ update_controllers
   18  06:CCA1  4C 10 CD    JMP WakeUp
   19                     
   20  06:CCA4            update_controllers:
   21                     
#[3]   Routines/Common/ReadControllers.asm
   22                       .include "Routines/Common/ReadControllers.asm"
    1                     
    2  06:CCA4  8A            TXA
    3  06:CCA5  48                PHA
    4  06:CCA6  98                TYA
    5  06:CCA7  48                PHA
    6                     
    7  06:CCA8  A2 00             LDX #$00
    8                     
    9  06:CCAA            GamePadCheck:
   10  06:CCAA  A9 01             LDA #$01        ;load 1
   11  06:CCAC  8D 16 40          STA $4016       ; turn latch on
   12                             ;STA gamepad2
   13  06:CCAF  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   14  06:CCB0  8D 16 40          STA $4016       ;turn latch off
   15                             
   16                             ;do a ring counter technique- load %10000000 into both
   17  06:CCB3  A9 80             LDA #$80
   18  06:CCB5  8D 12 00          STA gamepad
   19                     
   20  06:CCB8            ReadControllerABytesLoop:
   21  06:CCB8  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   22  06:CCBB  29 03             AND #%00000011  ;acc: %00000001 c: 0
   23  06:CCBD  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   24                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   25  06:CCBF  6E 12 00          ROR gamepad             ;gamepad: %11000000
   26                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   27  06:CCC2  90 F4             BCC ReadControllerABytesLoop
   28                             
   29                             ;;comapre last to current, find the pressed buttons this frame
   30  06:CCC4  AD 13 00          LDA gamepadLast
   31  06:CCC7  49 FF             EOR #$FF
   32  06:CCC9  2D 12 00          AND gamepad
   33  06:CCCC  8D 14 00          STA gamepadPressed
   34                             
   35                             
   36  06:CCCF  AD 12 00          LDA gamepad
   37  06:CCD2  8D 13 00          STA gamepadLast
   38                             
   39                             ;return x and y... before resetting them all over again- always good to make sure we're clean
   40  06:CCD5  68                PLA
   41  06:CCD6  A8                TAY
   42  06:CCD7  68                PLA
   43  06:CCD8  AA                TAX     
#[2]   Routines/Common/NMI.asm
   23                       
   24  06:CCD9  20 AB C8    JSR ProcessPPUString
   25                       
   26                       
   27  06:CCDC  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   28  06:CCDE  8D 05 20    STA PPU_SCROLL
   29  06:CCE1  8D 05 20    STA PPU_SCROLL
   30                       
   31                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   32                       ; enable sprites, enable background, no clipping on left side 
   33  06:CCE4  20 C8 C9    JSR UpdatePPUControl
   34                     
   35  06:CCE7            NMIUpdate:
   36                     
   37  06:CCE7  20 04 CD    JSR StateNMIUpdate
   38                       
   39  06:CCEA  AD 15 00    LDA PPU_Control
   40  06:CCED  29 FC       AND #$FC
   41  06:CCEF  0D 19 00    ORA PPU_ScrollNT
   42  06:CCF2  8D 00 20    STA PPU_CTRL
   43                       
   44  06:CCF5  AD 17 00    LDA PPU_ScrollX     ;;tell the ppu there is no background scrolling
   45  06:CCF8  8D 05 20    STA PPU_SCROLL
   46  06:CCFB  AD 18 00    LDA PPU_ScrollY
   47  06:CCFE  8D 05 20    STA PPU_SCROLL
   48                     
   49  06:CD01  4C 10 CD    JMP WakeUp
   50                     
   51  06:CD04            StateNMIUpdate:
   52                     
   53                       MACROCallDynamicJump game_mode
                          
       06:CD04  AD 08 00    LDA game_mode
       06:CD07  20 1C C8    JSR Dynamic_Jump
                                  
   54                     
   55  06:CD0A            NMIJumpTable:
   56                     
   57  06:CD0A  1B CD       .word UpdateTitleNMI
   58  06:CD0C  1F CD       .word UpdateGameNMI
   59  06:CD0E  20 CD       .word UpdateGameOverNMI
   60                     
   61  06:CD10            WakeUp:
   62  06:CD10  A9 00       LDA #$00
   63  06:CD12  8D 07 00    STA sleeping
   64                       
   65  06:CD15  68          PLA             ;restore the registers
   66  06:CD16  A8          TAY 
   67  06:CD17  68          PLA
   68  06:CD18  AA          TAX
   69  06:CD19  68          PLA
   70                     
   71  06:CD1A  40          RTI             ; return from interrupt
   72                       
#[3]   Routines/NMI_States/UpdateTitleNMI.asm
   73                       .include "Routines/NMI_States/UpdateTitleNMI.asm"
    1  06:CD1B            UpdateTitleNMI:
    2                     
    3                       ;;load bank 0 for BG tiles, so we start with the right tile set
    4                       ;JSR ResetMapper
    5                       ;LDA #$01
    6                       ;JSR LoadCHRBankB
    7                     
    8                     
    9  06:CD1B  20 8E C9    JSR DetectSprite0
   10                     
   11                       ;JSR ResetMapper
   12                       ;LDA #$03
   13                       ;JSR LoadCHRBankB
   14                       
   15                     
   16                        
   17  06:CD1E  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameNMI.asm
   74                       .include "Routines/NMI_States/UpdateGameNMI.asm"
    1  06:CD1F            UpdateGameNMI:
    2  06:CD1F  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameOverNMI.asm
   75                       .include "Routines/NMI_States/UpdateGameOverNMI.asm"
    1  06:CD20            UpdateGameOverNMI:
    2  06:CD20  60          RTS
#[2]   Routines/Common/NMI.asm
#[1]   Picross.asm
   99                       
  100                     ;;**************************;;
  101                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  102                     ;;       PRG ROM DATA       ;;
  103                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  104                     ;;**************************;; 
  105                       
  106           0007        .bank 7
  107           E000        .org $E000
  108                     
#[2]   NameTables/Tables.asm
  109                       .include "NameTables/Tables.asm"
    1  07:E000            Palettes:
    2                     
    3  07:E000  12 E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E002  32 E0     
       07:E004  52 E0     
    4                     
    5  07:E006            NameTables:
    6                     
    7  07:E006  72 E0       .word Title_Screen, Game_Screen, GameOver_Screen
       07:E008  72 E8     
       07:E00A  72 EC     
    8                       
    9  07:E00C            NameTables2:
   10                     
   11  07:E00C  72 E4       .word Title_Second, Blank_Screen, Blank_Screen
       07:E00E  72 F0     
       07:E010  72 F0     
   12                     
   13  07:E012            Title_Palette:
   14                     
   15  07:E012              .incbin "NameTables/Title_PAL.pal"
   16  07:E022              .incbin "NameTables/Title_PAL.pal"
   17                       
   18  07:E032            Game_Palette:
   19                     
   20  07:E032              .incbin "NameTables/Game_PAL.pal"
   21  07:E042              .incbin "NameTables/Game_PAL.pal"
   22                       
   23  07:E052            GameOver_Palette:
   24                     
   25  07:E052              .incbin "NameTables/GameOver_PAL.pal"
   26  07:E062              .incbin "NameTables/GameOver_PAL.pal"
   27                       
   28  07:E072            Title_Screen:
   29                     
   30  07:E072              .incbin "NameTables/Title_NT.nam"
   31                       
   32  07:E472            Title_Second:
   33                     
   34  07:E472              .incbin "NameTables/Title_PuzzMen_NT.nam"
   35                       
   36  07:E872            Game_Screen: 
   37                     
   38  07:E872              .incbin "NameTables/Game_NT.nam"
   39                       
   40  07:EC72            GameOver_Screen:
   41                     
   42  07:EC72              .incbin "NameTables/GameOver_NT.nam"
   43                       
   44  07:F072            Blank_Screen:
   45                     
   46  07:F072              .incbin "NameTables/Blank_NT.nam"
   47                     
   48                       
   49                     
   50                       
   51                      
   52                             
#[1]   Picross.asm
#[2]   Sprites/Sprites.asm
  110                       .include "Sprites/Sprites.asm"
    1                     
    2                     ;;Byte0
    3                     ;;Y position of top of sprite
    4                     ;;Sprite data is delayed by one scanline; 
    5                     ;;you must subtract 1 from the sprite's 
    6                     ;;Y coordinate before writing it here. 
    7                     ;;Hide a sprite by moving it down offscreen, 
    8                     ;;by writing any values between #$EF-#$FF here. 
    9                     ;;Sprites are never displayed on the first line of the picture, 
   10                     ;;and it is impossible to place a sprite partially off the top of the screen.
   11                     
   12                     ;;Byte 1
   13                     ;;Tile index number
   14                     ;;For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of PPUCTRL ($2000).
   15                     ;;For 8x16 sprites (bit 5 of PPUCTRL set), the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
   16                     ;;76543210
   17                     ;;||||||||
   18                     ;;|||||||+- Bank ($0000 or $1000) of tiles
   19                     ;;+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
   20                     
   21                     ;;Byte 2
   22                     ;;Attributes
   23                     ;;76543210
   24                     ;;||||||||
   25                     ;;||||||++- Palette (4 to 7) of sprite
   26                     ;;|||+++--- Unimplemented (read 0)
   27                     ;;||+------ Priority (0: in front of background; 1: behind background)
   28                     ;;|+------- Flip sprite horizontally
   29                     ;;+-------- Flip sprite vertically
   30                     
   31                     ;;Byte 3
   32                     ;;X position of left side of sprite.
   33                     ;;X-scroll values of $F9-FF results in parts of the 
   34                     ;;sprite to be past the right edge of the screen, thus invisible.
   35                     ;;It is not possible to have a sprite partially visible on the left edge. 
   36                     ;;Instead, left-clipping through PPUMASK ($2001) can be used to simulate this effect.
   37  07:F472            Sprites:
   38  07:F472  78 F4             .word Title_Sprites, Game_Sprites, GameOver_Sprites
       07:F474  81 F4     
       07:F476  86 F4     
   39                     
   40  07:F478            Title_Sprites:
   41  07:F478  02            .db $02
   42  07:F479  85 00 00          .db $85,$00,$00,$E8
       07:F47C  E8        
   43  07:F47D  A0 01 00          .db $A0,$01,$00,$60
       07:F480  60        
   44  07:F481            Game_Sprites:
   45  07:F481  01            .db $01
   46  07:F482  62 00 03          .db $62,$00,$03,$72
       07:F485  72        
   47  07:F486            GameOver_Sprites:
   48  07:F486  01                .db $01
   49  07:F487  00 00 00          .db $00,$00,$00,$00
       07:F48A  00        
#[1]   Picross.asm
  111                     
  112           FFFA        .org $FFFA     ;first of the three vectors starts here
  113  07:FFFA  8D CC       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  114                                        ;processor will jump to the label NMI:
  115  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  116                                        ;to the label RESET:
  117  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  118                       
  119                     ;;**************************;;
  120                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  121                     ;;      CHR ROM DATA        ;;
  122                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  123                     ;;**************************;; 
  124                       
  125           0008        .bank 8
  126           0000        .org $0000
  127  08:0000              .incbin "CHRROM/Bank0.chr"   ;includes 8KB graphics file from SMB1
  128                       
  129           0009        .bank 9
  130           0000        .org $0000
  131  09:0000              .incbin "CHRROM/Bank1.chr"
  132                       
  133           000A        .bank 10
  134           0000        .org $0000
  135  0A:0000              .incbin "CHRROM/Bank2.chr"
  136                       
  137           000B        .bank 11
  138           0000        .org $0000
  139  0B:0000              .incbin "CHRROM/Bank3.chr"
