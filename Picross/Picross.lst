#[1]   Picross.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/Defines.asm
   14                       .include "Defines/Defines.asm"
    1                     ;; define 0 page stuff here, and SRAM stuff if we have it
    2                     
    3           0000        .rsset $0000
#[3]   Defines/GeneralVars.asm
    4                       .include "Defines/GeneralVars.asm"
    1           0000      temp1                   .rs 1
    2           0001      temp2                   .rs 1
    3           0002      temp3                   .rs 1
    4           0003      temp4                   .rs 1
    5           0004      temp5                   .rs 1
    6           0005      temp6                   .rs 1
    7           0006      temp7                   .rs 1
    8           0007      temp8                   .rs 1
    9           0008      tempx                   .rs 1
   10           0009      tempy                   .rs 1
   11           000A      time                    .rs 1
   12           000B      scaledTime              .rs 1
   13           000C      sleeping                .rs 1
   14           000D      mode_loadFlags  .rs 1
   15                     ;;0rcb xxxx
   16                     ;;r = read from save copy 
   17                     ;;c = write to save copy
   18           000E      game_mode               .rs 1
   19           000F      mode_state              .rs 1
   20           0010      NMI_locks               .rs 1
   21           0011      game_locks              .rs 1
   22           0012      pointer_address .rs 2
   23           0014      pointerB_address .rs 2
   24           0016      table_address   .rs 2
   25           0018      jump_address    .rs 2
   26                     
   27                     ;game modes
   28           0000      TITLE_IDX = $00
   29           0001      GAME_IDX = $01
   30           0002      GAMEOVER_IDX = $02
   31                     
   32                     ;locks for input and rendering
   33           0001      BGLOAD_NMI_LOCK = %00000001
   34           0001      EFFECT_GAME_LOCK = %00000001
   35                     
   36                     
   37                     
#[2]   Defines/Defines.asm
#[3]   Defines/ControllerVars.asm
    5                       .include "Defines/ControllerVars.asm"
    1           0010      GAMEPAD_UP = $10
    2           0020      GAMEPAD_DOWN = $20
    3           0040      GAMEPAD_LEFT = $40
    4           0080      GAMEPAD_RIGHT = $80
    5           0001      GAMEPAD_A = $01
    6           0002      GAMEPAD_B = $02
    7           0004      GAMEPAD_SELECT = $04
    8           0008      GAMEPAD_START = $08
    9                     
   10           00C0      GAMEPAD_HORI = $C0
   11           0030      GAMEPAD_VERT = $30
   12           00F0      GAMEPAD_MOVE = $F0
   13                     
   14           0003      GAMEPAD_AB = $03
   15                     
   16           0009      GAMEPAD_CONFIRM = $09
   17                     
   18           001A      gamepad                 .rs 1
   19           001B      gamepadLast     .rs 1
   20           001C      gamepadPressed  .rs 1
#[2]   Defines/Defines.asm
#[3]   Defines/PPUVariables.asm
    6                       .include "Defines/PPUVariables.asm"
    1           001D      PPU_Control                     .rs 1
    2           001E      PPU_Mask                        .rs 1
    3           001F      PPU_ScrollX                     .rs 1
    4           0020      PPU_ScrollY                     .rs 1
    5           0021      PPU_ScrollNT            .rs 1   ;first two bits
    6           0022      PPU_NT                          .rs 1
    7                     
    8           0023      PPU_PendingWrite        .rs 1
    9           0024      PPU_StringIdx           .rs 1
   10           0025      PPU_String                      .rs 128
   11                     
   12           004F      PPU_STRINGMAX = $4F ;up to size of a full nametable, I think
   13                     
   14           0000      SPRITE_YPOS = $00
   15           0001      SPRITE_ID   = $01
   16           0003      SPRITE_XPOS = $03
   17           0200      SPRITE_DATA = $0200
   18                     
   19           2000      PPU_CTRL = $2000
   20           2001      PPU_MASK = $2001
   21           2002      PPU_STATUS = $2002
   22           2003      OAM_LO = $2003
   23           2004      OAM_DATA = $2004
   24           2005      PPU_SCROLL = $2005
   25           2006      PPU_ADDR = $2006
   26           2007      PPU_DATA = $2007
   27           4014      OAM_HI = $4014
   28                     
   29           0080      DRAW_VERTICAL = $80
   30           0000      DRAW_HORIZONTAL = $00
   31                     
   32           0040      SPRITE_0_MASK = %01000000
#[2]   Defines/Defines.asm
#[3]   Defines/MapperVars.asm
    7                       .include "Defines/MapperVars.asm"
    1           00A5      mapper_address  .rs 2
    2           00A7      currentCHRBankA .rs 1
    3           00A8      currentCHRBankB .rs 1
    4           00A9      currentPRGBank  .rs 1
    5           00AA      mapperDebugVar  .rs 1
    6                     
    7                     
#[2]   Defines/Defines.asm
#[3]   Defines/TitleVariables.asm
    8                       .include "Defines/TitleVariables.asm"
    1                     
#[2]   Defines/Defines.asm
#[3]   Defines/GameVariables.asm
    9                       .include "Defines/GameVariables.asm"
    1           A000      PUZZLE_TABLE = $A000
    2           A01B      NAMES_TABLE = $A01B
    3           A036      SPRITES_TABLE = $A036
    4                     
    5           00AB      tempBank                        .rs 1
    6           00AC      puzzle_address          .rs 2
    7           00AE      clues_address           .rs 2
    8           00B0      pause_address           .rs 2
    9           00B2      copy_address        .rs 2
   10           00B4      pause_draw_address  .rs 2
   11           00B6      clue_start_address      .rs 2
   12           00B8      clue_draw_address       .rs 2
   13           00BA      clueTableIndex          .rs 1
   14           00BB      clueLineIndex           .rs 1
   15           00BC      clueOffsetShift         .rs 1
   16           00BD      clueDrawAdd                     .rs 1
   17           00BE      clueDrawOffset          .rs 2
   18           00C0      clueDrawDecSize         .rs 1
   19           00C1      clueParity                      .rs 1
   20           00C2      mouse_location          .rs 2
   21           00C4      mouse_index                     .rs 2
   22           00C6      currentPaintTile        .rs 1
   23           00C7      pauseState                      .rs 1
   24           00C8      pauseInputLock          .rs 1
   25           00C9      holdTimer                       .rs 1
   26           00CA      GameTime                        .rs 4   ;in order - second, ten second, minute, 10 minute - max out at 99 minutes
   27           00CE      targetGameMode          .rs 1
#[2]   Defines/Defines.asm
   10                     ;; 0100 is the stack
   11                     ;; 0200 is sprite ram
   12           0300        .rsset $0300
   13           0400        .rsset $0400
   14           0500        .rsset $0500
   15           0600        .rsset $0600
   16           0700        .rsset $0700
   17           6000        .rsset $6000
#[3]   Defines/ScreenStateVariables.asm
   18                       .include "Defines/ScreenStateVariables.asm"
    1           6000      Screen_Copy             .rs 1024
    2           6400      ScreenB_Copy    .rs 1024
    3           6800      SaveScreen_Copy .rs 1024
    4           6C00      Palette_Copy    .rs 32
#[2]   Defines/Defines.asm
   19           7000        .rsset $7000
#[3]   Defines/SaveVariables.asm
   20                       .include "Defines/SaveVariables.asm"
    1           7000      hasContinue .rs 1
    2           7001      solutionCount           .rs 1
    3           7002      nonSolutionCount        .rs 1
    4           7003      bank_index      .rs 1
    5           7004      puzzle_index .rs 1
    6                     ;we can save these for the continue
    7                     ;on a continue- we just need to load the back ground as it was
    8                     ;we'll save out data for the puzzles- just need to know if it's 1) complete and 2) the time
    9                     ;we can do that in 4 bytes each, so 324 bytes
   10           7005      puzzle_clear_data .rs 324
   11                     
#[2]   Defines/Defines.asm
   21                     
#[1]   Picross.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/PPUMacros.asm
    3                             .include "Macros/PPUMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetPPUControl .macro
    6                     
    7                       LDA #\1  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    8                       STA PPU_CTRL
    9                       LDA #\2   ; enable sprites, enable background, no clipping on left side
   10                       STA PPU_MASK
   11                             
   12                       .endm
   13                       
   14                     MACROSetPPUAddress .macro
   15                     
   16                       LDA PPU_STATUS             ; read PPU status to reset the high/low latch
   17                       LDA #HIGH(\1)
   18                       STA PPU_ADDR            ; write the high byte of $2000 address
   19                       LDA #LOW(\1)
   20                       STA PPU_ADDR           ; write the low byte of $2000 address
   21                       
   22                       .endm
   23                         
   24                     
   25                     MACROAddPPUStringEntryRawData .macro
   26                     
   27                       LDA #$01
   28                       STA PPU_PendingWrite
   29                       LDA \1
   30                       JSR WriteToPPUString
   31                       LDA \2
   32                       JSR WriteToPPUString
   33                       LDA \3
   34                       JSR WriteToPPUString
   35                       LDA \4 
   36                       JSR WriteToPPUString
   37                       
   38                       .endm
   39                     
   40                     MACROAddPPUStringEntryRepeat .macro
   41                     
   42                       LDA #$01
   43                       STA PPU_PendingWrite
   44                       LDA \1
   45                       JSR WriteToPPUString
   46                       LDA \2
   47                       JSR WriteToPPUString
   48                       LDA #$40
   49                       ORA \3
   50                       ORA \4
   51                       JSR WriteToPPUString
   52                       LDA \5
   53                       JSR WriteToPPUString
   54                       
   55                       .endm
   56                       
   57                     MACROAddPPUStringEntryTable .macro
   58                      
   59                       LDA #$01
   60                       STA PPU_PendingWrite
   61                       LDA \1
   62                       JSR WriteToPPUString
   63                       LDA \2
   64                       JSR WriteToPPUString
   65                       LDA #$20
   66                       ORA \3
   67                       JSR WriteToPPUString
   68                       LDA #LOW(\4)
   69                       JSR WriteToPPUString
   70                       LDA #HIGH(\4)
   71                       JSR WriteToPPUString
   72                      
   73                       .endm
   74                     
   75                     
#[2]   Macros/Macros.asm
#[3]   Macros/CallDynamicJump.asm
    4                             .include "Macros/CallDynamicJump.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROCallDynamicJump .macro
    6                     
    7                       LDA \1
    8                       JSR Dynamic_Jump
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetDoubleIndex.asm
    5                             .include "Macros/GetDoubleIndex.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = index to double
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROGetDoubleIndex .macro
    5                     
    6                             LDA \1
    7                             ASL A
    8                             TAY
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetLabelPointer.asm
    6                             .include "Macros/GetLabelPointer.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label we want address of
    3                     ;; \2 = address to store address to
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROGetLabelPointer .macro
    6                     
    7                             LDA #HIGH(\1)
    8                             LDX #LOW(\1)
    9                             
   10                             STX \2
   11                             STA \2+1
   12                             
   13                       .endm
   14                       
   15                     MACROGetPointer .macro
   16                     
   17                             LDA \1
   18                             STA \2
   19                             LDA \1+1
   20                             STA \2+1
   21                     
   22                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/FlagMacros.asm
    7                             .include "Macros/FlagMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetFlags .macro
    6                     
    7                       LDA \1
    8                       ORA #\2
    9                       STA \1
   10                             
   11                       .endm
   12                       
   13                     MACROClearFlags .macro
   14                     
   15                       LDA #\2
   16                       EOR #$FF
   17                       AND \1  
   18                       STA \1
   19                     
   20                       .endm
#[2]   Macros/Macros.asm
#[1]   Picross.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1                     
    2                     
    3           0000        .bank 0
    4           8000        .org $8000
    5                       
#[3]   Puzzles/house.asm
    6                       .include "Puzzles/house.asm" 
    1  00:8000            house:
    2  00:8000  02 82 00    .db $02, $82, $00, $21
       00:8003  21        
    3  00:8004  01 E0 0F    .db $01, $E0, $0F, $00, $78, $36, $C1, $08, $03, $80, $E7, $CE, $ED, $EE, $47, $44, $47, $44, $FF, $FE, $FF, $FE, $FF, $FE, $AB, $AA, $03, $80, $FF, $FE
       00:8007  00 78 36  
       00:800A  C1 08 03  
       00:800D  80 E7 CE  
       00:8010  ED EE 47  
       00:8013  44 47 44  
       00:8016  FF FE FF  
       00:8019  FE FF FE  
       00:801C  AB AA 03  
       00:801F  80 FF FE  
    4  00:8022  14 21 FF    .db $14, $21, $FF, $17, $20, $FF, $14, $21, $FF, $13, $10, $FF, $14, $12, $FF, $17, $10, $FF, $82, $10, $FF, $C2, $FF, $63, $10, $FF, $17, $10, $FF, $14, $11, $10, $FF, $13, $10, $FF, $14, $21, $FF, $17, $10, $FF, $14, $21, $FF
       00:8025  17 20 FF  
       00:8028  14 21 FF  
       00:802B  13 10 FF  
       00:802E  14 12 FF  
       00:8031  17 10 FF  
       00:8034  82 10 FF  
       00:8037  C2 FF 63  
       00:803A  10 FF 17  
       00:803D  10 FF 14  
       00:8040  11 10 FF  
       00:8043  13 10 FF  
       00:8046  14 21 FF  
       00:8049  17 10 FF  
       00:804C  14 21 FF  
    5  00:804F  40 FF 40    .db $40, $FF, $40, $FF, $22, $40, $FF, $11, $20, $FF, $30, $FF, $35, $30, $FF, $34, $23, $FF, $11, $31, $FF, $11, $31, $FF, $F0, $FF, $F0, $FF, $F0, $FF, $11, $13, $11, $10, $FF, $30, $FF, $F0, $FF
       00:8052  FF 22 40  
       00:8055  FF 11 20  
       00:8058  FF 30 FF  
       00:805B  35 30 FF  
       00:805E  34 23 FF  
       00:8061  11 31 FF  
       00:8064  11 31 FF  
       00:8067  F0 FF F0  
       00:806A  FF F0 FF  
       00:806D  11 13 11  
       00:8070  10 FF 30  
       00:8073  FF F0 FF  
    6  00:8076            houseImage:
    7  00:8076  AA AB FE   .db $AA, $AB, $FE, $AA, $AB, $FE, $AA, $AB, $FE, $AA, $FB, $FE, $AA, $2A, $BA, $AA, $A3, $2A, $A9, $5A, $3F, $29, $54, $63, $3F, $24, $62, $AF, $CE, $A2, $8A, $BF, $3A, $89, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $77, $75, $77, $77, $FF, $D5, $FF, $F5, $55, $55, $55, $40, $FF
       00:8079  AA AB FE  
       00:807C  AA AB FE  
       00:807F  AA FB FE  
       00:8082  AA 2A BA  
       00:8085  AA A3 2A  
       00:8088  A9 5A 3F  
       00:808B  29 54 63  
       00:808E  3F 24 62  
       00:8091  AF CE A2  
       00:8094  8A BF 3A  
       00:8097  89 55 55  
       00:809A  55 55 55  
       00:809D  55 55 55  
       00:80A0  55 55 55  
       00:80A3  77 75 77  
       00:80A6  77 FF D5  
       00:80A9  FF F5 55  
       00:80AC  55 55 40  
       00:80AF  FF        
    8  00:80B0            houseName:
    9  00:80B0  05 11 18    .db $05, $11, $18, $1E, $1C, $0E, $FF
       00:80B3  1E 1C 0E  
       00:80B6  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test.asm
    7                       .include "Puzzles/test.asm"
    1  00:80B7            test:
    2  00:80B7  02 01 00    .db $02, $01, $00, $00
       00:80BA  00        
    3  00:80BB  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:80BE  00 00 00  
       00:80C1  00 00 00  
       00:80C4  00 00 00  
       00:80C7  00 00 00  
       00:80CA  00 00 00  
       00:80CD  00 00 00  
       00:80D0  00 00 00  
       00:80D3  00 00 00  
       00:80D6  00 00 00  
    4  00:80D9  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80DC  FF 00 FF  
       00:80DF  00 FF 00  
       00:80E2  FF 00 FF  
       00:80E5  00 FF 00  
       00:80E8  FF 00 FF  
       00:80EB  00 FF 00  
       00:80EE  FF 00 FF  
       00:80F1  00 FF 00  
       00:80F4  FF 00 FF  
    5  00:80F7  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80FA  FF 00 FF  
       00:80FD  00 FF 00  
       00:8100  FF 00 FF  
       00:8103  00 FF 00  
       00:8106  FF 00 FF  
       00:8109  00 FF 00  
       00:810C  FF 00 FF  
       00:810F  00 FF 00  
       00:8112  FF 00 FF  
    6  00:8115            testImage:
    7  00:8115  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8118  1B 1B 1B  
       00:811B  1B 1B 1B  
       00:811E  1B 1B 1B  
       00:8121  1B 1B 1B  
       00:8124  1B 1B 1B  
       00:8127  1B 1B 1B  
       00:812A  1B 1B 1B  
       00:812D  1B 1B 1B  
       00:8130  1B 1B 1B  
       00:8133  1B 1B 1B  
       00:8136  1B 1B 1B  
       00:8139  1B 1B 1B  
       00:813C  1B 1B 1B  
       00:813F  1B 1B 1B  
       00:8142  1B 1B 1B  
       00:8145  1B 1B 1B  
       00:8148  1B 1B 1B  
       00:814B  1B 1B 00  
       00:814E  FF        
    8  00:814F            testName:
    9  00:814F  04 1D 0E    .db $04, $1D, $0E, $1C, $1D, $FF
       00:8152  1C 1D FF  
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test5.asm
    8                       .include "Puzzles/test5.asm"
    1  00:8155            test5:
    2  00:8155  00 01 00    .db $00, $01, $00, $32
       00:8158  32        
    3  00:8159  80 00 00    .db $80, $00, $00, $00, $00
       00:815C  00 00     
    4  00:815E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:8161  FF 00 FF  
       00:8164  00 FF 00  
       00:8167  FF        
    5  00:8168  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:816B  FF 00 FF  
       00:816E  00 FF 00  
       00:8171  FF        
    6  00:8172            test5Image:
    7  00:8172  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8175  1B 1B 1B  
       00:8178  00 FF     
    8  00:817A            test5Name:
    9  00:817A  05 1D 0E    .db $05, $1D, $0E, $1C, $1D, $05, $FF
       00:817D  1C 1D 05  
       00:8180  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test10.asm
    9                       .include "Puzzles/test10.asm"
    1  00:8181            test10:
    2  00:8181  01 01 00    .db $01, $01, $00, $16
       00:8184  16        
    3  00:8185  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:8188  00 00 00  
       00:818B  00 00 00  
       00:818E  00 00 00  
       00:8191  00 00 00  
       00:8194  00 00 00  
       00:8197  00 00     
    4  00:8199  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:819C  FF 00 FF  
       00:819F  00 FF 00  
       00:81A2  FF 00 FF  
       00:81A5  00 FF 00  
       00:81A8  FF 00 FF  
       00:81AB  00 FF     
    5  00:81AD  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:81B0  FF 00 FF  
       00:81B3  00 FF 00  
       00:81B6  FF 00 FF  
       00:81B9  00 FF 00  
       00:81BC  FF 00 FF  
       00:81BF  00 FF     
    6  00:81C1            test10Image:
    7  00:81C1  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $FF
       00:81C4  1B 1B 1B  
       00:81C7  1B 1B 1B  
       00:81CA  1B 1B 1B  
       00:81CD  1B 1B 1B  
       00:81D0  1B 1B 1B  
       00:81D3  1B 1B 1B  
       00:81D6  1B 1B 1B  
       00:81D9  1B FF     
    8  00:81DB            test10Name:
    9  00:81DB  06 1D 0E    .db $06, $1D, $0E, $1C, $1D, $01, $00, $FF
       00:81DE  1C 1D 01  
       00:81E1  00 FF     
#[2]   Banks/Bank0.asm
   10                     
   11           0001        .bank 1
   12           A000        .org $A000
   13                     ;puzzles
   14  01:A000  55 81       .word test5, test10, test, test, test, test, test, test, test
       01:A002  81 81     
       01:A004  B7 80     
       01:A006  B7 80     
       01:A008  B7 80     
       01:A00A  B7 80     
       01:A00C  B7 80     
       01:A00E  B7 80     
       01:A010  B7 80     
   15  01:A012  00 80       .word house, test, test, test, test, test, test, test, test
       01:A014  B7 80     
       01:A016  B7 80     
       01:A018  B7 80     
       01:A01A  B7 80     
       01:A01C  B7 80     
       01:A01E  B7 80     
       01:A020  B7 80     
       01:A022  B7 80     
   16  01:A024  00 80       .word house, test, test, test, test, test, test, test, test
       01:A026  B7 80     
       01:A028  B7 80     
       01:A02A  B7 80     
       01:A02C  B7 80     
       01:A02E  B7 80     
       01:A030  B7 80     
       01:A032  B7 80     
       01:A034  B7 80     
   17                     ;puzzle names
   18  01:A036  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A038  4F 81     
       01:A03A  4F 81     
       01:A03C  4F 81     
       01:A03E  4F 81     
       01:A040  4F 81     
       01:A042  4F 81     
       01:A044  4F 81     
       01:A046  4F 81     
   19  01:A048  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A04A  4F 81     
       01:A04C  4F 81     
       01:A04E  4F 81     
       01:A050  4F 81     
       01:A052  4F 81     
       01:A054  4F 81     
       01:A056  4F 81     
       01:A058  4F 81     
   20  01:A05A  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A05C  4F 81     
       01:A05E  4F 81     
       01:A060  4F 81     
       01:A062  4F 81     
       01:A064  4F 81     
       01:A066  4F 81     
       01:A068  4F 81     
       01:A06A  4F 81     
   21                     ;puzzle sprites
   22  01:A06C  00 00 00    .db $00, $00, $00, $00
       01:A06F  00        
   23  01:A070  00 00 00    .db $00, $00, $00, $00
       01:A073  00        
   24  01:A074  00 00 00    .db $00, $00, $00, $00
       01:A077  00        
   25  01:A078  00 00 00    .db $00, $00, $00, $00
       01:A07B  00        
   26  01:A07C  00 00 00    .db $00, $00, $00, $00
       01:A07F  00        
   27  01:A080  00 00 00    .db $00, $00, $00, $00
       01:A083  00        
   28  01:A084  00 00 00    .db $00, $00, $00, $00
       01:A087  00        
   29  01:A088  00 00 00    .db $00, $00, $00, $00
       01:A08B  00        
   30  01:A08C  00 00 00    .db $00, $00, $00, $00
       01:A08F  00        
   31  01:A090  00 00 00    .db $00, $00, $00, $00
       01:A093  00        
   32  01:A094  00 00 00    .db $00, $00, $00, $00
       01:A097  00        
   33  01:A098  00 00 00    .db $00, $00, $00, $00
       01:A09B  00        
   34  01:A09C  00 00 00    .db $00, $00, $00, $00
       01:A09F  00        
   35  01:A0A0  00 00 00    .db $00, $00, $00, $00
       01:A0A3  00        
   36  01:A0A4  00 00 00    .db $00, $00, $00, $00
       01:A0A7  00        
   37  01:A0A8  00 00 00    .db $00, $00, $00, $00
       01:A0AB  00        
   38  01:A0AC  00 00 00    .db $00, $00, $00, $00
       01:A0AF  00        
   39  01:A0B0  00 00 00    .db $00, $00, $00, $00
       01:A0B3  00        
   40  01:A0B4  00 00 00    .db $00, $00, $00, $00
       01:A0B7  00        
   41  01:A0B8  00 00 00    .db $00, $00, $00, $00
       01:A0BB  00        
   42  01:A0BC  00 00 00    .db $00, $00, $00, $00
       01:A0BF  00        
   43  01:A0C0  00 00 00    .db $00, $00, $00, $00
       01:A0C3  00        
   44  01:A0C4  00 00 00    .db $00, $00, $00, $00
       01:A0C7  00        
   45  01:A0C8  00 00 00    .db $00, $00, $00, $00
       01:A0CB  00        
   46  01:A0CC  00 00 00    .db $00, $00, $00, $00
       01:A0CF  00        
   47  01:A0D0  00 00 00    .db $00, $00, $00, $00
       01:A0D3  00        
   48  01:A0D4  00 00 00    .db $00, $00, $00, $00
       01:A0D7  00        
   49                       
   50                       
   51           BFFA        .org $BFFA     ;first of the three vectors starts here
   52  01:BFFA  FB D0       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   53                                        ;processor will jump to the label NMI:
   54  01:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   55                                        ;to the label RESET:
   56  01:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
#[3]   Puzzles/frog.asm
    4                       .include "Puzzles/frog.asm"
    1  02:8000            frog:
    2  02:8000  02 62 00    .db $02, $62, $00, $19
       02:8003  19        
    3  02:8004  00 00 00    .db $00, $00, $00, $00, $18, $30, $24, $48, $2C, $68, $1F, $F0, $3F, $F8, $7F, $FC, $7F, $FC, $60, $0C, $33, $98, $18, $30, $0F, $E0, $3C, $78, $78, $3C
       02:8007  00 18 30  
       02:800A  24 48 2C  
       02:800D  68 1F F0  
       02:8010  3F F8 7F  
       02:8013  FC 7F FC  
       02:8016  60 0C 33  
       02:8019  98 18 30  
       02:801C  0F E0 3C  
       02:801F  78 78 3C  
    4  02:8022  00 FF 13    .db $00, $FF, $13, $FF, $25, $20, $FF, $22, $41, $FF, $45, $10, $FF, $26, $FF, $11, $40, $FF, $11, $40, $FF, $11, $40, $FF, $26, $FF, $45, $10, $FF, $22, $41, $FF, $25, $20, $FF, $13, $FF, $00, $FF
       02:8025  FF 25 20  
       02:8028  FF 22 41  
       02:802B  FF 45 10  
       02:802E  FF 26 FF  
       02:8031  11 40 FF  
       02:8034  11 40 FF  
       02:8037  11 40 FF  
       02:803A  26 FF 45  
       02:803D  10 FF 22  
       02:8040  41 FF 25  
       02:8043  20 FF 13  
       02:8046  FF 00 FF  
    5  02:8049  00 FF 00    .db $00, $FF, $00, $FF, $22, $FF, $11, $11, $FF, $12, $21, $FF, $90, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $22, $FF, $23, $20, $FF, $22, $FF, $70, $FF, $44, $FF, $44, $FF
       02:804C  FF 22 FF  
       02:804F  11 11 FF  
       02:8052  12 21 FF  
       02:8055  90 FF B0  
       02:8058  FF D0 FF  
       02:805B  D0 FF 22  
       02:805E  FF 23 20  
       02:8061  FF 22 FF  
       02:8064  70 FF 44  
       02:8067  FF 44 FF  
    6  02:806A            frogImage:
    7  02:806A  55 55 55   .db $55, $55, $55, $55, $55, $55, $55, $55, $69, $55, $A5, $56, $F9, $5B, $E5, $5B, $25, $63, $95, $5A, $AA, $A9, $55, $AA, $22, $A9, $5A, $AA, $AA, $A9, $6A, $AA, $AA, $A5, $A0, $00, $02, $95, $A0, $54, $29, $55, $A0, $02, $95, $55, $AA, $A9, $55, $6A, $BF, $AA, $56, $AB, $FF, $AA, $40, $FF
       02:806D  55 55 55  
       02:8070  55 55 69  
       02:8073  55 A5 56  
       02:8076  F9 5B E5  
       02:8079  5B 25 63  
       02:807C  95 5A AA  
       02:807F  A9 55 AA  
       02:8082  22 A9 5A  
       02:8085  AA AA A9  
       02:8088  6A AA AA  
       02:808B  A5 A0 00  
       02:808E  02 95 A0  
       02:8091  54 29 55  
       02:8094  A0 02 95  
       02:8097  55 AA A9  
       02:809A  55 6A BF  
       02:809D  AA 56 AB  
       02:80A0  FF AA 40  
       02:80A3  FF        
    8  02:80A4            frogName:
    9  02:80A4  04 0F 1B    .db $04, $0F, $1B, $18, $10, $FF
       02:80A7  18 10 FF  
#[2]   Banks/Bank1.asm
    5                     
    6           0003        .bank 3
    7           A000        .org $A000
    8                      
    9                     ;puzzles
   10  03:A000  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A002  00 80     
       03:A004  00 80     
       03:A006  00 80     
       03:A008  00 80     
       03:A00A  00 80     
       03:A00C  00 80     
       03:A00E  00 80     
       03:A010  00 80     
   11  03:A012  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A014  00 80     
       03:A016  00 80     
       03:A018  00 80     
       03:A01A  00 80     
       03:A01C  00 80     
       03:A01E  00 80     
       03:A020  00 80     
       03:A022  00 80     
   12  03:A024  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A026  00 80     
       03:A028  00 80     
       03:A02A  00 80     
       03:A02C  00 80     
       03:A02E  00 80     
       03:A030  00 80     
       03:A032  00 80     
       03:A034  00 80     
   13                     ;puzzle names
   14  03:A036  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A038  A4 80     
       03:A03A  A4 80     
       03:A03C  A4 80     
       03:A03E  A4 80     
       03:A040  A4 80     
       03:A042  A4 80     
       03:A044  A4 80     
       03:A046  A4 80     
   15  03:A048  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A04A  A4 80     
       03:A04C  A4 80     
       03:A04E  A4 80     
       03:A050  A4 80     
       03:A052  A4 80     
       03:A054  A4 80     
       03:A056  A4 80     
       03:A058  A4 80     
   16  03:A05A  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A05C  A4 80     
       03:A05E  A4 80     
       03:A060  A4 80     
       03:A062  A4 80     
       03:A064  A4 80     
       03:A066  A4 80     
       03:A068  A4 80     
       03:A06A  A4 80     
   17                     ;puzzle sprites
   18  03:A06C  00 00 00    .db $00, $00, $00, $00
       03:A06F  00        
   19  03:A070  00 00 00    .db $00, $00, $00, $00
       03:A073  00        
   20  03:A074  00 00 00    .db $00, $00, $00, $00
       03:A077  00        
   21  03:A078  00 00 00    .db $00, $00, $00, $00
       03:A07B  00        
   22  03:A07C  00 00 00    .db $00, $00, $00, $00
       03:A07F  00        
   23  03:A080  00 00 00    .db $00, $00, $00, $00
       03:A083  00        
   24  03:A084  00 00 00    .db $00, $00, $00, $00
       03:A087  00        
   25  03:A088  00 00 00    .db $00, $00, $00, $00
       03:A08B  00        
   26  03:A08C  00 00 00    .db $00, $00, $00, $00
       03:A08F  00        
   27  03:A090  00 00 00    .db $00, $00, $00, $00
       03:A093  00        
   28  03:A094  00 00 00    .db $00, $00, $00, $00
       03:A097  00        
   29  03:A098  00 00 00    .db $00, $00, $00, $00
       03:A09B  00        
   30  03:A09C  00 00 00    .db $00, $00, $00, $00
       03:A09F  00        
   31  03:A0A0  00 00 00    .db $00, $00, $00, $00
       03:A0A3  00        
   32  03:A0A4  00 00 00    .db $00, $00, $00, $00
       03:A0A7  00        
   33  03:A0A8  00 00 00    .db $00, $00, $00, $00
       03:A0AB  00        
   34  03:A0AC  00 00 00    .db $00, $00, $00, $00
       03:A0AF  00        
   35  03:A0B0  00 00 00    .db $00, $00, $00, $00
       03:A0B3  00        
   36  03:A0B4  00 00 00    .db $00, $00, $00, $00
       03:A0B7  00        
   37  03:A0B8  00 00 00    .db $00, $00, $00, $00
       03:A0BB  00        
   38  03:A0BC  00 00 00    .db $00, $00, $00, $00
       03:A0BF  00        
   39  03:A0C0  00 00 00    .db $00, $00, $00, $00
       03:A0C3  00        
   40  03:A0C4  00 00 00    .db $00, $00, $00, $00
       03:A0C7  00        
   41  03:A0C8  00 00 00    .db $00, $00, $00, $00
       03:A0CB  00        
   42  03:A0CC  00 00 00    .db $00, $00, $00, $00
       03:A0CF  00        
   43  03:A0D0  00 00 00    .db $00, $00, $00, $00
       03:A0D3  00        
   44  03:A0D4  00 00 00    .db $00, $00, $00, $00
       03:A0D7  00        
   45                       
   46                       
   47           BFFA        .org $BFFA     ;first of the three vectors starts here
   48  03:BFFA  FB D0       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   49                                        ;processor will jump to the label NMI:
   50  03:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   51                                        ;to the label RESET:
   52  03:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
#[3]   Puzzles/cat.asm
    4                       .include "Puzzles/cat.asm"
    1  04:8000            cat:
    2  04:8000  02 7E 00    .db $02, $7E, $00, $2B
       04:8003  2B        
    3  04:8004  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $47, $C4, $7B, $BC, $7F, $FC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       04:8007  60 1E F0  
       04:800A  3E F8 3F  
       04:800D  F8 7F FC  
       04:8010  7F FC 47  
       04:8013  C4 7B BC  
       04:8016  7F FC 7C  
       04:8019  7C 76 DC  
       04:801C  39 38 1F  
       04:801F  F0 00 00  
    4  04:8022  00 FF 70    .db $00, $FF, $70, $FF, $54, $FF, $65, $FF, $23, $60, $FF, $13, $70, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $70, $FF, $23, $60, $FF, $65, $FF, $54, $FF, $70, $FF, $00, $FF
       04:8025  FF 54 FF  
       04:8028  65 FF 23  
       04:802B  60 FF 13  
       04:802E  70 FF 11  
       04:8031  80 FF 26  
       04:8034  FF 11 80  
       04:8037  FF 13 70  
       04:803A  FF 23 60  
       04:803D  FF 65 FF  
       04:8040  54 FF 70  
       04:8043  FF 00 FF  
    5  04:8046  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $15, $10, $FF, $43, $40, $FF, $D0, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       04:8049  FF 44 FF  
       04:804C  55 FF B0  
       04:804F  FF D0 FF  
       04:8052  D0 FF 15  
       04:8055  10 FF 43  
       04:8058  40 FF D0  
       04:805B  FF 55 FF  
       04:805E  32 23 FF  
       04:8061  31 30 FF  
       04:8064  90 FF 00  
       04:8067  FF        
    6  04:8068            catImage:
    7  04:8068  55 55 55   .db $55, $55, $55, $55, $56, $95, $A5, $55, $6A, $9A, $A5, $56, $AA, $6A, $A5, $5A, $AA, $AA, $95, $AA, $66, $6A, $96, $AA, $9A, $AA, $58, $0A, $E8, $09, $6A, $8F, $CA, $A5, $9A, $FF, $E9, $96, $AF, $57, $EA, $59, $CF, $7C, $D9, $5F, $C3, $0F, $D5, $5F, $FF, $FD, $55, $55, $55, $55, $40, $FF
       04:806B  55 56 95  
       04:806E  A5 55 6A  
       04:8071  9A A5 56  
       04:8074  AA 6A A5  
       04:8077  5A AA AA  
       04:807A  95 AA 66  
       04:807D  6A 96 AA  
       04:8080  9A AA 58  
       04:8083  0A E8 09  
       04:8086  6A 8F CA  
       04:8089  A5 9A FF  
       04:808C  E9 96 AF  
       04:808F  57 EA 59  
       04:8092  CF 7C D9  
       04:8095  5F C3 0F  
       04:8098  D5 5F FF  
       04:809B  FD 55 55  
       04:809E  55 55 40  
       04:80A1  FF        
    8  04:80A2            catName:
    9  04:80A2  03 0C 0A    .db $03, $0C, $0A, $1D, $FF
       04:80A5  1D FF     
#[2]   Banks/Bank2.asm
    5                     
    6           0005        .bank 5
    7           A000        .org $A000
    8                       
    9                     ;puzzles
   10  05:A000  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A002  00 80     
       05:A004  00 80     
       05:A006  00 80     
       05:A008  00 80     
       05:A00A  00 80     
       05:A00C  00 80     
       05:A00E  00 80     
       05:A010  00 80     
   11  05:A012  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A014  00 80     
       05:A016  00 80     
       05:A018  00 80     
       05:A01A  00 80     
       05:A01C  00 80     
       05:A01E  00 80     
       05:A020  00 80     
       05:A022  00 80     
   12  05:A024  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat
       05:A026  00 80     
       05:A028  00 80     
       05:A02A  00 80     
       05:A02C  00 80     
       05:A02E  00 80     
       05:A030  00 80     
       05:A032  00 80     
       05:A034  00 80     
   13                     ;puzzle names
   14  05:A036  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A038  A2 80     
       05:A03A  A2 80     
       05:A03C  A2 80     
       05:A03E  A2 80     
       05:A040  A2 80     
       05:A042  A2 80     
       05:A044  A2 80     
       05:A046  A2 80     
   15  05:A048  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A04A  A2 80     
       05:A04C  A2 80     
       05:A04E  A2 80     
       05:A050  A2 80     
       05:A052  A2 80     
       05:A054  A2 80     
       05:A056  A2 80     
       05:A058  A2 80     
   16  05:A05A  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName
       05:A05C  A2 80     
       05:A05E  A2 80     
       05:A060  A2 80     
       05:A062  A2 80     
       05:A064  A2 80     
       05:A066  A2 80     
       05:A068  A2 80     
       05:A06A  A2 80     
   17                     ;puzzle sprites
   18  05:A06C  00 00 00    .db $00, $00, $00, $00
       05:A06F  00        
   19  05:A070  00 00 00    .db $00, $00, $00, $00
       05:A073  00        
   20  05:A074  00 00 00    .db $00, $00, $00, $00
       05:A077  00        
   21  05:A078  00 00 00    .db $00, $00, $00, $00
       05:A07B  00        
   22  05:A07C  00 00 00    .db $00, $00, $00, $00
       05:A07F  00        
   23  05:A080  00 00 00    .db $00, $00, $00, $00
       05:A083  00        
   24  05:A084  00 00 00    .db $00, $00, $00, $00
       05:A087  00        
   25  05:A088  00 00 00    .db $00, $00, $00, $00
       05:A08B  00        
   26  05:A08C  00 00 00    .db $00, $00, $00, $00
       05:A08F  00        
   27  05:A090  00 00 00    .db $00, $00, $00, $00
       05:A093  00        
   28  05:A094  00 00 00    .db $00, $00, $00, $00
       05:A097  00        
   29  05:A098  00 00 00    .db $00, $00, $00, $00
       05:A09B  00        
   30  05:A09C  00 00 00    .db $00, $00, $00, $00
       05:A09F  00        
   31  05:A0A0  00 00 00    .db $00, $00, $00, $00
       05:A0A3  00        
   32  05:A0A4  00 00 00    .db $00, $00, $00, $00
       05:A0A7  00        
   33  05:A0A8  00 00 00    .db $00, $00, $00, $00
       05:A0AB  00        
   34  05:A0AC  00 00 00    .db $00, $00, $00, $00
       05:A0AF  00        
   35  05:A0B0  00 00 00    .db $00, $00, $00, $00
       05:A0B3  00        
   36  05:A0B4  00 00 00    .db $00, $00, $00, $00
       05:A0B7  00        
   37  05:A0B8  00 00 00    .db $00, $00, $00, $00
       05:A0BB  00        
   38  05:A0BC  00 00 00    .db $00, $00, $00, $00
       05:A0BF  00        
   39  05:A0C0  00 00 00    .db $00, $00, $00, $00
       05:A0C3  00        
   40  05:A0C4  00 00 00    .db $00, $00, $00, $00
       05:A0C7  00        
   41  05:A0C8  00 00 00    .db $00, $00, $00, $00
       05:A0CB  00        
   42  05:A0CC  00 00 00    .db $00, $00, $00, $00
       05:A0CF  00        
   43  05:A0D0  00 00 00    .db $00, $00, $00, $00
       05:A0D3  00        
   44  05:A0D4  00 00 00    .db $00, $00, $00, $00
       05:A0D7  00        
   45                     
   46           BFFA        .org $BFFA     ;first of the three vectors starts here
   47  05:BFFA  FB D0       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   48                                        ;processor will jump to the label NMI:
   49  05:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   50                                        ;to the label RESET:
   51  05:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Common/Init.asm
   34                       .include "Routines/Common/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 38 CD    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 3C CD    JSR SetMapperControls
   34                       
   35  06:C040  20 79 CD    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   Picross.asm
   35                     
   36  06:C048  A9 00       LDA #TITLE_IDX
   37  06:C04A  A2 00       LDX #$00
   38  06:C04C  20 FE C9    JSR ChangeGameMode
   39  06:C04F  20 BD CC    JSR InitPPUControl
   40                       
   41                     
   42                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   43                     ;;     Main Program         ;;
   44                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   45                     
   46  06:C052            Forever:
   47                     
   48  06:C052  EE 0C 00    INC sleeping
   49                     
   50  06:C055            .loop
   51  06:C055  AD 0C 00    LDA sleeping
   52  06:C058  D0 FB       BNE .loop
   53                     
   54  06:C05A  EE 0A 00    INC time  
   55  06:C05D  AD C7 00    LDA pauseState
   56  06:C060  D0 03       BNE .skipScaleUpdate
   57  06:C062  EE 0B 00    INC scaledTime
   58  06:C065            .skipScaleUpdate:
   59  06:C065  20 6B C0    JSR GameLoop
   60                     
   61                     
   62  06:C068  4C 52 C0    JMP Forever     ;jump back to Forever, infinite loop
   63                       
   64                     ;; dynamic jump table
   65                     
   66  06:C06B            GameLoop:
   67                     
   68                       MACROCallDynamicJump game_mode
                          
       06:C06B  AD 0E 00    LDA game_mode
       06:C06E  20 CF CA    JSR Dynamic_Jump
                                  
   69                       ;; we'll pop the return address here as the table index, so 
   70                       ;; the routine we pick will return us to whatever called Game Loop
   71                       ;; when it returns
   72                     
   73  06:C071            GameLoopJumpTable:
   74                     
   75  06:C071  77 C0       .word UpdateTitle
   76  06:C073  1C C3       .word UpdateGame
   77  06:C075  AD C9       .word UpdateGameOver
   78                       
   79                     
   80                       ;;RTS is called in the subroutine
   81                     
   82                       
#[2]   Routines/Game_States/UpdateTitle.asm
   83                       .include "Routines/Game_States/UpdateTitle.asm"
    1  06:C077            UpdateTitle:
    2                     
    3  06:C077  AD 10 00    LDA NMI_locks
    4  06:C07A  F0 01       BEQ .unlocked
    5                       
    6  06:C07C  60          RTS
    7                       
    8  06:C07D            .unlocked:
    9                     
   10  06:C07D  20 81 C0    JSR DoUpdateTitle  
   11  06:C080  60          RTS
   12                       
   13  06:C081            DoUpdateTitle:
   14                     
   15  06:C081  AD 0F 00    LDA mode_state
   16  06:C084  20 CF CA    JSR Dynamic_Jump
   17                         
   18  06:C087            UpdateTitleJumpTable:
   19                     
   20  06:C087  93 C0       .word UpdateTitleInit
   21  06:C089  C9 C0       .word UpdateBankSelection
   22  06:C08B  FA C0       .word UpdateScroll
   23  06:C08D  1E C1       .word UpdatePuzzleSelection
   24  06:C08F  61 C1       .word UpdateScrollBack
   25  06:C091  80 C1       .word UpdateTitleExit
   26                     
   27                       
   28                     ;;title should have two steps- the bank selection and the puzzle selection
   29                     ;;top half of screen can be used as the title screen, and the bottom half will have the selectable options
   30                     ;;
   31                     ;;starting options list: BANK 0, BANK 1, BANK 2
   32                     ;;select one, then scroll over to the right, with numbers for puzzles 
   33                     
   34  06:C093            UpdateTitleInit:
   35                     
   36  06:C093  20 99 CC    JSR TurnOnSprites
   37                       
   38  06:C096  AD 00 70    LDA hasContinue
   39  06:C099  F0 20       BEQ .skipContinueText
   40                       MACROAddPPUStringEntryTable #$2B, #$4D, #DRAW_HORIZONTAL, ContinueText
                           
       06:C09B  A9 01       LDA #$01
       06:C09D  8D 23 00    STA PPU_PendingWrite
       06:C0A0  A9 2B       LDA #$2B
       06:C0A2  20 51 CC    JSR WriteToPPUString
       06:C0A5  A9 4D       LDA #$4D
       06:C0A7  20 51 CC    JSR WriteToPPUString
       06:C0AA  A9 20       LDA #$20
       06:C0AC  09 00       ORA #DRAW_HORIZONTAL
       06:C0AE  20 51 CC    JSR WriteToPPUString
       06:C0B1  A9 13       LDA #LOW(ContinueText)
       06:C0B3  20 51 CC    JSR WriteToPPUString
       06:C0B6  A9 C3       LDA #HIGH(ContinueText)
       06:C0B8  20 51 CC    JSR WriteToPPUString
                           
   41                       
   42  06:C0BB            .skipContinueText:
   43                       
   44  06:C0BB  A9 00       LDA #$00
   45  06:C0BD  8D C4 00    STA mouse_index
   46  06:C0C0  A9 00       LDA #$00
   47  06:C0C2  8D C5 00    STA mouse_index+1
   48                     
   49  06:C0C5            .changeModeState:
   50                     
   51  06:C0C5  EE 0F 00    INC mode_state
   52  06:C0C8            .leave:
   53  06:C0C8  60          RTS
   54                       
   55  06:C0C9            UpdateBankSelection:
   56                     
   57  06:C0C9  20 48 C2    JSR UpdateBankPointer
   58                       
   59  06:C0CC  AD 1C 00    LDA gamepadPressed
   60  06:C0CF  29 01       AND #GAMEPAD_A
   61  06:C0D1  F0 26       BEQ .leave
   62                       
   63  06:C0D3            .changeModeState:
   64                       
   65  06:C0D3  AD C4 00    LDA mouse_index
   66  06:C0D6  C9 03       CMP #$03
   67  06:C0D8  D0 0F       BNE .setBank
   68                       
   69  06:C0DA  EE 0F 00    INC mode_state
   70  06:C0DD  EE 0F 00    INC mode_state
   71  06:C0E0  EE 0F 00    INC mode_state
   72                       
   73                       ;;load bank
   74  06:C0E3  20 06 C3    JSR LoadBank
   75                       
   76  06:C0E6  4C F3 C0    JMP .goToNext
   77                       
   78  06:C0E9            .setBank:
   79  06:C0E9  8D AB 00    STA tempBank
   80  06:C0EC  A9 FF       LDA #$FF
   81  06:C0EE  A2 01       LDX #$01
   82  06:C0F0  20 2A C2    JSR SetSpriteImage
   83                     
   84  06:C0F3            .goToNext:
   85  06:C0F3  EE 0F 00    INC mode_state
   86  06:C0F6  4C F9 C0    JMP .leave
   87                     
   88                     
   89  06:C0F9            .leave:
   90  06:C0F9  60          RTS
   91                       
   92  06:C0FA            UpdateScroll:
   93  06:C0FA  EE 1F 00    INC PPU_ScrollX
   94  06:C0FD  EE 1F 00    INC PPU_ScrollX
   95  06:C100  EE 1F 00    INC PPU_ScrollX
   96  06:C103  EE 1F 00    INC PPU_ScrollX
   97  06:C106  D0 15       BNE .leave
   98  06:C108  AD 21 00    LDA PPU_ScrollNT
   99  06:C10B  49 01       EOR #%00000001
  100  06:C10D  8D 21 00    STA PPU_ScrollNT
  101                       
  102  06:C110            .changeModeState:
  103  06:C110  A9 01       LDA #$01
  104  06:C112  A2 01       LDX #$01
  105  06:C114  20 2A C2    JSR SetSpriteImage
  106  06:C117  20 EC C1    JSR InitPuzzlePointer
  107  06:C11A  EE 0F 00    INC mode_state
  108  06:C11D            .leave:
  109  06:C11D  60          RTS
  110                       
  111  06:C11E            UpdatePuzzleSelection:
  112                     
  113  06:C11E  20 97 C2    JSR UpdatePuzzlePointer
  114                       
  115  06:C121  AD 1C 00    LDA gamepadPressed
  116  06:C124  29 02       AND #GAMEPAD_B
  117  06:C126  D0 10       BNE .changeToScrollBack
  118  06:C128  AD 1C 00    LDA gamepadPressed
  119  06:C12B  29 09       AND #GAMEPAD_CONFIRM
  120  06:C12D  F0 31       BEQ .leave
  121                       
  122  06:C12F  EE 0F 00    INC mode_state
  123  06:C132  EE 0F 00    INC mode_state
  124  06:C135  4C 60 C1    JMP .leave
  125                       
  126  06:C138            .changeToScrollBack:
  127                      
  128  06:C138  A9 FF       LDA #$FF
  129  06:C13A  A2 01       LDX #$01
  130  06:C13C  20 2A C2    JSR SetSpriteImage
  131  06:C13F  20 E4 C1    JSR InitBankPointer
  132  06:C142  AD 03 70    LDA bank_index
  133  06:C145  8D C4 00    STA mouse_index
  134  06:C148  20 8A C2    JSR SetBankPointerFromIndex
  135                       
  136  06:C14B  A9 00       LDA #$00
  137  06:C14D  8D 20 00    STA PPU_ScrollY
  138  06:C150  A9 FC       LDA #$FC
  139  06:C152  8D 1F 00    STA PPU_ScrollX
  140  06:C155  AD 21 00    LDA PPU_ScrollNT
  141  06:C158  29 FE       AND #$FE
  142  06:C15A  8D 21 00    STA PPU_ScrollNT
  143                       
  144  06:C15D  EE 0F 00    INC mode_state
  145  06:C160            .leave:
  146  06:C160  60          RTS
  147                       
  148  06:C161            UpdateScrollBack:
  149                     
  150  06:C161  CE 1F 00    DEC PPU_ScrollX
  151  06:C164  CE 1F 00    DEC PPU_ScrollX
  152  06:C167  CE 1F 00    DEC PPU_ScrollX
  153  06:C16A  CE 1F 00    DEC PPU_ScrollX
  154  06:C16D  D0 10       BNE .leave
  155                       
  156  06:C16F            .changeModeState:
  157                     
  158  06:C16F  A9 01       LDA #$01
  159  06:C171  A2 01       LDX #$01
  160  06:C173  20 2A C2    JSR SetSpriteImage
  161  06:C176  CE 0F 00    DEC mode_state
  162  06:C179  CE 0F 00    DEC mode_state
  163  06:C17C  CE 0F 00    DEC mode_state
  164                       
  165  06:C17F            .leave:
  166  06:C17F  60          RTS
  167                       
  168  06:C180            UpdateTitleExit:
  169                     
  170                       ;;reset screen scroll
  171  06:C180  A9 00       LDA #$00
  172  06:C182  8D 1F 00    STA PPU_ScrollX
  173  06:C185  8D 21 00    STA PPU_ScrollNT
  174                       
  175  06:C188  A9 20       LDA #%00100000
  176  06:C18A  8D 00 00    STA temp1
  177                       
  178  06:C18D  AD C4 00    LDA mouse_index
  179  06:C190  C9 03       CMP #$03
  180  06:C192  D0 06       BNE .loadPuzzle
  181                       
  182  06:C194  0E 00 00    ASL temp1
  183  06:C197  4C B8 C1    JMP .setupPuzzle
  184                       
  185  06:C19A            .loadPuzzle:
  186                       ;; we can also pick out the puzzle index
  187                       ;; we have the mouse indexes - one vert, one hori
  188                       ;; take vert, mult by 9- alternatively, mult by 8, add index 
  189                       ;; IE - ind = 1, mult 8 = 8, add 1 = 9
  190                       ;; add X index
  191  06:C19A  AD AB 00    LDA tempBank
  192  06:C19D  8D 03 70    STA bank_index
  193  06:C1A0  20 06 C3    JSR LoadBank
  194                       
  195  06:C1A3  AD C4 00    LDA mouse_index
  196  06:C1A6  0A          ASL A
  197  06:C1A7  0A          ASL A
  198  06:C1A8  0A          ASL A
  199  06:C1A9  18          CLC
  200  06:C1AA  6D C4 00    ADC mouse_index
  201  06:C1AD  6D C5 00    ADC mouse_index+1
  202  06:C1B0  8D 04 70    STA puzzle_index
  203  06:C1B3  A9 00       LDA #$00
  204  06:C1B5  8D 00 70    STA hasContinue
  205                     
  206                     
  207  06:C1B8            .setupPuzzle:
  208                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C1B8  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C1BA  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C1BC  8E 16 00          STX table_address
       06:C1BF  8D 17 00          STA table_address+1
                                  
  209                       MACROGetDoubleIndex puzzle_index
                          
       06:C1C2  AD 04 70          LDA puzzle_index
       06:C1C5  0A                ASL A
       06:C1C6  A8                TAY
                                  
  210  06:C1C7  20 F5 CA    JSR GetTableAtIndex
  211                       MACROGetPointer table_address, puzzle_address
                          
       06:C1CA  AD 16 00          LDA table_address
       06:C1CD  8D AC 00          STA puzzle_address
       06:C1D0  AD 17 00          LDA table_address+1
       06:C1D3  8D AD 00          STA puzzle_address+1
                          
  212                     
  213  06:C1D6  A0 00       LDY #$00
  214  06:C1D8  B1 AC       LDA [puzzle_address], y
  215  06:C1DA  0D 00 00    ORA temp1
  216                       
  217  06:C1DD  AA          TAX
  218                       
  219                     
  220  06:C1DE  A9 01       LDA #GAME_IDX
  221  06:C1E0  20 FE C9    JSR ChangeGameMode
  222                       
  223  06:C1E3            .leave
  224  06:C1E3  60          RTS
  225                       
  226  06:C1E4            InitBankPointer:
  227                     
  228  06:C1E4  A2 A0       LDX #$A0
  229  06:C1E6  A9 60       LDA #$60
  230  06:C1E8  20 FF C1    JSR InitPointer
  231                       
  232  06:C1EB  60          RTS  
  233                       
  234  06:C1EC            InitPuzzlePointer:
  235                       
  236  06:C1EC  A2 AE       LDX #$AE
  237  06:C1EE  A9 10       LDA #$10
  238  06:C1F0  20 FF C1    JSR InitPointer
  239                       
  240  06:C1F3  60          RTS
  241                     
  242  06:C1F4            ResetMouseIndex:
  243                     
  244  06:C1F4  A9 00       LDA #$00
  245  06:C1F6  8D C4 00    STA mouse_index
  246  06:C1F9  A9 00       LDA #$00
  247  06:C1FB  8D C5 00    STA mouse_index+1
  248  06:C1FE  60          RTS
  249                     
  250  06:C1FF            InitPointer:
  251                     
  252  06:C1FF  20 06 C2    JSR SetPointerPosition
  253  06:C202  20 F4 C1    JSR ResetMouseIndex
  254  06:C205  60          RTS  
  255                       
  256  06:C206            SetPointerPosition:
  257                     
  258  06:C206  48          PHA
  259  06:C207  8A          TXA
  260  06:C208  A2 01       LDX #$01
  261  06:C20A  20 14 C2    JSR SetSpriteYPosition
  262  06:C20D  68          PLA
  263  06:C20E  A2 01       LDX #$01
  264  06:C210  20 1F C2    JSR SetSpriteXPosition
  265                      
  266  06:C213  60          RTS
  267                       
  268  06:C214            SetSpriteYPosition:
  269                       
  270  06:C214  48          PHA
  271  06:C215  A9 00       LDA #SPRITE_YPOS
  272  06:C217  20 35 C2    JSR GetSpriteDataIndexInX
  273  06:C21A  68          PLA
  274  06:C21B  9D 00 02    STA SPRITE_DATA, x
  275  06:C21E  60          RTS
  276                       
  277  06:C21F            SetSpriteXPosition:  
  278                       
  279  06:C21F  48          PHA
  280  06:C220  A9 03       LDA #SPRITE_XPOS
  281  06:C222  20 35 C2    JSR GetSpriteDataIndexInX
  282  06:C225  68          PLA
  283  06:C226  9D 00 02    STA SPRITE_DATA, x 
  284  06:C229  60          RTS
  285                     
  286  06:C22A            SetSpriteImage:
  287                     
  288                     ;; A has sprite image index we want
  289                     ;; X has the sprite index
  290  06:C22A  48          PHA
  291  06:C22B  A9 01       LDA #SPRITE_ID
  292  06:C22D  20 35 C2    JSR GetSpriteDataIndexInX
  293  06:C230  68          PLA
  294  06:C231  9D 00 02    STA SPRITE_DATA, x
  295  06:C234  60          RTS
  296                       
  297  06:C235            GetSpriteDataIndexInX:
  298                     
  299                       ;; A has data index we want to get
  300                       ;; X has sprite index
  301  06:C235  8D 02 00    STA temp3
  302  06:C238  8A          TXA
  303  06:C239  0A          ASL A
  304  06:C23A  0A          ASL A
  305  06:C23B  18          CLC
  306  06:C23C  6D 02 00    ADC temp3
  307  06:C23F  AA          TAX
  308                       
  309  06:C240  60          RTS  
  310  06:C241            GetSpriteData:
  311                     
  312                       ;;A is data we want
  313                       ;;X is Sprite
  314  06:C241  20 35 C2    JSR GetSpriteDataIndexInX
  315  06:C244  BD 00 02    LDA SPRITE_DATA, x
  316  06:C247  60          RTS
  317                       
  318  06:C248            UpdateBankPointer:
  319                      
  320                       ;;bank pointer is 1D, will loop between 0->3
  321  06:C248  AD 1C 00    LDA gamepadPressed
  322  06:C24B  D0 01       BNE .continue
  323  06:C24D            .leaveEarly:
  324  06:C24D  60          RTS
  325                       
  326  06:C24E            .continue:
  327  06:C24E  A9 00       LDA #$00
  328  06:C250  8D 00 00    STA temp1
  329                       
  330  06:C253  A9 02       LDA #$02
  331  06:C255  8D 01 00    STA temp2
  332                       
  333  06:C258  AD 00 70    LDA hasContinue
  334  06:C25B  F0 05       BEQ .parseInputs
  335  06:C25D  A9 03       LDA #$03
  336  06:C25F  8D 01 00    STA temp2
  337                       
  338  06:C262            .parseInputs:
  339  06:C262  AD 1C 00    LDA gamepadPressed
  340  06:C265  29 30       AND #GAMEPAD_VERT
  341  06:C267  F0 E4       BEQ .leaveEarly
  342  06:C269  0A          ASL A
  343  06:C26A  0A          ASL A
  344  06:C26B            .checkDown:
  345  06:C26B  0A          ASL A
  346  06:C26C  90 03       BCC .checkUp
  347  06:C26E  EE 00 00    INC temp1
  348  06:C271            .checkUp:
  349  06:C271  0A          ASL A
  350  06:C272  90 03       BCC .move
  351  06:C274  CE 00 00    DEC temp1
  352  06:C277            .move:
  353                       
  354  06:C277  AD C4 00    LDA mouse_index
  355  06:C27A  18          CLC
  356  06:C27B  6D 00 00    ADC temp1
  357  06:C27E  CD 01 00    CMP temp2
  358  06:C281  F0 04       BEQ .skipMod
  359  06:C283  90 02       BCC .skipMod
  360  06:C285  A9 00       LDA #$00
  361  06:C287            .skipMod:
  362  06:C287  8D C4 00    STA mouse_index
  363                       ;; mult mouse_index by 16
  364  06:C28A            SetBankPointerFromIndex:
  365                     
  366  06:C28A  0A          ASL A
  367  06:C28B  0A          ASL A
  368  06:C28C  0A          ASL A
  369  06:C28D  0A          ASL A
  370  06:C28E  18          CLC
  371  06:C28F  69 A0       ADC #$A0
  372  06:C291  A2 01       LDX #$01
  373  06:C293  20 14 C2    JSR SetSpriteYPosition
  374                     
  375  06:C296            .leave:
  376                       
  377  06:C296  60          RTS
  378                       
  379  06:C297            UpdatePuzzlePointer:
  380                     
  381                       ;;puzzle pointer is 2D, will loop between 0-9 and 0-2
  382  06:C297  AD 1C 00    LDA gamepadPressed
  383  06:C29A  F0 69       BEQ .leave 
  384                       
  385  06:C29C  A9 00       LDA #$00
  386  06:C29E  8D 00 00    STA temp1
  387  06:C2A1  8D 01 00    STA temp2
  388                       
  389  06:C2A4            .parseInputs:
  390  06:C2A4  AD 1C 00    LDA gamepadPressed
  391  06:C2A7  29 F0       AND #GAMEPAD_MOVE
  392  06:C2A9  F0 5A       BEQ .leave
  393  06:C2AB  0A          ASL A
  394  06:C2AC  90 03       BCC .checkLeft
  395  06:C2AE  EE 00 00    INC temp1
  396  06:C2B1            .checkLeft:
  397  06:C2B1  0A          ASL A
  398  06:C2B2  90 03       BCC .checkDown
  399  06:C2B4  CE 00 00    DEC temp1
  400  06:C2B7            .checkDown:
  401  06:C2B7  0A          ASL A
  402  06:C2B8  90 03       BCC .checkUp
  403  06:C2BA  EE 01 00    INC temp2
  404  06:C2BD            .checkUp:
  405  06:C2BD  0A          ASL A
  406  06:C2BE  90 03       BCC .move
  407  06:C2C0  CE 01 00    DEC temp2
  408                       
  409  06:C2C3            .move:
  410                     
  411  06:C2C3  AD C4 00    LDA mouse_index
  412  06:C2C6  18          CLC
  413  06:C2C7  6D 01 00    ADC temp2
  414  06:C2CA  C9 02       CMP #$02
  415  06:C2CC  F0 04       BEQ .skipYMod
  416  06:C2CE  90 02       BCC .skipYMod
  417  06:C2D0  A9 00       LDA #$00
  418  06:C2D2            .skipYMod:
  419  06:C2D2  8D C4 00    STA mouse_index
  420                       ;; mult mouse_index by 16
  421  06:C2D5  0A          ASL A
  422  06:C2D6  0A          ASL A
  423  06:C2D7  0A          ASL A
  424  06:C2D8  0A          ASL A
  425  06:C2D9  18          CLC
  426  06:C2DA  69 AE       ADC #$AE
  427  06:C2DC  A2 01       LDX #$01
  428  06:C2DE  20 14 C2    JSR SetSpriteYPosition
  429                       
  430  06:C2E1  AD C5 00    LDA mouse_index+1
  431  06:C2E4  18          CLC
  432  06:C2E5  6D 00 00    ADC temp1
  433  06:C2E8  C9 08       CMP #$08
  434  06:C2EA  F0 04       BEQ .skipXMod
  435  06:C2EC  90 02       BCC .skipXMod
  436  06:C2EE  A9 00       LDA #$00
  437  06:C2F0            .skipXMod:
  438  06:C2F0  8D C5 00    STA mouse_index+1
  439                       ;; we need to move 3 tiles each- so index * 3 * 8,
  440  06:C2F3  18          CLC
  441  06:C2F4  6D C5 00    ADC mouse_index+1
  442  06:C2F7  6D C5 00    ADC mouse_index+1
  443  06:C2FA  0A          ASL A
  444  06:C2FB  0A          ASL A
  445  06:C2FC  0A          ASL A
  446  06:C2FD  18          CLC
  447  06:C2FE  69 10       ADC #$10
  448  06:C300  A2 01       LDX #$01
  449  06:C302  20 1F C2    JSR SetSpriteXPosition
  450                       
  451  06:C305            .leave:
  452                       
  453  06:C305  60          RTS
  454                     
  455  06:C306            LoadBank:
  456                     
  457                       ;;load bank
  458  06:C306  20 38 CD    JSR ResetMapper
  459  06:C309  AD 03 70    LDA bank_index
  460  06:C30C  8D A9 00    STA currentPRGBank
  461  06:C30F  20 47 CD    JSR LoadPRGBank
  462  06:C312  60          RTS
  463                       
  464  06:C313            ContinueText:
  465                     
  466  06:C313  08 0C 18    .db $08, $0C, $18, $17, $1D, $12, $17, $1E, $0E
       06:C316  17 1D 12  
       06:C319  17 1E 0E  
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGame.asm
   84                       .include "Routines/Game_States/UpdateGame.asm"
    1                     ;;VERT_CLUES = $206E
    2                     ;;HORI_CLUES = $2145
    3                     
    4           214E      VERT_CLUES = $214E
    5           218C      HORI_CLUES = $218C
    6           20A8      BANK_LEVEL = $20A8
    7           20E5      TIMER_LOC = $20E5
    8                     
    9           618E      MOUSE_START = $618E
   10                     
   11           0010      HOLD_TIME = $10
   12           0004      HOLD_FREQ = $04
   13                     
   14  06:C31C            UpdateGame:
   15                     
   16  06:C31C  AD 10 00    LDA NMI_locks
   17  06:C31F  F0 01       BEQ .unlocked
   18                       
   19  06:C321  60          RTS
   20                       
   21  06:C322            .unlocked:
   22                     
   23  06:C322  20 26 C3    JSR DoUpdateGame
   24  06:C325  60          RTS
   25                       
   26  06:C326            DoUpdateGame:
   27                     
   28  06:C326  AD 0F 00    LDA mode_state
   29  06:C329  20 CF CA    JSR Dynamic_Jump
   30                       
   31  06:C32C            UpdateGameJumpTable:
   32                     
   33  06:C32C  40 C3       .word UpdateGameInit
   34  06:C32E  F8 C3       .word UpdateDrawVertClues
   35  06:C330  20 C4       .word UpdateDrawHoriClues
   36  06:C332  66 C4       .word UpdateGamePlay
   37  06:C334  40 C6       .word UpdateClearPuzzle
   38  06:C336  53 C6       .word UpdateMoveScreen
   39  06:C338  CC C6       .word UpdateDrawImage
   40  06:C33A  52 C7       .word UpdateWaitInput
   41  06:C33C  68 C7       .word UpdateGameFadeOut
   42  06:C33E  7D C7       .word UpdateGameExit
   43                     
   44  06:C340            UpdateGameInit:
   45                     
   46                       ;; get the puzzle table in the puzzle address
   47                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C340  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C342  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C344  8E 16 00          STX table_address
       06:C347  8D 17 00          STA table_address+1
                                  
   48                       MACROGetDoubleIndex puzzle_index
                          
       06:C34A  AD 04 70          LDA puzzle_index
       06:C34D  0A                ASL A
       06:C34E  A8                TAY
                                  
   49  06:C34F  20 F5 CA    JSR GetTableAtIndex
   50                       MACROGetPointer table_address, puzzle_address
                          
       06:C352  AD 16 00          LDA table_address
       06:C355  8D AC 00          STA puzzle_address
       06:C358  AD 17 00          LDA table_address+1
       06:C35B  8D AD 00          STA puzzle_address+1
                          
   51                       MACROGetLabelPointer MOUSE_START, mouse_location
                          
       06:C35E  A9 61             LDA #HIGH(MOUSE_START)
       06:C360  A2 8E             LDX #LOW(MOUSE_START)
                                  
       06:C362  8E C2 00          STX mouse_location
       06:C365  8D C3 00          STA mouse_location+1
                                  
   52                     
   53                       ;;for clues, we need to get past the header- for a 15x15 puzzle, that's 34 bytes ahead
   54  06:C368  A0 00       LDY #$00
   55  06:C36A  B1 AC       LDA [puzzle_address], y
   56  06:C36C  AA          TAX
   57  06:C36D  BD AA C9    LDA PuzzleHeaderSkips, x
   58  06:C370  8D 00 00    STA temp1
   59                       
   60  06:C373  AD AC 00    LDA puzzle_address
   61  06:C376  18          CLC
   62  06:C377  6D 00 00    ADC temp1
   63  06:C37A  8D AE 00    STA clues_address
   64  06:C37D  A9 00       LDA #$00
   65  06:C37F  6D AD 00    ADC puzzle_address+1
   66  06:C382  8D AF 00    STA clues_address+1
   67                     
   68  06:C385  A9 00       LDA #$00
   69  06:C387  8D BA 00    STA clueTableIndex
   70  06:C38A  8D BB 00    STA clueLineIndex
   71  06:C38D  8D C1 00    STA clueParity
   72  06:C390  8D BC 00    STA clueOffsetShift
   73  06:C393  8D C4 00    STA mouse_index
   74  06:C396  8D C5 00    STA mouse_index+1
   75  06:C399  8D CA 00    STA GameTime
   76  06:C39C  8D CB 00    STA GameTime+1
   77  06:C39F  8D CC 00    STA GameTime+2
   78  06:C3A2  8D CD 00    STA GameTime+3
   79                     
   80                       
   81  06:C3A5  AD 00 70    LDA hasContinue
   82  06:C3A8  D0 08       BNE .skipSolutionReset
   83                       
   84  06:C3AA  A9 00       LDA #$00
   85  06:C3AC  8D 01 70    STA solutionCount
   86  06:C3AF  8D 02 70    STA nonSolutionCount
   87                       
   88  06:C3B2            .skipSolutionReset:     
   89                       
   90  06:C3B2  A9 20       LDA #$20
   91  06:C3B4  8D BD 00    STA clueDrawAdd
   92                     
   93  06:C3B7  A9 00       LDA #$00
   94  06:C3B9  8D 00 70    STA hasContinue  
   95                       
   96                       MACROGetLabelPointer VERT_CLUES, clue_start_address
                          
       06:C3BC  A9 21             LDA #HIGH(VERT_CLUES)
       06:C3BE  A2 4E             LDX #LOW(VERT_CLUES)
                                  
       06:C3C0  8E B6 00          STX clue_start_address
       06:C3C3  8D B7 00          STA clue_start_address+1
                                  
   97  06:C3C6  20 2A CE    JSR ResetClueDrawAddress
   98                       
   99                       MACROAddPPUStringEntryRawData #HIGH(BANK_LEVEL), #LOW(BANK_LEVEL), #DRAW_HORIZONTAL, #$03
                          
       06:C3C9  A9 01       LDA #$01
       06:C3CB  8D 23 00    STA PPU_PendingWrite
       06:C3CE  A9 20       LDA #HIGH(BANK_LEVEL)
       06:C3D0  20 51 CC    JSR WriteToPPUString
       06:C3D3  A9 A8       LDA #LOW(BANK_LEVEL)
       06:C3D5  20 51 CC    JSR WriteToPPUString
       06:C3D8  A9 00       LDA #DRAW_HORIZONTAL
       06:C3DA  20 51 CC    JSR WriteToPPUString
       06:C3DD  A9 03       LDA #$03 
       06:C3DF  20 51 CC    JSR WriteToPPUString
                            
  100  06:C3E2  AD 03 70    LDA bank_index
  101  06:C3E5  20 51 CC    JSR WriteToPPUString
  102  06:C3E8  A9 60       LDA #$60
  103  06:C3EA  20 51 CC    JSR WriteToPPUString
  104  06:C3ED  AE 04 70    LDX puzzle_index
  105  06:C3F0  E8          INX
  106  06:C3F1  8A          TXA 
  107  06:C3F2  20 51 CC    JSR WriteToPPUString
  108                       
  109  06:C3F5  EE 0F 00    INC mode_state
  110                     
  111  06:C3F8            UpdateDrawVertClues:
  112                       
  113  06:C3F8  20 8F CD    JSR PopulateClues
  114  06:C3FB  90 22       BCC .leave
  115                       
  116  06:C3FD            .changeModeState:
  117                     
  118  06:C3FD  A9 00       LDA #$00
  119  06:C3FF  8D BB 00    STA clueLineIndex
  120  06:C402  8D C1 00    STA clueParity
  121                       
  122  06:C405  A9 05       LDA #$05
  123  06:C407  8D BC 00    STA clueOffsetShift
  124                       
  125  06:C40A  A9 01       LDA #$01
  126  06:C40C  8D BD 00    STA clueDrawAdd
  127                        
  128                       MACROGetLabelPointer HORI_CLUES, clue_start_address
                          
       06:C40F  A9 21             LDA #HIGH(HORI_CLUES)
       06:C411  A2 8C             LDX #LOW(HORI_CLUES)
                                  
       06:C413  8E B6 00          STX clue_start_address
       06:C416  8D B7 00          STA clue_start_address+1
                                  
  129  06:C419  20 2A CE    JSR ResetClueDrawAddress
  130                     
  131  06:C41C  EE 0F 00    INC mode_state
  132  06:C41F            .leave:
  133  06:C41F  60          RTS
  134                       
  135  06:C420            UpdateDrawHoriClues:
  136                     
  137  06:C420  20 8F CD    JSR PopulateClues
  138  06:C423  90 40       BCC .leave
  139                     
  140  06:C425            .changeModeState:
  141  06:C425  20 99 CC    JSR TurnOnSprites
  142                       
  143                       ;;set the timer to 00
  144                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C428  A9 01       LDA #$01
       06:C42A  8D 23 00    STA PPU_PendingWrite
       06:C42D  A9 20       LDA #HIGH(TIMER_LOC)
       06:C42F  20 51 CC    JSR WriteToPPUString
       06:C432  A9 E5       LDA #LOW(TIMER_LOC)
       06:C434  20 51 CC    JSR WriteToPPUString
       06:C437  A9 00       LDA #DRAW_HORIZONTAL
       06:C439  20 51 CC    JSR WriteToPPUString
       06:C43C  A9 05       LDA #$05 
       06:C43E  20 51 CC    JSR WriteToPPUString
                            
  145  06:C441  A9 00       LDA #$00
  146  06:C443  20 51 CC    JSR WriteToPPUString
  147  06:C446  A9 00       LDA #$00
  148  06:C448  20 51 CC    JSR WriteToPPUString
  149  06:C44B  A9 61       LDA #$61
  150  06:C44D  20 51 CC    JSR WriteToPPUString
  151  06:C450  A9 00       LDA #$00
  152  06:C452  20 51 CC    JSR WriteToPPUString
  153  06:C455  A9 00       LDA #$00
  154  06:C457  20 51 CC    JSR WriteToPPUString
  155                       
  156                       ;;reset time
  157  06:C45A  A9 00       LDA #$00
  158  06:C45C  8D 0A 00    STA time
  159  06:C45F  8D 0B 00    STA scaledTime
  160                       
  161  06:C462  EE 0F 00    INC mode_state
  162  06:C465            .leave:
  163  06:C465  60          RTS
  164                       
  165  06:C466            UpdateGamePlay:
  166                         
  167  06:C466  AD C7 00    LDA pauseState
  168  06:C469  F0 04       BEQ .checkPause
  169  06:C46B  20 D3 C8    JSR UpdatePause
  170  06:C46E  60          RTS
  171                       
  172  06:C46F            .checkPause:
  173                       
  174  06:C46F  AD 1C 00    LDA gamepadPressed
  175  06:C472  29 08       AND #GAMEPAD_START
  176  06:C474  F0 29       BEQ .updatePlay
  177  06:C476  A9 01       LDA #$01
  178  06:C478  8D C7 00    STA pauseState
  179  06:C47B  A9 00       LDA #$00
  180  06:C47D  8D BB 00    STA clueLineIndex 
  181  06:C480  8D BC 00    STA clueOffsetShift   
  182                     
  183  06:C483  A9 FF       LDA #$FF
  184  06:C485  A2 00       LDX #$00
  185  06:C487  20 2A C2    JSR SetSpriteImage
  186                     
  187                       ;;we need the pause screen table loaded
  188                       MACROGetLabelPointer Pause_Menu, pause_address
                          
       06:C48A  A9 FC             LDA #HIGH(Pause_Menu)
       06:C48C  A2 7C             LDX #LOW(Pause_Menu)
                                  
       06:C48E  8E B0 00          STX pause_address
       06:C491  8D B1 00          STA pause_address+1
                                  
  189                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:C494  A9 21             LDA #HIGH($210A)
       06:C496  A2 0A             LDX #LOW($210A)
                                  
       06:C498  8E B4 00          STX pause_draw_address
       06:C49B  8D B5 00          STA pause_draw_address+1
                                  
  190                       
  191                       
  192  06:C49E  60          RTS
  193                     
  194  06:C49F            .updatePlay:
  195                     
  196  06:C49F  20 54 C8    JSR UpdateTimeDisplay
  197                             
  198  06:C4A2  A9 00       LDA #$00
  199  06:C4A4  8D 00 00    STA temp1
  200  06:C4A7  8D 01 00    STA temp2
  201  06:C4AA  8D 02 00    STA temp3
  202                       
  203  06:C4AD            .checkPressed:  
  204                     
  205  06:C4AD  AD 1C 00    LDA gamepadPressed
  206  06:C4B0  29 F0       AND #GAMEPAD_MOVE
  207  06:C4B2  F0 0B       BEQ .checkHeld
  208                       
  209  06:C4B4  A9 10       LDA #HOLD_TIME
  210  06:C4B6  8D C9 00    STA holdTimer 
  211  06:C4B9  AD 1C 00    LDA gamepadPressed
  212  06:C4BC  4C D3 C4    JMP .parseInputs
  213                       
  214  06:C4BF            .checkHeld:
  215                       
  216  06:C4BF  AD 1A 00    LDA gamepad
  217  06:C4C2  29 F0       AND #GAMEPAD_MOVE
  218  06:C4C4  F0 2F       BEQ .checkPaintPress
  219                       
  220                       ;;decrement the hold timer
  221  06:C4C6  CE C9 00    DEC holdTimer
  222  06:C4C9  D0 2A       BNE .checkPaintPress
  223  06:C4CB  A9 04       LDA #HOLD_FREQ
  224  06:C4CD  8D C9 00    STA holdTimer
  225  06:C4D0  AD 1A 00    LDA gamepad
  226                     
  227  06:C4D3            .parseInputs:
  228                     
  229  06:C4D3  29 F0       AND #GAMEPAD_MOVE
  230  06:C4D5  F0 1E       BEQ .checkPaintPress
  231  06:C4D7  0A          ASL A
  232  06:C4D8  90 03       BCC .checkLeft
  233  06:C4DA  EE 00 00    INC temp1
  234  06:C4DD            .checkLeft:
  235  06:C4DD  0A          ASL A
  236  06:C4DE  90 03       BCC .checkDown
  237  06:C4E0  CE 00 00    DEC temp1
  238  06:C4E3            .checkDown:
  239  06:C4E3  0A          ASL A
  240  06:C4E4  90 03       BCC .checkUp
  241  06:C4E6  EE 01 00    INC temp2
  242  06:C4E9            .checkUp:
  243  06:C4E9  0A          ASL A
  244  06:C4EA  90 03       BCC .move
  245  06:C4EC  CE 01 00    DEC temp2
  246                       
  247  06:C4EF            .move:
  248                      
  249  06:C4EF  20 98 C7    JSR MoveMouse
  250  06:C4F2  20 00 C8    JSR UpdateMouseScreenPos
  251                       
  252  06:C4F5            .checkPaintPress:
  253                     
  254  06:C4F5  AD 1C 00    LDA gamepadPressed
  255  06:C4F8  29 03       AND #GAMEPAD_AB
  256  06:C4FA  F0 41       BEQ .updatePaint
  257                       ;;A or B pressed, get current tile
  258                       
  259  06:C4FC  8D 00 00    STA temp1
  260                       
  261  06:C4FF  A0 00       LDY #$00
  262  06:C501  B1 C2       LDA [mouse_location], y
  263  06:C503  8D 01 00    STA temp2
  264                       
  265                         ;;A treats X and Clear as clear
  266                             ;;B treats mark and clear as clear
  267                             ;;clear->mark->x
  268                             
  269                     
  270  06:C506  C9 7C       CMP #$7C      ;check if this is a marked tile
  271  06:C508  B0 0F       BCS .getClearTile
  272                       ;;cleared tile- store off marked tile to paint with instead
  273                       ;;not a clear tile- a mark or an x - check A or B  
  274  06:C50A  4E 00 00    LSR temp1
  275  06:C50D  B0 05       BCS .getMarkTile
  276                       
  277  06:C50F            .getXTile:
  278  06:C50F  A9 80       LDA #$80
  279  06:C511  4C 37 C5    JMP .finishGetTile
  280                       
  281  06:C514            .getMarkTile:
  282  06:C514  A9 70       LDA #$70
  283  06:C516  4C 37 C5    JMP .finishGetTile
  284                     
  285  06:C519            .getClearTile:
  286                       
  287  06:C519  4E 00 00    LSR temp1
  288  06:C51C  90 0A       BCC .checkB
  289  06:C51E  AD 01 00    LDA temp2
  290  06:C521  C9 8C       CMP #$8C                      ;; check if in X tiles - will be if >=
  291  06:C523  90 0D       BCC .clearTile
  292  06:C525  4C 14 C5    JMP .getMarkTile
  293                       
  294  06:C528            .checkB:
  295                       
  296  06:C528  AD 01 00   LDA temp2
  297  06:C52B  C9 8C      CMP #$8C
  298  06:C52D  B0 03      BCS .clearTile
  299  06:C52F  4C 0F C5   JMP .getXTile
  300                       
  301  06:C532            .clearTile:
  302  06:C532  A9 60       LDA #$60
  303  06:C534  4C 37 C5    JMP .finishGetTile
  304                       
  305  06:C537            .finishGetTile:
  306  06:C537  8D C6 00    STA currentPaintTile
  307  06:C53A  4C 4F C5    JMP .setTile
  308                     
  309                     ;;we'll keep a copy of the puzzle tiles in memory, since we can't easily access tiles in the PPU
  310                     ;;might be best to just keep an entire copy of the nametable instead of trying to index it and deal with 16 bit math
  311                     ;;we can load the nametable into memory as we draw it
  312                     
  313  06:C53D            .updatePaint:
  314                     
  315  06:C53D  AD 1A 00    LDA gamepad
  316  06:C540  29 03       AND #GAMEPAD_AB
  317  06:C542  D0 06       BNE .checkInputLock
  318                       
  319  06:C544  A9 00       LDA #$00
  320  06:C546  8D C8 00    STA pauseInputLock
  321                       
  322  06:C549            .leaveEarly:
  323  06:C549  60          RTS  
  324                     
  325  06:C54A            .checkInputLock:
  326                     
  327                       ;;check if the input lock is on
  328  06:C54A  2D C8 00    AND pauseInputLock
  329  06:C54D  D0 FA       BNE .leaveEarly
  330                       
  331  06:C54F            .setTile:
  332                       
  333                       ;;take Y position, mult by 2 to get starting index in puzzle solution
  334  06:C54F  AD C5 00    LDA mouse_index+1
  335                     ;;if the puzzle is a 5x5, we only have one byte per row, so no need to double this
  336  06:C552  8D 00 00    STA temp1
  337  06:C555  A0 00       LDY #$00
  338  06:C557  B1 AC       LDA [puzzle_address], y
  339  06:C559  F0 03       BEQ .skipDouble
  340  06:C55B  0E 00 00    ASL temp1
  341  06:C55E            .skipDouble:
  342  06:C55E  AD 00 00    LDA temp1
  343  06:C561  18          CLC
  344  06:C562  69 04       ADC #$04 ;; add to get past header
  345  06:C564  8D 00 00    STA temp1
  346                       
  347                       ;;div X position by 8 to get the byte index
  348  06:C567  AD C4 00    LDA mouse_index
  349  06:C56A  4A          LSR A
  350  06:C56B  4A          LSR A
  351  06:C56C  4A          LSR A
  352  06:C56D  F0 03       BEQ .getMask
  353                       
  354  06:C56F  EE 00 00    INC temp1
  355                       
  356  06:C572            .getMask:
  357                       
  358  06:C572  AD C4 00    LDA mouse_index
  359  06:C575  29 07       AND #$07
  360  06:C577  AA          TAX
  361  06:C578  A9 80       LDA #$80
  362  06:C57A  E0 00       CPX #$00
  363  06:C57C  F0 04       BEQ .storeMask
  364                     
  365  06:C57E            .maskLoop:
  366  06:C57E  4A          LSR A
  367  06:C57F  CA          DEX
  368  06:C580  D0 FC       BNE .maskLoop
  369  06:C582            .storeMask:
  370  06:C582  8D 01 00    STA temp2
  371                     
  372  06:C585  AC 00 00    LDY temp1
  373  06:C588  B1 AC       LDA [puzzle_address], y
  374  06:C58A  2D 01 00    AND temp2
  375  06:C58D  8D 00 00    STA temp1     ;get the 0/non zero solution flag 
  376                     
  377  06:C590  A0 00       LDY #$00
  378  06:C592  B1 C2       LDA [mouse_location], y
  379  06:C594  8D 02 00    STA temp3
  380  06:C597  29 F0       AND #$F0
  381  06:C599  CD C6 00    CMP currentPaintTile
  382  06:C59C  D0 01       BNE .diffTiles
  383  06:C59E  60          RTS
  384                       
  385  06:C59F            .diffTiles:
  386                       ;;tiles are different- check if the current tile is marked as a solution tile
  387  06:C59F  C9 70       CMP #$70
  388  06:C5A1  D0 0B       BNE .checkNewMark
  389                       ;;if erasing a mark, check if the tile was part of the solution
  390  06:C5A3  AD 00 00    LDA temp1
  391  06:C5A6  D0 18       BNE .antiMark
  392  06:C5A8  CE 02 70    DEC nonSolutionCount
  393  06:C5AB  4C C9 C5    JMP .overwriteTile
  394                       
  395  06:C5AE            .checkNewMark:
  396                     
  397  06:C5AE  AD C6 00    LDA currentPaintTile
  398  06:C5B1  C9 70       CMP #$70
  399  06:C5B3  D0 14       BNE .overwriteTile
  400                       
  401  06:C5B5  AD 00 00    LDA temp1
  402  06:C5B8  D0 0C       BNE .proMark
  403  06:C5BA  EE 02 70    INC nonSolutionCount 
  404  06:C5BD  4C C9 C5    JMP .overwriteTile  
  405                       
  406  06:C5C0            .antiMark:
  407  06:C5C0  CE 01 70    DEC solutionCount
  408  06:C5C3  4C C9 C5    JMP .overwriteTile
  409  06:C5C6            .proMark:   
  410                       
  411  06:C5C6  EE 01 70    INC solutionCount
  412                       
  413  06:C5C9            .overwriteTile:
  414                       ;;overwrite tile
  415  06:C5C9  AD 02 00    LDA temp3
  416  06:C5CC  29 0F       AND #$0F
  417  06:C5CE  0D C6 00    ORA currentPaintTile
  418  06:C5D1  A0 00       LDY #$00
  419  06:C5D3  91 C2       STA [mouse_location], y
  420  06:C5D5  8D 00 00    STA temp1
  421                       
  422  06:C5D8  AD C3 00    LDA mouse_location+1
  423  06:C5DB  29 3F       AND #$3F
  424  06:C5DD  8D 01 00    STA temp2
  425                         
  426                       MACROAddPPUStringEntryRawData temp2, mouse_location, #DRAW_HORIZONTAL, #$01
                          
       06:C5E0  A9 01       LDA #$01
       06:C5E2  8D 23 00    STA PPU_PendingWrite
       06:C5E5  AD 01 00    LDA temp2
       06:C5E8  20 51 CC    JSR WriteToPPUString
       06:C5EB  AD C2 00    LDA mouse_location
       06:C5EE  20 51 CC    JSR WriteToPPUString
       06:C5F1  A9 00       LDA #DRAW_HORIZONTAL
       06:C5F3  20 51 CC    JSR WriteToPPUString
       06:C5F6  A9 01       LDA #$01 
       06:C5F8  20 51 CC    JSR WriteToPPUString
                            
  427  06:C5FB  AD 00 00    LDA temp1
  428  06:C5FE  20 51 CC    JSR WriteToPPUString
  429                       
  430                       ;;also copy to save copy
  431  06:C601  AD C2 00    LDA mouse_location
  432  06:C604  8D B2 00    STA copy_address
  433  06:C607  AD C3 00    LDA mouse_location+1
  434  06:C60A  29 0F       AND #$0F
  435  06:C60C  09 60       ORA #$60
  436  06:C60E  18          CLC
  437  06:C60F  69 08       ADC #$08
  438  06:C611  8D B3 00    STA copy_address+1
  439                       
  440  06:C614  AD 00 00    LDA temp1
  441  06:C617  A0 00       LDY #$00
  442  06:C619  91 B2       STA [copy_address],y
  443                       
  444  06:C61B            .checkSolution: 
  445                     
  446  06:C61B  A0 01       LDY #$01
  447  06:C61D  B1 AC       LDA [puzzle_address], y
  448  06:C61F  CD 01 70    CMP solutionCount
  449  06:C622  D0 1B       BNE .leave
  450  06:C624  AD 02 70    LDA nonSolutionCount
  451  06:C627  F0 03       BEQ .changeModeState
  452                       
  453  06:C629  4C 3F C6    JMP .leave
  454                       
  455                       ;;update the painting
  456  06:C62C            .changeModeState:
  457                      
  458  06:C62C  20 A2 CC    JSR TurnOffSprites
  459                        
  460  06:C62F  A9 00       LDA #$00
  461  06:C631  8D B8 00    STA clue_draw_address
  462  06:C634  8D BB 00    STA clueLineIndex
  463  06:C637  A9 20       LDA #$20
  464  06:C639  8D B9 00    STA clue_draw_address+1
  465                       
  466  06:C63C  EE 0F 00    INC mode_state
  467                     
  468  06:C63F            .leave:
  469                      
  470  06:C63F  60          RTS
  471                       
  472  06:C640            UpdateClearPuzzle:
  473                     
  474  06:C640  20 9E CE    JSR ClearPuzzle
  475  06:C643  AD BB 00    LDA clueLineIndex
  476  06:C646  C9 1E       CMP #30
  477  06:C648  D0 08       BNE .leave
  478                       
  479  06:C64A            .changeModeState:
  480                     
  481  06:C64A  A9 00       LDA #$00
  482  06:C64C  8D BB 00    STA clueLineIndex ;using this as a scroller
  483  06:C64F  EE 0F 00    INC mode_state
  484                     
  485  06:C652            .leave:
  486                      
  487  06:C652  60          RTS
  488  06:C653            UpdateMoveScreen:
  489                       
  490                       ;for 15x15, move 5 tiles left and 5 tiles up- let's do 1 at a time
  491                       ;we'll take the lower nibble of the clue line index as our scroll counter, and the higher nibble as the x/y flag
  492                       
  493  06:C653  A0 00       LDY #$00
  494  06:C655  B1 AC       LDA [puzzle_address], y
  495  06:C657  AA          TAX
  496  06:C658  BD A4 C9    LDA PuzzleScrollHori, x
  497  06:C65B  8D 00 00    STA temp1
  498  06:C65E  BD A7 C9    LDA PuzzleScrollVert, x
  499  06:C661  8D 01 00    STA temp2
  500                       
  501  06:C664  AD BB 00    LDA clueLineIndex
  502  06:C667  29 10       AND #$10
  503  06:C669  D0 1E       BNE .scrollY
  504                       
  505                       ;;scroll X over
  506  06:C66B  AD BB 00    LDA clueLineIndex
  507  06:C66E  29 0F       AND #$0F
  508  06:C670  0A          ASL A
  509  06:C671  0A          ASL A
  510  06:C672  0A          ASL A ;mult by 8
  511  06:C673  8D 1F 00    STA PPU_ScrollX
  512                       
  513  06:C676  EE BB 00    INC clueLineIndex
  514  06:C679  AD BB 00    LDA clueLineIndex
  515  06:C67C  CD 00 00    CMP temp1
  516  06:C67F  D0 4A       BNE .leave
  517  06:C681  A9 10       LDA #$10
  518  06:C683  8D BB 00    STA clueLineIndex
  519  06:C686  4C CB C6    JMP .leave
  520                       
  521  06:C689            .scrollY:
  522                     
  523  06:C689  AD BB 00    LDA clueLineIndex
  524  06:C68C  29 0F       AND #$0F
  525  06:C68E  0A          ASL A
  526  06:C68F  0A          ASL A
  527  06:C690  0A          ASL A ;mult by 8
  528  06:C691  8D 20 00    STA PPU_ScrollY
  529                     
  530  06:C694  EE BB 00    INC clueLineIndex
  531  06:C697  AD BB 00    LDA clueLineIndex
  532  06:C69A  29 0F       AND #$0F
  533  06:C69C  CD 01 00    CMP temp2
  534  06:C69F  D0 2A       BNE .leave
  535                       
  536  06:C6A1            .changeModeState:
  537                     
  538  06:C6A1  A9 8E       LDA #$8E
  539  06:C6A3  8D B8 00    STA clue_draw_address
  540  06:C6A6  A9 21       LDA #$21
  541  06:C6A8  8D B9 00    STA clue_draw_address+1
  542                       
  543  06:C6AB  AD AE 00    LDA clues_address
  544  06:C6AE  18          CLC
  545  06:C6AF  6D BA 00    ADC clueTableIndex
  546  06:C6B2  8D AE 00    STA clues_address
  547  06:C6B5  AD AF 00    LDA clues_address+1
  548  06:C6B8  69 00       ADC #$00
  549  06:C6BA  8D AF 00    STA clues_address+1
  550                       
  551  06:C6BD  A9 00       LDA #$00
  552  06:C6BF  8D BA 00    STA clueTableIndex
  553  06:C6C2  8D BB 00    STA clueLineIndex
  554  06:C6C5  8D BC 00    STA clueOffsetShift
  555                     
  556  06:C6C8  EE 0F 00    INC mode_state
  557                     
  558  06:C6CB            .leave:
  559                      
  560  06:C6CB  60          RTS
  561  06:C6CC            UpdateDrawImage:
  562                     
  563                       ;run it twice for a faster draw
  564  06:C6CC  20 80 CF    JSR DrawImage
  565  06:C6CF  AD BA 00    LDA clueTableIndex
  566  06:C6D2  CD 09 00    CMP tempy
  567                       ;BEQ .changeModeState
  568                       
  569                       ;JSR DrawImage
  570                       ;LDA clueTableIndex
  571                       ;CMP tempy
  572  06:C6D5  D0 7A       BNE .leave
  573                       
  574  06:C6D7            .changeModeState:
  575                     
  576                       ;;do a palette draw
  577                       ;;puzzle address + 03 has the desired palette offset
  578                     
  579  06:C6D7  A0 03       LDY #$03
  580  06:C6D9  B1 AC       LDA [puzzle_address],y
  581  06:C6DB  29 0F       AND #$0F
  582  06:C6DD  AA          TAX
  583                       
  584  06:C6DE  B1 AC       LDA [puzzle_address],y
  585  06:C6E0  29 10       AND #$10
  586  06:C6E2  F0 15       BEQ .storeBottomVals
  587                       
  588  06:C6E4  8A          TXA
  589  06:C6E5  09 10       ORA #$10
  590  06:C6E7  8D 01 00    STA temp2
  591  06:C6EA  8A          TXA
  592  06:C6EB  09 20       ORA #$20
  593  06:C6ED  8D 02 00    STA temp3
  594  06:C6F0  8A          TXA
  595  06:C6F1  09 30       ORA #$30
  596  06:C6F3  8D 03 00    STA temp4
  597                     
  598  06:C6F6  4C 0B C7    JMP .checkKeepWhite
  599                       
  600  06:C6F9            .storeBottomVals:
  601                     
  602  06:C6F9  8A          TXA
  603  06:C6FA  09 00       ORA #$00
  604  06:C6FC  8D 01 00    STA temp2
  605  06:C6FF  8A          TXA
  606  06:C700  09 10       ORA #$10
  607  06:C702  8D 02 00    STA temp3
  608  06:C705  8A          TXA
  609  06:C706  09 20       ORA #$20
  610  06:C708  8D 03 00    STA temp4
  611                       
  612  06:C70B            .checkKeepWhite:
  613                       
  614  06:C70B  B1 AC       LDA [puzzle_address],y
  615  06:C70D  29 20       AND #$20
  616  06:C70F  F0 05       BEQ .loadPalToPPUStr
  617                       
  618  06:C711  A9 30       LDA #$30
  619  06:C713  8D 03 00    STA temp4
  620                       
  621                       
  622  06:C716            .loadPalToPPUStr:
  623                       
  624                       MACROAddPPUStringEntryRawData #$3F, #$01, #DRAW_HORIZONTAL, #03
                          
       06:C716  A9 01       LDA #$01
       06:C718  8D 23 00    STA PPU_PendingWrite
       06:C71B  A9 3F       LDA #$3F
       06:C71D  20 51 CC    JSR WriteToPPUString
       06:C720  A9 01       LDA #$01
       06:C722  20 51 CC    JSR WriteToPPUString
       06:C725  A9 00       LDA #DRAW_HORIZONTAL
       06:C727  20 51 CC    JSR WriteToPPUString
       06:C72A  A9 03       LDA #03 
       06:C72C  20 51 CC    JSR WriteToPPUString
                            
  625  06:C72F  AD 01 00    LDA temp2
  626  06:C732  20 51 CC    JSR WriteToPPUString
  627  06:C735  AD 02 00    LDA temp3
  628  06:C738  20 51 CC    JSR WriteToPPUString
  629  06:C73B  AD 03 00    LDA temp4
  630  06:C73E  20 51 CC    JSR WriteToPPUString
  631                       
  632  06:C741  A2 01       LDX #$01
  633  06:C743            .copyLoop:
  634                       ;;also store in the copy 
  635  06:C743  BD 00 00    LDA temp1, x
  636  06:C746  9D 00 6C    STA Palette_Copy, x
  637  06:C749  E8          INX
  638  06:C74A  E0 04       CPX #$04
  639  06:C74C  D0 F5       BNE .copyLoop
  640                       
  641                       
  642  06:C74E  EE 0F 00    INC mode_state
  643                     
  644  06:C751            .leave:
  645                      
  646  06:C751  60          RTS
  647                       
  648  06:C752            UpdateWaitInput:
  649                     
  650  06:C752  AD 1C 00    LDA gamepadPressed
  651  06:C755  F0 10       BEQ .leave
  652                       
  653  06:C757            .changeModeState:
  654  06:C757  A9 00       LDA #$00
  655  06:C759  8D 0A 00    STA time
  656  06:C75C  8D 0B 00    STA scaledTime
  657  06:C75F  A9 02       LDA #GAMEOVER_IDX
  658  06:C761  8D CE 00    STA targetGameMode
  659  06:C764  EE 0F 00    INC mode_state
  660                     
  661  06:C767            .leave:
  662                      
  663  06:C767  60          RTS
  664                       
  665  06:C768            UpdateGameFadeOut:
  666                     
  667  06:C768  AD 0A 00    LDA time
  668  06:C76B  29 07       AND #$07
  669  06:C76D  D0 0D       BNE .leave
  670                       ;;every 8 frames, decrement the palettes
  671  06:C76F  20 CE CC    JSR FadeOutPalettes
  672  06:C772  B0 08       BCS .leave
  673                     
  674  06:C774            .changeModeState:
  675  06:C774  A9 00       LDA #$00
  676  06:C776  8D 0A 00    STA time
  677  06:C779  EE 0F 00    INC mode_state
  678  06:C77C            .leave:
  679  06:C77C  60          RTS  
  680                     
  681  06:C77D            UpdateGameExit:
  682                     
  683  06:C77D  AD 0A 00    LDA time
  684  06:C780  29 0F       AND #$0F
  685  06:C782  D0 13       BNE .leave
  686                     
  687  06:C784  A9 00       LDA #$00
  688  06:C786  8D 1F 00    STA PPU_ScrollX
  689  06:C789  8D 20 00    STA PPU_ScrollY
  690  06:C78C  8D 21 00    STA PPU_ScrollNT
  691                       
  692  06:C78F  AD CE 00    LDA targetGameMode
  693  06:C792  A2 00       LDX #$00
  694  06:C794  20 FE C9    JSR ChangeGameMode
  695  06:C797            .leave:
  696  06:C797  60          RTS
  697                       
  698  06:C798            MoveMouse:
  699                     
  700  06:C798  AD 00 00    LDA temp1
  701  06:C79B  0E 00 00    ASL temp1
  702  06:C79E  0E 00 00    ASL temp1
  703  06:C7A1  0E 00 00    ASL temp1
  704                       
  705  06:C7A4  AD 01 00    LDA temp2
  706  06:C7A7  0E 01 00    ASL temp2 
  707  06:C7AA  0E 01 00    ASL temp2
  708  06:C7AD  0E 01 00    ASL temp2
  709                       
  710  06:C7B0  A0 00       LDY #$00
  711  06:C7B2  B1 AC       LDA [puzzle_address], y ;puzzle size 0 = 5, 1 = 10, 2 = 15  
  712  06:C7B4  0A          ASL A
  713  06:C7B5  AA          TAX
  714  06:C7B6  BD 98 C9    LDA MouseMinimums, x
  715  06:C7B9  8D 02 00    STA temp3
  716  06:C7BC  BD 9E C9    LDA MouseMaximums, x
  717  06:C7BF  8D 03 00    STA temp4
  718  06:C7C2  8A          TXA
  719  06:C7C3  48          PHA
  720                       
  721  06:C7C4  A2 03       LDX #SPRITE_XPOS
  722  06:C7C6  BD 00 02    LDA SPRITE_DATA, x
  723  06:C7C9  18          CLC
  724  06:C7CA  6D 00 00    ADC temp1
  725                       ;;check against borders
  726  06:C7CD  CD 02 00    CMP temp3
  727  06:C7D0  F0 08       BEQ .moveVert 
  728  06:C7D2  CD 03 00    CMP temp4
  729  06:C7D5  F0 03       BEQ .moveVert
  730  06:C7D7  9D 00 02    STA SPRITE_DATA, x
  731                     
  732  06:C7DA            .moveVert:
  733                     
  734  06:C7DA  68          PLA
  735  06:C7DB  AA          TAX
  736  06:C7DC  E8          INX
  737  06:C7DD  BD 98 C9    LDA MouseMinimums, x
  738  06:C7E0  8D 02 00    STA temp3
  739  06:C7E3  BD 9E C9    LDA MouseMaximums, x
  740  06:C7E6  8D 03 00    STA temp4
  741                     
  742  06:C7E9  A2 00       LDX #SPRITE_YPOS
  743  06:C7EB  BD 00 02    LDA SPRITE_DATA, x
  744  06:C7EE  18          CLC
  745  06:C7EF  6D 01 00    ADC temp2
  746                       ;;check against borders
  747  06:C7F2  CD 02 00    CMP temp3
  748  06:C7F5  F0 08       BEQ .leave
  749  06:C7F7  CD 03 00    CMP temp4
  750  06:C7FA  F0 03       BEQ .leave
  751  06:C7FC  9D 00 02    STA SPRITE_DATA, x
  752                     
  753  06:C7FF            .leave:
  754  06:C7FF  60          RTS
  755                             
  756  06:C800            UpdateMouseScreenPos:
  757                     
  758  06:C800  A2 00       LDX #$00
  759  06:C802  BD 00 02    LDA SPRITE_DATA, x;ypos       ;yyyy y...
  760  06:C805  4A          LSR A                                         ;0yyy yy..
  761  06:C806  4A          LSR A                                         ;00yy yyy.
  762  06:C807  4A          LSR A                                         ;000y yyyy
  763  06:C808  8D 00 00    STA temp1
  764  06:C80B  8D C5 00    STA mouse_index+1
  765  06:C80E  E8          INX
  766  06:C80F  E8          INX
  767  06:C810  E8          INX   
  768  06:C811  BD 00 02    LDA SPRITE_DATA, x ;xpos  ;  xxxx x...
  769  06:C814  29 F8       AND #$F8                       ;              ;  xxxx x000
  770  06:C816  8D 01 00    STA temp2                      ;      ;  
  771  06:C819  4E 00 00    LSR temp1                      ;              ;  0000 yyyy y
  772  06:C81C  6E 01 00    ROR temp2                      ;      ;  yxxx xx00
  773  06:C81F  4E 00 00    LSR temp1                      ;              ;  0000 0yyy y
  774  06:C822  6E 01 00    ROR temp2                      ;              ;  yyxx xxx0
  775  06:C825  4E 00 00    LSR temp1              ;              ;  0000 00yy y
  776  06:C828  6E 01 00    ROR temp2                      ;              ;  yyyx xxxx
  777  06:C82B  AD 01 00    LDA temp2
  778  06:C82E  29 1F       AND #$1F
  779  06:C830  8D C4 00    STA mouse_index
  780                       
  781  06:C833  AD C4 00    LDA mouse_index
  782  06:C836  38          SEC 
  783  06:C837  E9 0E       SBC #$0E
  784  06:C839  8D C4 00    STA mouse_index
  785                       
  786  06:C83C  AD C5 00    LDA mouse_index+1
  787  06:C83F  38          SEC 
  788  06:C840  E9 0C       SBC #$0C
  789  06:C842  8D C5 00    STA mouse_index+1
  790                       
  791                       ;subtract starting offsets for mouse index
  792                       
  793  06:C845  AD 00 00    LDA temp1                      ;              ;  0000 00yy
  794  06:C848  09 60       ORA #$60                       ;              ;  0110 00yy
  795                       
  796  06:C84A  8D C3 00    STA mouse_location+1
  797  06:C84D  AD 01 00    LDA temp2
  798  06:C850  8D C2 00    STA mouse_location
  799                       
  800  06:C853            .leave:
  801  06:C853  60          RTS
  802                       
  803  06:C854            UpdateTimeDisplay:
  804                     
  805  06:C854  AD 0B 00    LDA scaledTime
  806  06:C857  C9 3C       CMP #60
  807  06:C859  D0 77       BNE .leave
  808                       
  809  06:C85B  A9 00       LDA #$00
  810  06:C85D  8D 0B 00    STA scaledTime
  811                       
  812  06:C860  EE CA 00    INC GameTime
  813  06:C863  AD CA 00    LDA GameTime
  814  06:C866  C9 0A       CMP #10
  815  06:C868  D0 32       BNE .printTime
  816                       
  817  06:C86A  A9 00       LDA #$00
  818  06:C86C  8D CA 00    STA GameTime
  819  06:C86F  EE CB 00    INC GameTime+1
  820  06:C872  AD CB 00    LDA GameTime+1
  821  06:C875  C9 06       CMP #6
  822  06:C877  D0 23       BNE .printTime
  823                       
  824  06:C879  A9 00       LDA #$00
  825  06:C87B  8D CB 00    STA GameTime+1
  826  06:C87E  EE CC 00    INC GameTime+2
  827  06:C881  AD CC 00    LDA GameTime+2
  828  06:C884  C9 0A       CMP #10
  829  06:C886  D0 14       BNE .printTime
  830                       
  831  06:C888  A9 00       LDA #$00
  832  06:C88A  8D CC 00    STA GameTime+2
  833  06:C88D  EE CD 00    INC GameTime+3
  834  06:C890  AD CD 00    LDA GameTime+3
  835  06:C893  C9 0A       CMP #10
  836  06:C895  D0 05       BNE .printTime
  837                       
  838  06:C897  A9 00       LDA #$00
  839  06:C899  8D CD 00    STA GameTime+3
  840                       
  841  06:C89C            .printTime:
  842                     
  843                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C89C  A9 01       LDA #$01
       06:C89E  8D 23 00    STA PPU_PendingWrite
       06:C8A1  A9 20       LDA #HIGH(TIMER_LOC)
       06:C8A3  20 51 CC    JSR WriteToPPUString
       06:C8A6  A9 E5       LDA #LOW(TIMER_LOC)
       06:C8A8  20 51 CC    JSR WriteToPPUString
       06:C8AB  A9 00       LDA #DRAW_HORIZONTAL
       06:C8AD  20 51 CC    JSR WriteToPPUString
       06:C8B0  A9 05       LDA #$05 
       06:C8B2  20 51 CC    JSR WriteToPPUString
                            
  844  06:C8B5  AD CD 00    LDA GameTime+3
  845  06:C8B8  20 51 CC    JSR WriteToPPUString
  846  06:C8BB  AD CC 00    LDA GameTime+2
  847  06:C8BE  20 51 CC    JSR WriteToPPUString
  848  06:C8C1  A9 61       LDA #$61
  849  06:C8C3  20 51 CC    JSR WriteToPPUString
  850  06:C8C6  AD CB 00    LDA GameTime+1
  851  06:C8C9  20 51 CC    JSR WriteToPPUString
  852  06:C8CC  AD CA 00    LDA GameTime
  853  06:C8CF  20 51 CC    JSR WriteToPPUString
  854                       
  855                       
  856                       
  857  06:C8D2            .leave: 
  858  06:C8D2  60          RTS  
  859                       
  860  06:C8D3            UpdatePause:
  861                     
  862                     ;;load screen
  863                     ;;update selection
  864                     ;; close - remove screen, then upause
  865                     ;; quit - jump to fade out
  866  06:C8D3  AD C7 00    LDA pauseState
  867  06:C8D6  20 CF CA    JSR Dynamic_Jump
  868                     
  869  06:C8D9            UpdatePauseJumpTable:  
  870                     
  871  06:C8D9  97 C9       .word ExitPause                       ;fail safe
  872  06:C8DB  E1 C8       .word UpdateLoadPauseScreen
  873  06:C8DD  FD C8       .word UpdatePauseScreen
  874  06:C8DF  7B C9       .word UpdateUnloadPauseScreen
  875                       
  876  06:C8E1            UpdateLoadPauseScreen:
  877                       
  878  06:C8E1  20 E5 CE    JSR LoadPauseScreen
  879  06:C8E4  AD BC 00    LDA clueOffsetShift
  880  06:C8E7  C9 06       CMP #$06
  881  06:C8E9  D0 11       BNE .leave
  882                       
  883  06:C8EB            .changePauseState:
  884                     
  885  06:C8EB  A9 60       LDA #PAUSE_YES
  886  06:C8ED  A2 01       LDX #$01
  887  06:C8EF  20 1F C2    JSR SetSpriteXPosition  
  888  06:C8F2  A9 01       LDA #$01
  889  06:C8F4  A2 01       LDX #$01
  890  06:C8F6  20 2A C2    JSR SetSpriteImage
  891                       
  892  06:C8F9  EE C7 00    INC pauseState
  893  06:C8FC            .leave:
  894  06:C8FC  60          RTS
  895                       
  896  06:C8FD            UpdatePauseScreen:
  897                       
  898  06:C8FD  AD 1C 00    LDA gamepadPressed
  899  06:C900  C9 08       CMP #GAMEPAD_START
  900  06:C902  F0 29       BEQ .unPause
  901  06:C904  C9 02       CMP #GAMEPAD_B
  902  06:C906  F0 25       BEQ .unPause
  903  06:C908  C9 01       CMP #GAMEPAD_A
  904  06:C90A  F0 4A       BEQ .checkA
  905                       
  906                       ;;update pointer
  907                       
  908  06:C90C  AD 1C 00    LDA gamepadPressed
  909  06:C90F  29 C0       AND #GAMEPAD_HORI
  910                       ;;binary system- left and right don't really matter, we'll just toggle the position
  911  06:C911  F0 67       BEQ .leave
  912                       
  913  06:C913  A9 03       LDA #SPRITE_XPOS
  914  06:C915  A2 01       LDX #$01
  915  06:C917  20 41 C2    JSR GetSpriteData
  916                       
  917  06:C91A  C9 60       CMP #PAUSE_YES
  918  06:C91C  F0 05       BEQ .loadNo
  919                       
  920  06:C91E  A9 60       LDA #PAUSE_YES
  921  06:C920  4C 25 C9    JMP .setPosition
  922                       
  923  06:C923            .loadNo:
  924  06:C923  A9 88       LDA #PAUSE_NO
  925                     
  926  06:C925            .setPosition
  927                       
  928  06:C925  A2 01       LDX #$01
  929  06:C927  20 1F C2    JSR SetSpriteXPosition  
  930                     
  931  06:C92A  4C 7A C9    JMP .leave 
  932                     
  933  06:C92D            .unPause:
  934                     
  935  06:C92D  A9 00       LDA #$00
  936  06:C92F  8D BB 00    STA clueLineIndex
  937  06:C932  8D BC 00    STA clueOffsetShift
  938                       
  939  06:C935  A9 FF       LDA #$FF
  940  06:C937  A2 01       LDX #$01
  941  06:C939  20 2A C2    JSR SetSpriteImage
  942                     
  943                       MACROGetLabelPointer $610A, pause_address
                          
       06:C93C  A9 61             LDA #HIGH($610A)
       06:C93E  A2 0A             LDX #LOW($610A)
                                  
       06:C940  8E B0 00          STX pause_address
       06:C943  8D B1 00          STA pause_address+1
                                  
  944                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:C946  A9 21             LDA #HIGH($210A)
       06:C948  A2 0A             LDX #LOW($210A)
                                  
       06:C94A  8E B4 00          STX pause_draw_address
       06:C94D  8D B5 00          STA pause_draw_address+1
                                  
  945                         
  946  06:C950  EE C7 00    INC pauseState
  947  06:C953  4C 7A C9    JMP .leave
  948                      
  949  06:C956            .checkA:
  950                       
  951  06:C956  A9 03       LDA #SPRITE_XPOS
  952  06:C958  A2 01       LDX #$01
  953  06:C95A  20 41 C2    JSR GetSpriteData
  954                       
  955  06:C95D  C9 88       CMP #PAUSE_NO
  956  06:C95F  F0 CC       BEQ .unPause
  957                        
  958  06:C961            .quit:
  959                     
  960  06:C961  A9 01       LDA #$01
  961  06:C963  8D 00 70    STA hasContinue
  962  06:C966  A9 00       LDA #$00
  963  06:C968  8D C7 00    STA pauseState
  964  06:C96B  A9 00       LDA #$00
  965  06:C96D  8D 0A 00    STA time
  966  06:C970  A9 00       LDA #TITLE_IDX
  967  06:C972  8D CE 00    STA targetGameMode
  968  06:C975  A9 08       LDA #$08
  969  06:C977  8D 0F 00    STA mode_state
  970                       
  971  06:C97A            .leave:
  972  06:C97A  60          RTS
  973                       
  974  06:C97B            UpdateUnloadPauseScreen:
  975                       
  976  06:C97B  20 2C CF    JSR ClearPauseScreen
  977  06:C97E  AD BC 00    LDA clueOffsetShift
  978  06:C981  C9 06       CMP #$06
  979  06:C983  D0 11       BNE .leave
  980  06:C985            .changePauseState:
  981                     
  982  06:C985  A9 02       LDA #$02
  983  06:C987  A2 00       LDX #$00
  984  06:C989  20 2A C2    JSR SetSpriteImage
  985                       
  986  06:C98C  A9 03       LDA #GAMEPAD_AB
  987  06:C98E  8D C8 00    STA pauseInputLock 
  988                       
  989  06:C991  A9 00       LDA #$00
  990  06:C993  8D C7 00    STA pauseState
  991  06:C996            .leave:
  992  06:C996  60          RTS
  993                       
  994  06:C997            ExitPause:
  995  06:C997  60          RTS
  996                       
  997                     ;hori, vert
  998  06:C998            MouseMinimums:
  999  06:C998  6A 5A       .db $6A, $5A
 1000  06:C99A  6A 5A       .db $6A, $5A
 1001  06:C99C  6A 5A       .db $6A, $5A
 1002  06:C99E            MouseMaximums:
 1003  06:C99E  9A 8A       .db $9A, $8A
 1004  06:C9A0  C2 B2       .db $C2, $B2
 1005  06:C9A2  EA DA       .db $EA, $DA
 1006                       
 1007  06:C9A4            PuzzleScrollHori:
 1008  06:C9A4  01 04 06    .db $01, $04, $06
 1009  06:C9A7            PuzzleScrollVert:
 1010  06:C9A7  01 03 05    .db $01, $03, $05
 1011                       
 1012  06:C9AA            PuzzleHeaderSkips:
 1013                     
 1014  06:C9AA  09 18 22    .db $09, $18, $22
 1015                     
 1016                       
 1017           0060      PAUSE_YES = $60
 1018           0088      PAUSE_NO = $88
 1019                     
 1020                       
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGameOver.asm
   85                       .include "Routines/Game_States/UpdateGameOver.asm"
    1  06:C9AD            UpdateGameOver:
    2                     
    3  06:C9AD  AD 10 00    LDA NMI_locks
    4  06:C9B0  F0 01       BEQ .unlocked
    5                       
    6  06:C9B2  60          RTS
    7                       
    8  06:C9B3            .unlocked:
    9                     
   10  06:C9B3  20 B7 C9    JSR DoUpdateGameOver 
   11  06:C9B6  60          RTS
   12                       
   13  06:C9B7            DoUpdateGameOver:
   14                     
   15  06:C9B7  AD 0F 00    LDA mode_state
   16  06:C9BA  20 CF CA    JSR Dynamic_Jump
   17                         
   18  06:C9BD            UpdateGameOverJumpTable:
   19                     
   20  06:C9BD  C5 C9       .word UpdateGameOverInit
   21  06:C9BF  CC C9       .word UpdateGameOverWaitInput
   22  06:C9C1  DA C9       .word UpdateGameOverFadeOut
   23  06:C9C3  EF C9       .word UpdateGameOverExit
   24                       
   25  06:C9C5            UpdateGameOverInit:
   26                     
   27  06:C9C5  20 99 CC    JSR TurnOnSprites
   28  06:C9C8  EE 0F 00    INC mode_state
   29  06:C9CB  60          RTS
   30                     
   31  06:C9CC            UpdateGameOverWaitInput:
   32                     
   33  06:C9CC  AD 1C 00    LDA gamepadPressed
   34  06:C9CF  F0 08       BEQ .leave
   35                     
   36  06:C9D1            .changeModeState:
   37                     
   38  06:C9D1  A9 00       LDA #$00
   39  06:C9D3  8D 0A 00    STA time
   40  06:C9D6  EE 0F 00    INC mode_state
   41  06:C9D9            .leave:
   42  06:C9D9  60          RTS
   43                     
   44  06:C9DA            UpdateGameOverFadeOut:
   45                     
   46  06:C9DA  AD 0A 00    LDA time
   47  06:C9DD  29 07       AND #$07
   48  06:C9DF  D0 0D       BNE .leave
   49                       ;;every 8 frames, decrement the palettes
   50  06:C9E1  20 CE CC    JSR FadeOutPalettes
   51  06:C9E4  B0 08       BCS .leave
   52                     
   53  06:C9E6            .changeModeState:
   54  06:C9E6  A9 00       LDA #$00
   55  06:C9E8  8D 0A 00    STA time
   56  06:C9EB  EE 0F 00    INC mode_state
   57  06:C9EE            .leave:
   58  06:C9EE  60          RTS
   59                     
   60  06:C9EF            UpdateGameOverExit:
   61                     
   62  06:C9EF  AD 0A 00    LDA time
   63  06:C9F2  29 0F       AND #$0F
   64  06:C9F4  D0 07       BNE .leave
   65                     
   66  06:C9F6  A9 00       LDA #TITLE_IDX
   67  06:C9F8  A2 00       LDX #$00
   68  06:C9FA  20 FE C9    JSR ChangeGameMode
   69                       
   70  06:C9FD            .leave:
   71  06:C9FD  60          RTS
#[1]   Picross.asm
   86                       
   87                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   88                     ;;     Routines             ;;
   89                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   90                     
   91                     
#[2]   Routines/Common/GameModeRoutines.asm
   92                       .include "Routines/Common/GameModeRoutines.asm"
    1  06:C9FE            ChangeGameMode:
    2                       ;A - game mode index
    3                       ;X - high nibble: palette start flag, low nibble: screen index
    4  06:C9FE  8D 0E 00    STA game_mode
    5  06:CA01  8E 0D 00    STX mode_loadFlags
    6  06:CA04  A9 00       LDA #$00
    7  06:CA06  8D 0F 00    STA mode_state
    8  06:CA09  20 65 CC    JSR ClearPPUString
    9  06:CA0C  20 10 CA    JSR LoadGameModeScreen
   10  06:CA0F  60          RTS
   11                       
   12  06:CA10            LoadGameModeScreen:
   13                     
   14                       MACROSetFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:CA10  AD 10 00    LDA NMI_locks
       06:CA13  09 01       ORA #BGLOAD_NMI_LOCK
       06:CA15  8D 10 00    STA NMI_locks
                                  
   15                       
   16  06:CA18  A9 00       LDA #$00
   17  06:CA1A  8D 01 20    STA PPU_MASK    ; disable rendering- reenable on NMI when not updating
   18                     
   19  06:CA1D  20 4B CA    JSR LoadGameModeBackground
   20  06:CA20  20 AC CA    JSR LoadGameModeSprites
   21                     
   22                       MACROClearFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:CA23  A9 01       LDA #BGLOAD_NMI_LOCK
       06:CA25  49 FF       EOR #$FF
       06:CA27  2D 10 00    AND NMI_locks  
       06:CA2A  8D 10 00    STA NMI_locks
                          
   23                     
   24                       
   25                       ;; load the CHR bank for this mode
   26  06:CA2D  20 38 CD    JSR ResetMapper
   27                       ;;remember, we're loading the SECOND set in each chr bank
   28                       ;;so we'll take the index from the game mode chr table and add one mult 2
   29  06:CA30  AE 0E 00    LDX game_mode
   30  06:CA33  BD C9 CA    LDA gameModeInitCHRROMB, x
   31  06:CA36  0A          ASL A
   32  06:CA37  18          CLC 
   33  06:CA38  69 01       ADC #$01
   34  06:CA3A  20 5D CD    JSR LoadCHRBankB
   35                       
   36  06:CA3D  20 38 CD    JSR ResetMapper
   37  06:CA40  AE 0E 00    LDX game_mode
   38  06:CA43  BD CC CA    LDA gameModeInitCHRROMA, x
   39  06:CA46  0A          ASL A
   40  06:CA47  20 52 CD    JSR LoadCHRBankA
   41                       
   42                       
   43                       
   44  06:CA4A  60          RTS
   45                       
   46  06:CA4B            LoadGameModeBackground:
   47                             
   48                       MACROGetDoubleIndex game_mode
                          
       06:CA4B  AD 0E 00          LDA game_mode
       06:CA4E  0A                ASL A
       06:CA4F  A8                TAY
                                  
   49  06:CA50  8C 00 00    STY temp1
   50                             
   51                       MACROGetLabelPointer Palettes, table_address
                          
       06:CA53  A9 E0             LDA #HIGH(Palettes)
       06:CA55  A2 00             LDX #LOW(Palettes)
                                  
       06:CA57  8E 16 00          STX table_address
       06:CA5A  8D 17 00          STA table_address+1
                                  
   52  06:CA5D  20 F5 CA    JSR GetTableAtIndex
   53                     
   54  06:CA60  20 02 CB    JSR LoadFullPaletteFromTable
   55                             
   56  06:CA63  AC 00 00    LDY temp1
   57  06:CA66  AD 0D 00    LDA mode_loadFlags
   58  06:CA69  29 40       AND #%01000000 ; copy from saved screen
   59  06:CA6B  F0 0D       BEQ .dontUseSaveCopy
   60                       MACROGetLabelPointer SaveScreen_Copy, table_address
                          
       06:CA6D  A9 68             LDA #HIGH(SaveScreen_Copy)
       06:CA6F  A2 00             LDX #LOW(SaveScreen_Copy)
                                  
       06:CA71  8E 16 00          STX table_address
       06:CA74  8D 17 00          STA table_address+1
                                  
   61  06:CA77  4C 91 CA    JMP .loadTable
   62                       
   63  06:CA7A            .dontUseSaveCopy:
   64                       MACROGetLabelPointer NameTables, table_address
                          
       06:CA7A  A9 E0             LDA #HIGH(NameTables)
       06:CA7C  A2 06             LDX #LOW(NameTables)
                                  
       06:CA7E  8E 16 00          STX table_address
       06:CA81  8D 17 00          STA table_address+1
                                  
   65  06:CA84  20 F5 CA    JSR GetTableAtIndex
   66  06:CA87  AD 0D 00    LDA mode_loadFlags
   67  06:CA8A  29 0F       AND #$0F
   68  06:CA8C  0A          ASL A
   69  06:CA8D  A8          TAY
   70  06:CA8E  20 F5 CA    JSR GetTableAtIndex
   71                             
   72  06:CA91            .loadTable:
   73  06:CA91  A9 00       LDA #$00
   74  06:CA93  20 31 CB    JSR LoadFullBackgroundFromTable
   75                       
   76  06:CA96  AC 00 00    LDY temp1
   77                       MACROGetLabelPointer NameTables2, table_address
                          
       06:CA99  A9 E0             LDA #HIGH(NameTables2)
       06:CA9B  A2 0C             LDX #LOW(NameTables2)
                                  
       06:CA9D  8E 16 00          STX table_address
       06:CAA0  8D 17 00          STA table_address+1
                                  
   78  06:CAA3  20 F5 CA    JSR GetTableAtIndex
   79                       
   80  06:CAA6  A9 01       LDA #$01
   81  06:CAA8  20 31 CB    JSR LoadFullBackgroundFromTable
   82                       
   83  06:CAAB  60          RTS
   84                       
   85  06:CAAC            LoadGameModeSprites:
   86                     
   87                       MACROGetDoubleIndex game_mode  
                          
       06:CAAC  AD 0E 00          LDA game_mode
       06:CAAF  0A                ASL A
       06:CAB0  A8                TAY
                                  
   88                       MACROGetLabelPointer Sprites, table_address
                          
       06:CAB1  A9 FC             LDA #HIGH(Sprites)
       06:CAB3  A2 CA             LDX #LOW(Sprites)
                                  
       06:CAB5  8E 16 00          STX table_address
       06:CAB8  8D 17 00          STA table_address+1
                                  
   89  06:CABB  20 F5 CA    JSR GetTableAtIndex
   90  06:CABE  A0 00       LDY #$00
   91  06:CAC0  B1 16       LDA [table_address],y
   92  06:CAC2  EE 16 00    INC table_address
   93  06:CAC5  20 3A CC    JSR LoadSprites_impl
   94                       
   95  06:CAC8  60          RTS
   96                       
   97  06:CAC9            gameModeInitCHRROMB:
   98  06:CAC9  00 02 02          .db $00, $02, $02
   99  06:CACC            gameModeInitCHRROMA:
  100  06:CACC  00 02 02          .db $00, $02, $02
  101                             
#[1]   Picross.asm
#[2]   Routines/Utils/PointerUtils.asm
   93                       .include "Routines/Utils/PointerUtils.asm"
    1  06:CACF            Dynamic_Jump:
    2                     
    3  06:CACF  0A          ASL A                                 ;; double the index passed into A
    4  06:CAD0  8E 08 00    STX tempx
    5  06:CAD3  8C 09 00    STY tempy
    6  06:CAD6  A8          TAY
    7  06:CAD7  C8          INY  
    8  06:CAD8  68          PLA
    9  06:CAD9  8D 18 00    STA jump_address
   10  06:CADC  68          PLA 
   11  06:CADD  8D 19 00    STA jump_address+1            
   12  06:CAE0  B1 18       LDA [jump_address], y
   13  06:CAE2  AA          TAX
   14  06:CAE3  C8          INY
   15  06:CAE4  B1 18       LDA [jump_address], y
   16  06:CAE6  8E 18 00    STX jump_address
   17  06:CAE9  8D 19 00    STA jump_address+1
   18  06:CAEC  AE 08 00    LDX tempx
   19  06:CAEF  AC 09 00    LDY tempy
   20  06:CAF2  6C 18 00    JMP [jump_address]
   21                       
   22  06:CAF5            GetTableAtIndex:
   23                     
   24  06:CAF5  B1 16             LDA [table_address], y
   25  06:CAF7  AA                TAX
   26  06:CAF8  C8                INY
   27  06:CAF9  B1 16             LDA [table_address], y
   28                             
   29  06:CAFB            SetTableAddress:
   30                             
   31                             ;;A is hi, X is lo
   32  06:CAFB  8E 16 00          STX table_address
   33  06:CAFE  8D 17 00          STA table_address+1
   34  06:CB01  60                RTS
#[1]   Picross.asm
#[2]   Routines/Utils/PPUUtils.asm
   94                       .include "Routines/Utils/PPUUtils.asm"
    1  06:CB02            LoadFullPaletteFromTable:
    2                     
    3                       MACROSetPPUAddress $3F00
                          
       06:CB02  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:CB05  A9 3F       LDA #HIGH($3F00)
       06:CB07  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:CB0A  A9 00       LDA #LOW($3F00)
       06:CB0C  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
    4  06:CB0F  A0 00       LDY #$00              ; start out at 0
    5  06:CB11  A2 00       LDX #$00
    6  06:CB13            .loop:
    7  06:CB13  B1 16       LDA [table_address], y        ; load data from address (palette + the value in x)
    8  06:CB15  9D 00 6C    STA Palette_Copy, x
    9  06:CB18  48          PHA 
   10  06:CB19  AD 0D 00    LDA mode_loadFlags
   11  06:CB1C  29 10       AND #$10
   12  06:CB1E  D0 04       BNE .setBlack
   13  06:CB20  68          PLA 
   14  06:CB21  4C 27 CB    JMP .setPPUData
   15  06:CB24            .setBlack:
   16                     
   17  06:CB24  68          PLA 
   18  06:CB25  A9 0F       LDA #$0F
   19                       
   20  06:CB27            .setPPUData:
   21  06:CB27  8D 07 20    STA PPU_DATA            ; write to PPU
   22  06:CB2A  C8          INY                   ; X = X + 1
   23  06:CB2B  E8          INX
   24  06:CB2C  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   25  06:CB2E  D0 E3       BNE .loop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   26  06:CB30  60          RTS
   27                     
   28  06:CB31            LoadFullBackgroundFromTable:
   29                     
   30                         ;;use A as an index for which nametable to write to
   31  06:CB31  20 85 CC          JSR SetNametableFromIndex
   32  06:CB34  8A                TXA
   33  06:CB35  4A                LSR A
   34  06:CB36  29 01             AND #$01
   35  06:CB38  D0 17             BNE .copyScreenB
   36                             MACROGetLabelPointer Screen_Copy, pointer_address
                          
       06:CB3A  A9 60             LDA #HIGH(Screen_Copy)
       06:CB3C  A2 00             LDX #LOW(Screen_Copy)
                                  
       06:CB3E  8E 12 00          STX pointer_address
       06:CB41  8D 13 00          STA pointer_address+1
                                  
   37                             MACROGetLabelPointer SaveScreen_Copy, pointerB_address
                          
       06:CB44  A9 68             LDA #HIGH(SaveScreen_Copy)
       06:CB46  A2 00             LDX #LOW(SaveScreen_Copy)
                                  
       06:CB48  8E 14 00          STX pointerB_address
       06:CB4B  8D 15 00          STA pointerB_address+1
                                  
   38  06:CB4E  4C 64 CB          JMP .setCounters
   39                             
   40  06:CB51            .copyScreenB:
   41                             MACROGetLabelPointer ScreenB_Copy, pointer_address
                          
       06:CB51  A9 64             LDA #HIGH(ScreenB_Copy)
       06:CB53  A2 00             LDX #LOW(ScreenB_Copy)
                                  
       06:CB55  8E 12 00          STX pointer_address
       06:CB58  8D 13 00          STA pointer_address+1
                                  
   42  06:CB5B  AD 0D 00          LDA mode_loadFlags
   43  06:CB5E  2D 00 00          AND $%11011111
   44  06:CB61  8D 0D 00          STA mode_loadFlags ;kill the copy flag, just in case
   45                             
   46                             ;;set pointer
   47                             ;; set counters
   48  06:CB64            .setCounters:
   49  06:CB64  A0 00             LDY #$00
   50  06:CB66  A2 00             LDX #$00
   51                             
   52                             ;;start loop
   53                     
   54  06:CB68            .outerloop:
   55                     
   56  06:CB68            .innerloop:
   57                     
   58  06:CB68  B1 16             LDA [table_address], y
   59  06:CB6A  8D 07 20          STA PPU_DATA
   60  06:CB6D  91 12             STA [pointer_address],y
   61  06:CB6F  AD 0D 00      LDA mode_loadFlags
   62  06:CB72  29 20         AND #%00100000      ;check copy flag
   63  06:CB74  F0 04             BEQ .skipSaveCopy
   64  06:CB76  B1 16         LDA [table_address], y
   65  06:CB78  91 14             STA [pointerB_address],y
   66                     
   67  06:CB7A            .skipSaveCopy:
   68  06:CB7A  C8                INY
   69  06:CB7B  C0 00             CPY #$00
   70  06:CB7D  D0 E9             BNE .innerloop
   71                     
   72  06:CB7F  EE 13 00          INC pointer_address+1
   73  06:CB82  EE 17 00          INC table_address+1
   74  06:CB85  EE 15 00          INC pointerB_address+1
   75                             
   76  06:CB88  E8                INX
   77  06:CB89  E0 04             CPX #$04
   78  06:CB8B  D0 DB             BNE .outerloop
   79  06:CB8D  60                RTS
   80                             
   81                     
   82           0000      DATA_LEN = temp1
   83           0001      WRITE_SETTINGS = temp2
   84                             
   85  06:CB8E            ProcessPPUString:
   86                     
   87  06:CB8E  AD 23 00          LDA PPU_PendingWrite
   88  06:CB91  D0 01             BNE .continueProcess
   89  06:CB93  60                RTS
   90                             
   91  06:CB94            .continueProcess:
   92  06:CB94  A0 00             LDY #$00
   93                             
   94  06:CB96  A9 25             LDA #LOW(PPU_String)
   95  06:CB98  8D 12 00          STA pointer_address
   96  06:CB9B  A9 00             LDA #HIGH(PPU_String)
   97  06:CB9D  8D 13 00          STA pointer_address + 1
   98                     
   99  06:CBA0            .outerloop:
  100  06:CBA0  AD 02 20          LDA PPU_STATUS
  101  06:CBA3  B1 12             LDA [pointer_address], y
  102  06:CBA5  F0 79             BEQ .finish
  103  06:CBA7  8D 06 20          STA PPU_ADDR
  104  06:CBAA  C8                INY
  105  06:CBAB  B1 12             LDA [pointer_address], y
  106  06:CBAD  8D 06 20          STA PPU_ADDR
  107  06:CBB0  C8            INY 
  108  06:CBB1  B1 12             LDA [pointer_address], y
  109  06:CBB3  8D 01 00          STA WRITE_SETTINGS
  110  06:CBB6  C8                INY
  111                             
  112  06:CBB7  AD 00 20          LDA PPU_CTRL
  113  06:CBBA  29 FB             AND #$FB
  114  06:CBBC  8D 00 20          STA PPU_CTRL
  115                             
  116  06:CBBF  AD 01 00          LDA WRITE_SETTINGS      ;check horizontal or vertical write
  117  06:CBC2  29 80             AND #%10000000
  118  06:CBC4  F0 06             BEQ .checkRepeat
  119  06:CBC6  0D 00 20          ORA PPU_CTRL 
  120  06:CBC9  8D 00 20          STA PPU_CTRL 
  121                             
  122                             
  123  06:CBCC            .checkRepeat:
  124  06:CBCC  AD 01 00    LDA WRITE_SETTINGS
  125  06:CBCF  29 40       AND #%01000000
  126  06:CBD1  F0 19       BEQ .checkTable
  127                       
  128  06:CBD3  AD 01 00    LDA WRITE_SETTINGS
  129  06:CBD6  29 3F       AND #$3F
  130  06:CBD8  8D 00 00    STA DATA_LEN
  131                       ;;the usual data length byte is now the repeatable byte
  132  06:CBDB  A2 00       LDX #$00
  133                       
  134  06:CBDD            .repeatLoop:
  135  06:CBDD  B1 12       LDA [pointer_address], y
  136  06:CBDF  8D 07 20    STA PPU_DATA
  137  06:CBE2  E8          INX 
  138  06:CBE3  EC 00 00    CPX DATA_LEN
  139  06:CBE6  D0 F5       BNE .repeatLoop
  140  06:CBE8  C8          INY
  141  06:CBE9  4C A0 CB    JMP .outerloop
  142                             
  143  06:CBEC            .checkTable:
  144  06:CBEC  AD 01 00          LDA WRITE_SETTINGS
  145  06:CBEF  29 20             AND #%00100000
  146  06:CBF1  F0 16             BEQ .rawData
  147                             
  148  06:CBF3  B1 12             LDA [pointer_address], y
  149  06:CBF5  8D 16 00          STA table_address
  150  06:CBF8  C8                INY 
  151  06:CBF9  B1 12             LDA [pointer_address], y
  152  06:CBFB  8D 17 00          STA table_address + 1
  153  06:CBFE  C8                INY
  154  06:CBFF  98                TYA 
  155  06:CC00  48                PHA
  156  06:CC01  20 24 CC          JSR WriteToPPUFromTable
  157  06:CC04  68                PLA
  158  06:CC05  A8                TAY
  159  06:CC06  4C A0 CB          JMP .outerloop
  160                             
  161  06:CC09            .rawData:
  162                     
  163  06:CC09  B1 12             LDA [pointer_address], y
  164  06:CC0B  C8                INY
  165  06:CC0C  8D 00 00          STA DATA_LEN
  166                     
  167  06:CC0F  A2 00             LDX #$00
  168                     
  169  06:CC11            .innerloop:
  170                             
  171  06:CC11  B1 12             LDA [pointer_address], y
  172  06:CC13  8D 07 20          STA PPU_DATA
  173  06:CC16  C8                INY
  174  06:CC17  E8                INX
  175  06:CC18  EC 00 00          CPX DATA_LEN
  176  06:CC1B  D0 F4             BNE .innerloop
  177  06:CC1D  4C A0 CB          JMP .outerloop
  178                             
  179  06:CC20            .finish:
  180  06:CC20  20 65 CC          JSR ClearPPUString
  181  06:CC23            .leave:
  182  06:CC23  60                RTS
  183                             
  184  06:CC24            WriteToPPUFromTable:
  185  06:CC24  A0 00             LDY #$00
  186  06:CC26  B1 16             LDA [table_address], y
  187  06:CC28  C8                INY
  188  06:CC29  8D 00 00          STA DATA_LEN
  189  06:CC2C            .innerloop:
  190  06:CC2C  B1 16             LDA [table_address], y
  191  06:CC2E  8D 07 20          STA PPU_DATA
  192  06:CC31  C8                INY
  193  06:CC32  CC 00 00          CPY DATA_LEN
  194  06:CC35  90 F5             BCC .innerloop ;table should have the size in it, but since we count the byte count, we'll want to wait till we go over it
  195  06:CC37  F0 F3             BEQ .innerloop
  196  06:CC39  60                RTS
  197                       
  198  06:CC3A            LoadSprites_impl:
  199                       ;;A will be the amount of sprites to load
  200  06:CC3A  8D 00 00    STA DATA_LEN
  201  06:CC3D  0E 00 00    ASL DATA_LEN
  202  06:CC40  0E 00 00    ASL DATA_LEN
  203                       
  204  06:CC43  A0 00       LDY #$00              ; start at 0
  205                       
  206  06:CC45            .loop:
  207  06:CC45  B1 16       LDA [table_address], y; load data from address (sprites +  x)
  208  06:CC47  99 00 02    STA SPRITE_DATA, y    ; store into RAM address ($0200 + x)
  209  06:CC4A  C8          INY                   ; X = X + 1
  210  06:CC4B  CC 00 00    CPY DATA_LEN             ; Compare X to hex $10, decimal 16
  211  06:CC4E  D0 F5       BNE .loop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
  212                                             ; if compare was equal to 16, keep going down   
  213  06:CC50  60          RTS
  214                     
  215                     
  216  06:CC51            WriteToPPUString:
  217                     
  218  06:CC51  AE 24 00          LDX PPU_StringIdx
  219  06:CC54  E0 4F             CPX #PPU_STRINGMAX
  220  06:CC56  F0 0C             BEQ .finish
  221                             
  222  06:CC58  9D 25 00          STA PPU_String, x
  223  06:CC5B  EE 24 00          INC PPU_StringIdx
  224  06:CC5E  E8                INX
  225  06:CC5F  A9 00             LDA #$00
  226  06:CC61  9D 25 00          STA PPU_String, x
  227                                     
  228  06:CC64            .finish:
  229  06:CC64  60                RTS
  230                     
  231  06:CC65            ClearPPUString:
  232                             
  233  06:CC65  A9 00             LDA #$00
  234  06:CC67  8D 24 00          STA PPU_StringIdx
  235  06:CC6A  8D 25 00          STA PPU_String
  236  06:CC6D  8D 23 00          STA PPU_PendingWrite
  237  06:CC70  60                RTS
  238                     
  239  06:CC71            DetectSprite0:
  240  06:CC71            WaitNotSprite0:
  241  06:CC71  AD 02 20    lda PPU_STATUS
  242  06:CC74  29 40       and #SPRITE_0_MASK
  243  06:CC76  D0 F9       bne WaitNotSprite0   ; wait until sprite 0 not hit
  244                     
  245  06:CC78            WaitSprite0:
  246  06:CC78  AD 02 20    lda $2002
  247  06:CC7B  29 40       and #SPRITE_0_MASK
  248  06:CC7D  F0 F9       beq WaitSprite0      ; wait until sprite 0 is hit
  249                     
  250  06:CC7F  A2 05       ldx #$05                              ;do a scanline wait
  251  06:CC81            WaitScanline:
  252  06:CC81  CA          dex
  253  06:CC82  D0 FD       bne WaitScanline
  254  06:CC84  60          RTS
  255                     
  256                     
  257  06:CC85            SetNametableFromIndex:
  258                     
  259  06:CC85  48          PHA
  260  06:CC86  AD 02 20    LDA PPU_STATUS
  261  06:CC89  68          PLA
  262  06:CC8A  0A          ASL A
  263  06:CC8B  AA          TAX
  264  06:CC8C  BD 21 CD    LDA NameTableMemList+1, x
  265  06:CC8F  8D 06 20    STA PPU_ADDR
  266  06:CC92  BD 20 CD    LDA NameTableMemList, x
  267  06:CC95  8D 06 20    STA PPU_ADDR
  268  06:CC98  60          RTS
  269                       
  270  06:CC99            TurnOnSprites:
  271                      
  272  06:CC99  AD 1E 00    LDA PPU_Mask
  273  06:CC9C  09 10       ORA #%00010000
  274  06:CC9E  8D 1E 00    STA PPU_Mask
  275  06:CCA1  60          RTS
  276                       
  277  06:CCA2            TurnOffSprites:
  278                       
  279  06:CCA2  AD 1E 00    LDA PPU_Mask
  280  06:CCA5  29 EF       AND #%11101111
  281  06:CCA7  8D 1E 00    STA PPU_Mask
  282  06:CCAA  60          RTS
  283                     
  284  06:CCAB            UpdatePPUControl:
  285                     
  286  06:CCAB  AD 1D 00    LDA PPU_Control
  287  06:CCAE  29 FC       AND #$FC
  288  06:CCB0  0D 22 00    ORA PPU_NT
  289  06:CCB3  8D 00 20    STA PPU_CTRL
  290  06:CCB6  AD 1E 00    LDA PPU_Mask
  291  06:CCB9  8D 01 20    STA PPU_MASK
  292  06:CCBC  60          RTS
  293                       
  294  06:CCBD            InitPPUControl:
  295                       
  296                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
  297                       ; enable sprites, enable background, no clipping on left side
  298  06:CCBD  A9 90       LDA #%10010000
  299  06:CCBF  8D 00 20    STA PPU_CTRL
  300  06:CCC2  8D 1D 00    STA PPU_Control
  301  06:CCC5  A9 1E       LDA #%00011110
  302  06:CCC7  8D 01 20    STA PPU_MASK
  303  06:CCCA  8D 1E 00    STA PPU_Mask
  304  06:CCCD  60          RTS
  305                       
  306  06:CCCE            FadeOutPalettes:
  307                     
  308                     ;;take the current values, and decrement the lower nibbles
  309                     ;;we can access from the palette copy 
  310                     ;;we'll make this fade out one level per call
  311                     ;;once all the palettes are blacked out we'll return true, so we'll keep the carry flag as a return result
  312                     
  313                     ;;go through the palette copy, decrement, make a raw data PPU string and add all the bytes into it
  314                     ;;for any palette color already in the 0x range, change it to 0f to get black
  315                     
  316                       MACROGetLabelPointer Palette_Copy, table_address
                          
       06:CCCE  A9 6C             LDA #HIGH(Palette_Copy)
       06:CCD0  A2 00             LDX #LOW(Palette_Copy)
                                  
       06:CCD2  8E 16 00          STX table_address
       06:CCD5  8D 17 00          STA table_address+1
                                  
  317                     ;;palette copy address is now X accessable
  318                     
  319  06:CCD8  A0 00       LDY #$00
  320                       MACROAddPPUStringEntryRawData #$3F, #$00, #DRAW_HORIZONTAL, #$20  
                          
       06:CCDA  A9 01       LDA #$01
       06:CCDC  8D 23 00    STA PPU_PendingWrite
       06:CCDF  A9 3F       LDA #$3F
       06:CCE1  20 51 CC    JSR WriteToPPUString
       06:CCE4  A9 00       LDA #$00
       06:CCE6  20 51 CC    JSR WriteToPPUString
       06:CCE9  A9 00       LDA #DRAW_HORIZONTAL
       06:CCEB  20 51 CC    JSR WriteToPPUString
       06:CCEE  A9 20       LDA #$20 
       06:CCF0  20 51 CC    JSR WriteToPPUString
                            
  321                     
  322  06:CCF3  A9 00       LDA #$00
  323  06:CCF5  8D 00 00    STA temp1
  324                       
  325  06:CCF8            .loop:
  326                     
  327  06:CCF8  B1 16       LDA [table_address], y
  328  06:CCFA  C9 0F       CMP #$0F
  329  06:CCFC  F0 15       BEQ .addToString
  330  06:CCFE  C9 10       CMP #$10
  331  06:CD00  90 0D       BCC .setBlack
  332                       
  333  06:CD02  A9 80       LDA #$80
  334  06:CD04  8D 00 00    STA temp1
  335                       
  336  06:CD07  B1 16       LDA [table_address], y
  337  06:CD09  38          SEC
  338  06:CD0A  E9 10       SBC #$10
  339  06:CD0C  4C 11 CD    JMP .setColor
  340                     
  341  06:CD0F            .setBlack:
  342                     
  343  06:CD0F  A9 0F       LDA #$0F
  344                     
  345  06:CD11            .setColor:
  346  06:CD11  91 16       STA [table_address], y
  347                     
  348  06:CD13            .addToString:
  349                     
  350  06:CD13  20 51 CC    JSR WriteToPPUString
  351                     
  352  06:CD16            .incY:
  353                       
  354  06:CD16  C8          INY
  355  06:CD17  C0 20       CPY #$20
  356  06:CD19  D0 DD       BNE .loop
  357                     
  358  06:CD1B  0E 00 00    ASL temp1     ;get carry out, if we have one
  359                     
  360  06:CD1E  60          RTS
  361                       
  362  06:CD1F            FadeInPalettes:
  363                     
  364                     ;;need to be able to store off a target palette first
  365                     ;;we can use the palette copy we make during the game mode change as the target
  366  06:CD1F  60          RTS
  367                     
  368  06:CD20            NameTableMemList:
  369  06:CD20  00 20       .word $2000, $2400, $2800, $2C00
       06:CD22  00 24     
       06:CD24  00 28     
       06:CD26  00 2C     
  370  06:CD28            PalettesMemList:
  371  06:CD28  00 3F       .word $3F00, $3F04, $3F08, $3F0C
       06:CD2A  04 3F     
       06:CD2C  08 3F     
       06:CD2E  0C 3F     
  372  06:CD30  10 3F       .word $3F10, $3F14, $3F18, $3F1C  
       06:CD32  14 3F     
       06:CD34  18 3F     
       06:CD36  1C 3F     
  373                       
  374           0024      BLANK_TILE = $24
#[1]   Picross.asm
#[2]   Routines/Utils/MapperUtils.asm
   95                       .include "Routines/Utils/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:CD38            ResetMapper:
    7  06:CD38  EE 38 CD    inc ResetMapper
    8  06:CD3B  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:CD3C            SetMapperControls:
   23                       ;;A = controls
   24  06:CD3C  AA          TAX
   25  06:CD3D  A9 80       LDA #MAPPERCONTROL
   26  06:CD3F  8D A6 00    STA mapper_address+1
   27  06:CD42  8A          TXA
   28  06:CD43  20 68 CD    JSR SendMapperCommand
   29  06:CD46  60          RTS
   30                     
   31  06:CD47            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:CD47  AA                TAX
   35  06:CD48  A9 E0             LDA #PRGBANK
   36  06:CD4A  8D A6 00          STA mapper_address+1
   37  06:CD4D  8A                TXA
   38  06:CD4E  20 68 CD          JSR SendMapperCommand
   39  06:CD51  60                RTS
   40                             
   41  06:CD52            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:CD52  AA                TAX
   44  06:CD53  A9 A0             LDA #CHRBANK1
   45  06:CD55  8D A6 00          STA mapper_address+1
   46  06:CD58  8A                TXA
   47  06:CD59  20 68 CD          JSR SendMapperCommand
   48  06:CD5C  60                RTS
   49                             
   50  06:CD5D            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:CD5D  AA                TAX
   53  06:CD5E  A9 C0             LDA #CHRBANK2
   54  06:CD60  8D A6 00          STA mapper_address+1
   55  06:CD63  8A                TXA
   56  06:CD64  20 68 CD          JSR SendMapperCommand
   57  06:CD67  60                RTS
   58                             
   59  06:CD68            SendMapperCommand:
   60                     
   61  06:CD68  A0 00             LDY #$00
   62                             
   63  06:CD6A  91 A5             STA [mapper_address], y
   64  06:CD6C  4A                LSR A
   65  06:CD6D  91 A5             STA [mapper_address], y
   66  06:CD6F  4A                LSR A
   67  06:CD70  91 A5             STA [mapper_address], y
   68  06:CD72  4A                LSR A 
   69  06:CD73  91 A5             STA [mapper_address], y
   70  06:CD75  4A                LSR A
   71  06:CD76  91 A5             STA [mapper_address], y
   72                             
   73  06:CD78  60                RTS
   74                             
   75  06:CD79            ResetBanks:
   76                     
   77  06:CD79  20 38 CD          JSR ResetMapper
   78  06:CD7C  A9 00             LDA #$00
   79  06:CD7E  20 47 CD          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:CD81  20 38 CD          JSR ResetMapper
   83  06:CD84  A9 00             LDA #$00
   84  06:CD86  20 52 CD          JSR LoadCHRBankA
   85  06:CD89  A9 01             LDA #$01
   86  06:CD8B  20 5D CD          JSR LoadCHRBankB
   87  06:CD8E  60                RTS
   88                             
   89                       
#[1]   Picross.asm
#[2]   Routines/Game_Routines/ScreenEffects.asm
   96                       .include "Routines/Game_Routines/ScreenEffects.asm"
    1  06:CD8F            PopulateClues:
    2                       
    3  06:CD8F  A0 00       LDY #$00
    4  06:CD91  B1 AC       LDA [puzzle_address], y
    5  06:CD93  AA          TAX
    6  06:CD94  BD F2 D0    LDA PuzzleSizes, x
    7  06:CD97  8D 00 00    STA temp1
    8                       
    9  06:CD9A            .getByte:
   10  06:CD9A  AC BA 00    LDY clueTableIndex
   11  06:CD9D  B1 AE       LDA [clues_address], y
   12  06:CD9F  D0 07       BNE .checkNewLine
   13  06:CDA1  EE BA 00    INC clueTableIndex
   14  06:CDA4  A9 00       LDA #$00
   15  06:CDA6  F0 39       BEQ .drawClue
   16                       ;was 0, set up a draw
   17  06:CDA8            .checkNewLine
   18  06:CDA8  C9 FF       CMP #$FF
   19  06:CDAA  D0 18       BNE .getClue
   20                       
   21                       ;;was FF- need to inc stuff
   22  06:CDAC  EE BA 00    INC clueTableIndex
   23  06:CDAF  A9 00       LDA #$00
   24  06:CDB1  8D C1 00    STA clueParity
   25                       
   26  06:CDB4  EE BB 00    INC clueLineIndex
   27  06:CDB7  AD BB 00    LDA clueLineIndex
   28  06:CDBA  CD 00 00    CMP temp1
   29                       ;CMP #$01
   30  06:CDBD  F0 28       BEQ .leave    ;carry will be set
   31                       
   32  06:CDBF  20 70 CE    JSR CreateOffsetFromIndex
   33                      
   34  06:CDC2  D0 D6       BNE .getByte
   35                       
   36  06:CDC4            .getClue:
   37                       ;;clues go from high nibble to low nibble
   38  06:CDC4  48          PHA 
   39  06:CDC5  AD C1 00    LDA clueParity
   40  06:CDC8  D0 0A       BNE .getSecondClue
   41  06:CDCA  EE C1 00    INC clueParity
   42  06:CDCD  68          PLA
   43  06:CDCE  4A          LSR A
   44  06:CDCF  4A          LSR A
   45  06:CDD0  4A          LSR A
   46  06:CDD1  4A          LSR A         ;move clue over to lower nibble
   47  06:CDD2  D0 0D       BNE .drawClue
   48                       
   49  06:CDD4            .getSecondClue:
   50                     
   51  06:CDD4  CE C1 00    DEC clueParity
   52  06:CDD7  EE BA 00    INC clueTableIndex
   53  06:CDDA  68          PLA 
   54  06:CDDB  29 0F       AND #$0F
   55  06:CDDD  D0 02       BNE .drawClue
   56                       ;;if 0, skip
   57  06:CDDF  F0 B9       BEQ .getByte
   58                      
   59  06:CDE1            .drawClue:
   60                       
   61  06:CDE1  09 40       ORA #$40
   62  06:CDE3  20 E8 CD    JSR WriteClueByteToPPUString
   63  06:CDE6  18          CLC
   64                       
   65  06:CDE7            .leave:
   66  06:CDE7  60          RTS
   67                       
   68  06:CDE8            WriteClueByteToPPUString:
   69                     
   70  06:CDE8  8D 00 00    STA temp1 ;store off the tile value
   71                     
   72                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:CDEB  A9 01       LDA #$01
       06:CDED  8D 23 00    STA PPU_PendingWrite
       06:CDF0  AD B9 00    LDA clue_draw_address+1
       06:CDF3  20 51 CC    JSR WriteToPPUString
       06:CDF6  AD B8 00    LDA clue_draw_address
       06:CDF9  20 51 CC    JSR WriteToPPUString
       06:CDFC  A9 00       LDA #DRAW_HORIZONTAL
       06:CDFE  20 51 CC    JSR WriteToPPUString
       06:CE01  A9 01       LDA #$01 
       06:CE03  20 51 CC    JSR WriteToPPUString
                            
   73  06:CE06  AD 00 00    LDA temp1
   74  06:CE09  20 51 CC    JSR WriteToPPUString
   75                       
   76                       ;;also copy to ... copy
   77  06:CE0C  AD B8 00    LDA clue_draw_address
   78  06:CE0F  8D B2 00    STA copy_address
   79  06:CE12  AD B9 00    LDA clue_draw_address+1
   80  06:CE15  29 0F       AND #$0F
   81  06:CE17  09 60       ORA #$60
   82  06:CE19  8D B3 00    STA copy_address+1
   83  06:CE1C  AD 00 00    LDA temp1
   84  06:CE1F  A0 00       LDY #$00
   85  06:CE21  91 B2       STA [copy_address],y
   86                       
   87  06:CE23  AD BD 00    LDA clueDrawAdd
   88  06:CE26  20 4D CE    JSR SubFromClueDrawAddress
   89                         
   90  06:CE29  60          RTS
   91                       
   92  06:CE2A            ResetClueDrawAddress:
   93                     
   94                       MACROGetPointer clue_start_address, clue_draw_address
                          
       06:CE2A  AD B6 00          LDA clue_start_address
       06:CE2D  8D B8 00          STA clue_draw_address
       06:CE30  AD B7 00          LDA clue_start_address+1
       06:CE33  8D B9 00          STA clue_draw_address+1
                          
   95                       
   96  06:CE36  60          RTS
   97                       
   98  06:CE37            AddToClueDrawAddress:
   99                     
  100  06:CE37  8D 00 00    STA temp1
  101                       
  102  06:CE3A  AD B8 00    LDA clue_draw_address
  103  06:CE3D  18          CLC
  104  06:CE3E  6D 00 00    ADC temp1
  105  06:CE41  8D B8 00    STA clue_draw_address
  106  06:CE44  AD B9 00    LDA clue_draw_address+1
  107  06:CE47  69 00       ADC #$00
  108  06:CE49  8D B9 00    STA clue_draw_address+1
  109                       
  110  06:CE4C  60          RTS
  111                         
  112  06:CE4D            SubFromClueDrawAddress:
  113                     
  114  06:CE4D  8D 00 00    STA temp1
  115                       
  116  06:CE50  AD B8 00    LDA clue_draw_address
  117  06:CE53  38          SEC
  118  06:CE54  ED 00 00    SBC temp1
  119  06:CE57  8D B8 00    STA clue_draw_address
  120  06:CE5A  AD B9 00    LDA clue_draw_address+1
  121  06:CE5D  E9 00       SBC #$00
  122  06:CE5F  8D B9 00    STA clue_draw_address+1
  123                       
  124  06:CE62  60          RTS
  125                       
  126  06:CE63            AddToClueDrawAddressHi:
  127                     
  128  06:CE63  8D 00 00    STA temp1
  129                       
  130  06:CE66  AD B9 00    LDA clue_draw_address+1
  131  06:CE69  6D 00 00    ADC temp1
  132  06:CE6C  8D B9 00    STA clue_draw_address+1
  133                       
  134  06:CE6F  60          RTS
  135                       
  136  06:CE70            CreateOffsetFromIndex:
  137                     
  138                       ;;would be this, but we need to be able to go further- so we'll make a doulbe offset
  139  06:CE70  AD BB 00    LDA clueLineIndex
  140  06:CE73  8D BE 00    STA clueDrawOffset
  141  06:CE76  A9 00       LDA #$00
  142  06:CE78  8D BF 00    STA clueDrawOffset+1
  143                       
  144  06:CE7B  AD BC 00    LDA clueOffsetShift   
  145  06:CE7E  F0 0E       BEQ .addOffset
  146                       
  147  06:CE80  A2 00       LDX #$00
  148                       
  149  06:CE82            .loopShift:
  150  06:CE82  0E BE 00    ASL clueDrawOffset
  151  06:CE85  2E BF 00    ROL clueDrawOffset+1
  152  06:CE88  E8          INX
  153  06:CE89  EC BC 00    CPX clueOffsetShift
  154  06:CE8C  D0 F4       BNE .loopShift
  155                       
  156  06:CE8E            .addOffset:
  157                       
  158  06:CE8E  20 2A CE    JSR ResetClueDrawAddress
  159  06:CE91  AD BE 00    LDA clueDrawOffset
  160  06:CE94  20 37 CE    JSR AddToClueDrawAddress 
  161  06:CE97  AD BF 00    LDA clueDrawOffset+1
  162  06:CE9A  20 63 CE    JSR AddToClueDrawAddressHi
  163                       
  164  06:CE9D  60          RTS  
  165                       
  166  06:CE9E            ClearPuzzle:
  167                     
  168                       ;we'll assume clue draw address has been set to the top of the 1st nametable
  169                      
  170                       MACROGetLabelPointer ClearLineDefs, table_address
                          
       06:CE9E  A9 D0             LDA #HIGH(ClearLineDefs)
       06:CEA0  A2 D4             LDX #LOW(ClearLineDefs)
                                  
       06:CEA2  8E 16 00          STX table_address
       06:CEA5  8D 17 00          STA table_address+1
                                  
  171                     
  172  06:CEA8  AC BB 00    LDY clueLineIndex
  173  06:CEAB  B1 16       LDA [table_address], y
  174  06:CEAD  8D 00 00    STA temp1
  175                       MACROAddPPUStringEntryRepeat clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp1, #$24
                          
       06:CEB0  A9 01       LDA #$01
       06:CEB2  8D 23 00    STA PPU_PendingWrite
       06:CEB5  AD B9 00    LDA clue_draw_address+1
       06:CEB8  20 51 CC    JSR WriteToPPUString
       06:CEBB  AD B8 00    LDA clue_draw_address
       06:CEBE  20 51 CC    JSR WriteToPPUString
       06:CEC1  A9 40       LDA #$40
       06:CEC3  09 00       ORA #DRAW_HORIZONTAL
       06:CEC5  0D 00 00    ORA temp1
       06:CEC8  20 51 CC    JSR WriteToPPUString
       06:CECB  A9 24       LDA #$24
       06:CECD  20 51 CC    JSR WriteToPPUString
                            
  176                       ;;no need to load anything else
  177                       
  178  06:CED0  AD B8 00    LDA clue_draw_address
  179  06:CED3  18          CLC
  180  06:CED4  69 20       ADC #32
  181  06:CED6  8D B8 00    STA clue_draw_address
  182  06:CED9  AD B9 00    LDA clue_draw_address+1
  183  06:CEDC  69 00       ADC #$00
  184  06:CEDE  8D B9 00    STA clue_draw_address+1
  185                       
  186  06:CEE1  EE BB 00    INC clueLineIndex
  187  06:CEE4  60          RTS
  188                       
  189  06:CEE5            LoadPauseScreen:
  190                     
  191                     ;;use clue indexes again
  192                     ;;we want to draw one line at a time
  193                     ;;we have control codes, but those don't matter since we have to build ou the strings before hand
  194                     
  195                     ;load pause table
  196                     ;there are 6 lines of 13 tiles
  197                     ;one byte for the 6 lines, one byte to keep track of our index
  198                       ;STA clueLineIndex 
  199                       ;STA clueOffsetShift
  200                     
  201                     ;;pause_address has the table we want
  202                     ;;pause_draw_address will be the draw location
  203                     
  204                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:CEE5  A9 01       LDA #$01
       06:CEE7  8D 23 00    STA PPU_PendingWrite
       06:CEEA  AD B5 00    LDA pause_draw_address+1
       06:CEED  20 51 CC    JSR WriteToPPUString
       06:CEF0  AD B4 00    LDA pause_draw_address
       06:CEF3  20 51 CC    JSR WriteToPPUString
       06:CEF6  A9 00       LDA #DRAW_HORIZONTAL
       06:CEF8  20 51 CC    JSR WriteToPPUString
       06:CEFB  A9 0D       LDA #13 
       06:CEFD  20 51 CC    JSR WriteToPPUString
                            
  205                     
  206  06:CF00  A2 00       LDX #$00
  207  06:CF02  AC BB 00    LDY clueLineIndex
  208  06:CF05            .loop:
  209                      
  210  06:CF05  8A          TXA
  211  06:CF06  48          PHA
  212  06:CF07  B1 B0       LDA [pause_address],y
  213  06:CF09  20 51 CC    JSR WriteToPPUString
  214  06:CF0C  68          PLA
  215  06:CF0D  AA          TAX
  216  06:CF0E  C8          INY
  217  06:CF0F  E8          INX 
  218  06:CF10  E0 0D       CPX #13
  219  06:CF12  D0 F1       BNE .loop
  220                       
  221  06:CF14  8C BB 00    STY clueLineIndex
  222                       
  223  06:CF17  AD B4 00    LDA pause_draw_address
  224  06:CF1A  18          CLC
  225  06:CF1B  69 20       ADC #$20
  226  06:CF1D  8D B4 00    STA pause_draw_address
  227  06:CF20  AD B5 00    LDA pause_draw_address+1
  228  06:CF23  69 00       ADC #$00
  229  06:CF25  8D B5 00    STA pause_draw_address+1
  230                       
  231  06:CF28  EE BC 00    INC clueOffsetShift
  232  06:CF2B  60          RTS
  233                       
  234                       
  235                     
  236                     
  237  06:CF2C            ClearPauseScreen:  
  238                     
  239                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:CF2C  A9 01       LDA #$01
       06:CF2E  8D 23 00    STA PPU_PendingWrite
       06:CF31  AD B5 00    LDA pause_draw_address+1
       06:CF34  20 51 CC    JSR WriteToPPUString
       06:CF37  AD B4 00    LDA pause_draw_address
       06:CF3A  20 51 CC    JSR WriteToPPUString
       06:CF3D  A9 00       LDA #DRAW_HORIZONTAL
       06:CF3F  20 51 CC    JSR WriteToPPUString
       06:CF42  A9 0D       LDA #13 
       06:CF44  20 51 CC    JSR WriteToPPUString
                            
  240                     
  241  06:CF47  A2 00       LDX #$00
  242  06:CF49  A0 00       LDY #$00
  243  06:CF4B            .loop:
  244                      
  245  06:CF4B  8A          TXA
  246  06:CF4C  48          PHA
  247  06:CF4D  B1 B0       LDA [pause_address],y
  248  06:CF4F  20 51 CC    JSR WriteToPPUString
  249  06:CF52  68          PLA
  250  06:CF53  AA          TAX
  251  06:CF54  C8          INY
  252  06:CF55  E8          INX 
  253  06:CF56  E0 0D       CPX #13
  254  06:CF58  D0 F1       BNE .loop
  255                       
  256                       
  257  06:CF5A  AD B4 00    LDA pause_draw_address
  258  06:CF5D  18          CLC
  259  06:CF5E  69 20       ADC #$20
  260  06:CF60  8D B4 00    STA pause_draw_address
  261  06:CF63  AD B5 00    LDA pause_draw_address+1
  262  06:CF66  69 00       ADC #$00
  263  06:CF68  8D B5 00    STA pause_draw_address+1
  264                       
  265  06:CF6B  AD B0 00    LDA pause_address
  266  06:CF6E  18          CLC
  267  06:CF6F  69 20       ADC #$20
  268  06:CF71  8D B0 00    STA pause_address
  269  06:CF74  AD B1 00    LDA pause_address+1
  270  06:CF77  69 00       ADC #$00
  271  06:CF79  8D B1 00    STA pause_address+1
  272                       
  273  06:CF7C  EE BC 00    INC clueOffsetShift
  274  06:CF7F  60         RTS
  275  06:CF80            DrawImage:
  276                     
  277                       ;;we have clueTableIndex, which should be at the image bytes now
  278                       ;;clue line index will keep track of our place in a byte
  279                        
  280  06:CF80  A9 00       LDA #$00
  281  06:CF82  8D 00 00    STA temp1
  282  06:CF85  8D 01 00    STA temp2
  283  06:CF88  8D 02 00    STA temp3
  284  06:CF8B  8D 03 00    STA temp4
  285  06:CF8E  8D 05 00    STA temp6
  286                       
  287  06:CF91  A9 04       LDA #$04
  288  06:CF93  8D 04 00    STA temp5
  289                       
  290  06:CF96  A0 00       LDY #$00
  291  06:CF98  B1 AC       LDA [puzzle_address], y
  292  06:CF9A  AA          TAX
  293  06:CF9B  BD F2 D0    LDA PuzzleSizes, x
  294  06:CF9E  8D 06 00    STA temp7
  295  06:CFA1  BD F5 D0    LDA PuzzleImageSizes, x
  296  06:CFA4  8D 07 00    STA temp8
  297  06:CFA7  4A          LSR A
  298  06:CFA8  4A          LSR A
  299  06:CFA9  8D 09 00    STA tempy
  300  06:CFAC  AD 07 00    LDA temp8
  301  06:CFAF  29 03       AND #$03
  302  06:CFB1  F0 03       BEQ .skipAdd1
  303  06:CFB3  EE 09 00    INC tempy  
  304  06:CFB6            .skipAdd1:
  305  06:CFB6  BD F8 D0    LDA ImageDrawWrapOffsets, x
  306  06:CFB9  8D 08 00    STA tempx
  307                       
  308  06:CFBC  AC BA 00    LDY clueTableIndex
  309  06:CFBF  B1 AE       LDA [clues_address], y
  310                     
  311  06:CFC1  0A          ASL A
  312  06:CFC2  2E 00 00    ROL temp1
  313  06:CFC5  0A          ASL A
  314  06:CFC6  2E 00 00    ROL temp1
  315  06:CFC9  0A          ASL A
  316  06:CFCA  2E 01 00    ROL temp2
  317  06:CFCD  0A          ASL A
  318  06:CFCE  2E 01 00    ROL temp2
  319  06:CFD1  0A          ASL A
  320  06:CFD2  2E 02 00    ROL temp3
  321  06:CFD5  0A          ASL A
  322  06:CFD6  2E 02 00    ROL temp3
  323  06:CFD9  0A          ASL A
  324  06:CFDA  2E 03 00    ROL temp4
  325  06:CFDD  0A          ASL A
  326  06:CFDE  2E 03 00    ROL temp4
  327                       
  328                     
  329  06:CFE1  A2 00       LDX #$00
  330  06:CFE3            .moveUpTiles:
  331  06:CFE3  BD 00 00    LDA temp1, x
  332  06:CFE6  09 24       ORA #$24
  333  06:CFE8  9D 00 00    STA temp1, x
  334  06:CFEB  E8          INX
  335  06:CFEC  E0 04       CPX #$04
  336  06:CFEE  D0 F3       BNE .moveUpTiles
  337                       
  338                       
  339  06:CFF0  AD BC 00    LDA clueOffsetShift
  340  06:CFF3  18          CLC
  341  06:CFF4  69 04       ADC #$04
  342                     
  343  06:CFF6  8D BC 00    STA clueOffsetShift
  344                       ;;clue offset shift + 4, check if we went over puzle row length
  345  06:CFF9  38          SEC
  346  06:CFFA  ED 06 00    SBC temp7 ;;subtract 15
  347  06:CFFD  90 12       BCC .makeStrings
  348  06:CFFF  F0 10       BEQ .makeStrings
  349                       
  350  06:D001  8D BC 00    STA clueOffsetShift ;loop offset over
  351  06:D004  8D 05 00    STA temp6 ; length of second string
  352  06:D007  AD 04 00    LDA temp5
  353  06:D00A  38          SEC
  354  06:D00B  ED 05 00    SBC temp6 
  355  06:D00E  8D 04 00    STA temp5 ;length of first string 
  356                       
  357  06:D011            .makeStrings:
  358                       
  359  06:D011  A2 00       LDX #$00
  360                       
  361  06:D013  AD 04 00    LDA temp5
  362  06:D016  F0 51       BEQ .makeSecondString
  363  06:D018  8A          TXA
  364  06:D019  48          PHA
  365                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp5
                          
       06:D01A  A9 01       LDA #$01
       06:D01C  8D 23 00    STA PPU_PendingWrite
       06:D01F  AD B9 00    LDA clue_draw_address+1
       06:D022  20 51 CC    JSR WriteToPPUString
       06:D025  AD B8 00    LDA clue_draw_address
       06:D028  20 51 CC    JSR WriteToPPUString
       06:D02B  A9 00       LDA #DRAW_HORIZONTAL
       06:D02D  20 51 CC    JSR WriteToPPUString
       06:D030  AD 04 00    LDA temp5 
       06:D033  20 51 CC    JSR WriteToPPUString
                            
  366  06:D036  68          PLA
  367  06:D037  AA          TAX
  368                       
  369  06:D038            .firstStringLoop:
  370                       
  371  06:D038  8A          TXA 
  372  06:D039  48          PHA
  373  06:D03A  BD 00 00    LDA temp1, x
  374  06:D03D  20 51 CC    JSR WriteToPPUString
  375                       
  376  06:D040  EE BB 00    INC clueLineIndex
  377  06:D043  AD BB 00    LDA clueLineIndex
  378  06:D046  CD 07 00    CMP temp8
  379  06:D049  D0 04       BNE .continueLoop
  380  06:D04B  68          PLA 
  381  06:D04C  4C D0 D0    JMP .leave
  382                       
  383  06:D04F            .continueLoop:
  384  06:D04F  68          PLA
  385  06:D050  AA          TAX
  386  06:D051  E8          INX
  387  06:D052  EC 04 00    CPX temp5
  388  06:D055  D0 E1       BNE .firstStringLoop
  389                       
  390  06:D057  AD B8 00    LDA clue_draw_address
  391  06:D05A  18          CLC
  392  06:D05B  6D 04 00    ADC temp5
  393  06:D05E  8D B8 00    STA clue_draw_address
  394  06:D061  AD B9 00    LDA clue_draw_address+1
  395  06:D064  69 00       ADC #$00
  396  06:D066  8D B9 00    STA clue_draw_address+1
  397                       
  398  06:D069            .makeSecondString:
  399                     
  400  06:D069  AD 05 00    LDA temp6
  401  06:D06C  F0 62       BEQ .leave
  402                       
  403                       ;;loop draw address to next line
  404  06:D06E  AD B8 00    LDA clue_draw_address
  405  06:D071  18          CLC
  406  06:D072  6D 08 00    ADC tempx
  407  06:D075  8D B8 00    STA clue_draw_address
  408  06:D078  AD B9 00    LDA clue_draw_address+1
  409  06:D07B  69 00       ADC #$00
  410  06:D07D  8D B9 00    STA clue_draw_address+1
  411  06:D080  8A          TXA
  412  06:D081  48          PHA
  413                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp6
                          
       06:D082  A9 01       LDA #$01
       06:D084  8D 23 00    STA PPU_PendingWrite
       06:D087  AD B9 00    LDA clue_draw_address+1
       06:D08A  20 51 CC    JSR WriteToPPUString
       06:D08D  AD B8 00    LDA clue_draw_address
       06:D090  20 51 CC    JSR WriteToPPUString
       06:D093  A9 00       LDA #DRAW_HORIZONTAL
       06:D095  20 51 CC    JSR WriteToPPUString
       06:D098  AD 05 00    LDA temp6 
       06:D09B  20 51 CC    JSR WriteToPPUString
                            
  414  06:D09E  68          PLA 
  415  06:D09F  AA          TAX
  416                       
  417  06:D0A0            .secondStringLoop:
  418                     
  419  06:D0A0  8A          TXA
  420  06:D0A1  48          PHA 
  421  06:D0A2  BD 00 00    LDA temp1, x
  422  06:D0A5  20 51 CC    JSR WriteToPPUString
  423                       
  424  06:D0A8  EE BB 00    INC clueLineIndex
  425  06:D0AB  AD BB 00    LDA clueLineIndex
  426  06:D0AE  CD 07 00    CMP temp8
  427  06:D0B1  D0 04       BNE .continueSecondLoop
  428                       
  429  06:D0B3  68          PLA 
  430  06:D0B4  4C D0 D0    JMP .leave
  431                       
  432  06:D0B7            .continueSecondLoop:
  433  06:D0B7  68          PLA
  434  06:D0B8  AA          TAX
  435  06:D0B9  E8          INX
  436  06:D0BA  E0 04       CPX #$04
  437  06:D0BC  D0 E2       BNE .secondStringLoop
  438                       
  439  06:D0BE  AD B8 00    LDA clue_draw_address
  440  06:D0C1  18          CLC
  441  06:D0C2  6D 05 00    ADC temp6
  442  06:D0C5  8D B8 00    STA clue_draw_address
  443  06:D0C8  AD B9 00    LDA clue_draw_address+1
  444  06:D0CB  69 00       ADC #$00
  445  06:D0CD  8D B9 00    STA clue_draw_address+1
  446                       
  447  06:D0D0            .leave:
  448  06:D0D0  EE BA 00    INC clueTableIndex
  449  06:D0D3  60          RTS
  450                     
  451  06:D0D4            ClearLineDefs:
  452                     
  453  06:D0D4  20 20 20    .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
       06:D0D7  20 20 20  
       06:D0DA  20 20 20  
       06:D0DD  20 20     
  454  06:D0DF  0D 0D 0D    .db $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D
       06:D0E2  0D 0D 0D  
       06:D0E5  0D 0D 0D  
       06:D0E8  0D 0D 0D  
       06:D0EB  0D 0D 0D  
       06:D0EE  0D 0D     
  455  06:D0F0  20 20       .db $20, $20
  456                       
  457  06:D0F2            PuzzleSizes:
  458                       
  459  06:D0F2  05 0A 0F    .db $05, $0A, $0F
  460                       
  461  06:D0F5            PuzzleImageSizes:
  462                     
  463                       ;.db $05, $0A, $0F
  464  06:D0F5  19 64 E1    .db $19, $64, $E1
  465                       
  466  06:D0F8            ImageDrawWrapOffsets:
  467                     
  468  06:D0F8  1B 16 11   .db $1B, $16, $11
#[1]   Picross.asm
   97                       
   98                       
   99                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  100                     ;;     NMI                  ;;
  101                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  102                     
#[2]   Routines/Common/NMI.asm
  103                       .include "Routines/Common/NMI.asm"
    1                      
    2  06:D0FB            NMI:
    3                     
    4  06:D0FB  48          PHA                              ;protect the registers
    5  06:D0FC  8A          TXA
    6  06:D0FD  48          PHA
    7  06:D0FE  98          TYA
    8  06:D0FF  48          PHA
    9                       
   10  06:D100            nmi_started:
   11  06:D100  A9 00       LDA #$00
   12  06:D102  8D 03 20    STA OAM_LO      ; set the low byte (00) of the RAM address
   13  06:D105  A9 02       LDA #$02
   14  06:D107  8D 14 40    STA OAM_HI       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:D10A  AD 10 00    LDA NMI_locks
   17  06:D10D  F0 03       BEQ update_controllers
   18  06:D10F  4C 7E D1    JMP WakeUp
   19                     
   20  06:D112            update_controllers:
   21                     
#[3]   Routines/Common/ReadControllers.asm
   22                       .include "Routines/Common/ReadControllers.asm"
    1                     
    2  06:D112  8A            TXA
    3  06:D113  48                PHA
    4  06:D114  98                TYA
    5  06:D115  48                PHA
    6                     
    7  06:D116  A2 00             LDX #$00
    8                     
    9  06:D118            GamePadCheck:
   10  06:D118  A9 01             LDA #$01        ;load 1
   11  06:D11A  8D 16 40          STA $4016       ; turn latch on
   12                             ;STA gamepad2
   13  06:D11D  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   14  06:D11E  8D 16 40          STA $4016       ;turn latch off
   15                             
   16                             ;do a ring counter technique- load %10000000 into both
   17  06:D121  A9 80             LDA #$80
   18  06:D123  8D 1A 00          STA gamepad
   19                     
   20  06:D126            ReadControllerABytesLoop:
   21  06:D126  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   22  06:D129  29 03             AND #%00000011  ;acc: %00000001 c: 0
   23  06:D12B  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   24                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   25  06:D12D  6E 1A 00          ROR gamepad             ;gamepad: %11000000
   26                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   27  06:D130  90 F4             BCC ReadControllerABytesLoop
   28                             
   29                             ;;comapre last to current, find the pressed buttons this frame
   30  06:D132  AD 1B 00          LDA gamepadLast
   31  06:D135  49 FF             EOR #$FF
   32  06:D137  2D 1A 00          AND gamepad
   33  06:D13A  8D 1C 00          STA gamepadPressed
   34                             
   35                             
   36  06:D13D  AD 1A 00          LDA gamepad
   37  06:D140  8D 1B 00          STA gamepadLast
   38                             
   39                             ;return x and y... before resetting them all over again- always good to make sure we're clean
   40  06:D143  68                PLA
   41  06:D144  A8                TAY
   42  06:D145  68                PLA
   43  06:D146  AA                TAX     
#[2]   Routines/Common/NMI.asm
   23                       
   24  06:D147  20 8E CB    JSR ProcessPPUString
   25                       
   26                       
   27  06:D14A  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   28  06:D14C  8D 05 20    STA PPU_SCROLL
   29  06:D14F  8D 05 20    STA PPU_SCROLL
   30                       
   31                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   32                       ; enable sprites, enable background, no clipping on left side 
   33  06:D152  20 AB CC    JSR UpdatePPUControl
   34                     
   35  06:D155            NMIUpdate:
   36                     
   37  06:D155  20 72 D1    JSR StateNMIUpdate
   38                       
   39  06:D158  AD 1D 00    LDA PPU_Control
   40  06:D15B  29 FC       AND #$FC
   41  06:D15D  0D 21 00    ORA PPU_ScrollNT
   42  06:D160  8D 00 20    STA PPU_CTRL
   43                       
   44  06:D163  AD 1F 00    LDA PPU_ScrollX     ;;tell the ppu there is no background scrolling
   45  06:D166  8D 05 20    STA PPU_SCROLL
   46  06:D169  AD 20 00    LDA PPU_ScrollY
   47  06:D16C  8D 05 20    STA PPU_SCROLL
   48                     
   49  06:D16F  4C 7E D1    JMP WakeUp
   50                     
   51  06:D172            StateNMIUpdate:
   52                     
   53                       MACROCallDynamicJump game_mode
                          
       06:D172  AD 0E 00    LDA game_mode
       06:D175  20 CF CA    JSR Dynamic_Jump
                                  
   54                     
   55  06:D178            NMIJumpTable:
   56                     
   57  06:D178  89 D1       .word UpdateTitleNMI
   58  06:D17A  8D D1       .word UpdateGameNMI
   59  06:D17C  8E D1       .word UpdateGameOverNMI
   60                     
   61  06:D17E            WakeUp:
   62  06:D17E  A9 00       LDA #$00
   63  06:D180  8D 0C 00    STA sleeping
   64                       
   65  06:D183  68          PLA             ;restore the registers
   66  06:D184  A8          TAY 
   67  06:D185  68          PLA
   68  06:D186  AA          TAX
   69  06:D187  68          PLA
   70                     
   71  06:D188  40          RTI             ; return from interrupt
   72                       
#[3]   Routines/NMI_States/UpdateTitleNMI.asm
   73                       .include "Routines/NMI_States/UpdateTitleNMI.asm"
    1  06:D189            UpdateTitleNMI:
    2                     
    3                       ;;load bank 0 for BG tiles, so we start with the right tile set
    4                       ;JSR ResetMapper
    5                       ;LDA #$01
    6                       ;JSR LoadCHRBankB
    7                     
    8                     
    9  06:D189  20 71 CC    JSR DetectSprite0
   10                     
   11                       ;JSR ResetMapper
   12                       ;LDA #$03
   13                       ;JSR LoadCHRBankB
   14                       
   15                     
   16                        
   17  06:D18C  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameNMI.asm
   74                       .include "Routines/NMI_States/UpdateGameNMI.asm"
    1  06:D18D            UpdateGameNMI:
    2  06:D18D  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameOverNMI.asm
   75                       .include "Routines/NMI_States/UpdateGameOverNMI.asm"
    1  06:D18E            UpdateGameOverNMI:
    2  06:D18E  60          RTS
#[2]   Routines/Common/NMI.asm
#[1]   Picross.asm
  104                       
  105                     ;;**************************;;
  106                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  107                     ;;       PRG ROM DATA       ;;
  108                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  109                     ;;**************************;; 
  110                       
  111           0007        .bank 7
  112           E000        .org $E000
  113                     
#[2]   NameTables/Tables.asm
  114                       .include "NameTables/Tables.asm"
    1  07:E000            Palettes:
    2                     
    3  07:E000  1C E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E002  3C E0     
       07:E004  5C E0     
    4                     
    5  07:E006            NameTables:
    6                     
    7  07:E006  12 E0       .word Title_Screens, Game_Screens, GameOver_Screens
       07:E008  14 E0     
       07:E00A  1A E0     
    8                       
    9  07:E00C            NameTables2:
   10                     
   11  07:E00C  7C E4       .word Title_Second, Blank_Screen, Blank_Screen
       07:E00E  7C F8     
       07:E010  7C F8     
   12                       
   13  07:E012            Title_Screens:
   14                     
   15  07:E012  7C E0       .word Title_Screen
   16                       
   17  07:E014            Game_Screens:
   18                     
   19  07:E014  7C E8       .word Game_5, Game_10, Game_15
       07:E016  7C EC     
       07:E018  7C F0     
   20                       
   21  07:E01A            GameOver_Screens:
   22                     
   23  07:E01A  7C F4       .word GameOver_Screen
   24                     
   25  07:E01C            Title_Palette:
   26                     
   27  07:E01C              .incbin "NameTables/Title_PAL.pal"
   28  07:E02C              .incbin "NameTables/Title_PAL.pal"
   29                       
   30  07:E03C            Game_Palette:
   31                     
   32  07:E03C              .incbin "NameTables/Game_PAL.pal"
   33  07:E04C              .incbin "NameTables/Game_PAL.pal"
   34                       
   35  07:E05C            GameOver_Palette:
   36                     
   37  07:E05C              .incbin "NameTables/GameOver_PAL.pal"
   38  07:E06C              .incbin "NameTables/GameOver_PAL.pal"
   39                       
   40  07:E07C            Title_Screen:
   41                     
   42  07:E07C              .incbin "NameTables/Title_NT.nam"
   43                       
   44  07:E47C            Title_Second:
   45                     
   46  07:E47C              .incbin "NameTables/Title_PuzzMen_NT.nam"
   47                       
   48  07:E87C            Game_5: 
   49                     
   50  07:E87C              .incbin "NameTables/Game_NT_5.nam"
   51                       
   52  07:EC7C            Game_10:
   53  07:EC7C              .incbin "NameTables/Game_NT_10.nam"
   54                       
   55  07:F07C            Game_15:
   56  07:F07C              .incbin "NameTables/Game_NT.nam"
   57                       
   58  07:F47C            GameOver_Screen:
   59                     
   60  07:F47C              .incbin "NameTables/GameOver_NT.nam"
   61                       
   62  07:F87C            Blank_Screen:
   63                     
   64  07:F87C              .incbin "NameTables/Blank_NT.nam"
   65                     
   66  07:FC7C            Pause_Menu:
   67  07:FC7C  28 2A 2A    .db $28,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$29
       07:FC7F  2A 2A 2A  
       07:FC82  2A 2A 2A  
       07:FC85  2A 2A 2A  
       07:FC88  29        
   68  07:FC89  2B 24 1C    .db $2b,$24,$1c,$0a,$1f,$0e,$62,$0e,$21,$12,$1d,$24,$3b
       07:FC8C  0A 1F 0E  
       07:FC8F  62 0E 21  
       07:FC92  12 1D 24  
       07:FC95  3B        
   69  07:FC96  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FC99  24 24 24  
       07:FC9C  24 24 24  
       07:FC9F  24 24 24  
       07:FCA2  3B        
   70  07:FCA3  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FCA6  24 24 24  
       07:FCA9  24 24 24  
       07:FCAC  24 24 24  
       07:FCAF  3B        
   71  07:FCB0  2B 24 24    .db $2b,$24,$24,$22,$0e,$1c,$24,$24,$17,$18,$24,$24,$3b
       07:FCB3  22 0E 1C  
       07:FCB6  24 24 17  
       07:FCB9  18 24 24  
       07:FCBC  3B        
   72  07:FCBD  38 3A 3A    .db $38,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$39
       07:FCC0  3A 3A 3A  
       07:FCC3  3A 3A 3A  
       07:FCC6  3A 3A 3A  
       07:FCC9  39        
   73                     
   74                       
   75                     
   76                       
   77                      
   78                             
#[1]   Picross.asm
#[2]   Sprites/Sprites.asm
  115                       .include "Sprites/Sprites.asm"
    1                     
    2                     ;;Byte0
    3                     ;;Y position of top of sprite
    4                     ;;Sprite data is delayed by one scanline; 
    5                     ;;you must subtract 1 from the sprite's 
    6                     ;;Y coordinate before writing it here. 
    7                     ;;Hide a sprite by moving it down offscreen, 
    8                     ;;by writing any values between #$EF-#$FF here. 
    9                     ;;Sprites are never displayed on the first line of the picture, 
   10                     ;;and it is impossible to place a sprite partially off the top of the screen.
   11                     
   12                     ;;Byte 1
   13                     ;;Tile index number
   14                     ;;For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of PPUCTRL ($2000).
   15                     ;;For 8x16 sprites (bit 5 of PPUCTRL set), the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
   16                     ;;76543210
   17                     ;;||||||||
   18                     ;;|||||||+- Bank ($0000 or $1000) of tiles
   19                     ;;+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
   20                     
   21                     ;;Byte 2
   22                     ;;Attributes
   23                     ;;76543210
   24                     ;;||||||||
   25                     ;;||||||++- Palette (4 to 7) of sprite
   26                     ;;|||+++--- Unimplemented (read 0)
   27                     ;;||+------ Priority (0: in front of background; 1: behind background)
   28                     ;;|+------- Flip sprite horizontally
   29                     ;;+-------- Flip sprite vertically
   30                     
   31                     ;;Byte 3
   32                     ;;X position of left side of sprite.
   33                     ;;X-scroll values of $F9-FF results in parts of the 
   34                     ;;sprite to be past the right edge of the screen, thus invisible.
   35                     ;;It is not possible to have a sprite partially visible on the left edge. 
   36                     ;;Instead, left-clipping through PPUMASK ($2001) can be used to simulate this effect.
   37  07:FCCA            Sprites:
   38  07:FCCA  D0 FC             .word Title_Sprites, Game_Sprites, GameOver_Sprites
       07:FCCC  D9 FC     
       07:FCCE  E2 FC     
   39                     
   40  07:FCD0            Title_Sprites:
   41  07:FCD0  02            .db $02
   42  07:FCD1  85 00 00          .db $85,$00,$00,$E8
       07:FCD4  E8        
   43  07:FCD5  A0 01 00          .db $A0,$01,$00,$60
       07:FCD8  60        
   44  07:FCD9            Game_Sprites:
   45  07:FCD9  02            .db $02
   46  07:FCDA  62 02 03          .db $62,$02,$03,$72
       07:FCDD  72        
   47  07:FCDE  5F FF 00          .db $5F,$FF,$00,$60
       07:FCE1  60        
   48  07:FCE2            GameOver_Sprites:
   49  07:FCE2  01                .db $01
   50  07:FCE3  00 00 00          .db $00,$00,$00,$00
       07:FCE6  00        
#[1]   Picross.asm
  116                     
  117           FFFA        .org $FFFA     ;first of the three vectors starts here
  118  07:FFFA  FB D0       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  119                                        ;processor will jump to the label NMI:
  120  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  121                                        ;to the label RESET:
  122  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  123                       
  124                     ;;**************************;;
  125                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  126                     ;;      CHR ROM DATA        ;;
  127                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  128                     ;;**************************;; 
  129                       
  130           0008        .bank 8
  131           0000        .org $0000
  132  08:0000              .incbin "CHRROM/Bank0.chr"   ;includes 8KB graphics file from SMB1
  133                       
  134           0009        .bank 9
  135           0000        .org $0000
  136  09:0000              .incbin "CHRROM/Bank1.chr"
  137                       
  138           000A        .bank 10
  139           0000        .org $0000
  140  0A:0000              .incbin "CHRROM/Bank2.chr"
  141                       
  142           000B        .bank 11
  143           0000        .org $0000
  144  0B:0000              .incbin "CHRROM/Bank3.chr"
