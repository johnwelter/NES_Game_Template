#[1]   Picross.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/Defines.asm
   14                       .include "Defines/Defines.asm"
    1                     ;; define 0 page stuff here, and SRAM stuff if we have it
    2                     
    3           0000        .rsset $0000
#[3]   Defines/GeneralVars.asm
    4                       .include "Defines/GeneralVars.asm"
    1           0000      temp1                   .rs 1
    2           0001      temp2                   .rs 1
    3           0002      temp3                   .rs 1
    4           0003      temp4                   .rs 1
    5           0004      temp5                   .rs 1
    6           0005      temp6                   .rs 1
    7           0006      temp7                   .rs 1
    8           0007      temp8                   .rs 1
    9           0008      tempx                   .rs 1
   10           0009      tempy                   .rs 1
   11           000A      time                    .rs 1
   12           000B      scaledTime              .rs 1
   13           000C      sleeping                .rs 1
   14           000D      mode_loadFlags  .rs 1
   15                     ;;0rcb xxxx
   16                     ;;r = read from save copy 
   17                     ;;c = write to save copy
   18           000E      game_mode               .rs 1
   19           000F      mode_state              .rs 1
   20           0010      NMI_locks               .rs 1
   21           0011      game_locks              .rs 1
   22           0012      pointer_address .rs 2
   23           0014      pointerB_address .rs 2
   24           0016      table_address   .rs 2
   25           0018      jump_address    .rs 2
   26                     
   27                     ;game modes
   28           0000      TITLE_IDX = $00
   29           0001      GAME_IDX = $01
   30           0002      GAMEOVER_IDX = $02
   31                     
   32                     ;locks for input and rendering
   33           0001      BGLOAD_NMI_LOCK = %00000001
   34           0001      EFFECT_GAME_LOCK = %00000001
   35                     
   36                     
   37                     
#[2]   Defines/Defines.asm
#[3]   Defines/ControllerVars.asm
    5                       .include "Defines/ControllerVars.asm"
    1           0010      GAMEPAD_UP = $10
    2           0020      GAMEPAD_DOWN = $20
    3           0040      GAMEPAD_LEFT = $40
    4           0080      GAMEPAD_RIGHT = $80
    5           0001      GAMEPAD_A = $01
    6           0002      GAMEPAD_B = $02
    7           0004      GAMEPAD_SELECT = $04
    8           0008      GAMEPAD_START = $08
    9                     
   10           00C0      GAMEPAD_HORI = $C0
   11           0030      GAMEPAD_VERT = $30
   12           00F0      GAMEPAD_MOVE = $F0
   13                     
   14           0003      GAMEPAD_AB = $03
   15                     
   16           0009      GAMEPAD_CONFIRM = $09
   17                     
   18           001A      gamepad                 .rs 1
   19           001B      gamepadLast     .rs 1
   20           001C      gamepadPressed  .rs 1
#[2]   Defines/Defines.asm
#[3]   Defines/PPUVariables.asm
    6                       .include "Defines/PPUVariables.asm"
    1           001D      PPU_Control                     .rs 1
    2           001E      PPU_Mask                        .rs 1
    3           001F      PPU_ScrollX                     .rs 1
    4           0020      PPU_ScrollY                     .rs 1
    5           0021      PPU_ScrollNT            .rs 1   ;first two bits
    6           0022      PPU_NT                          .rs 1
    7                     
    8           0023      PPU_PendingWrite        .rs 1
    9           0024      PPU_StringIdx           .rs 1
   10           0025      PPU_String                      .rs 128
   11                     
   12           004F      PPU_STRINGMAX = $4F ;up to size of a full nametable, I think
   13                     
   14           0000      SPRITE_YPOS = $00
   15           0001      SPRITE_ID   = $01
   16           0003      SPRITE_XPOS = $03
   17           0200      SPRITE_DATA = $0200
   18                     
   19           2000      PPU_CTRL = $2000
   20           2001      PPU_MASK = $2001
   21           2002      PPU_STATUS = $2002
   22           2003      OAM_LO = $2003
   23           2004      OAM_DATA = $2004
   24           2005      PPU_SCROLL = $2005
   25           2006      PPU_ADDR = $2006
   26           2007      PPU_DATA = $2007
   27           4014      OAM_HI = $4014
   28                     
   29           0080      DRAW_VERTICAL = $80
   30           0000      DRAW_HORIZONTAL = $00
   31                     
   32           0040      SPRITE_0_MASK = %01000000
#[2]   Defines/Defines.asm
#[3]   Defines/MapperVars.asm
    7                       .include "Defines/MapperVars.asm"
    1           00A5      mapper_address  .rs 2
    2           00A7      currentCHRBankA .rs 1
    3           00A8      currentCHRBankB .rs 1
    4           00A9      currentPRGBank  .rs 1
    5           00AA      mapperDebugVar  .rs 1
    6                     
    7                     
#[2]   Defines/Defines.asm
#[3]   Defines/TitleVariables.asm
    8                       .include "Defines/TitleVariables.asm"
    1                     
#[2]   Defines/Defines.asm
#[3]   Defines/GameVariables.asm
    9                       .include "Defines/GameVariables.asm"
    1           A000      PUZZLE_TABLE = $A000
    2           A036      NAMES_TABLE = $A036
    3           A06C      SPRITES_TABLE = $A06C
    4                     
    5           00AB      tempBank                        .rs 1
    6           00AC      tempPuzz                        .rs 1
    7           00AD      puzzle_address          .rs 2
    8           00AF      clues_address           .rs 2
    9           00B1      title_address           .rs 2
   10           00B3      pause_address           .rs 2
   11           00B5      copy_address        .rs 2
   12           00B7      pause_draw_address  .rs 2
   13           00B9      title_draw_address      .rs 2
   14           00BB      clue_start_address      .rs 2
   15           00BD      clue_draw_address       .rs 2
   16           00BF      clueTableIndex          .rs 1
   17           00C0      clueLineIndex           .rs 1
   18           00C1      clueOffsetShift         .rs 1
   19           00C2      clueDrawAdd                     .rs 1
   20           00C3      clueDrawOffset          .rs 2
   21           00C5      clueDrawDecSize         .rs 1
   22           00C6      clueParity                      .rs 1
   23           00C7      mouse_location          .rs 2
   24           00C9      mouse_index                     .rs 2
   25           00CB      currentPaintTile        .rs 1
   26           00CC      pauseState                      .rs 1
   27           00CD      pauseInputLock          .rs 1
   28           00CE      holdTimer                       .rs 1
   29           00CF      targetGameMode          .rs 1
   30           00D0      targetScreenLoad        .rs 1
   31           00D1      recordSet                       .rs 1
#[2]   Defines/Defines.asm
#[3]   External/SoundVariables_ZP.asm
   10                       .include "External/SoundVariables_ZP.asm"
    1           00D2      sound_ptr .rs 2
    2           00D4      sound_ptr2 .rs 2
    3           00D6      current_song .rs 1
#[2]   Defines/Defines.asm
   11                     
   12                     ;; 0100 is the stack
   13                     ;; 0200 is sprite ram
   14           0300        .rsset $0300
#[3]   External/SoundVariables.asm
   15                       .include "External/SoundVariables.asm"
    1           0000      SQUARE_1 = $00 ;these are channel constants
    2           0001      SQUARE_2 = $01
    3           0002      TRIANGLE = $02
    4           0003      NOISE = $03
    5           0004      DPMC = $04
    6                     
    7           0000      MUSIC_SQ1       = $00 ;these are stream # constants
    8           0001      MUSIC_SQ2       = $01 ;stream # is used to index into variables
    9           0002      MUSIC_TRI       = $02
   10           0003      MUSIC_NOI       = $03
   11           0004      SFX_1           = $04
   12           0005      SFX_2           = $05
   13           0006      MUSIC_DPMC      = $06
   14           0007      SFX_DPMC        = $07
   15                     
   16           0000      ve_short_staccato = $00
   17           0001      ve_fade_in = $01
   18           0002      ve_blip_echo = $02
   19           0003      ve_tgl_1 = $03
   20           0004      ve_tgl_2 = $04
   21           0005      ve_battlekid_1 = $05
   22           0006      ve_battlekid_1b = $06
   23           0007      ve_battlekid_2 = $07
   24           0008      ve_battlekid_2b = $08
   25           0009      ve_drum_decay = $09
   26           000A      ve_hiHat_decay = $0A
   27           000B      ve_long_decay = $0B
   28           000C      ve_tinyDecy = $0C
   29           000D      ve_noDecay = $0D
   30           000E      ve_long_tremelo = $0E
   31                     
   32                     ;these are aliases to use in the sound data.
   33           00A0      endsound = $A0
   34           00A1      loop = $A1
   35           00A2      volume_envelope = $A2
   36           00A3      duty = $A3
   37           00A4      set_loop1_counter = $A4
   38           00A5      loop1 = $A5
   39           00A6      set_note_offset = $A6
   40           00A7      adjust_note_offset = $A7
   41           00A8      transpose = $A8
   42           00A9      pitch_envelope = $A9
   43           00AA      arpeggio = $AA
   44                     
   45           0000      pe_none = $00
   46           0001      pe_mod = $01
   47           0002      pe_sweep = $02
   48           0003      pe_bassKick = $03
   49                     
   50                     ;Note: octaves in music traditionally start at C, not A    
   51           0000      A1 = $00    ;the "1" means Octave 1
   52           0001      As1 = $01   ;the "s" means "sharp"
   53           0001      Bb1 = $01   ;the "b" means "flat"  A# == Bb, so same value
   54           0002      B1 = $02
   55                     
   56           0003      C2 = $03
   57           0004      Cs2 = $04
   58           0004      Db2 = $04
   59           0005      D2 = $05
   60           0006      Ds2 = $06
   61           0006      Eb2 = $06
   62           0007      E2 = $07
   63           0008      F2 = $08
   64           0009      Fs2 = $09
   65           0009      Gb2 = $09
   66           000A      G2 = $0A
   67           000B      Gs2 = $0B
   68           000B      Ab2 = $0B
   69           000C      A2 = $0C
   70           000D      As2 = $0D
   71           000D      Bb2 = $0D
   72           000E      B2 = $0E
   73                     
   74           000F      C3 = $0F
   75           0010      Cs3 = $10
   76           0010      Db3 = $10
   77           0011      D3 = $11
   78           0012      Ds3 = $12
   79           0012      Eb3 = $12
   80           0013      E3 = $13
   81           0014      F3 = $14
   82           0015      Fs3 = $15
   83           0015      Gb3 = $15
   84           0016      G3 = $16
   85           0017      Gs3 = $17
   86           0017      Ab3 = $17
   87           0018      A3 = $18
   88           0019      As3 = $19
   89           0019      Bb3 = $19
   90           001A      B3 = $1a
   91                     
   92           001B      C4 = $1b
   93           001C      Cs4 = $1c
   94           001C      Db4 = $1c
   95           001D      D4 = $1d
   96           001E      Ds4 = $1e
   97           001E      Eb4 = $1e
   98           001F      E4 = $1f
   99           0020      F4 = $20
  100           0021      Fs4 = $21
  101           0021      Gb4 = $21
  102           0022      G4 = $22
  103           0023      Gs4 = $23
  104           0023      Ab4 = $23
  105           0024      A4 = $24
  106           0025      As4 = $25
  107           0025      Bb4 = $25
  108           0026      B4 = $26
  109                     
  110           0027      C5 = $27
  111           0028      Cs5 = $28
  112           0028      Db5 = $28
  113           0029      D5 = $29
  114           002A      Ds5 = $2a
  115           002A      Eb5 = $2a
  116           002B      E5 = $2b
  117           002C      F5 = $2c
  118           002D      Fs5 = $2d
  119           002D      Gb5 = $2d
  120           002E      G5 = $2e
  121           002F      Gs5 = $2f
  122           002F      Ab5 = $2f
  123           0030      A5 = $30
  124           0031      As5 = $31
  125           0031      Bb5 = $31
  126           0032      B5 = $32
  127                     
  128           0033      C6 = $33
  129           0034      Cs6 = $34
  130           0034      Db6 = $34
  131           0035      D6 = $35
  132           0036      Ds6 = $36
  133           0036      Eb6 = $36
  134           0037      E6 = $37
  135           0038      F6 = $38
  136           0039      Fs6 = $39
  137           0039      Gb6 = $39
  138           003A      G6 = $3a
  139           003B      Gs6 = $3b
  140           003B      Ab6 = $3b
  141           003C      A6 = $3c
  142           003D      As6 = $3d
  143           003D      Bb6 = $3d
  144           003E      B6 = $3e
  145                     
  146           003F      C7 = $3f
  147           0040      Cs7 = $40
  148           0040      Db7 = $40
  149           0041      D7 = $41
  150           0042      Ds7 = $42
  151           0042      Eb7 = $42
  152           0043      E7 = $43
  153           0044      F7 = $44
  154           0045      Fs7 = $45
  155           0045      Gb7 = $45
  156           0046      G7 = $46
  157           0047      Gs7 = $47
  158           0047      Ab7 = $47
  159           0048      A7 = $48
  160           0049      As7 = $49
  161           0049      Bb7 = $49
  162           004A      B7 = $4a
  163                     
  164           004B      C8 = $4b
  165           004C      Cs8 = $4c
  166           004C      Db8 = $4c
  167           004D      D8 = $4d
  168           004E      Ds8 = $4e
  169           004E      Eb8 = $4e
  170           004F      E8 = $4f
  171           0050      F8 = $50
  172           0051      Fs8 = $51
  173           0051      Gb8 = $51
  174           0052      G8 = $52
  175           0053      Gs8 = $53
  176           0053      Ab8 = $53
  177           0054      A8 = $54
  178           0055      As8 = $55
  179           0055      Bb8 = $55
  180           0056      B8 = $56
  181                     
  182           0057      C9 = $57
  183           0058      Cs9 = $58
  184           0058      Db9 = $58
  185           0059      D9 = $59
  186           005A      Ds9 = $5a
  187           005A      Eb9 = $5a
  188           005B      E9 = $5b
  189           005C      F9 = $5c
  190           005D      Fs9 = $5d
  191           005D      Gb9 = $5d
  192                     
  193           005E      rest = $5e
  194           0070      d_rest = $70
  195                     
  196                     ;note length constants (aliases)
  197           0080      thirtysecond = $80
  198           0081      sixteenth = $81
  199           0082      eighth = $82
  200           0083      quarter = $83
  201           0084      half = $84
  202           0085      whole = $85
  203           0086      d_sixteenth = $86
  204           0087      d_eighth = $87
  205           0088      d_quarter = $88
  206           0089      d_half = $89
  207           008A      d_whole = $8A   ;don't forget we are counting in hex
  208           008B      t_quarter = $8B
  209           008C      five_eighths =$8C
  210           008D      five_sixteenths=$8D
  211           008E      d_half_d_eight = $8E
  212           008F      whole_quarter_sixteenth = $8F
  213           0090      d_half_eighth = $90
  214           0091      whole_sixteenth = $91
  215           0092      sixtyfourth = $92
  216                     
  217           0000      arp_none = $00
  218           0001      arp_lowerThird = $01
  219                     
  220                     
  221           0300      sound_disable_flag  .rs 1   ;a flag variable that keeps track of whether the sound engine is disabled or not. 
  222           0301      sound_temp1 .rs 1           ;temporary variables
  223           0302      sound_temp2 .rs 1
  224           0303      sound_sq1_old .rs 1  ;the last value written to $4003
  225           0304      sound_sq2_old .rs 1  ;the last value written to $4007
  226           0305      soft_apu_ports .rs 20
  227                     
  228                     ;reserve 6 bytes, one for each stream
  229           0319      stream_curr_sound .rs 8     ;current song/sfx loaded
  230           0321      stream_status .rs 8         ;status byte.   bit0: (1: stream enabled; 0: stream disabled)
  231           0329      stream_channel .rs 8        ;what channel is this stream playing on?
  232           0331      stream_ptr_LO .rs 8         ;low byte of pointer to data stream
  233           0339      stream_ptr_HI .rs 8         ;high byte of pointer to data stream
  234           0341      stream_ve .rs 8             ;current volume envelope
  235           0349      stream_ve_index .rs 8       ;current position within the volume envelope
  236           0351      stream_vol_duty .rs 8       ;stream volume/duty settings
  237           0359      stream_note_idx .rs 8
  238           0361      stream_note_LO .rs 8        ;low 8 bits of period for the current note on a stream
  239           0369      stream_note_HI .rs 8        ;high 3 bits of period for the current note on a stream 
  240           0371      stream_tempo .rs 8          ;the value to add to our ticker total each frame
  241           0379      stream_ticker_total .rs 8   ;our running ticker total.
  242           0381      stream_note_length_counter .rs 8
  243           0389      stream_note_length .rs 8
  244           0391      stream_loop1 .rs 8          ;loop counter
  245           0399      stream_note_offset .rs 6
  246           039F      stream_pe .rs 8             ;current volume envelope
  247           03A7      stream_pe_index .rs 8       ;current position within the volume envelope
  248           03AF      stream_pe_offset .rs 8
  249           03B7      stream_pe_delay .rs 8
  250           03BF      stream_arp .rs 8
  251           03C7      stream_arp_index .rs 8
  252           03CF      stream_arp_offset .rs 8
#[2]   Defines/Defines.asm
   16           0400        .rsset $0400
   17           0500        .rsset $0500
   18           0600        .rsset $0600
   19           0700        .rsset $0700
   20           6000        .rsset $6000
#[3]   Defines/ScreenStateVariables.asm
   21                       .include "Defines/ScreenStateVariables.asm"
    1           6000      Screen_Copy             .rs 1024
    2           6400      ScreenB_Copy    .rs 1024
    3           6800      SaveScreen_Copy .rs 1024
    4           6C00      Palette_Copy    .rs 32
#[2]   Defines/Defines.asm
   22           7000        .rsset $7000
#[3]   Defines/SaveVariables.asm
   23                       .include "Defines/SaveVariables.asm"
    1           7000      hasContinue .rs 1
    2           7001      solutionCount           .rs 1
    3           7002      nonSolutionCount        .rs 1
    4           7003      GameTime                        .rs 4   ;in order - second, ten second, minute, 10 minute - max out at 99 minutes
    5           7007      bank_index      .rs 1
    6           7008      puzzle_index .rs 1
    7           7009      image_table_offset .rs 1
    8                     ;we can save these for the continue
    9                     ;on a continue- we just need to load the back ground as it was
   10                     ;we'll save out data for the puzzles- just need to know if it's 1) complete and 2) the time
   11                     ;we can do that in 4 bytes each, so 324 bytes
   12           700A      puzzle_clear_bank0 .rs 108
   13           7076      puzzle_clear_bank1 .rs 108
   14           70E2      puzzle_clear_bank2 .rs 108
   15                     
#[2]   Defines/Defines.asm
   24                     
   25                     
   26                     ;precompiled labels
   27                     
#[3]   SoundEnginePreComp.fns
   28                       .include "SoundEnginePreComp.fns"
    1                     ; SoundEnginePreComp.asm
    2           A514      endScreen_square1                = $A514
    3           A61F      se_op_adjust_note_offset         = $A61F
    4           A535      endScreen_square2                = $A535
    5           A10B      sound_load                       = $A10B
    6           A4ED      menu_header                      = $A4ED
    7           A662      note_table                       = $A662
    8           A46B      se_set_apu                       = $A46B
    9           A262      se_do_dpmc                       = $A262
   10           A606      se_op_set_loop1_counter          = $A606
   11           A2A0      se_check_rest                    = $A2A0
   12           A7A6      se_battlekid_loud                = $A7A6
   13           A4E0      song0_header                     = $A4E0
   14           A3B3      se_set_stream_pitch              = $A3B3
   15           A2FF      se_set_stream_volume             = $A2FF
   16           A800      se_tinyDecy                      = $A800
   17           A869      se_pe_bassKick                   = $A869
   18           A2D1      se_set_temp_ports                = $A2D1
   19           A83F      se_pe_mod                        = $A83F
   20           A58B      menuCursor_header                = $A58B
   21           A5AF      sound_opcodes                    = $A5AF
   22           A1BC      se_fetch_byte                    = $A1BC
   23           A5C5      se_op_endsound                   = $A5C5
   24           A7B8      se_battlekid_soft_long           = $A7B8
   25           A24C      se_do_noise                      = $A24C
   26           A793      se_ve_tgl_1                      = $A793
   27           A874      se_arp_none                      = $A874
   28           A556      endScreen_tri                    = $A556
   29           A720      note_length_table                = $A720
   30           A5DE      se_op_infinite_loop              = $A5DE
   31           A79B      se_ve_tgl_2                      = $A79B
   32           A657      se_op_change_arp                 = $A657
   33           A5F5      se_op_change_ve                  = $A5F5
   34           A876      se_arp_lowerThird                = $A876
   35           A597      puzzleCursor_header              = $A597
   36           A594      menuCursor_square2               = $A594
   37           A5AC      noiseBlip_noise                  = $A5AC
   38           A629      se_op_transpose                  = $A629
   39           A0EA      se_silence                       = $A0EA
   40           A2B6      se_opcode_launcher               = $A2B6
   41           A35B      se_set_stream_arpeggio           = $A35B
   42           A853      se_pe_sweep                      = $A853
   43           A803      se_noDecay                       = $A803
   44           A870      arpeggios                        = $A870
   45           A751      se_ve_1                          = $A751
   46           A619      se_op_set_note_offset            = $A619
   47           A600      se_op_duty                       = $A600
   48           A87B      BankSong                         = $A87B
   49           A649      se_op_change_pe                  = $A649
   50           A759      se_ve_2                          = $A759
   51           A770      se_ve_3                          = $A770
   52           A733      volume_envelopes                 = $A733
   53           A60C      se_op_loop1                      = $A60C
   54           A185      sound_play_frame                 = $A185
   55           A805      se_long_tremelo                  = $A805
   56           A5A3      noiseBlip_header                 = $A5A3
   57           A5A0      puzzleCursor_square2             = $A5A0
   58           A100      sound_disable                    = $A100
   59           A57D      endScreen_noise                  = $A57D
   60           A7CD      se_long_decay                    = $A7CD
   61           A7AC      se_battlekid_loud_long           = $A7AC
   62           A4D0      song_headers                     = $A4D0
   63           A7BE      se_drum_decay                    = $A7BE
   64           A4F0      drawImg_header                   = $A4F0
   65           A4F3      endScreen_header                 = $A4F3
   66           A83D      se_pe_none                       = $A83D
   67           A0D8      sound_init                       = $A0D8
   68           A7C8      se_hiHat_decay                   = $A7C8
   69           A7B2      se_battlekid_soft                = $A7B2
   70           A835      pitch_envelopes                  = $A835
#[2]   Defines/Defines.asm
   29                       ;.include "Picross.fns"
   30                       
#[1]   Picross.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/PPUMacros.asm
    3                             .include "Macros/PPUMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetPPUControl .macro
    6                     
    7                       LDA #\1  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    8                       STA PPU_CTRL
    9                       LDA #\2   ; enable sprites, enable background, no clipping on left side
   10                       STA PPU_MASK
   11                             
   12                       .endm
   13                       
   14                     MACROSetPPUAddress .macro
   15                     
   16                       LDA PPU_STATUS             ; read PPU status to reset the high/low latch
   17                       LDA #HIGH(\1)
   18                       STA PPU_ADDR            ; write the high byte of $2000 address
   19                       LDA #LOW(\1)
   20                       STA PPU_ADDR           ; write the low byte of $2000 address
   21                       
   22                       .endm
   23                         
   24                     
   25                     MACROAddPPUStringEntryRawData .macro
   26                     
   27                       LDA #$01
   28                       STA PPU_PendingWrite
   29                       LDA \1
   30                       JSR WriteToPPUString
   31                       LDA \2
   32                       JSR WriteToPPUString
   33                       LDA \3
   34                       JSR WriteToPPUString
   35                       LDA \4 
   36                       JSR WriteToPPUString
   37                       
   38                       .endm
   39                     
   40                     MACROAddPPUStringEntryRepeat .macro
   41                     
   42                       LDA #$01
   43                       STA PPU_PendingWrite
   44                       LDA \1
   45                       JSR WriteToPPUString
   46                       LDA \2
   47                       JSR WriteToPPUString
   48                       LDA #$40
   49                       ORA \3
   50                       ORA \4
   51                       JSR WriteToPPUString
   52                       LDA \5
   53                       JSR WriteToPPUString
   54                       
   55                       .endm
   56                       
   57                     MACROAddPPUStringEntryTable .macro
   58                      
   59                       LDA #$01
   60                       STA PPU_PendingWrite
   61                       LDA \1
   62                       JSR WriteToPPUString
   63                       LDA \2
   64                       JSR WriteToPPUString
   65                       LDA #$20
   66                       ORA \3
   67                       JSR WriteToPPUString
   68                       LDA #LOW(\4)
   69                       JSR WriteToPPUString
   70                       LDA #HIGH(\4)
   71                       JSR WriteToPPUString
   72                      
   73                       .endm
   74                     
   75                     MACROAddPPUStringEntryTablePtr .macro
   76                      
   77                       LDA #$01
   78                       STA PPU_PendingWrite
   79                       LDA \1
   80                       JSR WriteToPPUString
   81                       LDA \2
   82                       JSR WriteToPPUString
   83                       LDA #$20
   84                       ORA \3
   85                       JSR WriteToPPUString
   86                       LDA \4
   87                       JSR WriteToPPUString
   88                       LDA \4+1
   89                       JSR WriteToPPUString
   90                      
   91                       .endm
   92                     
#[2]   Macros/Macros.asm
#[3]   Macros/CallDynamicJump.asm
    4                             .include "Macros/CallDynamicJump.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROCallDynamicJump .macro
    6                     
    7                       LDA \1
    8                       JSR Dynamic_Jump
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetDoubleIndex.asm
    5                             .include "Macros/GetDoubleIndex.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = index to double
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROGetDoubleIndex .macro
    5                     
    6                             LDA \1
    7                             ASL A
    8                             TAY
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetLabelPointer.asm
    6                             .include "Macros/GetLabelPointer.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label we want address of
    3                     ;; \2 = address to store address to
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROGetLabelPointer .macro
    6                     
    7                             LDA #HIGH(\1)
    8                             LDX #LOW(\1)
    9                             
   10                             STX \2
   11                             STA \2+1
   12                             
   13                       .endm
   14                       
   15                     MACROGetPointer .macro
   16                     
   17                             LDA \1
   18                             STA \2
   19                             LDA \1+1
   20                             STA \2+1
   21                     
   22                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/FlagMacros.asm
    7                             .include "Macros/FlagMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetFlags .macro
    6                     
    7                       LDA \1
    8                       ORA #\2
    9                       STA \1
   10                             
   11                       .endm
   12                       
   13                     MACROClearFlags .macro
   14                     
   15                       LDA #\2
   16                       EOR #$FF
   17                       AND \1  
   18                       STA \1
   19                     
   20                       .endm
#[2]   Macros/Macros.asm
#[1]   Picross.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1                     
    2                     
    3           0000        .bank 0
    4           8000        .org $8000
    5                       
#[3]   Puzzles/house.asm
    6                       .include "Puzzles/house.asm" 
    1  00:8000            house:
    2  00:8000  02 82 00    .db $02, $82, $00, $21
       00:8003  21        
    3  00:8004  01 E0 0F    .db $01, $E0, $0F, $00, $78, $36, $C1, $08, $03, $80, $E7, $CE, $ED, $EE, $47, $44, $47, $44, $FF, $FE, $FF, $FE, $FF, $FE, $AB, $AA, $03, $80, $FF, $FE
       00:8007  00 78 36  
       00:800A  C1 08 03  
       00:800D  80 E7 CE  
       00:8010  ED EE 47  
       00:8013  44 47 44  
       00:8016  FF FE FF  
       00:8019  FE FF FE  
       00:801C  AB AA 03  
       00:801F  80 FF FE  
    4  00:8022  14 21 FF    .db $14, $21, $FF, $17, $20, $FF, $14, $21, $FF, $13, $10, $FF, $14, $12, $FF, $17, $10, $FF, $82, $10, $FF, $C2, $FF, $63, $10, $FF, $17, $10, $FF, $14, $11, $10, $FF, $13, $10, $FF, $14, $21, $FF, $17, $10, $FF, $14, $21, $FF
       00:8025  17 20 FF  
       00:8028  14 21 FF  
       00:802B  13 10 FF  
       00:802E  14 12 FF  
       00:8031  17 10 FF  
       00:8034  82 10 FF  
       00:8037  C2 FF 63  
       00:803A  10 FF 17  
       00:803D  10 FF 14  
       00:8040  11 10 FF  
       00:8043  13 10 FF  
       00:8046  14 21 FF  
       00:8049  17 10 FF  
       00:804C  14 21 FF  
    5  00:804F  40 FF 40    .db $40, $FF, $40, $FF, $22, $40, $FF, $11, $20, $FF, $30, $FF, $35, $30, $FF, $34, $23, $FF, $11, $31, $FF, $11, $31, $FF, $F0, $FF, $F0, $FF, $F0, $FF, $11, $13, $11, $10, $FF, $30, $FF, $F0, $FF
       00:8052  FF 22 40  
       00:8055  FF 11 20  
       00:8058  FF 30 FF  
       00:805B  35 30 FF  
       00:805E  34 23 FF  
       00:8061  11 31 FF  
       00:8064  11 31 FF  
       00:8067  F0 FF F0  
       00:806A  FF F0 FF  
       00:806D  11 13 11  
       00:8070  10 FF 30  
       00:8073  FF F0 FF  
    6  00:8076            houseImage:
    7  00:8076  AA AB FE   .db $AA, $AB, $FE, $AA, $AB, $FE, $AA, $AB, $FE, $AA, $FB, $FE, $AA, $2A, $BA, $AA, $A3, $2A, $A9, $5A, $3F, $29, $54, $63, $3F, $24, $62, $AF, $CE, $A2, $8A, $BF, $3A, $89, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $77, $75, $77, $77, $FF, $D5, $FF, $F5, $55, $55, $55, $40, $FF
       00:8079  AA AB FE  
       00:807C  AA AB FE  
       00:807F  AA FB FE  
       00:8082  AA 2A BA  
       00:8085  AA A3 2A  
       00:8088  A9 5A 3F  
       00:808B  29 54 63  
       00:808E  3F 24 62  
       00:8091  AF CE A2  
       00:8094  8A BF 3A  
       00:8097  89 55 55  
       00:809A  55 55 55  
       00:809D  55 55 55  
       00:80A0  55 55 55  
       00:80A3  77 75 77  
       00:80A6  77 FF D5  
       00:80A9  FF F5 55  
       00:80AC  55 55 40  
       00:80AF  FF        
    8  00:80B0            houseName:
    9  00:80B0  05 11 18    .db $05, $11, $18, $1E, $1C, $0E, $FF
       00:80B3  1E 1C 0E  
       00:80B6  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test.asm
    7                       .include "Puzzles/test.asm"
    1  00:80B7            test:
    2  00:80B7  02 01 00    .db $02, $01, $00, $00
       00:80BA  00        
    3  00:80BB  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:80BE  00 00 00  
       00:80C1  00 00 00  
       00:80C4  00 00 00  
       00:80C7  00 00 00  
       00:80CA  00 00 00  
       00:80CD  00 00 00  
       00:80D0  00 00 00  
       00:80D3  00 00 00  
       00:80D6  00 00 00  
    4  00:80D9  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80DC  FF 00 FF  
       00:80DF  00 FF 00  
       00:80E2  FF 00 FF  
       00:80E5  00 FF 00  
       00:80E8  FF 00 FF  
       00:80EB  00 FF 00  
       00:80EE  FF 00 FF  
       00:80F1  00 FF 00  
       00:80F4  FF 00 FF  
    5  00:80F7  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80FA  FF 00 FF  
       00:80FD  00 FF 00  
       00:8100  FF 00 FF  
       00:8103  00 FF 00  
       00:8106  FF 00 FF  
       00:8109  00 FF 00  
       00:810C  FF 00 FF  
       00:810F  00 FF 00  
       00:8112  FF 00 FF  
    6  00:8115            testImage:
    7  00:8115  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8118  1B 1B 1B  
       00:811B  1B 1B 1B  
       00:811E  1B 1B 1B  
       00:8121  1B 1B 1B  
       00:8124  1B 1B 1B  
       00:8127  1B 1B 1B  
       00:812A  1B 1B 1B  
       00:812D  1B 1B 1B  
       00:8130  1B 1B 1B  
       00:8133  1B 1B 1B  
       00:8136  1B 1B 1B  
       00:8139  1B 1B 1B  
       00:813C  1B 1B 1B  
       00:813F  1B 1B 1B  
       00:8142  1B 1B 1B  
       00:8145  1B 1B 1B  
       00:8148  1B 1B 1B  
       00:814B  1B 1B 00  
       00:814E  FF        
    8  00:814F            testName:
    9  00:814F  04 1D 0E    .db $04, $1D, $0E, $1C, $1D, $FF
       00:8152  1C 1D FF  
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test5.asm
    8                       .include "Puzzles/test5.asm"
    1  00:8155            test5:
    2  00:8155  00 01 00    .db $00, $01, $00, $32
       00:8158  32        
    3  00:8159  80 00 00    .db $80, $00, $00, $00, $00
       00:815C  00 00     
    4  00:815E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:8161  FF 00 FF  
       00:8164  00 FF 00  
       00:8167  FF        
    5  00:8168  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:816B  FF 00 FF  
       00:816E  00 FF 00  
       00:8171  FF        
    6  00:8172            test5Image:
    7  00:8172  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8175  1B 1B 1B  
       00:8178  00 FF     
    8  00:817A            test5Name:
    9  00:817A  05 1D 0E    .db $05, $1D, $0E, $1C, $1D, $05, $FF
       00:817D  1C 1D 05  
       00:8180  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test10.asm
    9                       .include "Puzzles/test10.asm"
    1  00:8181            test10:
    2  00:8181  01 01 00    .db $01, $01, $00, $16
       00:8184  16        
    3  00:8185  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:8188  00 00 00  
       00:818B  00 00 00  
       00:818E  00 00 00  
       00:8191  00 00 00  
       00:8194  00 00 00  
       00:8197  00 00     
    4  00:8199  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:819C  FF 00 FF  
       00:819F  00 FF 00  
       00:81A2  FF 00 FF  
       00:81A5  00 FF 00  
       00:81A8  FF 00 FF  
       00:81AB  00 FF     
    5  00:81AD  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:81B0  FF 00 FF  
       00:81B3  00 FF 00  
       00:81B6  FF 00 FF  
       00:81B9  00 FF 00  
       00:81BC  FF 00 FF  
       00:81BF  00 FF     
    6  00:81C1            test10Image:
    7  00:81C1  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $FF
       00:81C4  1B 1B 1B  
       00:81C7  1B 1B 1B  
       00:81CA  1B 1B 1B  
       00:81CD  1B 1B 1B  
       00:81D0  1B 1B 1B  
       00:81D3  1B 1B 1B  
       00:81D6  1B 1B 1B  
       00:81D9  1B FF     
    8  00:81DB            test10Name:
    9  00:81DB  06 1D 0E    .db $06, $1D, $0E, $1C, $1D, $01, $00, $FF
       00:81DE  1C 1D 01  
       00:81E1  00 FF     
#[2]   Banks/Bank0.asm
#[3]   Puzzles/myGlyph.asm
   10                       .include "Puzzles/myGlyph.asm"
    1  00:81E3            myGlyph:
    2  00:81E3  02 0F 00    .db $02, $0F, $00, $00
       00:81E6  00        
    3  00:81E7  AA AA 00    .db $AA, $AA, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00
       00:81EA  00 80 00  
       00:81ED  00 00 80  
       00:81F0  00 00 00  
       00:81F3  80 00 00  
       00:81F6  00 80 00  
       00:81F9  00 00 80  
       00:81FC  00 00 00  
       00:81FF  80 00 00  
       00:8202  00 80 00  
    4  00:8205  11 11 11    .db $11, $11, $11, $11, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF
       00:8208  11 FF 00  
       00:820B  FF 10 FF  
       00:820E  00 FF 10  
       00:8211  FF 00 FF  
       00:8214  10 FF 00  
       00:8217  FF 10 FF  
       00:821A  00 FF 10  
       00:821D  FF 00 FF  
       00:8220  10 FF 00  
       00:8223  FF 10 FF  
    5  00:8226  11 11 11    .db $11, $11, $11, $11, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF
       00:8229  11 FF 00  
       00:822C  FF 10 FF  
       00:822F  00 FF 10  
       00:8232  FF 00 FF  
       00:8235  10 FF 00  
       00:8238  FF 10 FF  
       00:823B  00 FF 10  
       00:823E  FF 00 FF  
       00:8241  10 FF 00  
       00:8244  FF 10 FF  
    6  00:8247            myGlyphImage:
    7  00:8247  D4 1F F0   .db $D4, $1F, $F0, $F3, $40, $F7, $57, $0D, $80, $AE, $8D, $16, $FA, $F0, $F5, $55, $5F, $AF, $C5, $AE, $F9, $7E, $8C, $EB, $E5, $55, $71, $B7, $DC, $A9, $7B, $EB, $4A, $21, $F2, $BD, $60, $99, $FA, $EA, $A1, $69, $3C, $02, $55, $25, $BF, $FA, $30, $06, $AF, $E0, $A0, $80, $3F, $C0, $00, $FF
       00:824A  F3 40 F7  
       00:824D  57 0D 80  
       00:8250  AE 8D 16  
       00:8253  FA F0 F5  
       00:8256  55 5F AF  
       00:8259  C5 AE F9  
       00:825C  7E 8C EB  
       00:825F  E5 55 71  
       00:8262  B7 DC A9  
       00:8265  7B EB 4A  
       00:8268  21 F2 BD  
       00:826B  60 99 FA  
       00:826E  EA A1 69  
       00:8271  3C 02 55  
       00:8274  25 BF FA  
       00:8277  30 06 AF  
       00:827A  E0 A0 80  
       00:827D  3F C0 00  
       00:8280  FF        
    8  00:8281            myGlyphName:
    9  00:8281  07 16 22    .db $07, $16, $22, $10, $15, $22, $19, $11, $FF
       00:8284  10 15 22  
       00:8287  19 11 FF  
#[2]   Banks/Bank0.asm
   11                     
   12           0001        .bank 1
   13           A000        .org $A000
   14                     ;puzzles
   15  01:A000  55 81       .word test5, test10, myGlyph, test, test, test, test, test, test
       01:A002  81 81     
       01:A004  E3 81     
       01:A006  B7 80     
       01:A008  B7 80     
       01:A00A  B7 80     
       01:A00C  B7 80     
       01:A00E  B7 80     
       01:A010  B7 80     
   16  01:A012  00 80       .word house, test, test, test, test, test, test, test, test
       01:A014  B7 80     
       01:A016  B7 80     
       01:A018  B7 80     
       01:A01A  B7 80     
       01:A01C  B7 80     
       01:A01E  B7 80     
       01:A020  B7 80     
       01:A022  B7 80     
   17  01:A024  00 80       .word house, test, test, test, test, test, test, test, test
       01:A026  B7 80     
       01:A028  B7 80     
       01:A02A  B7 80     
       01:A02C  B7 80     
       01:A02E  B7 80     
       01:A030  B7 80     
       01:A032  B7 80     
       01:A034  B7 80     
   18                     ;puzzle names
   19  01:A036  7A 81       .word test5Name, test10Name, myGlyphName, testName, testName, testName, testName, testName, testName
       01:A038  DB 81     
       01:A03A  81 82     
       01:A03C  4F 81     
       01:A03E  4F 81     
       01:A040  4F 81     
       01:A042  4F 81     
       01:A044  4F 81     
       01:A046  4F 81     
   20  01:A048  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A04A  4F 81     
       01:A04C  4F 81     
       01:A04E  4F 81     
       01:A050  4F 81     
       01:A052  4F 81     
       01:A054  4F 81     
       01:A056  4F 81     
       01:A058  4F 81     
   21  01:A05A  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A05C  4F 81     
       01:A05E  4F 81     
       01:A060  4F 81     
       01:A062  4F 81     
       01:A064  4F 81     
       01:A066  4F 81     
       01:A068  4F 81     
       01:A06A  4F 81     
   22                     ;puzzle sprites
   23  01:A06C  00 00 00    .db $00, $00, $00, $00
       01:A06F  00        
   24  01:A070  00 00 00    .db $00, $00, $00, $00
       01:A073  00        
   25  01:A074  00 00 00    .db $00, $00, $00, $00
       01:A077  00        
   26  01:A078  00 00 00    .db $00, $00, $00, $00
       01:A07B  00        
   27  01:A07C  00 00 00    .db $00, $00, $00, $00
       01:A07F  00        
   28  01:A080  00 00 00    .db $00, $00, $00, $00
       01:A083  00        
   29  01:A084  00 00 00    .db $00, $00, $00, $00
       01:A087  00        
   30  01:A088  00 00 00    .db $00, $00, $00, $00
       01:A08B  00        
   31  01:A08C  00 00 00    .db $00, $00, $00, $00
       01:A08F  00        
   32  01:A090  00 00 00    .db $00, $00, $00, $00
       01:A093  00        
   33  01:A094  00 00 00    .db $00, $00, $00, $00
       01:A097  00        
   34  01:A098  00 00 00    .db $00, $00, $00, $00
       01:A09B  00        
   35  01:A09C  00 00 00    .db $00, $00, $00, $00
       01:A09F  00        
   36  01:A0A0  00 00 00    .db $00, $00, $00, $00
       01:A0A3  00        
   37  01:A0A4  00 00 00    .db $00, $00, $00, $00
       01:A0A7  00        
   38  01:A0A8  00 00 00    .db $00, $00, $00, $00
       01:A0AB  00        
   39  01:A0AC  00 00 00    .db $00, $00, $00, $00
       01:A0AF  00        
   40  01:A0B0  00 00 00    .db $00, $00, $00, $00
       01:A0B3  00        
   41  01:A0B4  00 00 00    .db $00, $00, $00, $00
       01:A0B7  00        
   42  01:A0B8  00 00 00    .db $00, $00, $00, $00
       01:A0BB  00        
   43  01:A0BC  00 00 00    .db $00, $00, $00, $00
       01:A0BF  00        
   44  01:A0C0  00 00 00    .db $00, $00, $00, $00
       01:A0C3  00        
   45  01:A0C4  00 00 00    .db $00, $00, $00, $00
       01:A0C7  00        
   46  01:A0C8  00 00 00    .db $00, $00, $00, $00
       01:A0CB  00        
   47  01:A0CC  00 00 00    .db $00, $00, $00, $00
       01:A0CF  00        
   48  01:A0D0  00 00 00    .db $00, $00, $00, $00
       01:A0D3  00        
   49  01:A0D4  00 00 00    .db $00, $00, $00, $00
       01:A0D7  00        
   50                       
   51  01:A0D8              .incbin "SoundEnginePreComp.nes"
#[3]   Music/Bank0.i
   52                       .include "Music/Bank0.i"  ;holds the data for bank song
    1  01:A87B            bank0_header:
    2  01:A87B  05            .byte $05           ;4 streams
    3                         
    4  01:A87C  00            .byte MUSIC_SQ1     ;which stream
    5  01:A87D  01            .byte $01           ;status byte (stream enabled)
    6  01:A87E  00            .byte SQUARE_1      ;which channel
    7  01:A87F  70            .byte $70           ;initial duty (01)
    8  01:A880  0B            .byte ve_long_decay ;volume envelope
    9  01:A881  A4 A8         .word bank0_square1 ;pointer to stream
   10  01:A883  3A            .byte $3A           ;tempo
   11                         
   12  01:A884  01            .byte MUSIC_SQ2     ;which stream
   13  01:A885  01            .byte $01           ;status byte (stream enabled)
   14  01:A886  01            .byte SQUARE_2      ;which channel
   15  01:A887  70            .byte $70           ;initial duty (10)
   16  01:A888  03            .byte ve_tgl_1      ;volume envelope
   17  01:A889  48 AA         .word bank0_square2 ;pointer to stream
   18  01:A88B  3A            .byte $3A           ;tempo
   19                         
   20  01:A88C  02            .byte MUSIC_TRI     ;which stream
   21  01:A88D  01            .byte $01           ;status byte (stream enabled)
   22  01:A88E  02            .byte TRIANGLE      ;which channel
   23  01:A88F  80            .byte $80           ;initial volume (on)
   24  01:A890  03            .byte ve_tgl_1      ;volume envelope
   25  01:A891  3B AC         .word bank0_tri     ;pointer to stream
   26  01:A893  3A            .byte $3A           ;tempo
   27                         
   28  01:A894  03            .byte MUSIC_NOI     ;which stream
   29  01:A895  01            .byte $01           ;enabled
   30  01:A896  03            .byte NOISE     
   31  01:A897  30            .byte $30           ;initial duty_vol
   32  01:A898  0A            .byte ve_hiHat_decay ;volume envelope
   33  01:A899  27 AE         .word bank0_noise   ;pointer to stream
   34  01:A89B  3A            .byte $3A           ;tempo
   35                             
   36  01:A89C  06                .byte MUSIC_DPMC
   37  01:A89D  01                .byte $01
   38  01:A89E  04                .byte DPMC
   39  01:A89F  30                .byte $30
   40  01:A8A0  0A                .byte ve_hiHat_decay
   41  01:A8A1  4D AE             .word bank0_dpcm  ;pointer to stream
   42  01:A8A3  3A            .byte $3A           ;tempo
   43                     
   44                         
   45  01:A8A4            bank0_square1:
   46                     
   47  01:A8A4  A9 02             .byte pitch_envelope, pe_sweep
   48  01:A8A6  A2 0B             .byte volume_envelope, ve_long_decay 
   49  01:A8A8  83 5E         .byte quarter, rest
   50  01:A8AA  87 29             .byte d_eighth, D5
   51  01:A8AC  A9 01             .byte pitch_envelope, pe_mod
   52  01:A8AE  8E 27             .byte d_half_d_eight, C5
   53  01:A8B0  81 26 27          .byte sixteenth, B4, C5
   54  01:A8B3  82 26             .byte eighth, B4
   55  01:A8B5  81 21             .byte sixteenth, Fs4
   56  01:A8B7  82 22 24          .byte eighth, G4,  A4
   57  01:A8BA  81 26             .byte sixteenth, B4
   58  01:A8BC  A9 02             .byte pitch_envelope, pe_sweep
   59  01:A8BE  87 21             .byte d_eighth, Fs4
   60  01:A8C0  A9 01             .byte pitch_envelope, pe_mod
   61  01:A8C2  8F 24             .byte whole_quarter_sixteenth, A4
   62  01:A8C4  81 5E             .byte sixteenth, rest
   63  01:A8C6  15 16 17          .byte Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       01:A8C9  18 17 16  
       01:A8CC  15        
   64                             
   65  01:A8CD  A9 02             .byte pitch_envelope, pe_sweep
   66  01:A8CF  83 5E             .byte quarter, rest
   67  01:A8D1  87 29             .byte d_eighth, D5
   68  01:A8D3  A9 01             .byte pitch_envelope, pe_mod
   69  01:A8D5  8E 27             .byte d_half_d_eight, C5
   70  01:A8D7  81 26 27          .byte sixteenth, B4, C5
   71  01:A8DA  82 26             .byte eighth, B4
   72  01:A8DC  81 21             .byte sixteenth, Fs4
   73  01:A8DE  82 22 2B          .byte eighth, G4,  E5
   74  01:A8E1  A9 02             .byte pitch_envelope, pe_sweep
   75  01:A8E3  81 2E             .byte sixteenth, G5
   76  01:A8E5  A9 01             .byte pitch_envelope, pe_mod
   77  01:A8E7  8A 2D             .byte d_whole, Fs5
   78  01:A8E9  81 5E             .byte sixteenth, rest
   79  01:A8EB  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       01:A8EE  16 18 1D  
       01:A8F1  21        
   80                         
   81  01:A8F2  A9 02             .byte pitch_envelope, pe_sweep
   82  01:A8F4  83 5E             .byte quarter, rest
   83  01:A8F6  87 2E             .byte d_eighth, G5
   84  01:A8F8  A9 01             .byte pitch_envelope, pe_mod
   85  01:A8FA  8E 2C             .byte d_half_d_eight, F5
   86  01:A8FC  81 2B 2C          .byte sixteenth, E5, F5
   87  01:A8FF  82 2B             .byte eighth, E5
   88  01:A901  81 26             .byte sixteenth, B4
   89  01:A903  82 27 29          .byte eighth, C5,  D5
   90  01:A906  81 2B 29          .byte sixteenth, E5, D5 
   91  01:A909  82 26 27          .byte eighth, B4, C5, A4, B4, G4 
       01:A90C  24 26 22  
   92  01:A90F  81 27 26          .byte sixteenth, C5, B4, G4, F4, D4
       01:A912  22 20 1D  
   93  01:A915  A9 02             .byte pitch_envelope, pe_sweep
   94  01:A917  82 20             .byte eighth, F4
   95  01:A919  A9 01             .byte pitch_envelope, pe_mod
   96  01:A91B  81 24             .byte sixteenth, A4
   97  01:A91D  A9 02             .byte pitch_envelope, pe_sweep
   98  01:A91F  82 22             .byte eighth, G4
   99  01:A921  A9 01             .byte pitch_envelope, pe_mod
  100  01:A923  81 27             .byte sixteenth, C5
  101  01:A925  8C 26             .byte five_eighths, B4
  102                             
  103  01:A927  A9 02             .byte pitch_envelope, pe_sweep
  104  01:A929  83 5E             .byte quarter, rest
  105  01:A92B  87 29             .byte d_eighth, D5
  106  01:A92D  A9 01             .byte pitch_envelope, pe_mod
  107  01:A92F  8E 27             .byte d_half_d_eight, C5
  108  01:A931  81 26 27          .byte sixteenth, B4, C5
  109  01:A934  82 26             .byte eighth, B4
  110  01:A936  81 21             .byte sixteenth, Fs4
  111  01:A938  82 22             .byte eighth, G4
  112  01:A93A  A9 02             .byte pitch_envelope, pe_sweep
  113  01:A93C  24                .byte A4
  114  01:A93D  A9 01             .byte pitch_envelope, pe_mod
  115  01:A93F  81 22             .byte sixteenth, G4
  116  01:A941  8A 21             .byte d_whole, Fs4
  117  01:A943  81 5E             .byte sixteenth, rest
  118  01:A945  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       01:A948  16 18 1D  
       01:A94B  21        
  119                             
  120                             ;;bridge
  121                             
  122  01:A94C  87 24 22          .byte d_eighth, A4, G4, Fs4
       01:A94F  21        
  123  01:A950  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       01:A953  0A 2E 0B  
       01:A956  2D 0C     
  124  01:A958  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       01:A95B  0A 24 09  
       01:A95E  22        
  125  01:A95F  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       01:A962  1D 18     
  126  01:A964  82 1B             .byte eighth, C4
  127  01:A966  81 16             .byte sixteenth, G3
  128  01:A968  91 15             .byte whole_sixteenth, Fs3
  129  01:A96A  84 5E             .byte half, rest
  130  01:A96C  81 5E             .byte sixteenth, rest
  131  01:A96E  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:A971  18 16 18  
       01:A974  1D 21     
  132                             
  133  01:A976  87 24 22          .byte d_eighth, A4, G4, Fs4
       01:A979  21        
  134  01:A97A  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       01:A97D  0A 2E 0B  
       01:A980  2D 0C     
  135  01:A982  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       01:A985  0A 24 09  
       01:A988  22        
  136  01:A989  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       01:A98C  1D 18     
  137  01:A98E  82 1B             .byte eighth, C4
  138  01:A990  81 22             .byte sixteenth, G4
  139  01:A992  91 21             .byte whole_sixteenth, Fs4
  140  01:A994  84 5E             .byte half, rest
  141  01:A996  81 5E             .byte sixteenth, rest
  142  01:A998  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:A99B  18 16 18  
       01:A99E  1D 21     
  143                     
  144                             ;; reach-around
  145  01:A9A0  A9 02             .byte pitch_envelope, pe_sweep
  146  01:A9A2  A2 0B             .byte volume_envelope, ve_long_decay 
  147  01:A9A4  87 22 22          .byte d_eighth, G4, G4
  148  01:A9A7  A9 01             .byte pitch_envelope, pe_mod
  149  01:A9A9  A2 04             .byte volume_envelope, ve_tgl_2
  150  01:A9AB  82 24             .byte eighth, A4
  151  01:A9AD  A2 03             .byte volume_envelope, ve_tgl_1
  152  01:A9AF  80 5E 38          .byte thirtysecond, rest, F6
  153  01:A9B2  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:A9B5  33 30 2E  
       01:A9B8  2D 30     
  154  01:A9BA  82 2E             .byte eighth, G5
  155  01:A9BC  81 27             .byte sixteenth, C5
  156  01:A9BE  82 2C             .byte eighth, F5
  157  01:A9C0  81 29             .byte sixteenth, D5
  158  01:A9C2  82 2E             .byte eighth, G5
  159  01:A9C4  81 2D             .byte sixteenth, Fs5
  160  01:A9C6  82 30             .byte eighth, A5
  161  01:A9C8  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       01:A9CB  2D 33 30  
  162                             
  163  01:A9CE  A9 02             .byte pitch_envelope, pe_sweep
  164  01:A9D0  A2 0B             .byte volume_envelope, ve_long_decay 
  165  01:A9D2  87 22 22          .byte d_eighth, G4, G4
  166  01:A9D5  A9 01             .byte pitch_envelope, pe_mod
  167  01:A9D7  A2 04             .byte volume_envelope, ve_tgl_2
  168  01:A9D9  82 24             .byte eighth, A4
  169  01:A9DB  A2 03             .byte volume_envelope, ve_tgl_1
  170  01:A9DD  80 5E 1C          .byte thirtysecond, rest, Cs4
  171  01:A9E0  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       01:A9E3  29 24 29  
       01:A9E6  2D        
  172  01:A9E7  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       01:A9EA  2B 24 2C  
       01:A9ED  27 21     
  173  01:A9EF  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6, D6
       01:A9F2  24 29 24  
       01:A9F5  1F 2E 2D  
       01:A9F8  33 35     
  174                             
  175  01:A9FA  A9 02             .byte pitch_envelope, pe_sweep
  176  01:A9FC  A2 0B             .byte volume_envelope, ve_long_decay 
  177  01:A9FE  87 22 22          .byte d_eighth, G4, G4
  178  01:AA01  A9 01             .byte pitch_envelope, pe_mod
  179  01:AA03  A2 04             .byte volume_envelope, ve_tgl_2
  180  01:AA05  82 24             .byte eighth, A4
  181  01:AA07  A2 03             .byte volume_envelope, ve_tgl_1
  182  01:AA09  80 5E 38          .byte thirtysecond, rest, F6
  183  01:AA0C  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:AA0F  33 30 2E  
       01:AA12  2D 30     
  184  01:AA14  82 2E             .byte eighth, G5
  185  01:AA16  81 27             .byte sixteenth, C5
  186  01:AA18  82 2C             .byte eighth, F5
  187  01:AA1A  81 29             .byte sixteenth, D5
  188  01:AA1C  82 2E             .byte eighth, G5
  189  01:AA1E  81 2D             .byte sixteenth, Fs5
  190  01:AA20  82 30             .byte eighth, A5
  191  01:AA22  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       01:AA25  2D 33 30  
  192                             
  193  01:AA28  A9 02             .byte pitch_envelope, pe_sweep
  194  01:AA2A  A2 0B             .byte volume_envelope, ve_long_decay 
  195  01:AA2C  87 22 22          .byte d_eighth, G4, G4
  196  01:AA2F  A9 01             .byte pitch_envelope, pe_mod
  197  01:AA31  A2 04             .byte volume_envelope, ve_tgl_2
  198  01:AA33  82 24             .byte eighth, A4
  199  01:AA35  A2 0B             .byte volume_envelope, ve_long_decay 
  200  01:AA37  88 5E             .byte d_quarter, rest
  201  01:AA39  8C 24             .byte five_eighths, A4
  202  01:AA3B  A2 03             .byte volume_envelope, ve_tgl_1
  203  01:AA3D  81 5E             .byte sixteenth, rest
  204  01:AA3F  82 21 22          .byte eighth, Fs4, G4, Gs4
       01:AA42  23        
  205  01:AA43  81 24             .byte sixteenth, A4
  206                     
  207  01:AA45  A1                .byte loop
  208  01:AA46  A4 A8         .word bank0_square1
  209                             
  210                             
  211                     
  212  01:AA48            bank0_square2:
  213                     
  214  01:AA48  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:AA4B  0C 05     
  215  01:AA4D  82 11             .byte eighth, D3
  216  01:AA4F  81 05             .byte sixteenth, D2
  217  01:AA51  88 0F             .byte d_quarter, C3
  218  01:AA53  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AA56  0F        
  219  01:AA57  05 0A 0C          .byte D2, G2, A2, D2 
       01:AA5A  05        
  220  01:AA5B  82 11             .byte eighth, D3
  221  01:AA5D  81 05             .byte sixteenth, D2
  222  01:AA5F  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       01:AA62  0A 0B     
  223  01:AA64  81 0C             .byte sixteenth, A2
  224  01:AA66  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:AA69  0C 05     
  225  01:AA6B  82 11             .byte eighth, D3
  226  01:AA6D  81 05             .byte sixteenth, D2
  227  01:AA6F  88 0F             .byte d_quarter, C3
  228  01:AA71  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AA74  0F        
  229  01:AA75  05 0A 0C          .byte D2, G2, A2, D2 
       01:AA78  05        
  230  01:AA79  82 11             .byte eighth, D3
  231  01:AA7B  81 05             .byte sixteenth, D2
  232  01:AA7D  82 0F             .byte eighth, C3 
  233  01:AA7F  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       01:AA82  0B 0C 0B  
       01:AA85  0A 09     
  234                             
  235  01:AA87  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:AA8A  0C 05     
  236  01:AA8C  82 11             .byte eighth, D3
  237  01:AA8E  81 05             .byte sixteenth, D2
  238  01:AA90  88 0F             .byte d_quarter, C3
  239  01:AA92  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AA95  0F        
  240  01:AA96  05 0A 0C          .byte D2, G2, A2, D2 
       01:AA99  05        
  241  01:AA9A  82 11             .byte eighth, D3
  242  01:AA9C  81 05             .byte sixteenth, D2
  243  01:AA9E  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       01:AAA1  0A 0B     
  244  01:AAA3  81 0C             .byte sixteenth, A2
  245  01:AAA5  05 0A 0C          .byte D2, G2, A2, D2 
       01:AAA8  05        
  246  01:AAA9  82 11             .byte eighth, D3
  247  01:AAAB  81 05             .byte sixteenth, D2
  248  01:AAAD  88 0F             .byte d_quarter, C3
  249  01:AAAF  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AAB2  0F        
  250  01:AAB3  05 0A 0C          .byte D2, G2, A2, D2 
       01:AAB6  05        
  251  01:AAB7  82 11             .byte eighth, D3
  252  01:AAB9  81 05             .byte sixteenth, D2
  253  01:AABB  82 0F             .byte eighth, C3 
  254  01:AABD  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       01:AAC0  0C 0A 0C  
       01:AAC3  11 15     
  255                             
  256  01:AAC5  0A 0F 11          .byte G2, C3, D3, G2 
       01:AAC8  0A        
  257  01:AAC9  82 16             .byte eighth, G3
  258  01:AACB  81 0A             .byte sixteenth, G2
  259  01:AACD  88 14             .byte d_quarter, F3
  260  01:AACF  81 0F 11          .byte sixteenth, C3, D3, F3
       01:AAD2  14        
  261  01:AAD3  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       01:AAD6  11 0A     
  262  01:AAD8  82 16             .byte eighth, G3
  263  01:AADA  81 0A             .byte sixteenth, G2
  264  01:AADC  88 14             .byte d_quarter, F3
  265  01:AADE  81 14 13          .byte sixteenth, F3, E3, D3
       01:AAE1  11        
  266  01:AAE2  0A 0F 11          .byte G2, C3, D3, G2 
       01:AAE5  0A        
  267  01:AAE6  82 16             .byte eighth, G3
  268  01:AAE8  81 0A             .byte sixteenth, G2
  269  01:AAEA  88 14             .byte d_quarter, F3
  270  01:AAEC  81 0F 11          .byte sixteenth, C3, D3, F3
       01:AAEF  14        
  271  01:AAF0  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       01:AAF3  11 0A     
  272  01:AAF5  82 16             .byte eighth, G3
  273  01:AAF7  81 0A             .byte sixteenth, G2
  274  01:AAF9  88 14             .byte d_quarter, F3
  275  01:AAFB  81 14 13          .byte sixteenth, F3, E3, D3
       01:AAFE  11        
  276                     
  277  01:AAFF  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:AB02  0C 05     
  278  01:AB04  82 11             .byte eighth, D3
  279  01:AB06  81 05             .byte sixteenth, D2
  280  01:AB08  88 0F             .byte d_quarter, C3
  281  01:AB0A  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AB0D  0F        
  282  01:AB0E  05 0A 0C          .byte D2, G2, A2, D2 
       01:AB11  05        
  283  01:AB12  82 11             .byte eighth, D3
  284  01:AB14  81 05             .byte sixteenth, D2
  285  01:AB16  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       01:AB19  0A 0B     
  286  01:AB1B  81 0C             .byte sixteenth, A2
  287  01:AB1D  05 0A 0C          .byte D2, G2, A2, D2 
       01:AB20  05        
  288  01:AB21  82 11             .byte eighth, D3
  289  01:AB23  81 05             .byte sixteenth, D2
  290  01:AB25  88 0F             .byte d_quarter, C3
  291  01:AB27  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AB2A  0F        
  292  01:AB2B  05 0A 0C          .byte D2, G2, A2, D2 
       01:AB2E  05        
  293  01:AB2F  82 11             .byte eighth, D3
  294  01:AB31  81 05             .byte sixteenth, D2
  295  01:AB33  82 0F             .byte eighth, C3 
  296  01:AB35  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       01:AB38  0C 0A 0C  
       01:AB3B  11 15     
  297                             
  298                             ;;bridge
  299                             
  300  01:AB3D  A2 0B             .byte volume_envelope, ve_long_decay 
  301  01:AB3F  87 1B 1A          .byte d_eighth, C4, B3, A3
       01:AB42  18        
  302  01:AB43  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       01:AB46  0B 0C 0B  
       01:AB49  0A 09     
  303  01:AB4B  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       01:AB4E  15 11     
  304  01:AB50  82 14             .byte eighth, F3
  305  01:AB52  81 11             .byte sixteenth, D3
  306  01:AB54  90 0F             .byte d_half_eighth, C3
  307  01:AB56  A2 03             .byte volume_envelope, ve_tgl_1
  308  01:AB58  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AB5B  0F        
  309  01:AB5C  05 0A 0C          .byte D2, G2, A2, D2 
       01:AB5F  05        
  310  01:AB60  82 11             .byte eighth, D3
  311  01:AB62  81 05             .byte sixteenth, D2
  312  01:AB64  82 0F             .byte eighth, C3 
  313  01:AB66  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       01:AB69  0C 0A 0C  
       01:AB6C  11 15     
  314                             
  315  01:AB6E  A2 0B             .byte volume_envelope, ve_long_decay 
  316  01:AB70  87 1B 1A          .byte d_eighth, C4, B3, A3
       01:AB73  18        
  317  01:AB74  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       01:AB77  0B 0C 0B  
       01:AB7A  0A 09     
  318  01:AB7C  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       01:AB7F  15 11     
  319  01:AB81  82 14             .byte eighth, F3
  320  01:AB83  81 1B             .byte sixteenth, C4
  321  01:AB85  90 1D             .byte d_half_eighth, D4
  322  01:AB87  A2 03             .byte volume_envelope, ve_tgl_1
  323  01:AB89  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AB8C  0F        
  324  01:AB8D  05 0A 0C          .byte D2, G2, A2, D2 
       01:AB90  05        
  325  01:AB91  82 11             .byte eighth, D3
  326  01:AB93  81 05             .byte sixteenth, D2
  327  01:AB95  82 0F             .byte eighth, C3 
  328  01:AB97  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       01:AB9A  0C 0A 0C  
       01:AB9D  11 15     
  329                             
  330                             ;; reach-around
  331  01:AB9F  A2 0B             .byte volume_envelope, ve_long_decay 
  332  01:ABA1  87 1F 1F          .byte d_eighth, E4, E4
  333  01:ABA4  A2 04             .byte volume_envelope, ve_tgl_2
  334  01:ABA6  82 21             .byte eighth, Fs4
  335  01:ABA8  A2 07             .byte volume_envelope, ve_battlekid_2
  336  01:ABAA  86 5E             .byte d_sixteenth, rest
  337  01:ABAC  80 38             .byte thirtysecond, F6
  338  01:ABAE  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:ABB1  33 30 2E  
       01:ABB4  2D 30     
  339  01:ABB6  82 2E             .byte eighth, G5
  340  01:ABB8  81 27             .byte sixteenth, C5
  341  01:ABBA  82 2C             .byte eighth, F5
  342  01:ABBC  81 29             .byte sixteenth, D5
  343  01:ABBE  82 2E             .byte eighth, G5
  344  01:ABC0  81 2D             .byte sixteenth, Fs5
  345  01:ABC2  82 30             .byte eighth, A5
  346  01:ABC4  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       01:ABC7  2D 33     
  347                             
  348  01:ABC9  A2 0B             .byte volume_envelope, ve_long_decay 
  349  01:ABCB  87 1F 1F          .byte d_eighth, E4, E4
  350  01:ABCE  A2 04             .byte volume_envelope, ve_tgl_2
  351  01:ABD0  82 21             .byte eighth, Fs4
  352  01:ABD2  A2 07             .byte volume_envelope, ve_battlekid_2
  353  01:ABD4  86 5E             .byte d_sixteenth, rest
  354  01:ABD6  80 1C             .byte thirtysecond, Cs4
  355  01:ABD8  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       01:ABDB  29 24 29  
       01:ABDE  2D        
  356  01:ABDF  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       01:ABE2  2B 24 2C  
       01:ABE5  27 21     
  357  01:ABE7  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6
       01:ABEA  24 29 24  
       01:ABED  1F 2E 2D  
       01:ABF0  33        
  358                             
  359  01:ABF1  A2 0B             .byte volume_envelope, ve_long_decay 
  360  01:ABF3  87 1F 1F          .byte d_eighth, E4, E4
  361  01:ABF6  A2 04             .byte volume_envelope, ve_tgl_2
  362  01:ABF8  82 21             .byte eighth, Fs4
  363  01:ABFA  A2 07             .byte volume_envelope, ve_battlekid_2
  364  01:ABFC  86 5E             .byte d_sixteenth, rest
  365  01:ABFE  80 38             .byte thirtysecond, F6
  366  01:AC00  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:AC03  33 30 2E  
       01:AC06  2D 30     
  367  01:AC08  82 2E             .byte eighth, G5
  368  01:AC0A  81 27             .byte sixteenth, C5
  369  01:AC0C  82 2C             .byte eighth, F5
  370  01:AC0E  81 29             .byte sixteenth, D5
  371  01:AC10  82 2E             .byte eighth, G5
  372  01:AC12  81 2D             .byte sixteenth, Fs5
  373  01:AC14  82 30             .byte eighth, A5
  374  01:AC16  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       01:AC19  2D 33     
  375                             
  376  01:AC1B  A2 0B             .byte volume_envelope, ve_long_decay 
  377  01:AC1D  87 1F 1F          .byte d_eighth, E4, E4
  378  01:AC20  A2 04             .byte volume_envelope, ve_tgl_2
  379  01:AC22  82 21             .byte eighth, Fs4
  380  01:AC24  A2 0B             .byte volume_envelope, ve_long_decay 
  381  01:AC26  88 5E             .byte d_quarter, rest
  382  01:AC28  AA 01             .byte arpeggio, arp_lowerThird
  383  01:AC2A  8C 27             .byte five_eighths, C5
  384  01:AC2C  A2 03             .byte volume_envelope, ve_tgl_1
  385  01:AC2E  AA 00             .byte arpeggio, arp_none
  386  01:AC30  81 5E             .byte sixteenth, rest
  387  01:AC32  82 09 0A          .byte eighth, Fs2, G2, Gs2
       01:AC35  0B        
  388  01:AC36  81 0C             .byte sixteenth, A2
  389                             
  390  01:AC38  A1            .byte loop
  391  01:AC39  48 AA         .word bank0_square2
  392                         
  393  01:AC3B            bank0_tri:
  394                     
  395  01:AC3B  81 11 16          .byte sixteenth, D3, G3, A3, D3 
       01:AC3E  18 11     
  396  01:AC40  82 1D             .byte eighth, D4
  397  01:AC42  81 11             .byte sixteenth, D3
  398  01:AC44  88 1B             .byte d_quarter, C4
  399  01:AC46  81 16 18          .byte sixteenth, G3, A3, C4
       01:AC49  1B        
  400  01:AC4A  11 16 18          .byte D3, G3, A3, D3 
       01:AC4D  11        
  401  01:AC4E  82 1D             .byte eighth, D4
  402  01:AC50  81 11             .byte sixteenth, D3
  403  01:AC52  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       01:AC55  16 17     
  404  01:AC57  81 18             .byte sixteenth, A3
  405  01:AC59  11 16 18          .byte D3, G3, A3, D3 
       01:AC5C  11        
  406  01:AC5D  82 1D             .byte eighth, D4
  407  01:AC5F  81 11             .byte sixteenth, D3
  408  01:AC61  88 1B             .byte d_quarter, C4
  409  01:AC63  81 16 18          .byte sixteenth, G3, A3, C4
       01:AC66  1B        
  410  01:AC67  11 16 18          .byte D3, G3, A3, D3 
       01:AC6A  11        
  411  01:AC6B  82 1D             .byte eighth, D4
  412  01:AC6D  81 11             .byte sixteenth, D3
  413  01:AC6F  82 1B             .byte eighth, C4
  414  01:AC71  81 15 16          .byte sixteenth, Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       01:AC74  17 18 17  
       01:AC77  16 15     
  415                             
  416  01:AC79  11 16 18          .byte D3, G3, A3, D3 
       01:AC7C  11        
  417  01:AC7D  82 1D             .byte eighth, D4
  418  01:AC7F  81 11             .byte sixteenth, D3
  419  01:AC81  88 1B             .byte d_quarter, C4
  420  01:AC83  81 16 18          .byte sixteenth, G3, A3, C4
       01:AC86  1B        
  421  01:AC87  11 16 18          .byte D3, G3, A3, D3 
       01:AC8A  11        
  422  01:AC8B  82 1D             .byte eighth, D4
  423  01:AC8D  81 11             .byte sixteenth, D3
  424  01:AC8F  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       01:AC92  16 17     
  425  01:AC94  81 18             .byte sixteenth, A3
  426  01:AC96  11 16 18          .byte D3, G3, A3, D3 
       01:AC99  11        
  427  01:AC9A  82 1D             .byte eighth, D4
  428  01:AC9C  81 11             .byte sixteenth, D3
  429  01:AC9E  88 1B             .byte d_quarter, C4
  430  01:ACA0  81 16 18          .byte sixteenth, G3, A3, C4
       01:ACA3  1B        
  431  01:ACA4  11 16 18          .byte D3, G3, A3, D3 
       01:ACA7  11        
  432  01:ACA8  82 1D             .byte eighth, D4
  433  01:ACAA  81 11             .byte sixteenth, D3
  434  01:ACAC  82 1B             .byte eighth, C4
  435  01:ACAE  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:ACB1  18 16 18  
       01:ACB4  1D 21     
  436                             
  437  01:ACB6  16 1B 1D          .byte G3, C4, D4, G3 
       01:ACB9  16        
  438  01:ACBA  82 22             .byte eighth, G4
  439  01:ACBC  81 16             .byte sixteenth, G3
  440  01:ACBE  88 20             .byte d_quarter, F4
  441  01:ACC0  81 1B 1D          .byte sixteenth, C4, D4, F4
       01:ACC3  20        
  442  01:ACC4  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       01:ACC7  1D 16     
  443  01:ACC9  82 22             .byte eighth, G4
  444  01:ACCB  81 16             .byte sixteenth, G3
  445  01:ACCD  88 20             .byte d_quarter, F4
  446  01:ACCF  81 20 1F          .byte sixteenth, F4, E4, D4
       01:ACD2  1D        
  447  01:ACD3  16 1B 1D          .byte G3, C4, D4, G3 
       01:ACD6  16        
  448  01:ACD7  82 22             .byte eighth, G4
  449  01:ACD9  81 16             .byte sixteenth, G3
  450  01:ACDB  88 20             .byte d_quarter, F4
  451  01:ACDD  81 1B 1D          .byte sixteenth, C4, D4, F4
       01:ACE0  20        
  452  01:ACE1  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       01:ACE4  1D 16     
  453  01:ACE6  82 22             .byte eighth, G4
  454  01:ACE8  81 16             .byte sixteenth, G3
  455  01:ACEA  88 20             .byte d_quarter, F4
  456  01:ACEC  81 20 1F          .byte sixteenth, F4, E4, D4
       01:ACEF  1D        
  457                     
  458  01:ACF0  11 16 18          .byte D3, G3, A3, D3 
       01:ACF3  11        
  459  01:ACF4  82 1D             .byte eighth, D4
  460  01:ACF6  81 11             .byte sixteenth, D3
  461  01:ACF8  88 1B             .byte d_quarter, C4
  462  01:ACFA  81 16 18          .byte sixteenth, G3, A3, C4
       01:ACFD  1B        
  463  01:ACFE  11 16 18          .byte D3, G3, A3, D3 
       01:AD01  11        
  464  01:AD02  82 1D             .byte eighth, D4
  465  01:AD04  81 11             .byte sixteenth, D3
  466  01:AD06  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       01:AD09  16 17     
  467  01:AD0B  81 18             .byte sixteenth, A3
  468  01:AD0D  11 16 18          .byte D3, G3, A3, D3 
       01:AD10  11        
  469  01:AD11  82 1D             .byte eighth, D4
  470  01:AD13  81 11             .byte sixteenth, D3
  471  01:AD15  88 1B             .byte d_quarter, C4
  472  01:AD17  81 16 18          .byte sixteenth, G3, A3, C4
       01:AD1A  1B        
  473  01:AD1B  11 16 18          .byte D3, G3, A3, D3 
       01:AD1E  11        
  474  01:AD1F  82 1D             .byte eighth, D4
  475  01:AD21  81 11             .byte sixteenth, D3
  476  01:AD23  82 1B             .byte eighth, C4
  477  01:AD25  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:AD28  18 16 18  
       01:AD2B  1D 21     
  478                             
  479                             ;;bridge
  480                             
  481  01:AD2D  81                .byte sixteenth
  482  01:AD2E  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       01:AD31  22 1D 16  
       01:AD34  18 1D 24  
  483  01:AD37  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       01:AD3A  35 33 30  
       01:AD3D  2E        
  484  01:AD3E  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       01:AD41  1F 18 12  
       01:AD44  1D 18 11  
  485  01:AD47  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       01:AD4A  18 11 14  
       01:AD4D  0F        
  486  01:AD4E  11 16 18          .byte D3, G3, A3, D3 
       01:AD51  11        
  487  01:AD52  82 1D             .byte eighth, D4
  488  01:AD54  81 11             .byte sixteenth, D3
  489  01:AD56  88 1B             .byte d_quarter, C4
  490  01:AD58  81 16 18          .byte sixteenth, G3, A3, C4
       01:AD5B  1B        
  491  01:AD5C  11 16 18          .byte D3, G3, A3, D3 
       01:AD5F  11        
  492  01:AD60  82 1D             .byte eighth, D4
  493  01:AD62  81 11             .byte sixteenth, D3
  494  01:AD64  82 1B             .byte eighth, C4
  495  01:AD66  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:AD69  18 16 18  
       01:AD6C  1D 21     
  496  01:AD6E  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       01:AD71  22 1D 16  
       01:AD74  18 1D 24  
  497  01:AD77  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       01:AD7A  35 33 30  
       01:AD7D  2E        
  498  01:AD7E  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       01:AD81  1F 18 12  
       01:AD84  1D 18 11  
  499  01:AD87  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       01:AD8A  18 11 14  
       01:AD8D  0F        
  500  01:AD8E  11 16 18          .byte D3, G3, A3, D3 
       01:AD91  11        
  501  01:AD92  82 1D             .byte eighth, D4
  502  01:AD94  81 11             .byte sixteenth, D3
  503  01:AD96  88 1B             .byte d_quarter, C4
  504  01:AD98  81 16 18          .byte sixteenth, G3, A3, C4
       01:AD9B  1B        
  505  01:AD9C  11 16 18          .byte D3, G3, A3, D3 
       01:AD9F  11        
  506  01:ADA0  82 1D             .byte eighth, D4
  507  01:ADA2  81 11             .byte sixteenth, D3
  508  01:ADA4  82 1B             .byte eighth, C4
  509  01:ADA6  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:ADA9  18 16 18  
       01:ADAC  1D 21     
  510                             
  511                             ;; reach-around
  512  01:ADAE  A2 0B             .byte volume_envelope, ve_long_decay 
  513  01:ADB0  87 0F 0F          .byte d_eighth, C3, C3
  514  01:ADB3  A2 04             .byte volume_envelope, ve_tgl_2
  515  01:ADB5  82 11             .byte eighth, D3
  516  01:ADB7  A2 03             .byte volume_envelope, ve_tgl_1
  517  01:ADB9  87 5E             .byte d_eighth, rest
  518  01:ADBB  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADBE  1D        
  519  01:ADBF  8D 5E             .byte five_sixteenths, rest
  520  01:ADC1  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADC4  1D        
  521  01:ADC5  8D 5E             .byte five_sixteenths, rest
  522  01:ADC7  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADCA  1D        
  523  01:ADCB  82 5E             .byte eighth, rest
  524                             
  525  01:ADCD  A2 0B             .byte volume_envelope, ve_long_decay 
  526  01:ADCF  87 0F 0F          .byte d_eighth, C3, C3
  527  01:ADD2  A2 04             .byte volume_envelope, ve_tgl_2
  528  01:ADD4  82 11             .byte eighth, D3
  529  01:ADD6  A2 03             .byte volume_envelope, ve_tgl_1
  530  01:ADD8  87 5E             .byte d_eighth, rest
  531  01:ADDA  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADDD  1D        
  532  01:ADDE  8D 5E             .byte five_sixteenths, rest
  533  01:ADE0  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADE3  1D        
  534  01:ADE4  8D 5E             .byte five_sixteenths, rest
  535  01:ADE6  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADE9  1D        
  536  01:ADEA  82 5E             .byte eighth, rest
  537                                     
  538  01:ADEC  A2 0B             .byte volume_envelope, ve_long_decay 
  539  01:ADEE  87 0F 0F          .byte d_eighth, C3, C3
  540  01:ADF1  A2 04             .byte volume_envelope, ve_tgl_2
  541  01:ADF3  82 11             .byte eighth, D3
  542  01:ADF5  A2 03             .byte volume_envelope, ve_tgl_1
  543  01:ADF7  87 5E             .byte d_eighth, rest
  544  01:ADF9  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADFC  1D        
  545  01:ADFD  8D 5E             .byte five_sixteenths, rest
  546  01:ADFF  81 11 11          .byte sixteenth, D3, D3, D4
       01:AE02  1D        
  547  01:AE03  8D 5E             .byte five_sixteenths, rest
  548  01:AE05  81 11 11          .byte sixteenth, D3, D3, D4
       01:AE08  1D        
  549  01:AE09  82 5E             .byte eighth, rest
  550                             
  551  01:AE0B  A2 0B             .byte volume_envelope, ve_long_decay 
  552  01:AE0D  87 0F 0F          .byte d_eighth, C3, C3
  553  01:AE10  A2 04             .byte volume_envelope, ve_tgl_2
  554  01:AE12  82 11             .byte eighth, D3
  555  01:AE14  A2 0B             .byte volume_envelope, ve_long_decay
  556  01:AE16  88 5E             .byte d_quarter, rest
  557  01:AE18  8C 0C             .byte five_eighths, A2
  558  01:AE1A  A2 03             .byte volume_envelope, ve_tgl_1
  559  01:AE1C  81 5E             .byte sixteenth, rest
  560  01:AE1E  82 15 16          .byte eighth, Fs3, G3, Gs3
       01:AE21  17        
  561  01:AE22  81 18             .byte sixteenth, A3
  562                             
  563  01:AE24  A1            .byte loop
  564  01:AE25  3B AC         .word bank0_tri
  565                         
  566  01:AE27            bank0_noise:
  567  01:AE27  81 04 04      .byte sixteenth, $04, $04, $04, $04
       01:AE2A  04 04     
  568  01:AE2C  A2 09             .byte volume_envelope, ve_drum_decay 
  569  01:AE2E  81 04         .byte sixteenth, $04
  570  01:AE30  A2 0A             .byte volume_envelope, ve_hiHat_decay
  571  01:AE32  81 04 04      .byte sixteenth, $04, $04, $04, $04
       01:AE35  04 04     
  572  01:AE37  A2 09         .byte volume_envelope, ve_drum_decay 
  573  01:AE39  81 04         .byte sixteenth, $04
  574  01:AE3B  A2 0A             .byte volume_envelope, ve_hiHat_decay
  575  01:AE3D  81 04 04      .byte sixteenth, $04, $04
  576  01:AE40  A2 09             .byte volume_envelope, ve_drum_decay 
  577  01:AE42  81 04         .byte sixteenth, $04
  578  01:AE44  A2 0A             .byte volume_envelope, ve_hiHat_decay
  579  01:AE46  81 04 04          .byte sixteenth, $04, $04, $04
       01:AE49  04        
  580  01:AE4A  A1            .byte loop
  581  01:AE4B  27 AE         .word bank0_noise
  582                     
  583  01:AE4D            bank0_dpcm:
  584  01:AE4D  83 0B 1B          .byte quarter, $0B, $1B, $0B, $1B
       01:AE50  0B 1B     
  585  01:AE52  0B 87 1B          .byte $0B, d_eighth, $1B, sixteenth, $1B 
       01:AE55  81 1B     
  586  01:AE57  82 0B 0B          .byte eighth, $0B, $0B, quarter, $1B
       01:AE5A  83 1B     
  587  01:AE5C  A1                .byte loop
  588  01:AE5D  4D AE             .word bank0_dpcm
#[2]   Banks/Bank0.asm
   53                     
   54           BFFA        .org $BFFA     ;first of the three vectors starts here
   55  01:BFFA  7E D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   56                                        ;processor will jump to the label NMI:
   57  01:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   58                                        ;to the label RESET:
   59  01:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
#[3]   Puzzles/frog.asm
    4                       .include "Puzzles/frog.asm"
    1  02:8000            frog:
    2  02:8000  02 62 00    .db $02, $62, $00, $19
       02:8003  19        
    3  02:8004  00 00 00    .db $00, $00, $00, $00, $18, $30, $24, $48, $2C, $68, $1F, $F0, $3F, $F8, $7F, $FC, $7F, $FC, $60, $0C, $33, $98, $18, $30, $0F, $E0, $3C, $78, $78, $3C
       02:8007  00 18 30  
       02:800A  24 48 2C  
       02:800D  68 1F F0  
       02:8010  3F F8 7F  
       02:8013  FC 7F FC  
       02:8016  60 0C 33  
       02:8019  98 18 30  
       02:801C  0F E0 3C  
       02:801F  78 78 3C  
    4  02:8022  00 FF 13    .db $00, $FF, $13, $FF, $25, $20, $FF, $22, $41, $FF, $45, $10, $FF, $26, $FF, $11, $40, $FF, $11, $40, $FF, $11, $40, $FF, $26, $FF, $45, $10, $FF, $22, $41, $FF, $25, $20, $FF, $13, $FF, $00, $FF
       02:8025  FF 25 20  
       02:8028  FF 22 41  
       02:802B  FF 45 10  
       02:802E  FF 26 FF  
       02:8031  11 40 FF  
       02:8034  11 40 FF  
       02:8037  11 40 FF  
       02:803A  26 FF 45  
       02:803D  10 FF 22  
       02:8040  41 FF 25  
       02:8043  20 FF 13  
       02:8046  FF 00 FF  
    5  02:8049  00 FF 00    .db $00, $FF, $00, $FF, $22, $FF, $11, $11, $FF, $12, $21, $FF, $90, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $22, $FF, $23, $20, $FF, $22, $FF, $70, $FF, $44, $FF, $44, $FF
       02:804C  FF 22 FF  
       02:804F  11 11 FF  
       02:8052  12 21 FF  
       02:8055  90 FF B0  
       02:8058  FF D0 FF  
       02:805B  D0 FF 22  
       02:805E  FF 23 20  
       02:8061  FF 22 FF  
       02:8064  70 FF 44  
       02:8067  FF 44 FF  
    6  02:806A            frogImage:
    7  02:806A  55 55 55   .db $55, $55, $55, $55, $55, $55, $55, $55, $69, $55, $A5, $56, $F9, $5B, $E5, $5B, $25, $63, $95, $5A, $AA, $A9, $55, $AA, $22, $A9, $5A, $AA, $AA, $A9, $6A, $AA, $AA, $A5, $A0, $00, $02, $95, $A0, $54, $29, $55, $A0, $02, $95, $55, $AA, $A9, $55, $6A, $BF, $AA, $56, $AB, $FF, $AA, $40, $FF
       02:806D  55 55 55  
       02:8070  55 55 69  
       02:8073  55 A5 56  
       02:8076  F9 5B E5  
       02:8079  5B 25 63  
       02:807C  95 5A AA  
       02:807F  A9 55 AA  
       02:8082  22 A9 5A  
       02:8085  AA AA A9  
       02:8088  6A AA AA  
       02:808B  A5 A0 00  
       02:808E  02 95 A0  
       02:8091  54 29 55  
       02:8094  A0 02 95  
       02:8097  55 AA A9  
       02:809A  55 6A BF  
       02:809D  AA 56 AB  
       02:80A0  FF AA 40  
       02:80A3  FF        
    8  02:80A4            frogName:
    9  02:80A4  04 0F 1B    .db $04, $0F, $1B, $18, $10, $FF
       02:80A7  18 10 FF  
#[2]   Banks/Bank1.asm
    5                     
    6           0003        .bank 3
    7           A000        .org $A000
    8                      
    9                     ;puzzles
   10  03:A000  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A002  00 80     
       03:A004  00 80     
       03:A006  00 80     
       03:A008  00 80     
       03:A00A  00 80     
       03:A00C  00 80     
       03:A00E  00 80     
       03:A010  00 80     
   11  03:A012  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A014  00 80     
       03:A016  00 80     
       03:A018  00 80     
       03:A01A  00 80     
       03:A01C  00 80     
       03:A01E  00 80     
       03:A020  00 80     
       03:A022  00 80     
   12  03:A024  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A026  00 80     
       03:A028  00 80     
       03:A02A  00 80     
       03:A02C  00 80     
       03:A02E  00 80     
       03:A030  00 80     
       03:A032  00 80     
       03:A034  00 80     
   13                     ;puzzle names
   14  03:A036  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A038  A4 80     
       03:A03A  A4 80     
       03:A03C  A4 80     
       03:A03E  A4 80     
       03:A040  A4 80     
       03:A042  A4 80     
       03:A044  A4 80     
       03:A046  A4 80     
   15  03:A048  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A04A  A4 80     
       03:A04C  A4 80     
       03:A04E  A4 80     
       03:A050  A4 80     
       03:A052  A4 80     
       03:A054  A4 80     
       03:A056  A4 80     
       03:A058  A4 80     
   16  03:A05A  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A05C  A4 80     
       03:A05E  A4 80     
       03:A060  A4 80     
       03:A062  A4 80     
       03:A064  A4 80     
       03:A066  A4 80     
       03:A068  A4 80     
       03:A06A  A4 80     
   17                     ;puzzle sprites
   18  03:A06C  00 00 00    .db $00, $00, $00, $00
       03:A06F  00        
   19  03:A070  00 00 00    .db $00, $00, $00, $00
       03:A073  00        
   20  03:A074  00 00 00    .db $00, $00, $00, $00
       03:A077  00        
   21  03:A078  00 00 00    .db $00, $00, $00, $00
       03:A07B  00        
   22  03:A07C  00 00 00    .db $00, $00, $00, $00
       03:A07F  00        
   23  03:A080  00 00 00    .db $00, $00, $00, $00
       03:A083  00        
   24  03:A084  00 00 00    .db $00, $00, $00, $00
       03:A087  00        
   25  03:A088  00 00 00    .db $00, $00, $00, $00
       03:A08B  00        
   26  03:A08C  00 00 00    .db $00, $00, $00, $00
       03:A08F  00        
   27  03:A090  00 00 00    .db $00, $00, $00, $00
       03:A093  00        
   28  03:A094  00 00 00    .db $00, $00, $00, $00
       03:A097  00        
   29  03:A098  00 00 00    .db $00, $00, $00, $00
       03:A09B  00        
   30  03:A09C  00 00 00    .db $00, $00, $00, $00
       03:A09F  00        
   31  03:A0A0  00 00 00    .db $00, $00, $00, $00
       03:A0A3  00        
   32  03:A0A4  00 00 00    .db $00, $00, $00, $00
       03:A0A7  00        
   33  03:A0A8  00 00 00    .db $00, $00, $00, $00
       03:A0AB  00        
   34  03:A0AC  00 00 00    .db $00, $00, $00, $00
       03:A0AF  00        
   35  03:A0B0  00 00 00    .db $00, $00, $00, $00
       03:A0B3  00        
   36  03:A0B4  00 00 00    .db $00, $00, $00, $00
       03:A0B7  00        
   37  03:A0B8  00 00 00    .db $00, $00, $00, $00
       03:A0BB  00        
   38  03:A0BC  00 00 00    .db $00, $00, $00, $00
       03:A0BF  00        
   39  03:A0C0  00 00 00    .db $00, $00, $00, $00
       03:A0C3  00        
   40  03:A0C4  00 00 00    .db $00, $00, $00, $00
       03:A0C7  00        
   41  03:A0C8  00 00 00    .db $00, $00, $00, $00
       03:A0CB  00        
   42  03:A0CC  00 00 00    .db $00, $00, $00, $00
       03:A0CF  00        
   43  03:A0D0  00 00 00    .db $00, $00, $00, $00
       03:A0D3  00        
   44  03:A0D4  00 00 00    .db $00, $00, $00, $00
       03:A0D7  00        
   45                     
   46  03:A0D8              .incbin "SoundEnginePreComp.nes"
#[3]   Music/Bank1.i
   47                       .include "Music/Bank1.i"  ;holds the data for bank song
    1  03:A87B            bank1_header:
    2  03:A87B  01            .byte $01           ;4 streams
    3                         
    4  03:A87C  02            .byte MUSIC_TRI    ;which stream
    5  03:A87D  01            .byte $01           ;status byte (stream enabled)
    6  03:A87E  02            .byte TRIANGLE      ;which channel
    7  03:A87F  80            .byte $80           ;initial duty (01)
    8  03:A880  0A            .byte ve_hiHat_decay ;volume envelope
    9  03:A881  84 A8         .word bank1_square1 ;pointer to stream
   10  03:A883  50            .byte $50           ;tempo
   11                         
   12                         
   13  03:A884            bank1_square1:
   14                     
   15  03:A884  A9 03             .byte pitch_envelope, pe_bassKick
   16  03:A886  82                .byte eighth
   17  03:A887  27 27             .byte C5, C5
   18  03:A889  81                .byte sixteenth
   19  03:A88A  24 24 24          .byte A4, A4, A4, rest
       03:A88D  5E        
   20  03:A88E  20 20 20          .byte F4, F4, F4, rest
       03:A891  5E        
   21  03:A892  83                .byte quarter
   22  03:A893  1B                .byte C4
   23                     
   24  03:A894  A1                .byte loop
   25  03:A895  84 A8         .word bank1_square1
#[2]   Banks/Bank1.asm
   48                       
   49           BFFA        .org $BFFA     ;first of the three vectors starts here
   50  03:BFFA  7E D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   51                                        ;processor will jump to the label NMI:
   52  03:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   53                                        ;to the label RESET:
   54  03:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
#[3]   Puzzles/cat.asm
    4                       .include "Puzzles/cat.asm"
    1  04:8000            cat:
    2  04:8000  02 7E 00    .db $02, $7E, $00, $2B
       04:8003  2B        
    3  04:8004  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $47, $C4, $7B, $BC, $7F, $FC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       04:8007  60 1E F0  
       04:800A  3E F8 3F  
       04:800D  F8 7F FC  
       04:8010  7F FC 47  
       04:8013  C4 7B BC  
       04:8016  7F FC 7C  
       04:8019  7C 76 DC  
       04:801C  39 38 1F  
       04:801F  F0 00 00  
    4  04:8022  00 FF 70    .db $00, $FF, $70, $FF, $54, $FF, $65, $FF, $23, $60, $FF, $13, $70, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $70, $FF, $23, $60, $FF, $65, $FF, $54, $FF, $70, $FF, $00, $FF
       04:8025  FF 54 FF  
       04:8028  65 FF 23  
       04:802B  60 FF 13  
       04:802E  70 FF 11  
       04:8031  80 FF 26  
       04:8034  FF 11 80  
       04:8037  FF 13 70  
       04:803A  FF 23 60  
       04:803D  FF 65 FF  
       04:8040  54 FF 70  
       04:8043  FF 00 FF  
    5  04:8046  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $15, $10, $FF, $43, $40, $FF, $D0, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       04:8049  FF 44 FF  
       04:804C  55 FF B0  
       04:804F  FF D0 FF  
       04:8052  D0 FF 15  
       04:8055  10 FF 43  
       04:8058  40 FF D0  
       04:805B  FF 55 FF  
       04:805E  32 23 FF  
       04:8061  31 30 FF  
       04:8064  90 FF 00  
       04:8067  FF        
    6  04:8068            catImage:
    7  04:8068  55 55 55   .db $55, $55, $55, $55, $56, $95, $A5, $55, $6A, $9A, $A5, $56, $AA, $6A, $A5, $5A, $AA, $AA, $95, $AA, $66, $6A, $96, $AA, $9A, $AA, $58, $0A, $E8, $09, $6A, $8F, $CA, $A5, $9A, $FF, $E9, $96, $AF, $57, $EA, $59, $CF, $7C, $D9, $5F, $C3, $0F, $D5, $5F, $FF, $FD, $55, $55, $55, $55, $40, $FF
       04:806B  55 56 95  
       04:806E  A5 55 6A  
       04:8071  9A A5 56  
       04:8074  AA 6A A5  
       04:8077  5A AA AA  
       04:807A  95 AA 66  
       04:807D  6A 96 AA  
       04:8080  9A AA 58  
       04:8083  0A E8 09  
       04:8086  6A 8F CA  
       04:8089  A5 9A FF  
       04:808C  E9 96 AF  
       04:808F  57 EA 59  
       04:8092  CF 7C D9  
       04:8095  5F C3 0F  
       04:8098  D5 5F FF  
       04:809B  FD 55 55  
       04:809E  55 55 40  
       04:80A1  FF        
    8  04:80A2            catName:
    9  04:80A2  03 0C 0A    .db $03, $0C, $0A, $1D, $FF
       04:80A5  1D FF     
#[2]   Banks/Bank2.asm
    5                     
    6           0005        .bank 5
    7           A000        .org $A000
    8                       
    9                     ;puzzles
   10  05:A000  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A002  00 80     
       05:A004  00 80     
       05:A006  00 80     
       05:A008  00 80     
       05:A00A  00 80     
       05:A00C  00 80     
       05:A00E  00 80     
       05:A010  00 80     
   11  05:A012  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A014  00 80     
       05:A016  00 80     
       05:A018  00 80     
       05:A01A  00 80     
       05:A01C  00 80     
       05:A01E  00 80     
       05:A020  00 80     
       05:A022  00 80     
   12  05:A024  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat
       05:A026  00 80     
       05:A028  00 80     
       05:A02A  00 80     
       05:A02C  00 80     
       05:A02E  00 80     
       05:A030  00 80     
       05:A032  00 80     
       05:A034  00 80     
   13                     ;puzzle names
   14  05:A036  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A038  A2 80     
       05:A03A  A2 80     
       05:A03C  A2 80     
       05:A03E  A2 80     
       05:A040  A2 80     
       05:A042  A2 80     
       05:A044  A2 80     
       05:A046  A2 80     
   15  05:A048  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A04A  A2 80     
       05:A04C  A2 80     
       05:A04E  A2 80     
       05:A050  A2 80     
       05:A052  A2 80     
       05:A054  A2 80     
       05:A056  A2 80     
       05:A058  A2 80     
   16  05:A05A  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName
       05:A05C  A2 80     
       05:A05E  A2 80     
       05:A060  A2 80     
       05:A062  A2 80     
       05:A064  A2 80     
       05:A066  A2 80     
       05:A068  A2 80     
       05:A06A  A2 80     
   17                     ;puzzle sprites
   18  05:A06C  00 00 00    .db $00, $00, $00, $00
       05:A06F  00        
   19  05:A070  00 00 00    .db $00, $00, $00, $00
       05:A073  00        
   20  05:A074  00 00 00    .db $00, $00, $00, $00
       05:A077  00        
   21  05:A078  00 00 00    .db $00, $00, $00, $00
       05:A07B  00        
   22  05:A07C  00 00 00    .db $00, $00, $00, $00
       05:A07F  00        
   23  05:A080  00 00 00    .db $00, $00, $00, $00
       05:A083  00        
   24  05:A084  00 00 00    .db $00, $00, $00, $00
       05:A087  00        
   25  05:A088  00 00 00    .db $00, $00, $00, $00
       05:A08B  00        
   26  05:A08C  00 00 00    .db $00, $00, $00, $00
       05:A08F  00        
   27  05:A090  00 00 00    .db $00, $00, $00, $00
       05:A093  00        
   28  05:A094  00 00 00    .db $00, $00, $00, $00
       05:A097  00        
   29  05:A098  00 00 00    .db $00, $00, $00, $00
       05:A09B  00        
   30  05:A09C  00 00 00    .db $00, $00, $00, $00
       05:A09F  00        
   31  05:A0A0  00 00 00    .db $00, $00, $00, $00
       05:A0A3  00        
   32  05:A0A4  00 00 00    .db $00, $00, $00, $00
       05:A0A7  00        
   33  05:A0A8  00 00 00    .db $00, $00, $00, $00
       05:A0AB  00        
   34  05:A0AC  00 00 00    .db $00, $00, $00, $00
       05:A0AF  00        
   35  05:A0B0  00 00 00    .db $00, $00, $00, $00
       05:A0B3  00        
   36  05:A0B4  00 00 00    .db $00, $00, $00, $00
       05:A0B7  00        
   37  05:A0B8  00 00 00    .db $00, $00, $00, $00
       05:A0BB  00        
   38  05:A0BC  00 00 00    .db $00, $00, $00, $00
       05:A0BF  00        
   39  05:A0C0  00 00 00    .db $00, $00, $00, $00
       05:A0C3  00        
   40  05:A0C4  00 00 00    .db $00, $00, $00, $00
       05:A0C7  00        
   41  05:A0C8  00 00 00    .db $00, $00, $00, $00
       05:A0CB  00        
   42  05:A0CC  00 00 00    .db $00, $00, $00, $00
       05:A0CF  00        
   43  05:A0D0  00 00 00    .db $00, $00, $00, $00
       05:A0D3  00        
   44  05:A0D4  00 00 00    .db $00, $00, $00, $00
       05:A0D7  00        
   45                     ;bank song, A0D8
   46  05:A0D8              .incbin "SoundEnginePreComp.nes"
#[3]   Music/Bank2.i
   47                       .include "Music/Bank2.i"  ;holds the data for bank song
    1  05:A87B            bank2_header:
    2  05:A87B  04            .byte $04           ;4 streams
    3                         
    4  05:A87C  00            .byte MUSIC_SQ1     ;which stream
    5  05:A87D  01            .byte $01           ;status byte (stream enabled)
    6  05:A87E  00            .byte SQUARE_1      ;which channel
    7  05:A87F  70            .byte $70           ;initial duty (01)
    8  05:A880  0B            .byte ve_long_decay ;volume envelope
    9  05:A881  9C A8         .word bank2_square1 ;pointer to stream
   10  05:A883  3A            .byte $3A           ;tempo
   11                         
   12  05:A884  01            .byte MUSIC_SQ2     ;which stream
   13  05:A885  01            .byte $01           ;status byte (stream enabled)
   14  05:A886  01            .byte SQUARE_2      ;which channel
   15  05:A887  70            .byte $70           ;initial duty (10)
   16  05:A888  03            .byte ve_tgl_1      ;volume envelope
   17  05:A889  0C AA         .word bank2_square2 ;pointer to stream
   18  05:A88B  3A            .byte $3A           ;tempo
   19                         
   20  05:A88C  02            .byte MUSIC_TRI     ;which stream
   21  05:A88D  01            .byte $01           ;status byte (stream enabled)
   22  05:A88E  02            .byte TRIANGLE      ;which channel
   23  05:A88F  80            .byte $80           ;initial volume (on)
   24  05:A890  03            .byte ve_tgl_1      ;volume envelope
   25  05:A891  0C AC         .word bank2_tri     ;pointer to stream
   26  05:A893  3A            .byte $3A           ;tempo
   27                         
   28  05:A894  03            .byte MUSIC_NOI     ;which stream
   29  05:A895  01            .byte $01           ;enabled
   30  05:A896  03            .byte NOISE     
   31  05:A897  30            .byte $30           ;initial duty_vol
   32  05:A898  0A            .byte ve_hiHat_decay ;volume envelope
   33  05:A899  F8 AD         .word bank2_noise   ;pointer to stream
   34  05:A89B  3A            .byte $3A           ;tempo
   35                     
   36                         
   37  05:A89C            bank2_square1:
   38                     
   39  05:A89C  A2 0B             .byte volume_envelope, ve_long_decay 
   40  05:A89E  83 5E         .byte quarter, rest
   41  05:A8A0  87 29             .byte d_eighth, D5
   42  05:A8A2  8E 27             .byte d_half_d_eight, C5
   43  05:A8A4  81 26 27          .byte sixteenth, B4, C5
   44  05:A8A7  82 26             .byte eighth, B4
   45  05:A8A9  81 21             .byte sixteenth, Fs4
   46  05:A8AB  82 22 24          .byte eighth, G4,  A4
   47  05:A8AE  81 26             .byte sixteenth, B4
   48  05:A8B0  87 21             .byte d_eighth, Fs4
   49  05:A8B2  8F 24             .byte whole_quarter_sixteenth, A4
   50  05:A8B4  81 5E             .byte sixteenth, rest
   51  05:A8B6  15 16 17          .byte Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       05:A8B9  18 17 16  
       05:A8BC  15        
   52                             
   53  05:A8BD  83 5E             .byte quarter, rest
   54  05:A8BF  87 29             .byte d_eighth, D5
   55  05:A8C1  8E 27             .byte d_half_d_eight, C5
   56  05:A8C3  81 26 27          .byte sixteenth, B4, C5
   57  05:A8C6  82 26             .byte eighth, B4
   58  05:A8C8  81 21             .byte sixteenth, Fs4
   59  05:A8CA  82 22 2B          .byte eighth, G4,  E5
   60  05:A8CD  81 2E             .byte sixteenth, G5
   61  05:A8CF  8A 2D             .byte d_whole, Fs5
   62  05:A8D1  81 5E             .byte sixteenth, rest
   63  05:A8D3  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       05:A8D6  16 18 1D  
       05:A8D9  21        
   64                         
   65  05:A8DA  83 5E             .byte quarter, rest
   66  05:A8DC  87 2E             .byte d_eighth, G5
   67  05:A8DE  8E 2C             .byte d_half_d_eight, F5
   68  05:A8E0  81 2B 2C          .byte sixteenth, E5, F5
   69  05:A8E3  82 2B             .byte eighth, E5
   70  05:A8E5  81 26             .byte sixteenth, B4
   71  05:A8E7  82 27 29          .byte eighth, C5,  D5
   72  05:A8EA  81 2B 29          .byte sixteenth, E5, D5 
   73  05:A8ED  82 26 27          .byte eighth, B4, C5, A4, B4, G4 
       05:A8F0  24 26 22  
   74  05:A8F3  81 27 26          .byte sixteenth, C5, B4, G4, F4, D4
       05:A8F6  22 20 1D  
   75  05:A8F9  82 20             .byte eighth, F4
   76  05:A8FB  81 24             .byte sixteenth, A4
   77  05:A8FD  82 22             .byte eighth, G4
   78  05:A8FF  81 27             .byte sixteenth, C5
   79  05:A901  8C 26             .byte five_eighths, B4
   80                             
   81  05:A903  83 5E             .byte quarter, rest
   82  05:A905  87 29             .byte d_eighth, D5
   83  05:A907  8E 27             .byte d_half_d_eight, C5
   84  05:A909  81 26 27          .byte sixteenth, B4, C5
   85  05:A90C  82 26             .byte eighth, B4
   86  05:A90E  81 21             .byte sixteenth, Fs4
   87  05:A910  82 22 24          .byte eighth, G4,  A4
   88  05:A913  81 22             .byte sixteenth, G4
   89  05:A915  8A 21             .byte d_whole, Fs4
   90  05:A917  81 5E             .byte sixteenth, rest
   91  05:A919  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       05:A91C  16 18 1D  
       05:A91F  21        
   92                             
   93                             ;;bridge
   94                             
   95  05:A920  87 24 22          .byte d_eighth, A4, G4, Fs4
       05:A923  21        
   96  05:A924  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       05:A927  0A 2E 0B  
       05:A92A  2D 0C     
   97  05:A92C  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       05:A92F  0A 24 09  
       05:A932  22        
   98  05:A933  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       05:A936  1D 18     
   99  05:A938  82 1B             .byte eighth, C4
  100  05:A93A  81 16             .byte sixteenth, G3
  101  05:A93C  91 15             .byte whole_sixteenth, Fs3
  102  05:A93E  84 5E             .byte half, rest
  103  05:A940  81 5E             .byte sixteenth, rest
  104  05:A942  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:A945  18 16 18  
       05:A948  1D 21     
  105                             
  106  05:A94A  87 24 22          .byte d_eighth, A4, G4, Fs4
       05:A94D  21        
  107  05:A94E  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       05:A951  0A 2E 0B  
       05:A954  2D 0C     
  108  05:A956  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       05:A959  0A 24 09  
       05:A95C  22        
  109  05:A95D  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       05:A960  1D 18     
  110  05:A962  82 1B             .byte eighth, C4
  111  05:A964  81 22             .byte sixteenth, G4
  112  05:A966  91 21             .byte whole_sixteenth, Fs4
  113  05:A968  84 5E             .byte half, rest
  114  05:A96A  81 5E             .byte sixteenth, rest
  115  05:A96C  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:A96F  18 16 18  
       05:A972  1D 21     
  116                     
  117                             ;; reach-around
  118  05:A974  A2 0B             .byte volume_envelope, ve_long_decay 
  119  05:A976  87 22 22          .byte d_eighth, G4, G4
  120  05:A979  A2 04             .byte volume_envelope, ve_tgl_2
  121  05:A97B  82 24             .byte eighth, A4
  122  05:A97D  A2 03             .byte volume_envelope, ve_tgl_1
  123  05:A97F  80 5E 38          .byte thirtysecond, rest, F6
  124  05:A982  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:A985  33 30 2E  
       05:A988  2D 30     
  125  05:A98A  82 2E             .byte eighth, G5
  126  05:A98C  81 27             .byte sixteenth, C5
  127  05:A98E  82 2C             .byte eighth, F5
  128  05:A990  81 29             .byte sixteenth, D5
  129  05:A992  82 2E             .byte eighth, G5
  130  05:A994  81 2D             .byte sixteenth, Fs5
  131  05:A996  82 30             .byte eighth, A5
  132  05:A998  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       05:A99B  2D 33 30  
  133                             
  134  05:A99E  A2 0B             .byte volume_envelope, ve_long_decay 
  135  05:A9A0  87 22 22          .byte d_eighth, G4, G4
  136  05:A9A3  A2 04             .byte volume_envelope, ve_tgl_2
  137  05:A9A5  82 24             .byte eighth, A4
  138  05:A9A7  A2 03             .byte volume_envelope, ve_tgl_1
  139  05:A9A9  80 5E 1C          .byte thirtysecond, rest, Cs4
  140  05:A9AC  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       05:A9AF  29 24 29  
       05:A9B2  2D        
  141  05:A9B3  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       05:A9B6  2B 24 2C  
       05:A9B9  27 21     
  142  05:A9BB  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6, D6
       05:A9BE  24 29 24  
       05:A9C1  1F 2E 2D  
       05:A9C4  33 35     
  143                             
  144  05:A9C6  A2 0B             .byte volume_envelope, ve_long_decay 
  145  05:A9C8  87 22 22          .byte d_eighth, G4, G4
  146  05:A9CB  A2 04             .byte volume_envelope, ve_tgl_2
  147  05:A9CD  82 24             .byte eighth, A4
  148  05:A9CF  A2 03             .byte volume_envelope, ve_tgl_1
  149  05:A9D1  80 5E 38          .byte thirtysecond, rest, F6
  150  05:A9D4  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:A9D7  33 30 2E  
       05:A9DA  2D 30     
  151  05:A9DC  82 2E             .byte eighth, G5
  152  05:A9DE  81 27             .byte sixteenth, C5
  153  05:A9E0  82 2C             .byte eighth, F5
  154  05:A9E2  81 29             .byte sixteenth, D5
  155  05:A9E4  82 2E             .byte eighth, G5
  156  05:A9E6  81 2D             .byte sixteenth, Fs5
  157  05:A9E8  82 30             .byte eighth, A5
  158  05:A9EA  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       05:A9ED  2D 33 30  
  159                             
  160  05:A9F0  A2 0B             .byte volume_envelope, ve_long_decay 
  161  05:A9F2  87 22 22          .byte d_eighth, G4, G4
  162  05:A9F5  A2 04             .byte volume_envelope, ve_tgl_2
  163  05:A9F7  82 24             .byte eighth, A4
  164  05:A9F9  A2 0B             .byte volume_envelope, ve_long_decay 
  165  05:A9FB  88 5E             .byte d_quarter, rest
  166  05:A9FD  8C 24             .byte five_eighths, A4
  167  05:A9FF  A2 03             .byte volume_envelope, ve_tgl_1
  168  05:AA01  81 5E             .byte sixteenth, rest
  169  05:AA03  82 21 22          .byte eighth, Fs4, G4, Gs4
       05:AA06  23        
  170  05:AA07  81 24             .byte sixteenth, A4
  171                     
  172  05:AA09  A1                .byte loop
  173  05:AA0A  9C A8         .word bank2_square1
  174                             
  175                             
  176                     
  177  05:AA0C            bank2_square2:
  178                     
  179  05:AA0C  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:AA0F  0C 05     
  180  05:AA11  82 11             .byte eighth, D3
  181  05:AA13  81 05             .byte sixteenth, D2
  182  05:AA15  88 0F             .byte d_quarter, C3
  183  05:AA17  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AA1A  0F        
  184  05:AA1B  05 0A 0C          .byte D2, G2, A2, D2 
       05:AA1E  05        
  185  05:AA1F  82 11             .byte eighth, D3
  186  05:AA21  81 05             .byte sixteenth, D2
  187  05:AA23  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       05:AA26  0A 0B     
  188  05:AA28  81 0C             .byte sixteenth, A2
  189  05:AA2A  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:AA2D  0C 05     
  190  05:AA2F  82 11             .byte eighth, D3
  191  05:AA31  81 05             .byte sixteenth, D2
  192  05:AA33  88 0F             .byte d_quarter, C3
  193  05:AA35  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AA38  0F        
  194  05:AA39  05 0A 0C          .byte D2, G2, A2, D2 
       05:AA3C  05        
  195  05:AA3D  82 11             .byte eighth, D3
  196  05:AA3F  81 05             .byte sixteenth, D2
  197  05:AA41  82 0F             .byte eighth, C3 
  198  05:AA43  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       05:AA46  0B 0C 0B  
       05:AA49  0A 09     
  199                             
  200  05:AA4B  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:AA4E  0C 05     
  201  05:AA50  82 11             .byte eighth, D3
  202  05:AA52  81 05             .byte sixteenth, D2
  203  05:AA54  88 0F             .byte d_quarter, C3
  204  05:AA56  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AA59  0F        
  205  05:AA5A  05 0A 0C          .byte D2, G2, A2, D2 
       05:AA5D  05        
  206  05:AA5E  82 11             .byte eighth, D3
  207  05:AA60  81 05             .byte sixteenth, D2
  208  05:AA62  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       05:AA65  0A 0B     
  209  05:AA67  81 0C             .byte sixteenth, A2
  210  05:AA69  05 0A 0C          .byte D2, G2, A2, D2 
       05:AA6C  05        
  211  05:AA6D  82 11             .byte eighth, D3
  212  05:AA6F  81 05             .byte sixteenth, D2
  213  05:AA71  88 0F             .byte d_quarter, C3
  214  05:AA73  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AA76  0F        
  215  05:AA77  05 0A 0C          .byte D2, G2, A2, D2 
       05:AA7A  05        
  216  05:AA7B  82 11             .byte eighth, D3
  217  05:AA7D  81 05             .byte sixteenth, D2
  218  05:AA7F  82 0F             .byte eighth, C3 
  219  05:AA81  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       05:AA84  0C 0A 0C  
       05:AA87  11 15     
  220                             
  221  05:AA89  0A 0F 11          .byte G2, C3, D3, G2 
       05:AA8C  0A        
  222  05:AA8D  82 16             .byte eighth, G3
  223  05:AA8F  81 0A             .byte sixteenth, G2
  224  05:AA91  88 14             .byte d_quarter, F3
  225  05:AA93  81 0F 11          .byte sixteenth, C3, D3, F3
       05:AA96  14        
  226  05:AA97  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       05:AA9A  11 0A     
  227  05:AA9C  82 16             .byte eighth, G3
  228  05:AA9E  81 0A             .byte sixteenth, G2
  229  05:AAA0  88 14             .byte d_quarter, F3
  230  05:AAA2  81 14 13          .byte sixteenth, F3, E3, D3
       05:AAA5  11        
  231  05:AAA6  0A 0F 11          .byte G2, C3, D3, G2 
       05:AAA9  0A        
  232  05:AAAA  82 16             .byte eighth, G3
  233  05:AAAC  81 0A             .byte sixteenth, G2
  234  05:AAAE  88 14             .byte d_quarter, F3
  235  05:AAB0  81 0F 11          .byte sixteenth, C3, D3, F3
       05:AAB3  14        
  236  05:AAB4  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       05:AAB7  11 0A     
  237  05:AAB9  82 16             .byte eighth, G3
  238  05:AABB  81 0A             .byte sixteenth, G2
  239  05:AABD  88 14             .byte d_quarter, F3
  240  05:AABF  81 14 13          .byte sixteenth, F3, E3, D3
       05:AAC2  11        
  241                     
  242  05:AAC3  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:AAC6  0C 05     
  243  05:AAC8  82 11             .byte eighth, D3
  244  05:AACA  81 05             .byte sixteenth, D2
  245  05:AACC  88 0F             .byte d_quarter, C3
  246  05:AACE  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AAD1  0F        
  247  05:AAD2  05 0A 0C          .byte D2, G2, A2, D2 
       05:AAD5  05        
  248  05:AAD6  82 11             .byte eighth, D3
  249  05:AAD8  81 05             .byte sixteenth, D2
  250  05:AADA  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       05:AADD  0A 0B     
  251  05:AADF  81 0C             .byte sixteenth, A2
  252  05:AAE1  05 0A 0C          .byte D2, G2, A2, D2 
       05:AAE4  05        
  253  05:AAE5  82 11             .byte eighth, D3
  254  05:AAE7  81 05             .byte sixteenth, D2
  255  05:AAE9  88 0F             .byte d_quarter, C3
  256  05:AAEB  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AAEE  0F        
  257  05:AAEF  05 0A 0C          .byte D2, G2, A2, D2 
       05:AAF2  05        
  258  05:AAF3  82 11             .byte eighth, D3
  259  05:AAF5  81 05             .byte sixteenth, D2
  260  05:AAF7  82 0F             .byte eighth, C3 
  261  05:AAF9  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       05:AAFC  0C 0A 0C  
       05:AAFF  11 15     
  262                             
  263                             ;;bridge
  264                             
  265  05:AB01  A2 0B             .byte volume_envelope, ve_long_decay 
  266  05:AB03  87 1B 1A          .byte d_eighth, C4, B3, A3
       05:AB06  18        
  267  05:AB07  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       05:AB0A  0B 0C 0B  
       05:AB0D  0A 09     
  268  05:AB0F  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       05:AB12  15 11     
  269  05:AB14  82 14             .byte eighth, F3
  270  05:AB16  81 11             .byte sixteenth, D3
  271  05:AB18  90 0F             .byte d_half_eighth, C3
  272  05:AB1A  A2 03             .byte volume_envelope, ve_tgl_1
  273  05:AB1C  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AB1F  0F        
  274  05:AB20  05 0A 0C          .byte D2, G2, A2, D2 
       05:AB23  05        
  275  05:AB24  82 11             .byte eighth, D3
  276  05:AB26  81 05             .byte sixteenth, D2
  277  05:AB28  82 0F             .byte eighth, C3 
  278  05:AB2A  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       05:AB2D  0C 0A 0C  
       05:AB30  11 15     
  279                             
  280  05:AB32  A2 0B             .byte volume_envelope, ve_long_decay 
  281  05:AB34  87 1B 1A          .byte d_eighth, C4, B3, A3
       05:AB37  18        
  282  05:AB38  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       05:AB3B  0B 0C 0B  
       05:AB3E  0A 09     
  283  05:AB40  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       05:AB43  15 11     
  284  05:AB45  82 14             .byte eighth, F3
  285  05:AB47  81 1B             .byte sixteenth, C4
  286  05:AB49  90 1D             .byte d_half_eighth, D4
  287  05:AB4B  A2 03             .byte volume_envelope, ve_tgl_1
  288  05:AB4D  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AB50  0F        
  289  05:AB51  05 0A 0C          .byte D2, G2, A2, D2 
       05:AB54  05        
  290  05:AB55  82 11             .byte eighth, D3
  291  05:AB57  81 05             .byte sixteenth, D2
  292  05:AB59  82 0F             .byte eighth, C3 
  293  05:AB5B  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       05:AB5E  0C 0A 0C  
       05:AB61  11 15     
  294                             
  295                             ;; reach-around
  296  05:AB63  A2 0B             .byte volume_envelope, ve_long_decay 
  297  05:AB65  87 1F 1F          .byte d_eighth, E4, E4
  298  05:AB68  A2 04             .byte volume_envelope, ve_tgl_2
  299  05:AB6A  82 21             .byte eighth, Fs4
  300  05:AB6C  A2 07             .byte volume_envelope, ve_battlekid_2
  301  05:AB6E  86 5E             .byte d_sixteenth, rest
  302  05:AB70  80 38             .byte thirtysecond, F6
  303  05:AB72  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:AB75  33 30 2E  
       05:AB78  2D 30     
  304  05:AB7A  82 2E             .byte eighth, G5
  305  05:AB7C  81 27             .byte sixteenth, C5
  306  05:AB7E  82 2C             .byte eighth, F5
  307  05:AB80  81 29             .byte sixteenth, D5
  308  05:AB82  82 2E             .byte eighth, G5
  309  05:AB84  81 2D             .byte sixteenth, Fs5
  310  05:AB86  82 30             .byte eighth, A5
  311  05:AB88  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       05:AB8B  2D 33     
  312                             
  313  05:AB8D  A2 0B             .byte volume_envelope, ve_long_decay 
  314  05:AB8F  87 1F 1F          .byte d_eighth, E4, E4
  315  05:AB92  A2 04             .byte volume_envelope, ve_tgl_2
  316  05:AB94  82 21             .byte eighth, Fs4
  317  05:AB96  A2 07             .byte volume_envelope, ve_battlekid_2
  318  05:AB98  86 5E             .byte d_sixteenth, rest
  319  05:AB9A  80 1C             .byte thirtysecond, Cs4
  320  05:AB9C  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       05:AB9F  29 24 29  
       05:ABA2  2D        
  321  05:ABA3  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       05:ABA6  2B 24 2C  
       05:ABA9  27 21     
  322  05:ABAB  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6
       05:ABAE  24 29 24  
       05:ABB1  1F 2E 2D  
       05:ABB4  33        
  323                             
  324  05:ABB5  A2 0B             .byte volume_envelope, ve_long_decay 
  325  05:ABB7  87 1F 1F          .byte d_eighth, E4, E4
  326  05:ABBA  A2 04             .byte volume_envelope, ve_tgl_2
  327  05:ABBC  82 21             .byte eighth, Fs4
  328  05:ABBE  A2 07             .byte volume_envelope, ve_battlekid_2
  329  05:ABC0  86 5E             .byte d_sixteenth, rest
  330  05:ABC2  80 38             .byte thirtysecond, F6
  331  05:ABC4  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:ABC7  33 30 2E  
       05:ABCA  2D 30     
  332  05:ABCC  82 2E             .byte eighth, G5
  333  05:ABCE  81 27             .byte sixteenth, C5
  334  05:ABD0  82 2C             .byte eighth, F5
  335  05:ABD2  81 29             .byte sixteenth, D5
  336  05:ABD4  82 2E             .byte eighth, G5
  337  05:ABD6  81 2D             .byte sixteenth, Fs5
  338  05:ABD8  82 30             .byte eighth, A5
  339  05:ABDA  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       05:ABDD  2D 33     
  340                             
  341  05:ABDF  A2 0B             .byte volume_envelope, ve_long_decay 
  342  05:ABE1  87 1F 1F          .byte d_eighth, E4, E4
  343  05:ABE4  A2 04             .byte volume_envelope, ve_tgl_2
  344  05:ABE6  82 21             .byte eighth, Fs4
  345  05:ABE8  A2 03             .byte volume_envelope, ve_tgl_1
  346  05:ABEA  88 5E             .byte d_quarter, rest
  347  05:ABEC  80 27 1F          .byte thirtysecond, C5, E4, C5, E4, C5, E4, C5, E4, C5, E4
       05:ABEF  27 1F 27  
       05:ABF2  1F 27 1F  
       05:ABF5  27 1F     
  348  05:ABF7  27 1F 27          .byte C5, E4, C5, E4, C5, E4, C5, E4, C5, E4
       05:ABFA  1F 27 1F  
       05:ABFD  27 1F 27  
       05:AC00  1F        
  349  05:AC01  81 5E             .byte sixteenth, rest
  350  05:AC03  82 09 0A          .byte eighth, Fs2, G2, Gs2
       05:AC06  0B        
  351  05:AC07  81 0C             .byte sixteenth, A2
  352                             
  353  05:AC09  A1            .byte loop
  354  05:AC0A  0C AA         .word bank2_square2
  355                         
  356  05:AC0C            bank2_tri:
  357                     
  358  05:AC0C  81 11 16          .byte sixteenth, D3, G3, A3, D3 
       05:AC0F  18 11     
  359  05:AC11  82 1D             .byte eighth, D4
  360  05:AC13  81 11             .byte sixteenth, D3
  361  05:AC15  88 1B             .byte d_quarter, C4
  362  05:AC17  81 16 18          .byte sixteenth, G3, A3, C4
       05:AC1A  1B        
  363  05:AC1B  11 16 18          .byte D3, G3, A3, D3 
       05:AC1E  11        
  364  05:AC1F  82 1D             .byte eighth, D4
  365  05:AC21  81 11             .byte sixteenth, D3
  366  05:AC23  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       05:AC26  16 17     
  367  05:AC28  81 18             .byte sixteenth, A3
  368  05:AC2A  11 16 18          .byte D3, G3, A3, D3 
       05:AC2D  11        
  369  05:AC2E  82 1D             .byte eighth, D4
  370  05:AC30  81 11             .byte sixteenth, D3
  371  05:AC32  88 1B             .byte d_quarter, C4
  372  05:AC34  81 16 18          .byte sixteenth, G3, A3, C4
       05:AC37  1B        
  373  05:AC38  11 16 18          .byte D3, G3, A3, D3 
       05:AC3B  11        
  374  05:AC3C  82 1D             .byte eighth, D4
  375  05:AC3E  81 11             .byte sixteenth, D3
  376  05:AC40  82 1B             .byte eighth, C4
  377  05:AC42  81 15 16          .byte sixteenth, Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       05:AC45  17 18 17  
       05:AC48  16 15     
  378                             
  379  05:AC4A  11 16 18          .byte D3, G3, A3, D3 
       05:AC4D  11        
  380  05:AC4E  82 1D             .byte eighth, D4
  381  05:AC50  81 11             .byte sixteenth, D3
  382  05:AC52  88 1B             .byte d_quarter, C4
  383  05:AC54  81 16 18          .byte sixteenth, G3, A3, C4
       05:AC57  1B        
  384  05:AC58  11 16 18          .byte D3, G3, A3, D3 
       05:AC5B  11        
  385  05:AC5C  82 1D             .byte eighth, D4
  386  05:AC5E  81 11             .byte sixteenth, D3
  387  05:AC60  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       05:AC63  16 17     
  388  05:AC65  81 18             .byte sixteenth, A3
  389  05:AC67  11 16 18          .byte D3, G3, A3, D3 
       05:AC6A  11        
  390  05:AC6B  82 1D             .byte eighth, D4
  391  05:AC6D  81 11             .byte sixteenth, D3
  392  05:AC6F  88 1B             .byte d_quarter, C4
  393  05:AC71  81 16 18          .byte sixteenth, G3, A3, C4
       05:AC74  1B        
  394  05:AC75  11 16 18          .byte D3, G3, A3, D3 
       05:AC78  11        
  395  05:AC79  82 1D             .byte eighth, D4
  396  05:AC7B  81 11             .byte sixteenth, D3
  397  05:AC7D  82 1B             .byte eighth, C4
  398  05:AC7F  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:AC82  18 16 18  
       05:AC85  1D 21     
  399                             
  400  05:AC87  16 1B 1D          .byte G3, C4, D4, G3 
       05:AC8A  16        
  401  05:AC8B  82 22             .byte eighth, G4
  402  05:AC8D  81 16             .byte sixteenth, G3
  403  05:AC8F  88 20             .byte d_quarter, F4
  404  05:AC91  81 1B 1D          .byte sixteenth, C4, D4, F4
       05:AC94  20        
  405  05:AC95  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       05:AC98  1D 16     
  406  05:AC9A  82 22             .byte eighth, G4
  407  05:AC9C  81 16             .byte sixteenth, G3
  408  05:AC9E  88 20             .byte d_quarter, F4
  409  05:ACA0  81 20 1F          .byte sixteenth, F4, E4, D4
       05:ACA3  1D        
  410  05:ACA4  16 1B 1D          .byte G3, C4, D4, G3 
       05:ACA7  16        
  411  05:ACA8  82 22             .byte eighth, G4
  412  05:ACAA  81 16             .byte sixteenth, G3
  413  05:ACAC  88 20             .byte d_quarter, F4
  414  05:ACAE  81 1B 1D          .byte sixteenth, C4, D4, F4
       05:ACB1  20        
  415  05:ACB2  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       05:ACB5  1D 16     
  416  05:ACB7  82 22             .byte eighth, G4
  417  05:ACB9  81 16             .byte sixteenth, G3
  418  05:ACBB  88 20             .byte d_quarter, F4
  419  05:ACBD  81 20 1F          .byte sixteenth, F4, E4, D4
       05:ACC0  1D        
  420                     
  421  05:ACC1  11 16 18          .byte D3, G3, A3, D3 
       05:ACC4  11        
  422  05:ACC5  82 1D             .byte eighth, D4
  423  05:ACC7  81 11             .byte sixteenth, D3
  424  05:ACC9  88 1B             .byte d_quarter, C4
  425  05:ACCB  81 16 18          .byte sixteenth, G3, A3, C4
       05:ACCE  1B        
  426  05:ACCF  11 16 18          .byte D3, G3, A3, D3 
       05:ACD2  11        
  427  05:ACD3  82 1D             .byte eighth, D4
  428  05:ACD5  81 11             .byte sixteenth, D3
  429  05:ACD7  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       05:ACDA  16 17     
  430  05:ACDC  81 18             .byte sixteenth, A3
  431  05:ACDE  11 16 18          .byte D3, G3, A3, D3 
       05:ACE1  11        
  432  05:ACE2  82 1D             .byte eighth, D4
  433  05:ACE4  81 11             .byte sixteenth, D3
  434  05:ACE6  88 1B             .byte d_quarter, C4
  435  05:ACE8  81 16 18          .byte sixteenth, G3, A3, C4
       05:ACEB  1B        
  436  05:ACEC  11 16 18          .byte D3, G3, A3, D3 
       05:ACEF  11        
  437  05:ACF0  82 1D             .byte eighth, D4
  438  05:ACF2  81 11             .byte sixteenth, D3
  439  05:ACF4  82 1B             .byte eighth, C4
  440  05:ACF6  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:ACF9  18 16 18  
       05:ACFC  1D 21     
  441                             
  442                             ;;bridge
  443                             
  444  05:ACFE  81                .byte sixteenth
  445  05:ACFF  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       05:AD02  22 1D 16  
       05:AD05  18 1D 24  
  446  05:AD08  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       05:AD0B  35 33 30  
       05:AD0E  2E        
  447  05:AD0F  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       05:AD12  1F 18 12  
       05:AD15  1D 18 11  
  448  05:AD18  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       05:AD1B  18 11 14  
       05:AD1E  0F        
  449  05:AD1F  11 16 18          .byte D3, G3, A3, D3 
       05:AD22  11        
  450  05:AD23  82 1D             .byte eighth, D4
  451  05:AD25  81 11             .byte sixteenth, D3
  452  05:AD27  88 1B             .byte d_quarter, C4
  453  05:AD29  81 16 18          .byte sixteenth, G3, A3, C4
       05:AD2C  1B        
  454  05:AD2D  11 16 18          .byte D3, G3, A3, D3 
       05:AD30  11        
  455  05:AD31  82 1D             .byte eighth, D4
  456  05:AD33  81 11             .byte sixteenth, D3
  457  05:AD35  82 1B             .byte eighth, C4
  458  05:AD37  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:AD3A  18 16 18  
       05:AD3D  1D 21     
  459  05:AD3F  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       05:AD42  22 1D 16  
       05:AD45  18 1D 24  
  460  05:AD48  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       05:AD4B  35 33 30  
       05:AD4E  2E        
  461  05:AD4F  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       05:AD52  1F 18 12  
       05:AD55  1D 18 11  
  462  05:AD58  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       05:AD5B  18 11 14  
       05:AD5E  0F        
  463  05:AD5F  11 16 18          .byte D3, G3, A3, D3 
       05:AD62  11        
  464  05:AD63  82 1D             .byte eighth, D4
  465  05:AD65  81 11             .byte sixteenth, D3
  466  05:AD67  88 1B             .byte d_quarter, C4
  467  05:AD69  81 16 18          .byte sixteenth, G3, A3, C4
       05:AD6C  1B        
  468  05:AD6D  11 16 18          .byte D3, G3, A3, D3 
       05:AD70  11        
  469  05:AD71  82 1D             .byte eighth, D4
  470  05:AD73  81 11             .byte sixteenth, D3
  471  05:AD75  82 1B             .byte eighth, C4
  472  05:AD77  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:AD7A  18 16 18  
       05:AD7D  1D 21     
  473                             
  474                             ;; reach-around
  475  05:AD7F  A2 0B             .byte volume_envelope, ve_long_decay 
  476  05:AD81  87 0F 0F          .byte d_eighth, C3, C3
  477  05:AD84  A2 04             .byte volume_envelope, ve_tgl_2
  478  05:AD86  82 11             .byte eighth, D3
  479  05:AD88  A2 03             .byte volume_envelope, ve_tgl_1
  480  05:AD8A  87 5E             .byte d_eighth, rest
  481  05:AD8C  81 11 11          .byte sixteenth, D3, D3, D4
       05:AD8F  1D        
  482  05:AD90  8D 5E             .byte five_sixteenths, rest
  483  05:AD92  81 11 11          .byte sixteenth, D3, D3, D4
       05:AD95  1D        
  484  05:AD96  8D 5E             .byte five_sixteenths, rest
  485  05:AD98  81 11 11          .byte sixteenth, D3, D3, D4
       05:AD9B  1D        
  486  05:AD9C  82 5E             .byte eighth, rest
  487                             
  488  05:AD9E  A2 0B             .byte volume_envelope, ve_long_decay 
  489  05:ADA0  87 0F 0F          .byte d_eighth, C3, C3
  490  05:ADA3  A2 04             .byte volume_envelope, ve_tgl_2
  491  05:ADA5  82 11             .byte eighth, D3
  492  05:ADA7  A2 03             .byte volume_envelope, ve_tgl_1
  493  05:ADA9  87 5E             .byte d_eighth, rest
  494  05:ADAB  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADAE  1D        
  495  05:ADAF  8D 5E             .byte five_sixteenths, rest
  496  05:ADB1  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADB4  1D        
  497  05:ADB5  8D 5E             .byte five_sixteenths, rest
  498  05:ADB7  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADBA  1D        
  499  05:ADBB  82 5E             .byte eighth, rest
  500                                     
  501  05:ADBD  A2 0B             .byte volume_envelope, ve_long_decay 
  502  05:ADBF  87 0F 0F          .byte d_eighth, C3, C3
  503  05:ADC2  A2 04             .byte volume_envelope, ve_tgl_2
  504  05:ADC4  82 11             .byte eighth, D3
  505  05:ADC6  A2 03             .byte volume_envelope, ve_tgl_1
  506  05:ADC8  87 5E             .byte d_eighth, rest
  507  05:ADCA  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADCD  1D        
  508  05:ADCE  8D 5E             .byte five_sixteenths, rest
  509  05:ADD0  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADD3  1D        
  510  05:ADD4  8D 5E             .byte five_sixteenths, rest
  511  05:ADD6  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADD9  1D        
  512  05:ADDA  82 5E             .byte eighth, rest
  513                             
  514  05:ADDC  A2 0B             .byte volume_envelope, ve_long_decay 
  515  05:ADDE  87 0F 0F          .byte d_eighth, C3, C3
  516  05:ADE1  A2 04             .byte volume_envelope, ve_tgl_2
  517  05:ADE3  82 11             .byte eighth, D3
  518  05:ADE5  A2 0B             .byte volume_envelope, ve_long_decay
  519  05:ADE7  88 5E             .byte d_quarter, rest
  520  05:ADE9  8C 0C             .byte five_eighths, A2
  521  05:ADEB  A2 03             .byte volume_envelope, ve_tgl_1
  522  05:ADED  81 5E             .byte sixteenth, rest
  523  05:ADEF  82 15 16          .byte eighth, Fs3, G3, Gs3
       05:ADF2  17        
  524  05:ADF3  81 18             .byte sixteenth, A3
  525                             
  526  05:ADF5  A1            .byte loop
  527  05:ADF6  0C AC         .word bank2_tri
  528                         
  529  05:ADF8            bank2_noise:
  530  05:ADF8  81 04 04      .byte sixteenth, $04, $04, $04, $04
       05:ADFB  04 04     
  531  05:ADFD  A2 09             .byte volume_envelope, ve_drum_decay 
  532  05:ADFF  81 04         .byte sixteenth, $04
  533  05:AE01  A2 0A             .byte volume_envelope, ve_hiHat_decay
  534  05:AE03  81 04 04      .byte sixteenth, $04, $04, $04, $04
       05:AE06  04 04     
  535  05:AE08  A2 09         .byte volume_envelope, ve_drum_decay 
  536  05:AE0A  81 04         .byte sixteenth, $04
  537  05:AE0C  A2 0A             .byte volume_envelope, ve_hiHat_decay
  538  05:AE0E  81 04 04      .byte sixteenth, $04, $04
  539  05:AE11  A2 09             .byte volume_envelope, ve_drum_decay 
  540  05:AE13  81 04         .byte sixteenth, $04
  541  05:AE15  A2 0A             .byte volume_envelope, ve_hiHat_decay
  542  05:AE17  81 04 04          .byte sixteenth, $04, $04, $04
       05:AE1A  04        
  543  05:AE1B  A1            .byte loop
  544  05:AE1C  F8 AD         .word bank2_noise
#[2]   Banks/Bank2.asm
   48           BFFA        .org $BFFA     ;first of the three vectors starts here
   49  05:BFFA  7E D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   50                                        ;processor will jump to the label NMI:
   51  05:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   52                                        ;to the label RESET:
   53  05:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Common/Init.asm
   34                       .include "Routines/Common/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 26 D2    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 2A D2    JSR SetMapperControls
   34                       
   35  06:C040  20 67 D2    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   Picross.asm
   35                     
   36  06:C048  20 D8 A0    jsr sound_init
   37                         
   38  06:C04B  A9 00       LDA #TITLE_IDX
   39  06:C04D  A2 00       LDX #$00
   40  06:C04F  20 EC CE    JSR ChangeGameMode
   41  06:C052  20 AB D1    JSR InitPPUControl
   42                       
   43                     
   44                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   45                     ;;     Main Program         ;;
   46                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   47                     
   48  06:C055            Forever:
   49                     
   50  06:C055  EE 0C 00    INC sleeping
   51                     
   52  06:C058            .loop
   53  06:C058  AD 0C 00    LDA sleeping
   54  06:C05B  D0 FB       BNE .loop
   55                     
   56  06:C05D  EE 0A 00    INC time  
   57  06:C060  AD CC 00    LDA pauseState
   58  06:C063  D0 03       BNE .skipScaleUpdate
   59  06:C065  EE 0B 00    INC scaledTime
   60  06:C068            .skipScaleUpdate:
   61  06:C068  20 6E C0    JSR GameLoop
   62                     
   63                     
   64  06:C06B  4C 55 C0    JMP Forever     ;jump back to Forever, infinite loop
   65                       
   66                     ;; dynamic jump table
   67                     
   68  06:C06E            GameLoop:
   69                     
   70                       MACROCallDynamicJump game_mode
                          
       06:C06E  AD 0E 00    LDA game_mode
       06:C071  20 BD CF    JSR Dynamic_Jump
                                  
   71                       ;; we'll pop the return address here as the table index, so 
   72                       ;; the routine we pick will return us to whatever called Game Loop
   73                       ;; when it returns
   74                     
   75  06:C074            GameLoopJumpTable:
   76                     
   77  06:C074  7A C0       .word UpdateTitle
   78  06:C076  8F C4       .word UpdateGame
   79  06:C078  C8 CC       .word UpdateGameOver
   80                       
   81                     
   82                       ;;RTS is called in the subroutine
   83                     
   84                       
#[2]   Routines/Game_States/UpdateTitle.asm
   85                       .include "Routines/Game_States/UpdateTitle.asm"
    1  06:C07A            UpdateTitle:
    2                     
    3  06:C07A  AD 10 00    LDA NMI_locks
    4  06:C07D  F0 01       BEQ .unlocked
    5                       
    6  06:C07F  60          RTS
    7                       
    8  06:C080            .unlocked:
    9                     
   10  06:C080  20 84 C0    JSR DoUpdateTitle  
   11  06:C083  60          RTS
   12                       
   13  06:C084            DoUpdateTitle:
   14                     
   15  06:C084  AD 0F 00    LDA mode_state
   16  06:C087  20 BD CF    JSR Dynamic_Jump
   17                         
   18  06:C08A            UpdateTitleJumpTable:
   19                     
   20  06:C08A  96 C0       .word UpdateTitleInit
   21  06:C08C  D7 C0       .word UpdateBankSelection
   22  06:C08E  14 C1       .word UpdateScroll
   23  06:C090  3D C1       .word UpdatePuzzleSelection
   24  06:C092  9B C1       .word UpdateScrollBack
   25  06:C094  BA C1       .word UpdateTitleExit
   26                     
   27                       
   28                     ;;title should have two steps- the bank selection and the puzzle selection
   29                     ;;top half of screen can be used as the title screen, and the bottom half will have the selectable options
   30                     ;;
   31                     ;;starting options list: BANK 0, BANK 1, BANK 2
   32                     ;;select one, then scroll over to the right, with numbers for puzzles 
   33                     
   34  06:C096            UpdateTitleInit:
   35                     
   36  06:C096  A9 00       lda #$00
   37  06:C098  8D D6 00    sta current_song
   38  06:C09B  AD D6 00    lda current_song
   39  06:C09E  20 0B A1    jsr sound_load
   40                     
   41  06:C0A1  20 87 D1    JSR TurnOnSprites
   42                       
   43  06:C0A4  AD 00 70    LDA hasContinue
   44  06:C0A7  F0 20       BEQ .skipContinueText
   45                       MACROAddPPUStringEntryTable #$2B, #$4D, #DRAW_HORIZONTAL, ContinueText
                           
       06:C0A9  A9 01       LDA #$01
       06:C0AB  8D 23 00    STA PPU_PendingWrite
       06:C0AE  A9 2B       LDA #$2B
       06:C0B0  20 3F D1    JSR WriteToPPUString
       06:C0B3  A9 4D       LDA #$4D
       06:C0B5  20 3F D1    JSR WriteToPPUString
       06:C0B8  A9 20       LDA #$20
       06:C0BA  09 00       ORA #DRAW_HORIZONTAL
       06:C0BC  20 3F D1    JSR WriteToPPUString
       06:C0BF  A9 86       LDA #LOW(ContinueText)
       06:C0C1  20 3F D1    JSR WriteToPPUString
       06:C0C4  A9 C4       LDA #HIGH(ContinueText)
       06:C0C6  20 3F D1    JSR WriteToPPUString
                           
   46                       
   47  06:C0C9            .skipContinueText:
   48                       
   49  06:C0C9  A9 00       LDA #$00
   50  06:C0CB  8D C9 00    STA mouse_index
   51  06:C0CE  A9 00       LDA #$00
   52  06:C0D0  8D CA 00    STA mouse_index+1
   53                     
   54  06:C0D3            .changeModeState:
   55                     
   56  06:C0D3  EE 0F 00    INC mode_state
   57  06:C0D6            .leave:
   58  06:C0D6  60          RTS
   59                       
   60  06:C0D7            UpdateBankSelection:
   61                     
   62  06:C0D7  20 A1 C2    JSR UpdateBankPointer
   63                       
   64  06:C0DA  AD 1C 00    LDA gamepadPressed
   65  06:C0DD  29 01       AND #GAMEPAD_A
   66  06:C0DF  F0 32       BEQ .leave
   67                       
   68  06:C0E1  20 6B C4    JSR PlayMenuCursorSound
   69                       
   70  06:C0E4            .changeModeState:
   71                       
   72  06:C0E4  AD C9 00    LDA mouse_index
   73  06:C0E7  C9 03       CMP #$03
   74  06:C0E9  D0 0F       BNE .setBank
   75                       
   76  06:C0EB  EE 0F 00    INC mode_state
   77  06:C0EE  EE 0F 00    INC mode_state
   78  06:C0F1  EE 0F 00    INC mode_state
   79                       
   80                       ;;load bank
   81  06:C0F4  20 65 C3    JSR LoadBank
   82  06:C0F7  4C 0D C1    JMP .goToNext
   83                       
   84  06:C0FA            .setBank:
   85  06:C0FA  8D AB 00    STA tempBank
   86  06:C0FD  A9 FF       LDA #$FF
   87  06:C0FF  A2 01       LDX #$01
   88  06:C101  20 83 C2    JSR SetSpriteImage
   89                       
   90  06:C104  20 26 D2    JSR ResetMapper
   91  06:C107  AD AB 00    LDA tempBank
   92  06:C10A  20 35 D2    JSR LoadPRGBank
   93                     
   94  06:C10D            .goToNext:
   95  06:C10D  EE 0F 00    INC mode_state
   96                     
   97  06:C110  4C 13 C1    JMP .leave
   98                     
   99                     
  100  06:C113            .leave:
  101  06:C113  60          RTS
  102                       
  103  06:C114            UpdateScroll:
  104  06:C114  EE 1F 00    INC PPU_ScrollX
  105  06:C117  EE 1F 00    INC PPU_ScrollX
  106  06:C11A  EE 1F 00    INC PPU_ScrollX
  107  06:C11D  EE 1F 00    INC PPU_ScrollX
  108  06:C120  D0 1A       BNE .leave
  109  06:C122  AD 21 00    LDA PPU_ScrollNT
  110  06:C125  49 01       EOR #%00000001
  111  06:C127  8D 21 00    STA PPU_ScrollNT
  112                       
  113  06:C12A            .changeModeState:
  114  06:C12A  A9 01       LDA #$01
  115  06:C12C  A2 01       LDX #$01
  116  06:C12E  20 83 C2    JSR SetSpriteImage
  117  06:C131  20 45 C2    JSR InitPuzzlePointer
  118  06:C134  EE 0F 00    INC mode_state
  119  06:C137  A9 FF       LDA #$FF
  120  06:C139  8D AC 00    STA tempPuzz
  121  06:C13C            .leave:
  122  06:C13C  60          RTS
  123                       
  124  06:C13D            UpdatePuzzleSelection:
  125                     
  126  06:C13D  20 F3 C2    JSR UpdatePuzzlePointer
  127                       
  128  06:C140  AD C9 00    LDA mouse_index
  129  06:C143  0A          ASL A
  130  06:C144  0A          ASL A
  131  06:C145  0A          ASL A
  132  06:C146  18          CLC
  133  06:C147  6D C9 00    ADC mouse_index
  134  06:C14A  6D CA 00    ADC mouse_index+1
  135  06:C14D  CD AC 00    CMP tempPuzz
  136  06:C150  F0 06       BEQ .checkButtonPresses       ;no change
  137  06:C152  8D AC 00    STA tempPuzz
  138                       
  139  06:C155  20 72 C3    JSR UpdatePuzzleInfo
  140                       
  141  06:C158            .checkButtonPresses:
  142                     
  143  06:C158  AD 1C 00    LDA gamepadPressed
  144  06:C15B  29 02       AND #GAMEPAD_B
  145  06:C15D  D0 10       BNE .changeToScrollBack
  146  06:C15F  AD 1C 00    LDA gamepadPressed
  147  06:C162  29 09       AND #GAMEPAD_CONFIRM
  148  06:C164  F0 34       BEQ .leave
  149                       
  150  06:C166  EE 0F 00    INC mode_state
  151  06:C169  EE 0F 00    INC mode_state
  152  06:C16C  4C 9A C1    JMP .leave
  153                       
  154  06:C16F            .changeToScrollBack:
  155                      
  156  06:C16F  A9 FF       LDA #$FF
  157  06:C171  A2 01       LDX #$01
  158  06:C173  20 83 C2    JSR SetSpriteImage
  159  06:C176  20 3D C2    JSR InitBankPointer
  160  06:C179  AD AB 00    LDA tempBank
  161  06:C17C  8D C9 00    STA mouse_index
  162  06:C17F  20 E3 C2    JSR SetBankPointerFromIndex
  163                       
  164  06:C182  A9 00       LDA #$00
  165  06:C184  8D 20 00    STA PPU_ScrollY
  166  06:C187  A9 FC       LDA #$FC
  167  06:C189  8D 1F 00    STA PPU_ScrollX
  168  06:C18C  AD 21 00    LDA PPU_ScrollNT
  169  06:C18F  29 FE       AND #$FE
  170  06:C191  8D 21 00    STA PPU_ScrollNT
  171                       
  172  06:C194  EE 0F 00    INC mode_state
  173                       
  174  06:C197  20 6B C4    JSR PlayMenuCursorSound
  175  06:C19A            .leave:
  176  06:C19A  60          RTS
  177                       
  178  06:C19B            UpdateScrollBack:
  179                     
  180  06:C19B  CE 1F 00    DEC PPU_ScrollX
  181  06:C19E  CE 1F 00    DEC PPU_ScrollX
  182  06:C1A1  CE 1F 00    DEC PPU_ScrollX
  183  06:C1A4  CE 1F 00    DEC PPU_ScrollX
  184  06:C1A7  D0 10       BNE .leave
  185                       
  186  06:C1A9            .changeModeState:
  187                     
  188  06:C1A9  A9 01       LDA #$01
  189  06:C1AB  A2 01       LDX #$01
  190  06:C1AD  20 83 C2    JSR SetSpriteImage
  191  06:C1B0  CE 0F 00    DEC mode_state
  192  06:C1B3  CE 0F 00    DEC mode_state
  193  06:C1B6  CE 0F 00    DEC mode_state
  194                       
  195  06:C1B9            .leave:
  196  06:C1B9  60          RTS
  197                       
  198  06:C1BA            UpdateTitleExit:
  199                       
  200  06:C1BA  A9 00       lda #$00
  201  06:C1BC  8D D6 00    sta current_song
  202  06:C1BF  AD D6 00    lda current_song
  203  06:C1C2  20 0B A1    jsr sound_load
  204                       
  205                       ;;reset screen scroll
  206  06:C1C5  A9 00       LDA #$00
  207  06:C1C7  8D 1F 00    STA PPU_ScrollX
  208  06:C1CA  8D 21 00    STA PPU_ScrollNT
  209                       
  210  06:C1CD  A9 20       LDA #%00100000
  211  06:C1CF  8D 00 00    STA temp1
  212                       
  213  06:C1D2  AD C9 00    LDA mouse_index
  214  06:C1D5  C9 03       CMP #$03
  215  06:C1D7  D0 06       BNE .loadPuzzle
  216                       
  217  06:C1D9  0E 00 00    ASL temp1
  218  06:C1DC  4C F3 C1    JMP .setupPuzzle
  219                       
  220  06:C1DF            .loadPuzzle:
  221                       ;; we can also pick out the puzzle index
  222                       ;; we have the mouse indexes - one vert, one hori
  223                       ;; take vert, mult by 9- alternatively, mult by 8, add index 
  224                       ;; IE - ind = 1, mult 8 = 8, add 1 = 9
  225                       ;; add X index
  226  06:C1DF  AD AB 00    LDA tempBank
  227  06:C1E2  8D 07 70    STA bank_index
  228  06:C1E5  20 65 C3    JSR LoadBank
  229                       
  230  06:C1E8  AD AC 00    LDA tempPuzz
  231  06:C1EB  8D 08 70    STA puzzle_index
  232  06:C1EE  A9 00       LDA #$00
  233  06:C1F0  8D 00 70    STA hasContinue
  234                     
  235                     
  236  06:C1F3            .setupPuzzle:
  237                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C1F3  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C1F5  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C1F7  8E 16 00          STX table_address
       06:C1FA  8D 17 00          STA table_address+1
                                  
  238                       MACROGetDoubleIndex puzzle_index
                          
       06:C1FD  AD 08 70          LDA puzzle_index
       06:C200  0A                ASL A
       06:C201  A8                TAY
                                  
  239  06:C202  20 E3 CF    JSR GetTableAtIndex
  240                       MACROGetPointer table_address, puzzle_address
                          
       06:C205  AD 16 00          LDA table_address
       06:C208  8D AD 00          STA puzzle_address
       06:C20B  AD 17 00          LDA table_address+1
       06:C20E  8D AE 00          STA puzzle_address+1
                          
  241                       
  242                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:C211  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:C213  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:C215  8E 16 00          STX table_address
       06:C218  8D 17 00          STA table_address+1
                                  
  243                       MACROGetDoubleIndex puzzle_index
                          
       06:C21B  AD 08 70          LDA puzzle_index
       06:C21E  0A                ASL A
       06:C21F  A8                TAY
                                  
  244  06:C220  20 E3 CF    JSR GetTableAtIndex
  245                       MACROGetPointer table_address, title_address
                          
       06:C223  AD 16 00          LDA table_address
       06:C226  8D B1 00          STA title_address
       06:C229  AD 17 00          LDA table_address+1
       06:C22C  8D B2 00          STA title_address+1
                          
  246                     
  247  06:C22F  A0 00       LDY #$00
  248  06:C231  B1 AD       LDA [puzzle_address], y
  249  06:C233  0D 00 00    ORA temp1
  250                       
  251  06:C236  AA          TAX
  252                       
  253                     
  254  06:C237  A9 01       LDA #GAME_IDX
  255  06:C239  20 EC CE    JSR ChangeGameMode
  256                       
  257  06:C23C            .leave
  258  06:C23C  60          RTS
  259                       
  260  06:C23D            InitBankPointer:
  261                     
  262  06:C23D  A2 A0       LDX #$A0
  263  06:C23F  A9 60       LDA #$60
  264  06:C241  20 58 C2    JSR InitPointer
  265                       
  266  06:C244  60          RTS  
  267                       
  268  06:C245            InitPuzzlePointer:
  269                       
  270  06:C245  A2 AE       LDX #$AE
  271  06:C247  A9 10       LDA #$10
  272  06:C249  20 58 C2    JSR InitPointer
  273                       
  274  06:C24C  60          RTS
  275                     
  276  06:C24D            ResetMouseIndex:
  277                     
  278  06:C24D  A9 00       LDA #$00
  279  06:C24F  8D C9 00    STA mouse_index
  280  06:C252  A9 00       LDA #$00
  281  06:C254  8D CA 00    STA mouse_index+1
  282  06:C257  60          RTS
  283                     
  284  06:C258            InitPointer:
  285                     
  286  06:C258  20 5F C2    JSR SetPointerPosition
  287  06:C25B  20 4D C2    JSR ResetMouseIndex
  288  06:C25E  60          RTS  
  289                       
  290  06:C25F            SetPointerPosition:
  291                     
  292  06:C25F  48          PHA
  293  06:C260  8A          TXA
  294  06:C261  A2 01       LDX #$01
  295  06:C263  20 6D C2    JSR SetSpriteYPosition
  296  06:C266  68          PLA
  297  06:C267  A2 01       LDX #$01
  298  06:C269  20 78 C2    JSR SetSpriteXPosition
  299                      
  300  06:C26C  60          RTS
  301                       
  302  06:C26D            SetSpriteYPosition:
  303                       
  304  06:C26D  48          PHA
  305  06:C26E  A9 00       LDA #SPRITE_YPOS
  306  06:C270  20 8E C2    JSR GetSpriteDataIndexInX
  307  06:C273  68          PLA
  308  06:C274  9D 00 02    STA SPRITE_DATA, x
  309  06:C277  60          RTS
  310                       
  311  06:C278            SetSpriteXPosition:  
  312                       
  313  06:C278  48          PHA
  314  06:C279  A9 03       LDA #SPRITE_XPOS
  315  06:C27B  20 8E C2    JSR GetSpriteDataIndexInX
  316  06:C27E  68          PLA
  317  06:C27F  9D 00 02    STA SPRITE_DATA, x 
  318  06:C282  60          RTS
  319                     
  320  06:C283            SetSpriteImage:
  321                     
  322                     ;; A has sprite image index we want
  323                     ;; X has the sprite index
  324  06:C283  48          PHA
  325  06:C284  A9 01       LDA #SPRITE_ID
  326  06:C286  20 8E C2    JSR GetSpriteDataIndexInX
  327  06:C289  68          PLA
  328  06:C28A  9D 00 02    STA SPRITE_DATA, x
  329  06:C28D  60          RTS
  330                       
  331  06:C28E            GetSpriteDataIndexInX:
  332                     
  333                       ;; A has data index we want to get
  334                       ;; X has sprite index
  335  06:C28E  8D 02 00    STA temp3
  336  06:C291  8A          TXA
  337  06:C292  0A          ASL A
  338  06:C293  0A          ASL A
  339  06:C294  18          CLC
  340  06:C295  6D 02 00    ADC temp3
  341  06:C298  AA          TAX
  342                       
  343  06:C299  60          RTS  
  344  06:C29A            GetSpriteData:
  345                     
  346                       ;;A is data we want
  347                       ;;X is Sprite
  348  06:C29A  20 8E C2    JSR GetSpriteDataIndexInX
  349  06:C29D  BD 00 02    LDA SPRITE_DATA, x
  350  06:C2A0  60          RTS
  351                       
  352  06:C2A1            UpdateBankPointer:
  353                      
  354                       ;;bank pointer is 1D, will loop between 0->3
  355  06:C2A1  AD 1C 00    LDA gamepadPressed
  356  06:C2A4  D0 01       BNE .continue
  357  06:C2A6            .leaveEarly:
  358  06:C2A6  60          RTS
  359                       
  360  06:C2A7            .continue:
  361  06:C2A7  A9 00       LDA #$00
  362  06:C2A9  8D 00 00    STA temp1
  363                       
  364  06:C2AC  A9 02       LDA #$02
  365  06:C2AE  8D 01 00    STA temp2
  366                       
  367  06:C2B1  AD 00 70    LDA hasContinue
  368  06:C2B4  F0 05       BEQ .parseInputs
  369  06:C2B6  A9 03       LDA #$03
  370  06:C2B8  8D 01 00    STA temp2
  371                       
  372  06:C2BB            .parseInputs:
  373  06:C2BB  AD 1C 00    LDA gamepadPressed
  374  06:C2BE  29 30       AND #GAMEPAD_VERT
  375  06:C2C0  F0 E4       BEQ .leaveEarly
  376  06:C2C2  0A          ASL A
  377  06:C2C3  0A          ASL A
  378  06:C2C4            .checkDown:
  379  06:C2C4  0A          ASL A
  380  06:C2C5  90 03       BCC .checkUp
  381  06:C2C7  EE 00 00    INC temp1
  382  06:C2CA            .checkUp:
  383  06:C2CA  0A          ASL A
  384  06:C2CB  90 03       BCC .move
  385  06:C2CD  CE 00 00    DEC temp1
  386  06:C2D0            .move:
  387                       
  388  06:C2D0  AD C9 00    LDA mouse_index
  389  06:C2D3  18          CLC
  390  06:C2D4  6D 00 00    ADC temp1
  391  06:C2D7  CD 01 00    CMP temp2
  392  06:C2DA  F0 04       BEQ .skipMod
  393  06:C2DC  90 02       BCC .skipMod
  394  06:C2DE  A9 00       LDA #$00
  395  06:C2E0            .skipMod:
  396  06:C2E0  8D C9 00    STA mouse_index
  397                       ;; mult mouse_index by 16
  398  06:C2E3            SetBankPointerFromIndex:
  399                     
  400  06:C2E3  0A          ASL A
  401  06:C2E4  0A          ASL A
  402  06:C2E5  0A          ASL A
  403  06:C2E6  0A          ASL A
  404  06:C2E7  18          CLC
  405  06:C2E8  69 A0       ADC #$A0
  406  06:C2EA  A2 01       LDX #$01
  407  06:C2EC  20 6D C2    JSR SetSpriteYPosition
  408                       
  409  06:C2EF  20 6B C4    JSR PlayMenuCursorSound
  410                     
  411  06:C2F2            .leave:
  412                       
  413  06:C2F2  60          RTS
  414                       
  415  06:C2F3            UpdatePuzzlePointer:
  416                     
  417                       ;;puzzle pointer is 2D, will loop between 0-9 and 0-2
  418  06:C2F3  AD 1C 00    LDA gamepadPressed
  419  06:C2F6  F0 6C       BEQ .leave 
  420                       
  421  06:C2F8  A9 00       LDA #$00
  422  06:C2FA  8D 00 00    STA temp1
  423  06:C2FD  8D 01 00    STA temp2
  424                       
  425  06:C300            .parseInputs:
  426  06:C300  AD 1C 00    LDA gamepadPressed
  427  06:C303  29 F0       AND #GAMEPAD_MOVE
  428  06:C305  F0 5D       BEQ .leave
  429  06:C307  0A          ASL A
  430  06:C308  90 03       BCC .checkLeft
  431  06:C30A  EE 00 00    INC temp1
  432  06:C30D            .checkLeft:
  433  06:C30D  0A          ASL A
  434  06:C30E  90 03       BCC .checkDown
  435  06:C310  CE 00 00    DEC temp1
  436  06:C313            .checkDown:
  437  06:C313  0A          ASL A
  438  06:C314  90 03       BCC .checkUp
  439  06:C316  EE 01 00    INC temp2
  440  06:C319            .checkUp:
  441  06:C319  0A          ASL A
  442  06:C31A  90 03       BCC .move
  443  06:C31C  CE 01 00    DEC temp2
  444                       
  445  06:C31F            .move:
  446                     
  447  06:C31F  AD C9 00    LDA mouse_index
  448  06:C322  18          CLC
  449  06:C323  6D 01 00    ADC temp2
  450  06:C326  C9 02       CMP #$02
  451  06:C328  F0 04       BEQ .skipYMod
  452  06:C32A  90 02       BCC .skipYMod
  453  06:C32C  A9 00       LDA #$00
  454  06:C32E            .skipYMod:
  455  06:C32E  8D C9 00    STA mouse_index
  456                       ;; mult mouse_index by 16
  457  06:C331  0A          ASL A
  458  06:C332  0A          ASL A
  459  06:C333  0A          ASL A
  460  06:C334  0A          ASL A
  461  06:C335  18          CLC
  462  06:C336  69 AE       ADC #$AE
  463  06:C338  A2 01       LDX #$01
  464  06:C33A  20 6D C2    JSR SetSpriteYPosition
  465                       
  466  06:C33D  AD CA 00    LDA mouse_index+1
  467  06:C340  18          CLC
  468  06:C341  6D 00 00    ADC temp1
  469  06:C344  C9 08       CMP #$08
  470  06:C346  F0 04       BEQ .skipXMod
  471  06:C348  90 02       BCC .skipXMod
  472  06:C34A  A9 00       LDA #$00
  473  06:C34C            .skipXMod:
  474  06:C34C  8D CA 00    STA mouse_index+1
  475                       ;; we need to move 3 tiles each- so index * 3 * 8,
  476  06:C34F  18          CLC
  477  06:C350  6D CA 00    ADC mouse_index+1
  478  06:C353  6D CA 00    ADC mouse_index+1
  479  06:C356  0A          ASL A
  480  06:C357  0A          ASL A
  481  06:C358  0A          ASL A
  482  06:C359  18          CLC
  483  06:C35A  69 10       ADC #$10
  484  06:C35C  A2 01       LDX #$01
  485  06:C35E  20 78 C2    JSR SetSpriteXPosition
  486  06:C361  20 6B C4    JSR PlayMenuCursorSound
  487                       
  488  06:C364            .leave:
  489                       
  490  06:C364  60          RTS
  491                     
  492  06:C365            LoadBank:
  493                     
  494                       ;;load bank
  495  06:C365  20 26 D2    JSR ResetMapper
  496  06:C368  AD 07 70    LDA bank_index
  497  06:C36B  8D A9 00    STA currentPRGBank
  498  06:C36E  20 35 D2    JSR LoadPRGBank
  499  06:C371  60          RTS
  500                       
  501  06:C372            UpdatePuzzleInfo:
  502                     
  503                     
  504                       MACROGetLabelPointer PuzzleSaveLocations, table_address
                          
       06:C372  A9 CC             LDA #HIGH(PuzzleSaveLocations)
       06:C374  A2 C2             LDX #LOW(PuzzleSaveLocations)
                                  
       06:C376  8E 16 00          STX table_address
       06:C379  8D 17 00          STA table_address+1
                                  
  505  06:C37C  AD AB 00    LDA tempBank
  506  06:C37F  0A          ASL A
  507  06:C380  A8          TAY
  508  06:C381  20 E3 CF    JSR GetTableAtIndex
  509                       
  510                       ;;load title/time
  511                       ;;time first, we haven't done titles
  512  06:C384  A2 00       LDX #$00
  513  06:C386  BD 20 FD    LDA SelectDefaultTime,x
  514  06:C389  8D 01 00    STA temp2
  515  06:C38C  E8          INX
  516  06:C38D  BD 20 FD    LDA SelectDefaultTime,x
  517  06:C390  8D 00 00    STA temp1
  518                       
  519  06:C393  AD AC 00    LDA tempPuzz
  520  06:C396  0A          ASL A
  521  06:C397  0A          ASL A
  522  06:C398  A8          TAY
  523  06:C399  B1 16       LDA [table_address], y
  524  06:C39B  10 43       BPL .loadDefaultTime
  525                       
  526                       ;;time exists!
  527  06:C39D  29 0F       AND #$0F
  528  06:C39F  8D 02 00    STA temp3
  529  06:C3A2  C8          INY
  530  06:C3A3  C8          INY
  531  06:C3A4  C8          INY
  532                       MACROAddPPUStringEntryRawData temp1, temp2, #DRAW_HORIZONTAL, #$05
                          
       06:C3A5  A9 01       LDA #$01
       06:C3A7  8D 23 00    STA PPU_PendingWrite
       06:C3AA  AD 00 00    LDA temp1
       06:C3AD  20 3F D1    JSR WriteToPPUString
       06:C3B0  AD 01 00    LDA temp2
       06:C3B3  20 3F D1    JSR WriteToPPUString
       06:C3B6  A9 00       LDA #DRAW_HORIZONTAL
       06:C3B8  20 3F D1    JSR WriteToPPUString
       06:C3BB  A9 05       LDA #$05 
       06:C3BD  20 3F D1    JSR WriteToPPUString
                            
  533  06:C3C0  B1 16       LDA [table_address], y
  534  06:C3C2  20 3F D1    JSR WriteToPPUString
  535  06:C3C5  88          DEY
  536  06:C3C6  B1 16       LDA [table_address], y
  537  06:C3C8  20 3F D1    JSR WriteToPPUString
  538  06:C3CB  A9 61       LDA #$61
  539  06:C3CD  20 3F D1    JSR WriteToPPUString
  540  06:C3D0  88          DEY
  541  06:C3D1  B1 16       LDA [table_address], y
  542  06:C3D3  20 3F D1    JSR WriteToPPUString
  543  06:C3D6  88          DEY
  544  06:C3D7  AD 02 00    LDA temp3
  545  06:C3DA  20 3F D1    JSR WriteToPPUString  
  546  06:C3DD  4C 22 C4    JMP .drawTitle
  547                     
  548  06:C3E0            .loadDefaultTime:
  549                       
  550                       MACROAddPPUStringEntryRepeat #$26, #$47, #DRAW_HORIZONTAL, #$10, #$63
                          
       06:C3E0  A9 01       LDA #$01
       06:C3E2  8D 23 00    STA PPU_PendingWrite
       06:C3E5  A9 26       LDA #$26
       06:C3E7  20 3F D1    JSR WriteToPPUString
       06:C3EA  A9 47       LDA #$47
       06:C3EC  20 3F D1    JSR WriteToPPUString
       06:C3EF  A9 40       LDA #$40
       06:C3F1  09 00       ORA #DRAW_HORIZONTAL
       06:C3F3  09 10       ORA #$10
       06:C3F5  20 3F D1    JSR WriteToPPUString
       06:C3F8  A9 63       LDA #$63
       06:C3FA  20 3F D1    JSR WriteToPPUString
                            
  551                       MACROAddPPUStringEntryTable temp1, temp2, #DRAW_HORIZONTAL, DefaultTimeString
                           
       06:C3FD  A9 01       LDA #$01
       06:C3FF  8D 23 00    STA PPU_PendingWrite
       06:C402  AD 00 00    LDA temp1
       06:C405  20 3F D1    JSR WriteToPPUString
       06:C408  AD 01 00    LDA temp2
       06:C40B  20 3F D1    JSR WriteToPPUString
       06:C40E  A9 20       LDA #$20
       06:C410  09 00       ORA #DRAW_HORIZONTAL
       06:C412  20 3F D1    JSR WriteToPPUString
       06:C415  A9 22       LDA #LOW(DefaultTimeString)
       06:C417  20 3F D1    JSR WriteToPPUString
       06:C41A  A9 FD       LDA #HIGH(DefaultTimeString)
       06:C41C  20 3F D1    JSR WriteToPPUString
                           
  552  06:C41F  4C 6A C4    JMP .leave
  553                     
  554  06:C422            .drawTitle:
  555                       MACROAddPPUStringEntryRepeat #$26, #$47, #DRAW_HORIZONTAL, #$10, #$24
                          
       06:C422  A9 01       LDA #$01
       06:C424  8D 23 00    STA PPU_PendingWrite
       06:C427  A9 26       LDA #$26
       06:C429  20 3F D1    JSR WriteToPPUString
       06:C42C  A9 47       LDA #$47
       06:C42E  20 3F D1    JSR WriteToPPUString
       06:C431  A9 40       LDA #$40
       06:C433  09 00       ORA #DRAW_HORIZONTAL
       06:C435  09 10       ORA #$10
       06:C437  20 3F D1    JSR WriteToPPUString
       06:C43A  A9 24       LDA #$24
       06:C43C  20 3F D1    JSR WriteToPPUString
                            
  556                       
  557                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:C43F  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:C441  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:C443  8E 16 00          STX table_address
       06:C446  8D 17 00          STA table_address+1
                                  
  558                       MACROGetDoubleIndex tempPuzz
                          
       06:C449  AD AC 00          LDA tempPuzz
       06:C44C  0A                ASL A
       06:C44D  A8                TAY
                                  
  559  06:C44E  20 E3 CF    JSR GetTableAtIndex
  560                       MACROGetPointer table_address, title_address
                          
       06:C451  AD 16 00          LDA table_address
       06:C454  8D B1 00          STA title_address
       06:C457  AD 17 00          LDA table_address+1
       06:C45A  8D B2 00          STA title_address+1
                          
  561                     
  562                       ;draw title at 264F
  563  06:C45D  A9 4F       LDA #$4F 
  564  06:C45F  8D B9 00    STA title_draw_address
  565  06:C462  A9 26       LDA #$26
  566  06:C464  8D BA 00    STA title_draw_address+1
  567                       
  568  06:C467  20 D3 D5    JSR DrawTitle
  569  06:C46A            .leave:
  570  06:C46A  60          RTS
  571                     
  572  06:C46B            PlayMenuCursorSound:
  573                         
  574  06:C46B  A9 05       LDA #$05
  575  06:C46D  8D D6 00    STA current_song
  576  06:C470  20 0B A1    JSR sound_load
  577  06:C473  60          RTS 
  578                     
  579  06:C474            PlayPuzzleCursorSound:
  580  06:C474  A9 06       LDA #$06
  581  06:C476  8D D6 00    STA current_song
  582  06:C479  20 0B A1    JSR sound_load
  583  06:C47C  60          RTS 
  584                       
  585  06:C47D            PlayNoiseBlipSound:
  586                      
  587  06:C47D  A9 07       LDA #$07
  588  06:C47F  8D D6 00    STA current_song
  589  06:C482  20 0B A1    JSR sound_load
  590  06:C485  60          RTS 
  591                       
  592                     
  593  06:C486            ContinueText:
  594                     
  595  06:C486  08 0C 18    .db $08, $0C, $18, $17, $1D, $12, $17, $1E, $0E
       06:C489  17 1D 12  
       06:C48C  17 1E 0E  
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGame.asm
   86                       .include "Routines/Game_States/UpdateGame.asm"
    1                     ;;VERT_CLUES = $206E
    2                     ;;HORI_CLUES = $2145
    3                     
    4           214E      VERT_CLUES = $214E
    5           218C      HORI_CLUES = $218C
    6           20A8      BANK_LEVEL = $20A8
    7           20E5      TIMER_LOC = $20E5
    8                     
    9           618E      MOUSE_START = $618E
   10                     
   11           0010      HOLD_TIME = $10
   12           0004      HOLD_FREQ = $04
   13                     
   14  06:C48F            UpdateGame:
   15                     
   16  06:C48F  AD 10 00    LDA NMI_locks
   17  06:C492  F0 01       BEQ .unlocked
   18                       
   19  06:C494  60          RTS
   20                       
   21  06:C495            .unlocked:
   22                     
   23  06:C495  20 99 C4    JSR DoUpdateGame
   24  06:C498  60          RTS
   25                       
   26  06:C499            DoUpdateGame:
   27                     
   28  06:C499  AD 0F 00    LDA mode_state
   29  06:C49C  20 BD CF    JSR Dynamic_Jump
   30                       
   31  06:C49F            UpdateGameJumpTable:
   32                     
   33  06:C49F  B3 C4       .word UpdateGameInit
   34  06:C4A1  76 C5       .word UpdateDrawVertClues
   35  06:C4A3  A3 C5       .word UpdateDrawHoriClues
   36  06:C4A5  FD C5       .word UpdateGamePlay
   37  06:C4A7  DD C7       .word UpdateClearPuzzle
   38  06:C4A9  F0 C7       .word UpdateMoveScreen
   39  06:C4AB  69 C8       .word UpdateDrawImage
   40  06:C4AD  0D C9       .word UpdateWaitInput
   41  06:C4AF  23 C9       .word UpdateGameFadeOut
   42  06:C4B1  49 C9       .word UpdateGameExit
   43                     
   44  06:C4B3            UpdateGameInit:
   45                     
   46                       ;;start bank song
   47                       
   48  06:C4B3  A9 01       lda #$01
   49  06:C4B5  8D D6 00    sta current_song
   50  06:C4B8  AD D6 00    lda current_song
   51  06:C4BB  20 0B A1    jsr sound_load
   52                       
   53                       ;; get the puzzle table in the puzzle address
   54                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C4BE  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C4C0  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C4C2  8E 16 00          STX table_address
       06:C4C5  8D 17 00          STA table_address+1
                                  
   55                       MACROGetDoubleIndex puzzle_index
                          
       06:C4C8  AD 08 70          LDA puzzle_index
       06:C4CB  0A                ASL A
       06:C4CC  A8                TAY
                                  
   56  06:C4CD  20 E3 CF    JSR GetTableAtIndex
   57                       MACROGetPointer table_address, puzzle_address
                          
       06:C4D0  AD 16 00          LDA table_address
       06:C4D3  8D AD 00          STA puzzle_address
       06:C4D6  AD 17 00          LDA table_address+1
       06:C4D9  8D AE 00          STA puzzle_address+1
                          
   58                       MACROGetLabelPointer MOUSE_START, mouse_location
                          
       06:C4DC  A9 61             LDA #HIGH(MOUSE_START)
       06:C4DE  A2 8E             LDX #LOW(MOUSE_START)
                                  
       06:C4E0  8E C7 00          STX mouse_location
       06:C4E3  8D C8 00          STA mouse_location+1
                                  
   59                     
   60                       ;;for clues, we need to get past the header- for a 15x15 puzzle, that's 34 bytes ahead
   61  06:C4E6  A0 00       LDY #$00
   62  06:C4E8  B1 AD       LDA [puzzle_address], y
   63  06:C4EA  AA          TAX
   64  06:C4EB  BD BF CC    LDA PuzzleHeaderSkips, x
   65  06:C4EE  8D 00 00    STA temp1
   66                       
   67  06:C4F1  AD AD 00    LDA puzzle_address
   68  06:C4F4  18          CLC
   69  06:C4F5  6D 00 00    ADC temp1
   70  06:C4F8  8D AF 00    STA clues_address
   71  06:C4FB  A9 00       LDA #$00
   72  06:C4FD  6D AE 00    ADC puzzle_address+1
   73  06:C500  8D B0 00    STA clues_address+1
   74                     
   75  06:C503  A9 00       LDA #$00
   76  06:C505  8D BF 00    STA clueTableIndex
   77  06:C508  8D C0 00    STA clueLineIndex
   78  06:C50B  8D C6 00    STA clueParity
   79  06:C50E  8D C1 00    STA clueOffsetShift
   80  06:C511  8D C9 00    STA mouse_index
   81  06:C514  8D CA 00    STA mouse_index+1
   82                       
   83  06:C517  A9 01       LDA #$01
   84  06:C519  8D CD 00    STA pauseInputLock 
   85                      
   86  06:C51C  AD 00 70    LDA hasContinue
   87  06:C51F  D0 14       BNE .skipSolutionReset
   88                       
   89  06:C521  A9 00       LDA #$00
   90  06:C523  8D 01 70    STA solutionCount
   91  06:C526  8D 02 70    STA nonSolutionCount
   92  06:C529  8D 03 70    STA GameTime
   93  06:C52C  8D 04 70    STA GameTime+1
   94  06:C52F  8D 05 70    STA GameTime+2
   95  06:C532  8D 06 70    STA GameTime+3
   96                       
   97  06:C535            .skipSolutionReset:     
   98                       
   99  06:C535  A9 20       LDA #$20
  100  06:C537  8D C2 00    STA clueDrawAdd
  101                      
  102                       MACROGetLabelPointer VERT_CLUES, clue_start_address
                          
       06:C53A  A9 21             LDA #HIGH(VERT_CLUES)
       06:C53C  A2 4E             LDX #LOW(VERT_CLUES)
                                  
       06:C53E  8E BB 00          STX clue_start_address
       06:C541  8D BC 00          STA clue_start_address+1
                                  
  103  06:C544  20 26 D3    JSR ResetClueDrawAddress
  104                       
  105                       MACROAddPPUStringEntryRawData #HIGH(BANK_LEVEL), #LOW(BANK_LEVEL), #DRAW_HORIZONTAL, #$03
                          
       06:C547  A9 01       LDA #$01
       06:C549  8D 23 00    STA PPU_PendingWrite
       06:C54C  A9 20       LDA #HIGH(BANK_LEVEL)
       06:C54E  20 3F D1    JSR WriteToPPUString
       06:C551  A9 A8       LDA #LOW(BANK_LEVEL)
       06:C553  20 3F D1    JSR WriteToPPUString
       06:C556  A9 00       LDA #DRAW_HORIZONTAL
       06:C558  20 3F D1    JSR WriteToPPUString
       06:C55B  A9 03       LDA #$03 
       06:C55D  20 3F D1    JSR WriteToPPUString
                            
  106  06:C560  AD 07 70    LDA bank_index
  107  06:C563  20 3F D1    JSR WriteToPPUString
  108  06:C566  A9 60       LDA #$60
  109  06:C568  20 3F D1    JSR WriteToPPUString
  110  06:C56B  AE 08 70    LDX puzzle_index
  111  06:C56E  E8          INX
  112  06:C56F  8A          TXA 
  113  06:C570  20 3F D1    JSR WriteToPPUString
  114                       
  115  06:C573  EE 0F 00    INC mode_state
  116                     
  117  06:C576            UpdateDrawVertClues:
  118                       
  119  06:C576  AD 00 70    LDA hasContinue
  120  06:C579  D0 05       BNE .changeModeState
  121  06:C57B  20 7D D2    JSR PopulateClues
  122                       
  123  06:C57E  90 22       BCC .leave
  124                       
  125  06:C580            .changeModeState:
  126                     
  127  06:C580  A9 00       LDA #$00
  128  06:C582  8D C0 00    STA clueLineIndex
  129  06:C585  8D C6 00    STA clueParity
  130                       
  131  06:C588  A9 05       LDA #$05
  132  06:C58A  8D C1 00    STA clueOffsetShift
  133                       
  134  06:C58D  A9 01       LDA #$01
  135  06:C58F  8D C2 00    STA clueDrawAdd
  136                        
  137                       MACROGetLabelPointer HORI_CLUES, clue_start_address
                          
       06:C592  A9 21             LDA #HIGH(HORI_CLUES)
       06:C594  A2 8C             LDX #LOW(HORI_CLUES)
                                  
       06:C596  8E BB 00          STX clue_start_address
       06:C599  8D BC 00          STA clue_start_address+1
                                  
  138  06:C59C  20 26 D3    JSR ResetClueDrawAddress
  139                     
  140  06:C59F  EE 0F 00    INC mode_state
  141  06:C5A2            .leave:
  142  06:C5A2  60          RTS
  143                       
  144  06:C5A3            UpdateDrawHoriClues:
  145                     
  146  06:C5A3  AD 00 70    LDA hasContinue
  147  06:C5A6  D0 0B       BNE .changeModeState
  148  06:C5A8  20 7D D2    JSR PopulateClues
  149  06:C5AB  AD BF 00    LDA clueTableIndex
  150  06:C5AE  8D 09 70    STA image_table_offset
  151  06:C5B1  90 49       BCC .leave
  152                     
  153  06:C5B3            .changeModeState:
  154  06:C5B3  20 87 D1    JSR TurnOnSprites
  155                       
  156                       ;;set the timer to 00
  157                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C5B6  A9 01       LDA #$01
       06:C5B8  8D 23 00    STA PPU_PendingWrite
       06:C5BB  A9 20       LDA #HIGH(TIMER_LOC)
       06:C5BD  20 3F D1    JSR WriteToPPUString
       06:C5C0  A9 E5       LDA #LOW(TIMER_LOC)
       06:C5C2  20 3F D1    JSR WriteToPPUString
       06:C5C5  A9 00       LDA #DRAW_HORIZONTAL
       06:C5C7  20 3F D1    JSR WriteToPPUString
       06:C5CA  A9 05       LDA #$05 
       06:C5CC  20 3F D1    JSR WriteToPPUString
                            
  158  06:C5CF  AD 06 70    LDA GameTime+3
  159  06:C5D2  20 3F D1    JSR WriteToPPUString
  160  06:C5D5  AD 05 70    LDA GameTime+2
  161  06:C5D8  20 3F D1    JSR WriteToPPUString
  162  06:C5DB  A9 61       LDA #$61
  163  06:C5DD  20 3F D1    JSR WriteToPPUString
  164  06:C5E0  AD 04 70    LDA GameTime+1
  165  06:C5E3  20 3F D1    JSR WriteToPPUString
  166  06:C5E6  AD 03 70    LDA GameTime
  167  06:C5E9  20 3F D1    JSR WriteToPPUString
  168                       
  169                       ;;reset time
  170  06:C5EC  A9 00       LDA #$00
  171  06:C5EE  8D 0A 00    STA time
  172  06:C5F1  8D 0B 00    STA scaledTime
  173                       
  174                       ;;clear has continue
  175  06:C5F4  A9 00       LDA #$00
  176  06:C5F6  8D 00 70    STA hasContinue 
  177                       
  178                       
  179  06:C5F9  EE 0F 00    INC mode_state
  180  06:C5FC            .leave:
  181  06:C5FC  60          RTS
  182                       
  183  06:C5FD            UpdateGamePlay:
  184                         
  185  06:C5FD  AD CC 00    LDA pauseState
  186  06:C600  F0 04       BEQ .checkPause
  187  06:C602  20 22 CB    JSR UpdatePause
  188  06:C605  60          RTS
  189                       
  190  06:C606            .checkPause:
  191                       
  192  06:C606  AD 1C 00    LDA gamepadPressed
  193  06:C609  29 08       AND #GAMEPAD_START
  194  06:C60B  F0 29       BEQ .updatePlay
  195  06:C60D  A9 01       LDA #$01
  196  06:C60F  8D CC 00    STA pauseState
  197  06:C612  A9 00       LDA #$00
  198  06:C614  8D C0 00    STA clueLineIndex 
  199  06:C617  8D C1 00    STA clueOffsetShift   
  200                     
  201  06:C61A  A9 FF       LDA #$FF
  202  06:C61C  A2 00       LDX #$00
  203  06:C61E  20 83 C2    JSR SetSpriteImage
  204                     
  205                       ;;we need the pause screen table loaded
  206                       MACROGetLabelPointer Pause_Menu, pause_address
                          
       06:C621  A9 FC             LDA #HIGH(Pause_Menu)
       06:C623  A2 7C             LDX #LOW(Pause_Menu)
                                  
       06:C625  8E B3 00          STX pause_address
       06:C628  8D B4 00          STA pause_address+1
                                  
  207                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:C62B  A9 21             LDA #HIGH($210A)
       06:C62D  A2 0A             LDX #LOW($210A)
                                  
       06:C62F  8E B7 00          STX pause_draw_address
       06:C632  8D B8 00          STA pause_draw_address+1
                                  
  208                       
  209                       
  210  06:C635  60          RTS
  211                     
  212  06:C636            .updatePlay:
  213                     
  214  06:C636  20 D2 CA    JSR UpdateTimeDisplay
  215                             
  216  06:C639  A9 00       LDA #$00
  217  06:C63B  8D 00 00    STA temp1
  218  06:C63E  8D 01 00    STA temp2
  219  06:C641  8D 02 00    STA temp3
  220                       
  221  06:C644            .checkPressed:  
  222                     
  223  06:C644  AD 1C 00    LDA gamepadPressed
  224  06:C647  29 F0       AND #GAMEPAD_MOVE
  225  06:C649  F0 0B       BEQ .checkHeld
  226                       
  227  06:C64B  A9 10       LDA #HOLD_TIME
  228  06:C64D  8D CE 00    STA holdTimer 
  229  06:C650  AD 1C 00    LDA gamepadPressed
  230  06:C653  4C 6A C6    JMP .parseInputs
  231                       
  232  06:C656            .checkHeld:
  233                       
  234  06:C656  AD 1A 00    LDA gamepad
  235  06:C659  29 F0       AND #GAMEPAD_MOVE
  236  06:C65B  F0 2F       BEQ .checkPaintPress
  237                       
  238                       ;;decrement the hold timer
  239  06:C65D  CE CE 00    DEC holdTimer
  240  06:C660  D0 2A       BNE .checkPaintPress
  241  06:C662  A9 04       LDA #HOLD_FREQ
  242  06:C664  8D CE 00    STA holdTimer
  243  06:C667  AD 1A 00    LDA gamepad
  244                     
  245  06:C66A            .parseInputs:
  246                     
  247  06:C66A  29 F0       AND #GAMEPAD_MOVE
  248  06:C66C  F0 1E       BEQ .checkPaintPress
  249  06:C66E  0A          ASL A
  250  06:C66F  90 03       BCC .checkLeft
  251  06:C671  EE 00 00    INC temp1
  252  06:C674            .checkLeft:
  253  06:C674  0A          ASL A
  254  06:C675  90 03       BCC .checkDown
  255  06:C677  CE 00 00    DEC temp1
  256  06:C67A            .checkDown:
  257  06:C67A  0A          ASL A
  258  06:C67B  90 03       BCC .checkUp
  259  06:C67D  EE 01 00    INC temp2
  260  06:C680            .checkUp:
  261  06:C680  0A          ASL A
  262  06:C681  90 03       BCC .move
  263  06:C683  CE 01 00    DEC temp2
  264                       
  265  06:C686            .move:
  266                      
  267  06:C686  20 64 C9    JSR MoveMouse
  268  06:C689  20 5E CA    JSR UpdateMouseScreenPos
  269                       
  270  06:C68C            .checkPaintPress:
  271                     
  272  06:C68C  AD 1C 00    LDA gamepadPressed
  273  06:C68F  29 03       AND #GAMEPAD_AB
  274  06:C691  F0 41       BEQ .updatePaint
  275                       ;;A or B pressed, get current tile
  276                       
  277  06:C693  8D 00 00    STA temp1
  278                       
  279  06:C696  A0 00       LDY #$00
  280  06:C698  B1 C7       LDA [mouse_location], y
  281  06:C69A  8D 01 00    STA temp2
  282                       
  283                         ;;A treats X and Clear as clear
  284                             ;;B treats mark and clear as clear
  285                             ;;clear->mark->x
  286                             
  287                     
  288  06:C69D  C9 7C       CMP #$7C      ;check if this is a marked tile
  289  06:C69F  B0 0F       BCS .getClearTile
  290                       ;;cleared tile- store off marked tile to paint with instead
  291                       ;;not a clear tile- a mark or an x - check A or B  
  292  06:C6A1  4E 00 00    LSR temp1
  293  06:C6A4  B0 05       BCS .getMarkTile
  294                       
  295  06:C6A6            .getXTile:
  296  06:C6A6  A9 80       LDA #$80
  297  06:C6A8  4C CE C6    JMP .finishGetTile
  298                       
  299  06:C6AB            .getMarkTile:
  300  06:C6AB  A9 70       LDA #$70
  301  06:C6AD  4C CE C6    JMP .finishGetTile
  302                     
  303  06:C6B0            .getClearTile:
  304                       
  305  06:C6B0  4E 00 00    LSR temp1
  306  06:C6B3  90 0A       BCC .checkB
  307  06:C6B5  AD 01 00    LDA temp2
  308  06:C6B8  C9 8C       CMP #$8C                      ;; check if in X tiles - will be if >=
  309  06:C6BA  90 0D       BCC .clearTile
  310  06:C6BC  4C AB C6    JMP .getMarkTile
  311                       
  312  06:C6BF            .checkB:
  313                       
  314  06:C6BF  AD 01 00   LDA temp2
  315  06:C6C2  C9 8C      CMP #$8C
  316  06:C6C4  B0 03      BCS .clearTile
  317  06:C6C6  4C A6 C6   JMP .getXTile
  318                       
  319  06:C6C9            .clearTile:
  320  06:C6C9  A9 60       LDA #$60
  321  06:C6CB  4C CE C6    JMP .finishGetTile
  322                       
  323  06:C6CE            .finishGetTile:
  324  06:C6CE  8D CB 00    STA currentPaintTile
  325  06:C6D1  4C E6 C6    JMP .setTile
  326                     
  327                     ;;we'll keep a copy of the puzzle tiles in memory, since we can't easily access tiles in the PPU
  328                     ;;might be best to just keep an entire copy of the nametable instead of trying to index it and deal with 16 bit math
  329                     ;;we can load the nametable into memory as we draw it
  330                     
  331  06:C6D4            .updatePaint:
  332                     
  333  06:C6D4  AD 1A 00    LDA gamepad
  334  06:C6D7  29 03       AND #GAMEPAD_AB
  335  06:C6D9  D0 06       BNE .checkInputLock
  336                       
  337  06:C6DB  A9 00       LDA #$00
  338  06:C6DD  8D CD 00    STA pauseInputLock
  339                       
  340  06:C6E0            .leaveEarly:
  341  06:C6E0  60          RTS  
  342                     
  343  06:C6E1            .checkInputLock:
  344                     
  345                       ;;check if the input lock is on
  346  06:C6E1  2D CD 00    AND pauseInputLock
  347  06:C6E4  D0 FA       BNE .leaveEarly
  348                       
  349  06:C6E6            .setTile:
  350                       
  351  06:C6E6  AD C9 00    LDA mouse_index
  352  06:C6E9  0D CA 00    ORA mouse_index+1
  353  06:C6EC  29 10       AND #$10
  354  06:C6EE  F0 22       BEQ .getPuzzleTile
  355                       
  356  06:C6F0  AD 1C 00    LDA gamepadPressed ; only draw on click
  357  06:C6F3  29 03       AND #GAMEPAD_AB
  358  06:C6F5  F0 E9       BEQ .leaveEarly
  359                       
  360  06:C6F7  A0 00       LDY #$00
  361  06:C6F9  B1 C7       LDA [mouse_location], y
  362  06:C6FB  C9 40       CMP #$40
  363  06:C6FD  90 E1       BCC .leaveEarly
  364  06:C6FF  C9 5F       CMP #$5F
  365  06:C701  F0 02       BEQ .toggleClue
  366  06:C703  B0 DB       BCS .leaveEarly
  367                     
  368  06:C705            .toggleClue:
  369  06:C705  8D 02 00    STA temp3
  370  06:C708  29 F0       AND #$F0
  371  06:C70A  49 10       EOR #$10
  372  06:C70C  8D CB 00    STA currentPaintTile
  373  06:C70F  4C 15 C7    JMP .overwriteTile
  374                       
  375  06:C712            .getPuzzleTile:
  376  06:C712  20 32 CC    JSR CheckAgainstSolution
  377                       
  378  06:C715            .overwriteTile:
  379                       ;;overwrite tile
  380                        
  381  06:C715  AD 02 00    LDA temp3             ;tile taken from current mouse location
  382  06:C718  29 F0       AND #$F0
  383  06:C71A  CD CB 00    CMP currentPaintTile
  384  06:C71D  F0 03       BEQ .skipSound
  385  06:C71F  20 6B C4    JSR PlayMenuCursorSound
  386  06:C722            .skipSound:
  387  06:C722  AD 02 00    LDA temp3
  388  06:C725  29 0F       AND #$0F
  389  06:C727  0D CB 00    ORA currentPaintTile
  390  06:C72A  A0 00       LDY #$00
  391  06:C72C  91 C7       STA [mouse_location], y
  392  06:C72E  8D 00 00    STA temp1
  393                       
  394  06:C731  AD C8 00    LDA mouse_location+1
  395  06:C734  29 3F       AND #$3F
  396  06:C736  8D 01 00    STA temp2
  397                         
  398                       MACROAddPPUStringEntryRawData temp2, mouse_location, #DRAW_HORIZONTAL, #$01
                          
       06:C739  A9 01       LDA #$01
       06:C73B  8D 23 00    STA PPU_PendingWrite
       06:C73E  AD 01 00    LDA temp2
       06:C741  20 3F D1    JSR WriteToPPUString
       06:C744  AD C7 00    LDA mouse_location
       06:C747  20 3F D1    JSR WriteToPPUString
       06:C74A  A9 00       LDA #DRAW_HORIZONTAL
       06:C74C  20 3F D1    JSR WriteToPPUString
       06:C74F  A9 01       LDA #$01 
       06:C751  20 3F D1    JSR WriteToPPUString
                            
  399  06:C754  AD 00 00    LDA temp1
  400  06:C757  20 3F D1    JSR WriteToPPUString
  401                       
  402                       ;;also copy to save copy
  403  06:C75A  AD C7 00    LDA mouse_location
  404  06:C75D  8D B5 00    STA copy_address
  405  06:C760  AD C8 00    LDA mouse_location+1
  406  06:C763  29 0F       AND #$0F
  407  06:C765  09 60       ORA #$60
  408  06:C767  18          CLC
  409  06:C768  69 08       ADC #$08
  410  06:C76A  8D B6 00    STA copy_address+1
  411                       
  412  06:C76D  AD 00 00    LDA temp1
  413  06:C770  A0 00       LDY #$00
  414  06:C772  91 B5       STA [copy_address],y
  415                       
  416  06:C774            .checkSolution: 
  417                     
  418  06:C774  A0 01       LDY #$01
  419  06:C776  B1 AD       LDA [puzzle_address], y
  420  06:C778  CD 01 70    CMP solutionCount
  421  06:C77B  D0 5F       BNE .leave
  422  06:C77D  AD 02 70    LDA nonSolutionCount
  423  06:C780  F0 03       BEQ .changeModeState
  424                       
  425  06:C782  4C DC C7    JMP .leave
  426                       
  427                       ;;update the painting
  428  06:C785            .changeModeState:
  429                      
  430  06:C785  20 90 D1    JSR TurnOffSprites
  431                        
  432  06:C788  A9 00       LDA #$00
  433  06:C78A  8D BD 00    STA clue_draw_address
  434  06:C78D  8D C0 00    STA clueLineIndex
  435  06:C790  A9 20       LDA #$20
  436  06:C792  8D BE 00    STA clue_draw_address+1
  437                       
  438  06:C795  EE 0F 00    INC mode_state
  439                       
  440  06:C798  A9 00       lda #$00
  441  06:C79A  8D D6 00    sta current_song
  442  06:C79D  AD D6 00    lda current_song
  443  06:C7A0  20 0B A1    jsr sound_load
  444                       
  445                       ;;the puzzle is solved, store the time and solved bit in memory
  446                       ;;if the puzzle was solved before, only update the time
  447                       
  448                       MACROGetLabelPointer PuzzleSaveLocations, table_address
                          
       06:C7A3  A9 CC             LDA #HIGH(PuzzleSaveLocations)
       06:C7A5  A2 C2             LDX #LOW(PuzzleSaveLocations)
                                  
       06:C7A7  8E 16 00          STX table_address
       06:C7AA  8D 17 00          STA table_address+1
                                  
  449  06:C7AD  AD 07 70    LDA bank_index
  450  06:C7B0  0A          ASL A
  451  06:C7B1  A8          TAY
  452  06:C7B2  20 E3 CF    JSR GetTableAtIndex
  453                       
  454  06:C7B5  20 EA CB    JSR CheckNewBestTime
  455                       
  456  06:C7B8  AD D1 00    LDA recordSet
  457  06:C7BB  F0 1F       BEQ .leave
  458                       
  459  06:C7BD  AD 08 70    LDA puzzle_index
  460  06:C7C0  0A          ASL A
  461  06:C7C1  0A          ASL A
  462  06:C7C2  A8          TAY
  463  06:C7C3  AD 03 70    LDA GameTime
  464  06:C7C6  09 80       ORA #$80
  465  06:C7C8  91 16       STA [table_address], y
  466  06:C7CA  C8          INY
  467  06:C7CB  AD 04 70    LDA GameTime+1
  468  06:C7CE  91 16       STA [table_address], y
  469  06:C7D0  C8          INY
  470  06:C7D1  AD 05 70    LDA GameTime+2
  471  06:C7D4  91 16       STA [table_address], y
  472  06:C7D6  C8          INY
  473  06:C7D7  AD 06 70    LDA GameTime+3
  474  06:C7DA  91 16       STA [table_address],y
  475                     
  476                      
  477                       
  478  06:C7DC            .leave:
  479                     
  480  06:C7DC  60          RTS
  481                       
  482  06:C7DD            UpdateClearPuzzle:
  483                     
  484  06:C7DD  20 9A D3    JSR ClearPuzzle
  485  06:C7E0  AD C0 00    LDA clueLineIndex
  486  06:C7E3  C9 1E       CMP #30
  487  06:C7E5  D0 08       BNE .leave
  488                       
  489  06:C7E7            .changeModeState:
  490                     
  491  06:C7E7  A9 00       LDA #$00
  492  06:C7E9  8D C0 00    STA clueLineIndex ;using this as a scroller
  493  06:C7EC  EE 0F 00    INC mode_state
  494                     
  495  06:C7EF            .leave:
  496                      
  497  06:C7EF  60          RTS
  498  06:C7F0            UpdateMoveScreen:
  499                       
  500                       ;for 15x15, move 5 tiles left and 5 tiles up- let's do 1 at a time
  501                       ;we'll take the lower nibble of the clue line index as our scroll counter, and the higher nibble as the x/y flag
  502                       
  503  06:C7F0  A0 00       LDY #$00
  504  06:C7F2  B1 AD       LDA [puzzle_address], y
  505  06:C7F4  AA          TAX
  506  06:C7F5  BD B9 CC    LDA PuzzleScrollHori, x
  507  06:C7F8  8D 00 00    STA temp1
  508  06:C7FB  BD BC CC    LDA PuzzleScrollVert, x
  509  06:C7FE  8D 01 00    STA temp2
  510                       
  511  06:C801  AD C0 00    LDA clueLineIndex
  512  06:C804  29 10       AND #$10
  513  06:C806  D0 1E       BNE .scrollY
  514                       
  515                       ;;scroll X over
  516  06:C808  AD C0 00    LDA clueLineIndex
  517  06:C80B  29 0F       AND #$0F
  518  06:C80D  0A          ASL A
  519  06:C80E  0A          ASL A
  520  06:C80F  0A          ASL A ;mult by 8
  521  06:C810  8D 1F 00    STA PPU_ScrollX
  522                       
  523  06:C813  EE C0 00    INC clueLineIndex
  524  06:C816  AD C0 00    LDA clueLineIndex
  525  06:C819  CD 00 00    CMP temp1
  526  06:C81C  D0 4A       BNE .leave
  527  06:C81E  A9 10       LDA #$10
  528  06:C820  8D C0 00    STA clueLineIndex
  529  06:C823  4C 68 C8    JMP .leave
  530                       
  531  06:C826            .scrollY:
  532                     
  533  06:C826  AD C0 00    LDA clueLineIndex
  534  06:C829  29 0F       AND #$0F
  535  06:C82B  0A          ASL A
  536  06:C82C  0A          ASL A
  537  06:C82D  0A          ASL A ;mult by 8
  538  06:C82E  8D 20 00    STA PPU_ScrollY
  539                     
  540  06:C831  EE C0 00    INC clueLineIndex
  541  06:C834  AD C0 00    LDA clueLineIndex
  542  06:C837  29 0F       AND #$0F
  543  06:C839  CD 01 00    CMP temp2
  544  06:C83C  D0 2A       BNE .leave
  545                       
  546  06:C83E            .changeModeState:
  547                     
  548  06:C83E  A9 8E       LDA #$8E
  549  06:C840  8D BD 00    STA clue_draw_address
  550  06:C843  A9 21       LDA #$21
  551  06:C845  8D BE 00    STA clue_draw_address+1
  552                       
  553  06:C848  AD AF 00    LDA clues_address
  554  06:C84B  18          CLC
  555  06:C84C  6D 09 70    ADC image_table_offset
  556  06:C84F  8D AF 00    STA clues_address
  557  06:C852  AD B0 00    LDA clues_address+1
  558  06:C855  69 00       ADC #$00
  559  06:C857  8D B0 00    STA clues_address+1
  560                       
  561  06:C85A  A9 00       LDA #$00
  562  06:C85C  8D BF 00    STA clueTableIndex
  563  06:C85F  8D C0 00    STA clueLineIndex
  564  06:C862  8D C1 00    STA clueOffsetShift
  565                     
  566  06:C865  EE 0F 00    INC mode_state
  567                     
  568  06:C868            .leave:
  569                      
  570  06:C868  60          RTS
  571  06:C869            UpdateDrawImage:
  572                     
  573                       ;run it twice for a faster draw
  574  06:C869  AD 0A 00    LDA time
  575  06:C86C  29 01       AND #$01
  576  06:C86E  D0 0B       BNE .leaveEarly
  577  06:C870  20 7C D4    JSR DrawImage
  578  06:C873  AD BF 00    LDA clueTableIndex
  579  06:C876  CD 09 00    CMP tempy
  580                     
  581  06:C879  F0 01       BEQ .changeModeState
  582  06:C87B            .leaveEarly:
  583  06:C87B  60          RTS
  584                       
  585  06:C87C            .changeModeState:
  586                     
  587                       ;;do a palette draw
  588                       ;;puzzle address + 03 has the desired palette offset
  589                     
  590  06:C87C  A0 03       LDY #$03
  591  06:C87E  B1 AD       LDA [puzzle_address],y
  592  06:C880  29 0F       AND #$0F
  593  06:C882  AA          TAX
  594                       
  595  06:C883  B1 AD       LDA [puzzle_address],y
  596  06:C885  29 10       AND #$10
  597  06:C887  F0 15       BEQ .storeBottomVals
  598                       
  599  06:C889  8A          TXA
  600  06:C88A  09 10       ORA #$10
  601  06:C88C  8D 01 00    STA temp2
  602  06:C88F  8A          TXA
  603  06:C890  09 20       ORA #$20
  604  06:C892  8D 02 00    STA temp3
  605  06:C895  8A          TXA
  606  06:C896  09 30       ORA #$30
  607  06:C898  8D 03 00    STA temp4
  608                     
  609  06:C89B  4C B0 C8    JMP .checkKeepWhite
  610                       
  611  06:C89E            .storeBottomVals:
  612                     
  613  06:C89E  8A          TXA
  614  06:C89F  09 00       ORA #$00
  615  06:C8A1  8D 01 00    STA temp2
  616  06:C8A4  8A          TXA
  617  06:C8A5  09 10       ORA #$10
  618  06:C8A7  8D 02 00    STA temp3
  619  06:C8AA  8A          TXA
  620  06:C8AB  09 20       ORA #$20
  621  06:C8AD  8D 03 00    STA temp4
  622                       
  623  06:C8B0            .checkKeepWhite:
  624                       
  625  06:C8B0  B1 AD       LDA [puzzle_address],y
  626  06:C8B2  29 20       AND #$20
  627  06:C8B4  F0 05       BEQ .loadPalToPPUStr
  628                       
  629  06:C8B6  A9 30       LDA #$30
  630  06:C8B8  8D 03 00    STA temp4
  631                       
  632                       
  633  06:C8BB            .loadPalToPPUStr:
  634                       
  635                       MACROAddPPUStringEntryRawData #$3F, #$01, #DRAW_HORIZONTAL, #03
                          
       06:C8BB  A9 01       LDA #$01
       06:C8BD  8D 23 00    STA PPU_PendingWrite
       06:C8C0  A9 3F       LDA #$3F
       06:C8C2  20 3F D1    JSR WriteToPPUString
       06:C8C5  A9 01       LDA #$01
       06:C8C7  20 3F D1    JSR WriteToPPUString
       06:C8CA  A9 00       LDA #DRAW_HORIZONTAL
       06:C8CC  20 3F D1    JSR WriteToPPUString
       06:C8CF  A9 03       LDA #03 
       06:C8D1  20 3F D1    JSR WriteToPPUString
                            
  636  06:C8D4  AD 01 00    LDA temp2
  637  06:C8D7  20 3F D1    JSR WriteToPPUString
  638  06:C8DA  AD 02 00    LDA temp3
  639  06:C8DD  20 3F D1    JSR WriteToPPUString
  640  06:C8E0  AD 03 00    LDA temp4
  641  06:C8E3  20 3F D1    JSR WriteToPPUString
  642                       
  643  06:C8E6  A2 01       LDX #$01
  644  06:C8E8            .copyLoop:
  645                       ;;also store in the copy 
  646  06:C8E8  BD 00 00    LDA temp1, x
  647  06:C8EB  9D 00 6C    STA Palette_Copy, x
  648  06:C8EE  E8          INX
  649  06:C8EF  E0 04       CPX #$04
  650  06:C8F1  D0 F5       BNE .copyLoop
  651                       
  652  06:C8F3  A0 00       LDY #$00
  653  06:C8F5  B1 AD       LDA [puzzle_address], y
  654  06:C8F7  0A          ASL A
  655  06:C8F8  AA          TAX
  656  06:C8F9  BD 78 D6    LDA ImageTitleLowerHalfPos, x
  657  06:C8FC  8D B9 00    STA title_draw_address
  658  06:C8FF  E8          INX
  659  06:C900  BD 78 D6    LDA ImageTitleLowerHalfPos, x
  660  06:C903  8D BA 00    STA title_draw_address+1
  661                       
  662  06:C906  20 D3 D5    JSR DrawTitle
  663                       
  664  06:C909  EE 0F 00    INC mode_state
  665                     
  666  06:C90C            .leave:
  667                      
  668  06:C90C  60          RTS
  669                       
  670  06:C90D            UpdateWaitInput:
  671                     
  672  06:C90D  AD 1C 00    LDA gamepadPressed
  673  06:C910  F0 10       BEQ .leave
  674                       
  675  06:C912            .changeModeState:
  676  06:C912  A9 00       LDA #$00
  677  06:C914  8D 0A 00    STA time
  678  06:C917  8D 0B 00    STA scaledTime
  679  06:C91A  A9 02       LDA #GAMEOVER_IDX
  680  06:C91C  8D CF 00    STA targetGameMode
  681  06:C91F  EE 0F 00    INC mode_state
  682                     
  683  06:C922            .leave:
  684                      
  685  06:C922  60          RTS
  686                       
  687  06:C923            UpdateGameFadeOut:
  688                     
  689  06:C923  AD 0A 00    LDA time
  690  06:C926  29 07       AND #$07
  691  06:C928  D0 1E       BNE .leave
  692                       ;;every 8 frames, decrement the palettes
  693  06:C92A  20 BC D1    JSR FadeOutPalettes
  694  06:C92D  B0 19       BCS .leave
  695                     
  696  06:C92F            .changeModeState:
  697  06:C92F  A9 00       LDA #$00
  698  06:C931  8D 0A 00    STA time
  699  06:C934  EE 0F 00    INC mode_state
  700                       
  701                       ;;don't need to turn all the sprites off, just need to
  702                       ;;clear them out   
  703  06:C937  A9 FF       LDA #$FF
  704  06:C939  A2 00       LDX #$00
  705  06:C93B  20 83 C2    JSR SetSpriteImage
  706                       
  707  06:C93E  A9 FF       LDA #$FF
  708  06:C940  A2 01       LDX #$01
  709  06:C942  20 83 C2    JSR SetSpriteImage
  710                       
  711  06:C945  20 87 D1    JSR TurnOnSprites     ;turn sprite rendering back on
  712                       
  713  06:C948            .leave:
  714  06:C948  60          RTS  
  715                     
  716  06:C949            UpdateGameExit:
  717                     
  718                       ;JSR famistudio_music_stop
  719  06:C949  AD 0A 00    LDA time
  720  06:C94C  29 0F       AND #$0F
  721  06:C94E  D0 13       BNE .leave
  722                     
  723  06:C950  A9 00       LDA #$00
  724  06:C952  8D 1F 00    STA PPU_ScrollX
  725  06:C955  8D 20 00    STA PPU_ScrollY
  726  06:C958  8D 21 00    STA PPU_ScrollNT
  727                       
  728  06:C95B  AD CF 00    LDA targetGameMode
  729  06:C95E  A2 00       LDX #$00
  730  06:C960  20 EC CE    JSR ChangeGameMode
  731  06:C963            .leave:
  732  06:C963  60          RTS
  733                       
  734  06:C964            MoveMouse:
  735                     
  736  06:C964  20 74 C4    JSR PlayPuzzleCursorSound
  737                     
  738  06:C967  AD 00 00    LDA temp1                             ;horizontal move 
  739  06:C96A  0E 00 00    ASL temp1
  740  06:C96D  0E 00 00    ASL temp1
  741  06:C970  0E 00 00    ASL temp1
  742                       
  743  06:C973  AD 01 00    LDA temp2                             ;vertical move
  744  06:C976  0E 01 00    ASL temp2 
  745  06:C979  0E 01 00    ASL temp2
  746  06:C97C  0E 01 00    ASL temp2
  747                       
  748                       
  749  06:C97F  A0 00       LDY #$00
  750  06:C981  B1 AD       LDA [puzzle_address], y ;puzzle size 0 = 5, 1 = 10, 2 = 15  
  751  06:C983  0A          ASL A
  752  06:C984  AA          TAX
  753                     
  754  06:C985  AD CA 00    LDA mouse_index+1             ;horizontal index
  755  06:C988  29 10       AND #$10                              ;check clue flag
  756  06:C98A  8D 09 00    STA tempy                             ;store clue flag
  757  06:C98D  AD C9 00    LDA mouse_index               ;horizontal index
  758  06:C990  29 10       AND #$10                              ;check clue flag
  759  06:C992  8D 08 00    STA tempx                             ;store clue flag
  760                       
  761  06:C995  F0 0D       BEQ .puzzleHoriMin
  762  06:C997  A9 22       LDA #HORI_CLUE_MIN
  763  06:C999  8D 02 00    STA temp3 
  764  06:C99C  A9 6A       LDA #HORI_CLUE_MAX
  765  06:C99E  8D 03 00    STA temp4
  766  06:C9A1  4C B0 C9    JMP .checkHoriBorder
  767                       
  768  06:C9A4            .puzzleHoriMin:
  769  06:C9A4  BD AD CC    LDA MouseMinimums, x
  770  06:C9A7  8D 02 00    STA temp3 
  771  06:C9AA  BD B3 CC    LDA MouseMaximums, x
  772  06:C9AD  8D 03 00    STA temp4
  773                       
  774  06:C9B0            .checkHoriBorder:
  775  06:C9B0  8A          TXA
  776  06:C9B1  48          PHA
  777                       
  778  06:C9B2  A9 00       LDA #$00
  779  06:C9B4  8D 06 00    STA temp7
  780                       
  781  06:C9B7  A2 03       LDX #SPRITE_XPOS
  782  06:C9B9  BD 00 02    LDA SPRITE_DATA, x
  783  06:C9BC  18          CLC
  784  06:C9BD  6D 00 00    ADC temp1
  785                       ;;check against borders
  786  06:C9C0  CD 02 00    CMP temp3
  787  06:C9C3  D0 18       BNE .checkHoriMax
  788                       ;;equal - check if mouse index is in clue area
  789  06:C9C5  8D 05 00    STA temp6
  790  06:C9C8  AD 08 00    LDA tempx
  791  06:C9CB  0D 09 00    ORA tempy
  792  06:C9CE  D0 27       BNE .moveVert
  793  06:C9D0  EE 06 00    INC temp7
  794  06:C9D3  AD 05 00    LDA temp6
  795  06:C9D6  18          CLC
  796  06:C9D7  6D 00 00    ADC temp1
  797  06:C9DA  4C F4 C9    JMP .moveSpriteHori
  798                       
  799  06:C9DD            .checkHoriMax:
  800  06:C9DD  CD 03 00    CMP temp4
  801  06:C9E0  D0 12       BNE .moveSpriteHori
  802                       
  803  06:C9E2  8D 05 00    STA temp6
  804  06:C9E5  AD 08 00    LDA tempx
  805  06:C9E8  F0 0D       BEQ .moveVert
  806  06:C9EA  EE 06 00    INC temp7
  807  06:C9ED  AD 05 00    LDA temp6
  808  06:C9F0  18          CLC
  809  06:C9F1  6D 00 00    ADC temp1
  810                       
  811  06:C9F4            .moveSpriteHori:
  812  06:C9F4  9D 00 02    STA SPRITE_DATA, x
  813                     
  814  06:C9F7            .moveVert:
  815                     
  816  06:C9F7  68          PLA
  817  06:C9F8  AA          TAX
  818  06:C9F9  E8          INX
  819                       
  820  06:C9FA  AD 09 00    LDA tempy
  821  06:C9FD  F0 0D       BEQ .puzzleVertMin
  822  06:C9FF  A9 12       LDA #VERT_CLUE_MIN
  823  06:CA01  8D 02 00    STA temp3 
  824  06:CA04  A9 5A       LDA #VERT_CLUE_MAX
  825  06:CA06  8D 03 00    STA temp4
  826  06:CA09  4C 18 CA    JMP .checkVertBorder
  827                       
  828  06:CA0C            .puzzleVertMin:
  829  06:CA0C  BD AD CC    LDA MouseMinimums, x
  830  06:CA0F  8D 02 00    STA temp3
  831  06:CA12  BD B3 CC    LDA MouseMaximums, x
  832  06:CA15  8D 03 00    STA temp4
  833                     
  834                     
  835  06:CA18            .checkVertBorder:
  836                     
  837  06:CA18  A9 00       LDA #$00
  838  06:CA1A  8D 07 00    STA temp8
  839                     
  840  06:CA1D  A2 00       LDX #SPRITE_YPOS
  841  06:CA1F  BD 00 02    LDA SPRITE_DATA, x
  842  06:CA22  18          CLC
  843  06:CA23  6D 01 00    ADC temp2
  844                       ;;check against borders
  845  06:CA26  CD 02 00    CMP temp3
  846  06:CA29  D0 18       BNE .checkVertMax
  847                       ;;equal - check if mouse index is in clue area
  848  06:CA2B  8D 05 00    STA temp6
  849  06:CA2E  AD 09 00    LDA tempy
  850  06:CA31  0D 08 00    ORA tempx
  851  06:CA34  D0 27       BNE .leave
  852  06:CA36  EE 07 00    INC temp8
  853  06:CA39  AD 05 00    LDA temp6
  854  06:CA3C  18          CLC
  855  06:CA3D  6D 01 00    ADC temp2
  856  06:CA40  4C 5A CA    JMP .moveSpriteVert
  857                       
  858  06:CA43            .checkVertMax:
  859  06:CA43  CD 03 00    CMP temp4
  860  06:CA46  D0 12       BNE .moveSpriteVert
  861  06:CA48  8D 05 00    STA temp6
  862  06:CA4B  AD 09 00    LDA tempy
  863  06:CA4E  F0 0D       BEQ .leave
  864  06:CA50  EE 07 00    INC temp8
  865  06:CA53  AD 05 00    LDA temp6
  866  06:CA56  18          CLC
  867  06:CA57  6D 01 00    ADC temp2
  868                       
  869  06:CA5A            .moveSpriteVert:
  870  06:CA5A  9D 00 02    STA SPRITE_DATA, x
  871                     
  872  06:CA5D            .leave:
  873  06:CA5D  60          RTS
  874                             
  875  06:CA5E            UpdateMouseScreenPos:
  876                     
  877  06:CA5E  AD 06 00    LDA temp7
  878  06:CA61  F0 08       BEQ .skipHoriFlip
  879                       
  880  06:CA63  AD 08 00    LDA tempx
  881  06:CA66  49 10       EOR #$10
  882  06:CA68  8D 08 00    STA tempx
  883                       
  884  06:CA6B            .skipHoriFlip:
  885                     
  886  06:CA6B  AD 07 00    LDA temp8
  887  06:CA6E  F0 08       BEQ .skipVertFlip
  888                     
  889  06:CA70  AD 09 00    LDA tempy
  890  06:CA73  49 10       EOR #$10
  891  06:CA75  8D 09 00    STA tempy
  892                     
  893  06:CA78            .skipVertFlip:
  894                     
  895                     
  896  06:CA78  A2 00       LDX #$00
  897  06:CA7A  BD 00 02    LDA SPRITE_DATA, x;ypos       ;yyyy y...
  898  06:CA7D  4A          LSR A                                         ;0yyy yy..
  899  06:CA7E  4A          LSR A                                         ;00yy yyy.
  900  06:CA7F  4A          LSR A                                         ;000y yyyy
  901  06:CA80  8D 00 00    STA temp1
  902  06:CA83  8D CA 00    STA mouse_index+1                     ;vertical
  903  06:CA86  E8          INX
  904  06:CA87  E8          INX
  905  06:CA88  E8          INX   
  906  06:CA89  BD 00 02    LDA SPRITE_DATA, x ;xpos  ;  xxxx x...
  907  06:CA8C  29 F8       AND #$F8                       ;              ;  xxxx x000
  908  06:CA8E  8D 01 00    STA temp2                      ;      ;  
  909  06:CA91  4E 00 00    LSR temp1                      ;              ;  0000 yyyy y
  910  06:CA94  6E 01 00    ROR temp2                      ;      ;  yxxx xx00
  911  06:CA97  4E 00 00    LSR temp1                      ;              ;  0000 0yyy y
  912  06:CA9A  6E 01 00    ROR temp2                      ;              ;  yyxx xxx0
  913  06:CA9D  4E 00 00    LSR temp1              ;              ;  0000 00yy y
  914  06:CAA0  6E 01 00    ROR temp2                      ;              ;  yyyx xxxx
  915  06:CAA3  AD 01 00    LDA temp2
  916  06:CAA6  29 1F       AND #$1F
  917  06:CAA8  8D C9 00    STA mouse_index                       ;horizontal
  918                       
  919  06:CAAB  AD C9 00    LDA mouse_index
  920  06:CAAE  38          SEC 
  921  06:CAAF  E9 0E       SBC #$0E
  922  06:CAB1  0D 08 00    ORA tempx
  923  06:CAB4  8D C9 00    STA mouse_index
  924                       
  925  06:CAB7  AD CA 00    LDA mouse_index+1
  926  06:CABA  38          SEC 
  927  06:CABB  E9 0C       SBC #$0C
  928  06:CABD  0D 09 00    ORA tempy
  929  06:CAC0  8D CA 00    STA mouse_index+1
  930                       
  931                       ;subtract starting offsets for mouse index
  932                       
  933  06:CAC3  AD 00 00    LDA temp1                      ;              ;  0000 00yy
  934  06:CAC6  09 60       ORA #$60                       ;              ;  0110 00yy
  935                       
  936  06:CAC8  8D C8 00    STA mouse_location+1
  937  06:CACB  AD 01 00    LDA temp2
  938  06:CACE  8D C7 00    STA mouse_location
  939                       
  940  06:CAD1            .leave:
  941  06:CAD1  60          RTS
  942                       
  943  06:CAD2            UpdateTimeDisplay:
  944                     
  945  06:CAD2  AD 0B 00    LDA scaledTime
  946  06:CAD5  C9 3C       CMP #60
  947  06:CAD7  D0 48       BNE .leave
  948                       
  949  06:CAD9  A9 00       LDA #$00
  950  06:CADB  8D 0B 00    STA scaledTime
  951                       
  952  06:CADE  EE 03 70    INC GameTime
  953  06:CAE1  AD 03 70    LDA GameTime
  954  06:CAE4  C9 0A       CMP #10
  955  06:CAE6  D0 32       BNE .printTime
  956                       
  957  06:CAE8  A9 00       LDA #$00
  958  06:CAEA  8D 03 70    STA GameTime
  959  06:CAED  EE 04 70    INC GameTime+1
  960  06:CAF0  AD 04 70    LDA GameTime+1
  961  06:CAF3  C9 06       CMP #6
  962  06:CAF5  D0 23       BNE .printTime
  963                       
  964  06:CAF7  A9 00       LDA #$00
  965  06:CAF9  8D 04 70    STA GameTime+1
  966  06:CAFC  EE 05 70    INC GameTime+2
  967  06:CAFF  AD 05 70    LDA GameTime+2
  968  06:CB02  C9 0A       CMP #10
  969  06:CB04  D0 14       BNE .printTime
  970                       
  971  06:CB06  A9 00       LDA #$00
  972  06:CB08  8D 05 70    STA GameTime+2
  973  06:CB0B  EE 06 70    INC GameTime+3
  974  06:CB0E  AD 06 70    LDA GameTime+3
  975  06:CB11  C9 0A       CMP #10
  976  06:CB13  D0 05       BNE .printTime
  977                       
  978  06:CB15  A9 00       LDA #$00
  979  06:CB17  8D 06 70    STA GameTime+3
  980                         
  981                       
  982  06:CB1A            .printTime:
  983                     
  984  06:CB1A  A9 20       LDA #HIGH(TIMER_LOC)
  985  06:CB1C  A2 E5       LDX #LOW(TIMER_LOC)
  986                     
  987  06:CB1E  20 12 D6    JSR ApplyGameTimeToPPUString
  988                       
  989                       
  990  06:CB21            .leave: 
  991  06:CB21  60          RTS  
  992                       
  993  06:CB22            UpdatePause:
  994                     
  995                     ;;load screen
  996                     ;;update selection
  997                     ;; close - remove screen, then upause
  998                     ;; quit - jump to fade out
  999  06:CB22  AD CC 00    LDA pauseState
 1000  06:CB25  20 BD CF    JSR Dynamic_Jump
 1001                     
 1002  06:CB28            UpdatePauseJumpTable:  
 1003                     
 1004  06:CB28  E9 CB       .word ExitPause                       ;fail safe
 1005  06:CB2A  30 CB       .word UpdateLoadPauseScreen
 1006  06:CB2C  4C CB       .word UpdatePauseScreen
 1007  06:CB2E  CD CB       .word UpdateUnloadPauseScreen
 1008                       
 1009  06:CB30            UpdateLoadPauseScreen:
 1010                       
 1011  06:CB30  20 E1 D3    JSR LoadPauseScreen
 1012  06:CB33  AD C1 00    LDA clueOffsetShift
 1013  06:CB36  C9 06       CMP #$06
 1014  06:CB38  D0 11       BNE .leave
 1015                       
 1016  06:CB3A            .changePauseState:
 1017                     
 1018  06:CB3A  A9 60       LDA #PAUSE_YES
 1019  06:CB3C  A2 01       LDX #$01
 1020  06:CB3E  20 78 C2    JSR SetSpriteXPosition  
 1021  06:CB41  A9 01       LDA #$01
 1022  06:CB43  A2 01       LDX #$01
 1023  06:CB45  20 83 C2    JSR SetSpriteImage
 1024                       
 1025  06:CB48  EE CC 00    INC pauseState
 1026  06:CB4B            .leave:
 1027  06:CB4B  60          RTS
 1028                       
 1029  06:CB4C            UpdatePauseScreen:
 1030                       
 1031  06:CB4C  AD 1C 00    LDA gamepadPressed
 1032  06:CB4F  C9 08       CMP #GAMEPAD_START
 1033  06:CB51  F0 2C       BEQ .unPause
 1034  06:CB53  C9 02       CMP #GAMEPAD_B
 1035  06:CB55  F0 28       BEQ .unPause
 1036  06:CB57  C9 01       CMP #GAMEPAD_A
 1037  06:CB59  F0 4D       BEQ .checkA
 1038                       
 1039                       ;;update pointer
 1040                       
 1041  06:CB5B  AD 1C 00    LDA gamepadPressed
 1042  06:CB5E  29 C0       AND #GAMEPAD_HORI
 1043                       ;;binary system- left and right don't really matter, we'll just toggle the position
 1044  06:CB60  F0 6A       BEQ .leave
 1045                       
 1046  06:CB62  20 6B C4    JSR PlayMenuCursorSound
 1047                       
 1048  06:CB65  A9 03       LDA #SPRITE_XPOS
 1049  06:CB67  A2 01       LDX #$01
 1050  06:CB69  20 9A C2    JSR GetSpriteData
 1051                       
 1052  06:CB6C  C9 60       CMP #PAUSE_YES
 1053  06:CB6E  F0 05       BEQ .loadNo
 1054                       
 1055  06:CB70  A9 60       LDA #PAUSE_YES
 1056  06:CB72  4C 77 CB    JMP .setPosition
 1057                       
 1058  06:CB75            .loadNo:
 1059  06:CB75  A9 88       LDA #PAUSE_NO
 1060                     
 1061  06:CB77            .setPosition:
 1062                       
 1063  06:CB77  A2 01       LDX #$01
 1064  06:CB79  20 78 C2    JSR SetSpriteXPosition  
 1065                     
 1066  06:CB7C  4C CC CB    JMP .leave 
 1067                     
 1068  06:CB7F            .unPause:
 1069                     
 1070  06:CB7F  A9 00       LDA #$00
 1071  06:CB81  8D C0 00    STA clueLineIndex
 1072  06:CB84  8D C1 00    STA clueOffsetShift
 1073                       
 1074  06:CB87  A9 FF       LDA #$FF
 1075  06:CB89  A2 01       LDX #$01
 1076  06:CB8B  20 83 C2    JSR SetSpriteImage
 1077                     
 1078                       MACROGetLabelPointer $610A, pause_address
                          
       06:CB8E  A9 61             LDA #HIGH($610A)
       06:CB90  A2 0A             LDX #LOW($610A)
                                  
       06:CB92  8E B3 00          STX pause_address
       06:CB95  8D B4 00          STA pause_address+1
                                  
 1079                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:CB98  A9 21             LDA #HIGH($210A)
       06:CB9A  A2 0A             LDX #LOW($210A)
                                  
       06:CB9C  8E B7 00          STX pause_draw_address
       06:CB9F  8D B8 00          STA pause_draw_address+1
                                  
 1080                         
 1081  06:CBA2  EE CC 00    INC pauseState
 1082  06:CBA5  4C CC CB    JMP .leave
 1083                      
 1084  06:CBA8            .checkA:
 1085                       
 1086  06:CBA8  A9 03       LDA #SPRITE_XPOS
 1087  06:CBAA  A2 01       LDX #$01
 1088  06:CBAC  20 9A C2    JSR GetSpriteData
 1089                       
 1090  06:CBAF  C9 88       CMP #PAUSE_NO
 1091  06:CBB1  F0 CC       BEQ .unPause
 1092                        
 1093  06:CBB3            .quit:
 1094                             
 1095  06:CBB3  A9 01       LDA #$01
 1096  06:CBB5  8D 00 70    STA hasContinue
 1097  06:CBB8  A9 00       LDA #$00
 1098  06:CBBA  8D CC 00    STA pauseState
 1099  06:CBBD  A9 00       LDA #$00
 1100  06:CBBF  8D 0A 00    STA time
 1101  06:CBC2  A9 02       LDA #GAMEOVER_IDX
 1102  06:CBC4  8D CF 00    STA targetGameMode
 1103  06:CBC7  A9 08       LDA #$08
 1104  06:CBC9  8D 0F 00    STA mode_state
 1105                       
 1106  06:CBCC            .leave:
 1107  06:CBCC  60          RTS
 1108                       
 1109  06:CBCD            UpdateUnloadPauseScreen:
 1110                       
 1111  06:CBCD  20 28 D4    JSR ClearPauseScreen
 1112  06:CBD0  AD C1 00    LDA clueOffsetShift
 1113  06:CBD3  C9 06       CMP #$06
 1114  06:CBD5  D0 11       BNE .leave
 1115  06:CBD7            .changePauseState:
 1116                     
 1117  06:CBD7  A9 02       LDA #$02
 1118  06:CBD9  A2 00       LDX #$00
 1119  06:CBDB  20 83 C2    JSR SetSpriteImage
 1120                       
 1121  06:CBDE  A9 03       LDA #GAMEPAD_AB
 1122  06:CBE0  8D CD 00    STA pauseInputLock 
 1123                       
 1124  06:CBE3  A9 00       LDA #$00
 1125  06:CBE5  8D CC 00    STA pauseState
 1126  06:CBE8            .leave:
 1127  06:CBE8  60          RTS
 1128                       
 1129  06:CBE9            ExitPause:
 1130  06:CBE9  60          RTS
 1131                       
 1132  06:CBEA            CheckNewBestTime:
 1133                     
 1134                       ;let's say we already have the save data in the table address
 1135  06:CBEA  A9 00       LDA #$00
 1136  06:CBEC  8D D1 00    STA recordSet
 1137                       
 1138                       
 1139  06:CBEF  AD 08 70    LDA puzzle_index
 1140  06:CBF2  0A          ASL A
 1141  06:CBF3  0A          ASL A
 1142  06:CBF4  A8          TAY
 1143  06:CBF5  B1 16       LDA [table_address], y
 1144  06:CBF7  29 80       AND #$80
 1145  06:CBF9  F0 33       BEQ .updateTime
 1146                       ;MACROGetLabelPointer PuzzleSaveLocations, table_address
 1147                       ;LDA bank_index
 1148                       ;ASL A
 1149                       ;TAY
 1150                       ;JSR GetTableAtIndex
 1151                     
 1152  06:CBFB  C8          INY 
 1153  06:CBFC  C8          INY
 1154  06:CBFD  C8          INY   ;start at highest time loc
 1155  06:CBFE  AD 06 70    LDA GameTime+3
 1156  06:CC01  D1 16       CMP [table_address], y
 1157  06:CC03  90 29       BCC .updateTime
 1158  06:CC05  B0 2A       BCS .leave
 1159  06:CC07  88          DEY
 1160  06:CC08  AD 05 70    LDA GameTime+2
 1161  06:CC0B  D1 16       CMP [table_address], y
 1162  06:CC0D  90 1F       BCC .updateTime
 1163  06:CC0F  B0 20       BCS .leave
 1164  06:CC11  88          DEY
 1165  06:CC12  AD 04 70    LDA GameTime+1
 1166  06:CC15  D1 16       CMP [table_address], y
 1167  06:CC17  90 15       BCC .updateTime
 1168  06:CC19  B0 16       BCS .leave
 1169  06:CC1B  88          DEY
 1170  06:CC1C  B1 16       LDA [table_address], y
 1171  06:CC1E  29 0F       AND #$0F
 1172  06:CC20  8D 00 00    STA temp1
 1173  06:CC23  AD 03 70    LDA GameTime
 1174  06:CC26  CD 00 00    CMP temp1
 1175  06:CC29  90 03       BCC .updateTime
 1176  06:CC2B  4C 31 CC    JMP .leave
 1177                       
 1178  06:CC2E            .updateTime:
 1179                     
 1180  06:CC2E  EE D1 00    INC recordSet
 1181                       
 1182  06:CC31            .leave:
 1183  06:CC31  60          RTS
 1184                         
 1185                     
 1186  06:CC32            CheckAgainstSolution:
 1187                       ;;take Y position, mult by 2 to get starting index in puzzle solution
 1188  06:CC32  AD CA 00    LDA mouse_index+1
 1189                     ;;if the puzzle is a 5x5, we only have one byte per row, so no need to double this
 1190  06:CC35  8D 00 00    STA temp1
 1191  06:CC38  A0 00       LDY #$00
 1192  06:CC3A  B1 AD       LDA [puzzle_address], y
 1193  06:CC3C  F0 03       BEQ .skipDouble
 1194  06:CC3E  0E 00 00    ASL temp1
 1195  06:CC41            .skipDouble:
 1196  06:CC41  AD 00 00    LDA temp1
 1197  06:CC44  18          CLC
 1198  06:CC45  69 04       ADC #$04 ;; add to get past header
 1199  06:CC47  8D 00 00    STA temp1
 1200                       
 1201                       ;;div X position by 8 to get the byte index
 1202  06:CC4A  AD C9 00    LDA mouse_index
 1203  06:CC4D  4A          LSR A
 1204  06:CC4E  4A          LSR A
 1205  06:CC4F  4A          LSR A
 1206  06:CC50  F0 03       BEQ .getMask
 1207                       
 1208  06:CC52  EE 00 00    INC temp1
 1209                       
 1210  06:CC55            .getMask:
 1211                       
 1212  06:CC55  AD C9 00    LDA mouse_index
 1213  06:CC58  29 07       AND #$07
 1214  06:CC5A  AA          TAX
 1215  06:CC5B  A9 80       LDA #$80
 1216  06:CC5D  E0 00       CPX #$00
 1217  06:CC5F  F0 04       BEQ .storeMask
 1218                     
 1219  06:CC61            .maskLoop:
 1220  06:CC61  4A          LSR A
 1221  06:CC62  CA          DEX
 1222  06:CC63  D0 FC       BNE .maskLoop
 1223  06:CC65            .storeMask:
 1224  06:CC65  8D 01 00    STA temp2
 1225                     
 1226  06:CC68  AC 00 00    LDY temp1
 1227  06:CC6B  B1 AD       LDA [puzzle_address], y
 1228  06:CC6D  2D 01 00    AND temp2
 1229  06:CC70  8D 00 00    STA temp1     ;get the 0/non zero solution flag 
 1230                     
 1231  06:CC73  A0 00       LDY #$00
 1232  06:CC75  B1 C7       LDA [mouse_location], y
 1233  06:CC77  8D 02 00    STA temp3
 1234  06:CC7A  29 F0       AND #$F0
 1235  06:CC7C  CD CB 00    CMP currentPaintTile
 1236  06:CC7F  D0 01       BNE .diffTiles
 1237  06:CC81  60          RTS
 1238                       
 1239  06:CC82            .diffTiles:
 1240                       ;;tiles are different- check if the current tile is marked as a solution tile
 1241  06:CC82  C9 70       CMP #$70
 1242  06:CC84  D0 0B       BNE .checkNewMark
 1243                       ;;if erasing a mark, check if the tile was part of the solution
 1244  06:CC86  AD 00 00    LDA temp1
 1245  06:CC89  D0 18       BNE .antiMark
 1246  06:CC8B  CE 02 70    DEC nonSolutionCount
 1247  06:CC8E  4C AC CC    JMP .leave
 1248                       
 1249  06:CC91            .checkNewMark:
 1250                     
 1251  06:CC91  AD CB 00    LDA currentPaintTile
 1252  06:CC94  C9 70       CMP #$70
 1253  06:CC96  D0 14       BNE .leave
 1254                       
 1255  06:CC98  AD 00 00    LDA temp1
 1256  06:CC9B  D0 0C       BNE .proMark
 1257  06:CC9D  EE 02 70    INC nonSolutionCount 
 1258  06:CCA0  4C AC CC    JMP .leave 
 1259                       
 1260  06:CCA3            .antiMark:
 1261  06:CCA3  CE 01 70    DEC solutionCount
 1262  06:CCA6  4C AC CC    JMP .leave
 1263  06:CCA9            .proMark:   
 1264                       
 1265  06:CCA9  EE 01 70    INC solutionCount
 1266  06:CCAC            .leave:
 1267  06:CCAC  60          RTS   
 1268                     
 1269                     ;hori, vert
 1270  06:CCAD            MouseMinimums:
 1271  06:CCAD  6A 5A       .db $6A, $5A
 1272  06:CCAF  6A 5A       .db $6A, $5A
 1273  06:CCB1  6A 5A       .db $6A, $5A
 1274  06:CCB3            MouseMaximums:
 1275  06:CCB3  9A 8A       .db $9A, $8A
 1276  06:CCB5  C2 B2       .db $C2, $B2
 1277  06:CCB7  EA DA       .db $EA, $DA
 1278                       
 1279           0012      VERT_CLUE_MIN = $12
 1280           0022      HORI_CLUE_MIN = $22
 1281           006A      HORI_CLUE_MAX = $6A
 1282           005A      VERT_CLUE_MAX = $5A
 1283                       
 1284  06:CCB9            PuzzleScrollHori:
 1285  06:CCB9  01 04 06    .db $01, $04, $06
 1286  06:CCBC            PuzzleScrollVert:
 1287  06:CCBC  01 03 05    .db $01, $03, $05
 1288                       
 1289  06:CCBF            PuzzleHeaderSkips:
 1290                     
 1291  06:CCBF  09 18 22    .db $09, $18, $22
 1292                       
 1293  06:CCC2            PuzzleSaveLocations:
 1294  06:CCC2  0A 70       .word puzzle_clear_bank0, puzzle_clear_bank1, puzzle_clear_bank2
       06:CCC4  76 70     
       06:CCC6  E2 70     
 1295                     
 1296                       
 1297           0060      PAUSE_YES = $60
 1298           0088      PAUSE_NO = $88
 1299                     
 1300                       
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGameOver.asm
   87                       .include "Routines/Game_States/UpdateGameOver.asm"
    1  06:CCC8            UpdateGameOver:
    2                     
    3  06:CCC8  AD 10 00    LDA NMI_locks
    4  06:CCCB  F0 01       BEQ .unlocked
    5                       
    6  06:CCCD  60          RTS
    7                       
    8  06:CCCE            .unlocked:
    9                     
   10  06:CCCE  20 D2 CC    JSR DoUpdateGameOver 
   11  06:CCD1  60          RTS
   12                       
   13  06:CCD2            DoUpdateGameOver:
   14                     
   15  06:CCD2  AD 0F 00    LDA mode_state
   16  06:CCD5  20 BD CF    JSR Dynamic_Jump
   17                         
   18  06:CCD8            UpdateGameOverJumpTable:
   19                     
   20  06:CCD8  E2 CC       .word UpdateGameOverInit
   21  06:CCDA  31 CD       .word UpdateDrawMessage
   22  06:CCDC  56 CD       .word UpdateGameOverWaitInput
   23  06:CCDE  06 CE       .word UpdateGameOverFadeOut
   24  06:CCE0  1B CE       .word UpdateGameOverExit
   25                       
   26  06:CCE2            UpdateGameOverInit:
   27                     
   28                       ;load the hasContinue flag
   29                       ;choose the message to print based on the flag
   30  06:CCE2  A9 04       lda #$04
   31  06:CCE4  8D D6 00    sta current_song
   32  06:CCE7  AD D6 00    lda current_song
   33  06:CCEA  20 0B A1    jsr sound_load
   34                       
   35                       MACROGetLabelPointer EndScreens, table_address
                          
       06:CCED  A9 FC             LDA #HIGH(EndScreens)
       06:CCEF  A2 CA             LDX #LOW(EndScreens)
                                  
       06:CCF1  8E 16 00          STX table_address
       06:CCF4  8D 17 00          STA table_address+1
                                  
   36  06:CCF7  AD 00 70    LDA hasContinue
   37  06:CCFA  0A          ASL A
   38  06:CCFB  A8          TAY
   39  06:CCFC  20 E3 CF    JSR GetTableAtIndex
   40                       MACROGetPointer table_address, clues_address
                          
       06:CCFF  AD 16 00          LDA table_address
       06:CD02  8D AF 00          STA clues_address
       06:CD05  AD 17 00          LDA table_address+1
       06:CD08  8D B0 00          STA clues_address+1
                          
   41                       
   42                       ;this gets us the pointer to the table- now we'll set up the starting draw address
   43  06:CD0B  A0 00       LDY #$00
   44  06:CD0D  B1 AF       LDA [clues_address], y
   45  06:CD0F  8D BD 00    STA clue_draw_address
   46  06:CD12  C8          INY
   47  06:CD13  B1 AF       LDA [clues_address], y
   48  06:CD15  8D BE 00    STA clue_draw_address+1 
   49                     
   50  06:CD18  AD AF 00    LDA clues_address
   51  06:CD1B  18          CLC
   52  06:CD1C  69 02       ADC #$02
   53  06:CD1E  8D AF 00    STA clues_address
   54  06:CD21  AD B0 00    LDA clues_address+1
   55  06:CD24  69 00       ADC #$00
   56  06:CD26  8D B0 00    STA clues_address+1
   57                       
   58  06:CD29  A9 00       LDA #$00
   59  06:CD2B  8D C0 00    STA clueLineIndex
   60                       ;;table address is now at the first string to draw
   61                         
   62  06:CD2E  EE 0F 00    INC mode_state
   63                     
   64                     ;no RTS, just update a line immediately
   65                     
   66  06:CD31            UpdateDrawMessage:
   67                     
   68  06:CD31  AD 00 70    LDA hasContinue
   69                       
   70  06:CD34  F0 06       BEQ .drawClear
   71                       
   72  06:CD36  20 95 CE    JSR DrawSaveText
   73                     
   74  06:CD39  4C 3F CD    JMP .checkLeave
   75                       
   76  06:CD3C            .drawClear
   77                     
   78  06:CD3C  20 2C CE    JSR DrawClearText 
   79                       
   80  06:CD3F            .checkLeave:
   81  06:CD3F  90 14       BCC .leave
   82                     
   83  06:CD41            .changeModeState:
   84                     
   85  06:CD41  AD 00 70    LDA hasContinue
   86  06:CD44  D0 07       BNE .skipSpriteSet
   87                       
   88  06:CD46  A9 01       LDA #$01
   89  06:CD48  A2 00       LDX #$00
   90  06:CD4A  20 83 C2    JSR SetSpriteImage
   91                       
   92  06:CD4D            .skipSpriteSet:
   93  06:CD4D  EE 0F 00    INC mode_state
   94  06:CD50  A9 00       LDA #$00
   95  06:CD52  8D 0A 00    STA time
   96  06:CD55            .leave:
   97  06:CD55  60          RTS
   98                       
   99                       
  100  06:CD56            UpdateGameOverWaitInput:
  101                     
  102                       ;;if there was a record set, flash the time
  103  06:CD56  AD D1 00    LDA recordSet
  104  06:CD59  F0 03       BEQ .updateWait
  105  06:CD5B  20 BB CE    JSR FlashTime
  106                     
  107  06:CD5E            .updateWait:
  108  06:CD5E  AD 00 70    LDA hasContinue
  109  06:CD61  F0 06       BEQ .checkOption
  110                       
  111  06:CD63  AD 1C 00    LDA gamepadPressed
  112  06:CD66  D0 37       BNE .loadTitle
  113  06:CD68            .leaveEarly:
  114  06:CD68  60          RTS
  115                       
  116  06:CD69            .checkOption:
  117  06:CD69  AD 1C 00    LDA gamepadPressed
  118  06:CD6C  C9 01       CMP #GAMEPAD_A
  119  06:CD6E  F0 24       BEQ .checkA
  120                       
  121                       ;;update pointer
  122                       
  123  06:CD70  AD 1C 00    LDA gamepadPressed
  124  06:CD73  29 C0       AND #GAMEPAD_HORI
  125                       ;;binary system- left and right don't really matter, we'll just toggle the position
  126  06:CD75  F0 F1       BEQ .leaveEarly
  127  06:CD77  20 6B C4    JSR PlayMenuCursorSound
  128  06:CD7A  A9 03       LDA #SPRITE_XPOS
  129  06:CD7C  A2 00       LDX #$00
  130  06:CD7E  20 9A C2    JSR GetSpriteData
  131                       
  132  06:CD81  C9 58       CMP #GO_YES
  133  06:CD83  F0 05       BEQ .loadNo
  134                       
  135  06:CD85  A9 58       LDA #GO_YES
  136  06:CD87  4C 8C CD    JMP .setPosition
  137                       
  138  06:CD8A            .loadNo:
  139  06:CD8A  A9 80       LDA #GO_NO
  140                     
  141  06:CD8C            .setPosition:
  142                       
  143  06:CD8C  A2 00       LDX #$00
  144  06:CD8E  20 78 C2    JSR SetSpriteXPosition  
  145                     
  146  06:CD91  4C 05 CE    JMP .leave 
  147                       
  148  06:CD94            .checkA:
  149                       
  150  06:CD94  A9 03       LDA #SPRITE_XPOS
  151  06:CD96  A2 00       LDX #$00
  152  06:CD98  20 9A C2    JSR GetSpriteData
  153                       
  154  06:CD9B  C9 80       CMP #GO_NO
  155                       
  156                       ;no? go to main menu
  157                       ;yes? update puzzle index and go to game
  158                       ;if puzzle index is the last of the bank, return to menu anyways- we'll polish with a different message later
  159  06:CD9D  D0 0D       BNE .loadNext
  160                       
  161                       ;load the title as the next screen
  162  06:CD9F            .loadTitle:
  163  06:CD9F  A9 00       LDA #TITLE_IDX
  164  06:CDA1  8D CF 00    STA targetGameMode
  165  06:CDA4  A9 00       LDA #$00
  166  06:CDA6  8D D0 00    STA targetScreenLoad
  167  06:CDA9  4C FD CD    JMP .changeModeState
  168                      
  169  06:CDAC            .loadNext:  
  170                     
  171  06:CDAC  EE 08 70    INC puzzle_index
  172  06:CDAF  C9 28       CMP #$28
  173  06:CDB1  F0 EC       BEQ .loadTitle
  174                       
  175                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:CDB3  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:CDB5  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:CDB7  8E 16 00          STX table_address
       06:CDBA  8D 17 00          STA table_address+1
                                  
  176                       MACROGetDoubleIndex puzzle_index
                          
       06:CDBD  AD 08 70          LDA puzzle_index
       06:CDC0  0A                ASL A
       06:CDC1  A8                TAY
                                  
  177  06:CDC2  20 E3 CF    JSR GetTableAtIndex
  178                       MACROGetPointer table_address, puzzle_address
                          
       06:CDC5  AD 16 00          LDA table_address
       06:CDC8  8D AD 00          STA puzzle_address
       06:CDCB  AD 17 00          LDA table_address+1
       06:CDCE  8D AE 00          STA puzzle_address+1
                          
  179                       
  180                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:CDD1  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:CDD3  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:CDD5  8E 16 00          STX table_address
       06:CDD8  8D 17 00          STA table_address+1
                                  
  181                       MACROGetDoubleIndex puzzle_index
                          
       06:CDDB  AD 08 70          LDA puzzle_index
       06:CDDE  0A                ASL A
       06:CDDF  A8                TAY
                                  
  182  06:CDE0  20 E3 CF    JSR GetTableAtIndex
  183                       MACROGetPointer table_address, title_address
                          
       06:CDE3  AD 16 00          LDA table_address
       06:CDE6  8D B1 00          STA title_address
       06:CDE9  AD 17 00          LDA table_address+1
       06:CDEC  8D B2 00          STA title_address+1
                          
  184                     
  185  06:CDEF  A9 01       LDA #GAME_IDX
  186  06:CDF1  8D CF 00    STA targetGameMode
  187                       
  188  06:CDF4  A0 00       LDY #$00
  189  06:CDF6  B1 AD       LDA [puzzle_address], y
  190  06:CDF8  09 20       ORA #%00100000
  191  06:CDFA  8D D0 00    STA targetScreenLoad
  192                     
  193  06:CDFD            .changeModeState:
  194                     
  195  06:CDFD  A9 00       LDA #$00
  196  06:CDFF  8D 0A 00    STA time
  197  06:CE02  EE 0F 00    INC mode_state
  198  06:CE05            .leave:
  199  06:CE05  60          RTS
  200                     
  201  06:CE06            UpdateGameOverFadeOut:
  202                     
  203  06:CE06  AD 0A 00    LDA time
  204  06:CE09  29 07       AND #$07
  205  06:CE0B  D0 0D       BNE .leave
  206                       ;;every 8 frames, decrement the palettes
  207  06:CE0D  20 BC D1    JSR FadeOutPalettes
  208  06:CE10  B0 08       BCS .leave
  209                     
  210  06:CE12            .changeModeState:
  211  06:CE12  A9 00       LDA #$00
  212  06:CE14  8D 0A 00    STA time
  213  06:CE17  EE 0F 00    INC mode_state
  214  06:CE1A            .leave:
  215  06:CE1A  60          RTS
  216                     
  217  06:CE1B            UpdateGameOverExit:
  218                     
  219  06:CE1B  AD 0A 00    LDA time
  220  06:CE1E  29 0F       AND #$0F
  221  06:CE20  D0 09       BNE .leave
  222                     
  223  06:CE22  AD CF 00    LDA targetGameMode
  224  06:CE25  AE D0 00    LDX targetScreenLoad
  225  06:CE28  20 EC CE    JSR ChangeGameMode
  226                       
  227  06:CE2B            .leave:
  228  06:CE2B  60          RTS
  229                       
  230  06:CE2C            DrawClearText:
  231                     
  232                       ;;for the clear, we draw multiple lines
  233                       ;;table address location is the print loation
  234                       MACROAddPPUStringEntryTablePtr clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, clues_address
                           
       06:CE2C  A9 01       LDA #$01
       06:CE2E  8D 23 00    STA PPU_PendingWrite
       06:CE31  AD BE 00    LDA clue_draw_address+1
       06:CE34  20 3F D1    JSR WriteToPPUString
       06:CE37  AD BD 00    LDA clue_draw_address
       06:CE3A  20 3F D1    JSR WriteToPPUString
       06:CE3D  A9 20       LDA #$20
       06:CE3F  09 00       ORA #DRAW_HORIZONTAL
       06:CE41  20 3F D1    JSR WriteToPPUString
       06:CE44  AD AF 00    LDA clues_address
       06:CE47  20 3F D1    JSR WriteToPPUString
       06:CE4A  AD B0 00    LDA clues_address+1
       06:CE4D  20 3F D1    JSR WriteToPPUString
                           
  235  06:CE50  EE C0 00    INC clueLineIndex
  236  06:CE53  AD C0 00    LDA clueLineIndex
  237  06:CE56  C9 02       CMP #$02
  238  06:CE58  F0 07       BEQ .printTime
  239  06:CE5A  C9 04       CMP #$04
  240  06:CE5C  F0 35       BEQ .finish
  241  06:CE5E  4C 68 CE    JMP .updateClueAddress
  242                       
  243  06:CE61            .printTime:
  244                     
  245  06:CE61  A9 21       LDA #$21
  246  06:CE63  A2 31       LDX #$31  
  247  06:CE65  20 12 D6    JSR ApplyGameTimeToPPUString
  248                     
  249  06:CE68            .updateClueAddress:
  250  06:CE68  AD BD 00    LDA clue_draw_address
  251  06:CE6B  18          CLC
  252  06:CE6C  69 40       ADC #$40
  253  06:CE6E  8D BD 00    STA clue_draw_address
  254  06:CE71  AD BE 00    LDA clue_draw_address+1
  255  06:CE74  69 00       ADC #$00
  256  06:CE76  8D BE 00    STA clue_draw_address+1
  257                       
  258  06:CE79  A0 00       LDY #$00
  259  06:CE7B  B1 AF       LDA [clues_address],y
  260  06:CE7D  AA          TAX
  261  06:CE7E  E8          INX
  262  06:CE7F  8A          TXA
  263  06:CE80  18          CLC
  264  06:CE81  6D AF 00    ADC clues_address
  265  06:CE84  8D AF 00    STA clues_address
  266  06:CE87  AD B0 00    LDA clues_address+1
  267  06:CE8A  69 00       ADC #$00
  268  06:CE8C  8D B0 00    STA clues_address+1
  269                       
  270  06:CE8F  18          CLC
  271  06:CE90  4C 94 CE    JMP .leave
  272  06:CE93            .finish:
  273                     
  274  06:CE93  38          SEC
  275  06:CE94            .leave
  276  06:CE94  60          RTS
  277                       
  278  06:CE95            DrawSaveText:
  279                     
  280                       MACROAddPPUStringEntryTablePtr clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, clues_address
                           
       06:CE95  A9 01       LDA #$01
       06:CE97  8D 23 00    STA PPU_PendingWrite
       06:CE9A  AD BE 00    LDA clue_draw_address+1
       06:CE9D  20 3F D1    JSR WriteToPPUString
       06:CEA0  AD BD 00    LDA clue_draw_address
       06:CEA3  20 3F D1    JSR WriteToPPUString
       06:CEA6  A9 20       LDA #$20
       06:CEA8  09 00       ORA #DRAW_HORIZONTAL
       06:CEAA  20 3F D1    JSR WriteToPPUString
       06:CEAD  AD AF 00    LDA clues_address
       06:CEB0  20 3F D1    JSR WriteToPPUString
       06:CEB3  AD B0 00    LDA clues_address+1
       06:CEB6  20 3F D1    JSR WriteToPPUString
                           
  281  06:CEB9  38          SEC
  282  06:CEBA  60          RTS
  283                      
  284  06:CEBB            FlashTime:
  285                     
  286  06:CEBB  AD 0A 00    LDA time
  287  06:CEBE  29 03       AND #$03
  288  06:CEC0  D0 27       BNE .leave
  289                       
  290                       MACROAddPPUStringEntryRawData #$3F, #$02, #DRAW_HORIZONTAL, #$01
                          
       06:CEC2  A9 01       LDA #$01
       06:CEC4  8D 23 00    STA PPU_PendingWrite
       06:CEC7  A9 3F       LDA #$3F
       06:CEC9  20 3F D1    JSR WriteToPPUString
       06:CECC  A9 02       LDA #$02
       06:CECE  20 3F D1    JSR WriteToPPUString
       06:CED1  A9 00       LDA #DRAW_HORIZONTAL
       06:CED3  20 3F D1    JSR WriteToPPUString
       06:CED6  A9 01       LDA #$01 
       06:CED8  20 3F D1    JSR WriteToPPUString
                            
  291  06:CEDB  AD 0A 00    LDA time
  292  06:CEDE  4A          LSR A
  293  06:CEDF  4A          LSR A
  294  06:CEE0  29 01       AND #$01
  295  06:CEE2  AA          TAX
  296  06:CEE3  BD EA CE    LDA FlashColors, x
  297  06:CEE6  20 3F D1    JSR WriteToPPUString
  298                      
  299  06:CEE9            .leave
  300  06:CEE9  60          RTS 
  301                     
  302  06:CEEA            FlashColors:
  303                     
  304  06:CEEA  2C 16       .db $2C, $16
  305                     
  306                        
  307                     
  308           0058      GO_YES = $58
  309           0080      GO_NO = $80
#[1]   Picross.asm
   88                       
   89                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   90                     ;;     Routines             ;;
   91                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   92                     
   93                     
#[2]   Routines/Common/GameModeRoutines.asm
   94                       .include "Routines/Common/GameModeRoutines.asm"
    1  06:CEEC            ChangeGameMode:
    2                       ;A - game mode index
    3                       ;X - high nibble: palette start flag, low nibble: screen index
    4  06:CEEC  8D 0E 00    STA game_mode
    5  06:CEEF  8E 0D 00    STX mode_loadFlags
    6  06:CEF2  A9 00       LDA #$00
    7  06:CEF4  8D 0F 00    STA mode_state
    8  06:CEF7  20 53 D1    JSR ClearPPUString
    9  06:CEFA  20 FE CE    JSR LoadGameModeScreen
   10  06:CEFD  60          RTS
   11                       
   12  06:CEFE            LoadGameModeScreen:
   13                     
   14                       MACROSetFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:CEFE  AD 10 00    LDA NMI_locks
       06:CF01  09 01       ORA #BGLOAD_NMI_LOCK
       06:CF03  8D 10 00    STA NMI_locks
                                  
   15                       
   16  06:CF06  A9 00       LDA #$00
   17  06:CF08  8D 01 20    STA PPU_MASK    ; disable rendering- reenable on NMI when not updating
   18                     
   19  06:CF0B  20 39 CF    JSR LoadGameModeBackground
   20  06:CF0E  20 9A CF    JSR LoadGameModeSprites
   21                     
   22                       MACROClearFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:CF11  A9 01       LDA #BGLOAD_NMI_LOCK
       06:CF13  49 FF       EOR #$FF
       06:CF15  2D 10 00    AND NMI_locks  
       06:CF18  8D 10 00    STA NMI_locks
                          
   23                     
   24                       
   25                       ;; load the CHR bank for this mode
   26  06:CF1B  20 26 D2    JSR ResetMapper
   27                       ;;remember, we're loading the SECOND set in each chr bank
   28                       ;;so we'll take the index from the game mode chr table and add one mult 2
   29  06:CF1E  AE 0E 00    LDX game_mode
   30  06:CF21  BD B7 CF    LDA gameModeInitCHRROMB, x
   31  06:CF24  0A          ASL A
   32  06:CF25  18          CLC 
   33  06:CF26  69 01       ADC #$01
   34  06:CF28  20 4B D2    JSR LoadCHRBankB
   35                       
   36  06:CF2B  20 26 D2    JSR ResetMapper
   37  06:CF2E  AE 0E 00    LDX game_mode
   38  06:CF31  BD BA CF    LDA gameModeInitCHRROMA, x
   39  06:CF34  0A          ASL A
   40  06:CF35  20 40 D2    JSR LoadCHRBankA
   41                       
   42                       
   43                       
   44  06:CF38  60          RTS
   45                       
   46  06:CF39            LoadGameModeBackground:
   47                             
   48                       MACROGetDoubleIndex game_mode
                          
       06:CF39  AD 0E 00          LDA game_mode
       06:CF3C  0A                ASL A
       06:CF3D  A8                TAY
                                  
   49  06:CF3E  8C 00 00    STY temp1
   50                             
   51                       MACROGetLabelPointer Palettes, table_address
                          
       06:CF41  A9 E0             LDA #HIGH(Palettes)
       06:CF43  A2 00             LDX #LOW(Palettes)
                                  
       06:CF45  8E 16 00          STX table_address
       06:CF48  8D 17 00          STA table_address+1
                                  
   52  06:CF4B  20 E3 CF    JSR GetTableAtIndex
   53                     
   54  06:CF4E  20 F0 CF    JSR LoadFullPaletteFromTable
   55                             
   56  06:CF51  AC 00 00    LDY temp1
   57  06:CF54  AD 0D 00    LDA mode_loadFlags
   58  06:CF57  29 40       AND #%01000000 ; copy from saved screen
   59  06:CF59  F0 0D       BEQ .dontUseSaveCopy
   60                       MACROGetLabelPointer SaveScreen_Copy, table_address
                          
       06:CF5B  A9 68             LDA #HIGH(SaveScreen_Copy)
       06:CF5D  A2 00             LDX #LOW(SaveScreen_Copy)
                                  
       06:CF5F  8E 16 00          STX table_address
       06:CF62  8D 17 00          STA table_address+1
                                  
   61  06:CF65  4C 7F CF    JMP .loadTable
   62                       
   63  06:CF68            .dontUseSaveCopy:
   64                       MACROGetLabelPointer NameTables, table_address
                          
       06:CF68  A9 E0             LDA #HIGH(NameTables)
       06:CF6A  A2 06             LDX #LOW(NameTables)
                                  
       06:CF6C  8E 16 00          STX table_address
       06:CF6F  8D 17 00          STA table_address+1
                                  
   65  06:CF72  20 E3 CF    JSR GetTableAtIndex
   66  06:CF75  AD 0D 00    LDA mode_loadFlags
   67  06:CF78  29 0F       AND #$0F
   68  06:CF7A  0A          ASL A
   69  06:CF7B  A8          TAY
   70  06:CF7C  20 E3 CF    JSR GetTableAtIndex
   71                             
   72  06:CF7F            .loadTable:
   73  06:CF7F  A9 00       LDA #$00
   74  06:CF81  20 1F D0    JSR LoadFullBackgroundFromTable
   75                       
   76  06:CF84  AC 00 00    LDY temp1
   77                       MACROGetLabelPointer NameTables2, table_address
                          
       06:CF87  A9 E0             LDA #HIGH(NameTables2)
       06:CF89  A2 0C             LDX #LOW(NameTables2)
                                  
       06:CF8B  8E 16 00          STX table_address
       06:CF8E  8D 17 00          STA table_address+1
                                  
   78  06:CF91  20 E3 CF    JSR GetTableAtIndex
   79                       
   80  06:CF94  A9 01       LDA #$01
   81  06:CF96  20 1F D0    JSR LoadFullBackgroundFromTable
   82                       
   83  06:CF99  60          RTS
   84                       
   85  06:CF9A            LoadGameModeSprites:
   86                     
   87                       MACROGetDoubleIndex game_mode  
                          
       06:CF9A  AD 0E 00          LDA game_mode
       06:CF9D  0A                ASL A
       06:CF9E  A8                TAY
                                  
   88                       MACROGetLabelPointer Sprites, table_address
                          
       06:CF9F  A9 FD             LDA #HIGH(Sprites)
       06:CFA1  A2 28             LDX #LOW(Sprites)
                                  
       06:CFA3  8E 16 00          STX table_address
       06:CFA6  8D 17 00          STA table_address+1
                                  
   89  06:CFA9  20 E3 CF    JSR GetTableAtIndex
   90  06:CFAC  A0 00       LDY #$00
   91  06:CFAE  B1 16       LDA [table_address],y
   92  06:CFB0  EE 16 00    INC table_address
   93  06:CFB3  20 28 D1    JSR LoadSprites_impl
   94                       
   95  06:CFB6  60          RTS
   96                       
   97  06:CFB7            gameModeInitCHRROMB:
   98  06:CFB7  00 02 02          .db $00, $02, $02
   99  06:CFBA            gameModeInitCHRROMA:
  100  06:CFBA  00 02 02          .db $00, $02, $02
  101                             
#[1]   Picross.asm
#[2]   Routines/Utils/PointerUtils.asm
   95                       .include "Routines/Utils/PointerUtils.asm"
    1  06:CFBD            Dynamic_Jump:
    2                     
    3  06:CFBD  0A          ASL A                                 ;; double the index passed into A
    4  06:CFBE  8E 08 00    STX tempx
    5  06:CFC1  8C 09 00    STY tempy
    6  06:CFC4  A8          TAY
    7  06:CFC5  C8          INY  
    8  06:CFC6  68          PLA
    9  06:CFC7  8D 18 00    STA jump_address
   10  06:CFCA  68          PLA 
   11  06:CFCB  8D 19 00    STA jump_address+1            
   12  06:CFCE  B1 18       LDA [jump_address], y
   13  06:CFD0  AA          TAX
   14  06:CFD1  C8          INY
   15  06:CFD2  B1 18       LDA [jump_address], y
   16  06:CFD4  8E 18 00    STX jump_address
   17  06:CFD7  8D 19 00    STA jump_address+1
   18  06:CFDA  AE 08 00    LDX tempx
   19  06:CFDD  AC 09 00    LDY tempy
   20  06:CFE0  6C 18 00    JMP [jump_address]
   21                       
   22  06:CFE3            GetTableAtIndex:
   23                     
   24  06:CFE3  B1 16             LDA [table_address], y
   25  06:CFE5  AA                TAX
   26  06:CFE6  C8                INY
   27  06:CFE7  B1 16             LDA [table_address], y
   28                             
   29  06:CFE9            SetTableAddress:
   30                             
   31                             ;;A is hi, X is lo
   32  06:CFE9  8E 16 00          STX table_address
   33  06:CFEC  8D 17 00          STA table_address+1
   34  06:CFEF  60                RTS
#[1]   Picross.asm
#[2]   Routines/Utils/PPUUtils.asm
   96                       .include "Routines/Utils/PPUUtils.asm"
    1  06:CFF0            LoadFullPaletteFromTable:
    2                     
    3                       MACROSetPPUAddress $3F00
                          
       06:CFF0  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:CFF3  A9 3F       LDA #HIGH($3F00)
       06:CFF5  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:CFF8  A9 00       LDA #LOW($3F00)
       06:CFFA  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
    4  06:CFFD  A0 00       LDY #$00              ; start out at 0
    5  06:CFFF  A2 00       LDX #$00
    6  06:D001            .loop:
    7  06:D001  B1 16       LDA [table_address], y        ; load data from address (palette + the value in x)
    8  06:D003  9D 00 6C    STA Palette_Copy, x
    9  06:D006  48          PHA 
   10  06:D007  AD 0D 00    LDA mode_loadFlags
   11  06:D00A  29 10       AND #$10
   12  06:D00C  D0 04       BNE .setBlack
   13  06:D00E  68          PLA 
   14  06:D00F  4C 15 D0    JMP .setPPUData
   15  06:D012            .setBlack:
   16                     
   17  06:D012  68          PLA 
   18  06:D013  A9 0F       LDA #$0F
   19                       
   20  06:D015            .setPPUData:
   21  06:D015  8D 07 20    STA PPU_DATA            ; write to PPU
   22  06:D018  C8          INY                   ; X = X + 1
   23  06:D019  E8          INX
   24  06:D01A  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   25  06:D01C  D0 E3       BNE .loop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   26  06:D01E  60          RTS
   27                     
   28  06:D01F            LoadFullBackgroundFromTable:
   29                     
   30                         ;;use A as an index for which nametable to write to
   31  06:D01F  20 73 D1          JSR SetNametableFromIndex
   32  06:D022  8A                TXA
   33  06:D023  4A                LSR A
   34  06:D024  29 01             AND #$01
   35  06:D026  D0 17             BNE .copyScreenB
   36                             MACROGetLabelPointer Screen_Copy, pointer_address
                          
       06:D028  A9 60             LDA #HIGH(Screen_Copy)
       06:D02A  A2 00             LDX #LOW(Screen_Copy)
                                  
       06:D02C  8E 12 00          STX pointer_address
       06:D02F  8D 13 00          STA pointer_address+1
                                  
   37                             MACROGetLabelPointer SaveScreen_Copy, pointerB_address
                          
       06:D032  A9 68             LDA #HIGH(SaveScreen_Copy)
       06:D034  A2 00             LDX #LOW(SaveScreen_Copy)
                                  
       06:D036  8E 14 00          STX pointerB_address
       06:D039  8D 15 00          STA pointerB_address+1
                                  
   38  06:D03C  4C 52 D0          JMP .setCounters
   39                             
   40  06:D03F            .copyScreenB:
   41                             MACROGetLabelPointer ScreenB_Copy, pointer_address
                          
       06:D03F  A9 64             LDA #HIGH(ScreenB_Copy)
       06:D041  A2 00             LDX #LOW(ScreenB_Copy)
                                  
       06:D043  8E 12 00          STX pointer_address
       06:D046  8D 13 00          STA pointer_address+1
                                  
   42  06:D049  AD 0D 00          LDA mode_loadFlags
   43  06:D04C  2D 00 00          AND $%11011111
   44  06:D04F  8D 0D 00          STA mode_loadFlags ;kill the copy flag, just in case
   45                             
   46                             ;;set pointer
   47                             ;; set counters
   48  06:D052            .setCounters:
   49  06:D052  A0 00             LDY #$00
   50  06:D054  A2 00             LDX #$00
   51                             
   52                             ;;start loop
   53                     
   54  06:D056            .outerloop:
   55                     
   56  06:D056            .innerloop:
   57                     
   58  06:D056  B1 16             LDA [table_address], y
   59  06:D058  8D 07 20          STA PPU_DATA
   60  06:D05B  91 12             STA [pointer_address],y
   61  06:D05D  AD 0D 00      LDA mode_loadFlags
   62  06:D060  29 20         AND #%00100000      ;check copy flag
   63  06:D062  F0 04             BEQ .skipSaveCopy
   64  06:D064  B1 16         LDA [table_address], y
   65  06:D066  91 14             STA [pointerB_address],y
   66                     
   67  06:D068            .skipSaveCopy:
   68  06:D068  C8                INY
   69  06:D069  C0 00             CPY #$00
   70  06:D06B  D0 E9             BNE .innerloop
   71                     
   72  06:D06D  EE 13 00          INC pointer_address+1
   73  06:D070  EE 17 00          INC table_address+1
   74  06:D073  EE 15 00          INC pointerB_address+1
   75                             
   76  06:D076  E8                INX
   77  06:D077  E0 04             CPX #$04
   78  06:D079  D0 DB             BNE .outerloop
   79  06:D07B  60                RTS
   80                             
   81                     
   82           0000      DATA_LEN = temp1
   83           0001      WRITE_SETTINGS = temp2
   84                             
   85  06:D07C            ProcessPPUString:
   86                     
   87  06:D07C  AD 23 00          LDA PPU_PendingWrite
   88  06:D07F  D0 01             BNE .continueProcess
   89  06:D081  60                RTS
   90                             
   91  06:D082            .continueProcess:
   92  06:D082  A0 00             LDY #$00
   93                             
   94  06:D084  A9 25             LDA #LOW(PPU_String)
   95  06:D086  8D 12 00          STA pointer_address
   96  06:D089  A9 00             LDA #HIGH(PPU_String)
   97  06:D08B  8D 13 00          STA pointer_address + 1
   98                     
   99  06:D08E            .outerloop:
  100  06:D08E  AD 02 20          LDA PPU_STATUS
  101  06:D091  B1 12             LDA [pointer_address], y
  102  06:D093  F0 79             BEQ .finish
  103  06:D095  8D 06 20          STA PPU_ADDR
  104  06:D098  C8                INY
  105  06:D099  B1 12             LDA [pointer_address], y
  106  06:D09B  8D 06 20          STA PPU_ADDR
  107  06:D09E  C8            INY 
  108  06:D09F  B1 12             LDA [pointer_address], y
  109  06:D0A1  8D 01 00          STA WRITE_SETTINGS
  110  06:D0A4  C8                INY
  111                             
  112  06:D0A5  AD 00 20          LDA PPU_CTRL
  113  06:D0A8  29 FB             AND #$FB
  114  06:D0AA  8D 00 20          STA PPU_CTRL
  115                             
  116  06:D0AD  AD 01 00          LDA WRITE_SETTINGS      ;check horizontal or vertical write
  117  06:D0B0  29 80             AND #%10000000
  118  06:D0B2  F0 06             BEQ .checkRepeat
  119  06:D0B4  0D 00 20          ORA PPU_CTRL 
  120  06:D0B7  8D 00 20          STA PPU_CTRL 
  121                             
  122                             
  123  06:D0BA            .checkRepeat:
  124  06:D0BA  AD 01 00    LDA WRITE_SETTINGS
  125  06:D0BD  29 40       AND #%01000000
  126  06:D0BF  F0 19       BEQ .checkTable
  127                       
  128  06:D0C1  AD 01 00    LDA WRITE_SETTINGS
  129  06:D0C4  29 3F       AND #$3F
  130  06:D0C6  8D 00 00    STA DATA_LEN
  131                       ;;the usual data length byte is now the repeatable byte
  132  06:D0C9  A2 00       LDX #$00
  133                       
  134  06:D0CB            .repeatLoop:
  135  06:D0CB  B1 12       LDA [pointer_address], y
  136  06:D0CD  8D 07 20    STA PPU_DATA
  137  06:D0D0  E8          INX 
  138  06:D0D1  EC 00 00    CPX DATA_LEN
  139  06:D0D4  D0 F5       BNE .repeatLoop
  140  06:D0D6  C8          INY
  141  06:D0D7  4C 8E D0    JMP .outerloop
  142                             
  143  06:D0DA            .checkTable:
  144  06:D0DA  AD 01 00          LDA WRITE_SETTINGS
  145  06:D0DD  29 20             AND #%00100000
  146  06:D0DF  F0 16             BEQ .rawData
  147                             
  148  06:D0E1  B1 12             LDA [pointer_address], y
  149  06:D0E3  8D 16 00          STA table_address
  150  06:D0E6  C8                INY 
  151  06:D0E7  B1 12             LDA [pointer_address], y
  152  06:D0E9  8D 17 00          STA table_address + 1
  153  06:D0EC  C8                INY
  154  06:D0ED  98                TYA 
  155  06:D0EE  48                PHA
  156  06:D0EF  20 12 D1          JSR WriteToPPUFromTable
  157  06:D0F2  68                PLA
  158  06:D0F3  A8                TAY
  159  06:D0F4  4C 8E D0          JMP .outerloop
  160                             
  161  06:D0F7            .rawData:
  162                     
  163  06:D0F7  B1 12             LDA [pointer_address], y
  164  06:D0F9  C8                INY
  165  06:D0FA  8D 00 00          STA DATA_LEN
  166                     
  167  06:D0FD  A2 00             LDX #$00
  168                     
  169  06:D0FF            .innerloop:
  170                             
  171  06:D0FF  B1 12             LDA [pointer_address], y
  172  06:D101  8D 07 20          STA PPU_DATA
  173  06:D104  C8                INY
  174  06:D105  E8                INX
  175  06:D106  EC 00 00          CPX DATA_LEN
  176  06:D109  D0 F4             BNE .innerloop
  177  06:D10B  4C 8E D0          JMP .outerloop
  178                             
  179  06:D10E            .finish:
  180  06:D10E  20 53 D1          JSR ClearPPUString
  181  06:D111            .leave:
  182  06:D111  60                RTS
  183                             
  184  06:D112            WriteToPPUFromTable:
  185  06:D112  A0 00             LDY #$00
  186  06:D114  B1 16             LDA [table_address], y
  187  06:D116  C8                INY
  188  06:D117  8D 00 00          STA DATA_LEN
  189  06:D11A            .innerloop:
  190  06:D11A  B1 16             LDA [table_address], y
  191  06:D11C  8D 07 20          STA PPU_DATA
  192  06:D11F  C8                INY
  193  06:D120  CC 00 00          CPY DATA_LEN
  194  06:D123  90 F5             BCC .innerloop ;table should have the size in it, but since we count the byte count, we'll want to wait till we go over it
  195  06:D125  F0 F3             BEQ .innerloop
  196  06:D127  60                RTS
  197                       
  198  06:D128            LoadSprites_impl:
  199                       ;;A will be the amount of sprites to load
  200  06:D128  8D 00 00    STA DATA_LEN
  201  06:D12B  0E 00 00    ASL DATA_LEN
  202  06:D12E  0E 00 00    ASL DATA_LEN
  203                       
  204  06:D131  A0 00       LDY #$00              ; start at 0
  205                       
  206  06:D133            .loop:
  207  06:D133  B1 16       LDA [table_address], y; load data from address (sprites +  x)
  208  06:D135  99 00 02    STA SPRITE_DATA, y    ; store into RAM address ($0200 + x)
  209  06:D138  C8          INY                   ; X = X + 1
  210  06:D139  CC 00 00    CPY DATA_LEN             ; Compare X to hex $10, decimal 16
  211  06:D13C  D0 F5       BNE .loop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
  212                                             ; if compare was equal to 16, keep going down   
  213  06:D13E  60          RTS
  214                     
  215                     
  216  06:D13F            WriteToPPUString:
  217                     
  218  06:D13F  AE 24 00          LDX PPU_StringIdx
  219  06:D142  E0 4F             CPX #PPU_STRINGMAX
  220  06:D144  F0 0C             BEQ .finish
  221                             
  222  06:D146  9D 25 00          STA PPU_String, x
  223  06:D149  EE 24 00          INC PPU_StringIdx
  224  06:D14C  E8                INX
  225  06:D14D  A9 00             LDA #$00
  226  06:D14F  9D 25 00          STA PPU_String, x
  227                                     
  228  06:D152            .finish:
  229  06:D152  60                RTS
  230                     
  231  06:D153            ClearPPUString:
  232                             
  233  06:D153  A9 00             LDA #$00
  234  06:D155  8D 24 00          STA PPU_StringIdx
  235  06:D158  8D 25 00          STA PPU_String
  236  06:D15B  8D 23 00          STA PPU_PendingWrite
  237  06:D15E  60                RTS
  238                     
  239  06:D15F            DetectSprite0:
  240  06:D15F            WaitNotSprite0:
  241  06:D15F  AD 02 20    lda PPU_STATUS
  242  06:D162  29 40       and #SPRITE_0_MASK
  243  06:D164  D0 F9       bne WaitNotSprite0   ; wait until sprite 0 not hit
  244                     
  245  06:D166            WaitSprite0:
  246  06:D166  AD 02 20    lda $2002
  247  06:D169  29 40       and #SPRITE_0_MASK
  248  06:D16B  F0 F9       beq WaitSprite0      ; wait until sprite 0 is hit
  249                     
  250  06:D16D  A2 05       ldx #$05                              ;do a scanline wait
  251  06:D16F            WaitScanline:
  252  06:D16F  CA          dex
  253  06:D170  D0 FD       bne WaitScanline
  254  06:D172  60          RTS
  255                     
  256                     
  257  06:D173            SetNametableFromIndex:
  258                     
  259  06:D173  48          PHA
  260  06:D174  AD 02 20    LDA PPU_STATUS
  261  06:D177  68          PLA
  262  06:D178  0A          ASL A
  263  06:D179  AA          TAX
  264  06:D17A  BD 0F D2    LDA NameTableMemList+1, x
  265  06:D17D  8D 06 20    STA PPU_ADDR
  266  06:D180  BD 0E D2    LDA NameTableMemList, x
  267  06:D183  8D 06 20    STA PPU_ADDR
  268  06:D186  60          RTS
  269                       
  270  06:D187            TurnOnSprites:
  271                      
  272  06:D187  AD 1E 00    LDA PPU_Mask
  273  06:D18A  09 10       ORA #%00010000
  274  06:D18C  8D 1E 00    STA PPU_Mask
  275  06:D18F  60          RTS
  276                       
  277  06:D190            TurnOffSprites:
  278                       
  279  06:D190  AD 1E 00    LDA PPU_Mask
  280  06:D193  29 EF       AND #%11101111
  281  06:D195  8D 1E 00    STA PPU_Mask
  282  06:D198  60          RTS
  283                     
  284  06:D199            UpdatePPUControl:
  285                     
  286  06:D199  AD 1D 00    LDA PPU_Control
  287  06:D19C  29 FC       AND #$FC
  288  06:D19E  0D 22 00    ORA PPU_NT
  289  06:D1A1  8D 00 20    STA PPU_CTRL
  290  06:D1A4  AD 1E 00    LDA PPU_Mask
  291  06:D1A7  8D 01 20    STA PPU_MASK
  292  06:D1AA  60          RTS
  293                       
  294  06:D1AB            InitPPUControl:
  295                       
  296                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
  297                       ; enable sprites, enable background, no clipping on left side
  298  06:D1AB  A9 90       LDA #%10010000
  299  06:D1AD  8D 00 20    STA PPU_CTRL
  300  06:D1B0  8D 1D 00    STA PPU_Control
  301  06:D1B3  A9 1E       LDA #%00011110
  302  06:D1B5  8D 01 20    STA PPU_MASK
  303  06:D1B8  8D 1E 00    STA PPU_Mask
  304  06:D1BB  60          RTS
  305                       
  306  06:D1BC            FadeOutPalettes:
  307                     
  308                     ;;take the current values, and decrement the lower nibbles
  309                     ;;we can access from the palette copy 
  310                     ;;we'll make this fade out one level per call
  311                     ;;once all the palettes are blacked out we'll return true, so we'll keep the carry flag as a return result
  312                     
  313                     ;;go through the palette copy, decrement, make a raw data PPU string and add all the bytes into it
  314                     ;;for any palette color already in the 0x range, change it to 0f to get black
  315                     
  316                       MACROGetLabelPointer Palette_Copy, table_address
                          
       06:D1BC  A9 6C             LDA #HIGH(Palette_Copy)
       06:D1BE  A2 00             LDX #LOW(Palette_Copy)
                                  
       06:D1C0  8E 16 00          STX table_address
       06:D1C3  8D 17 00          STA table_address+1
                                  
  317                     ;;palette copy address is now X accessable
  318                     
  319  06:D1C6  A0 00       LDY #$00
  320                       MACROAddPPUStringEntryRawData #$3F, #$00, #DRAW_HORIZONTAL, #$20  
                          
       06:D1C8  A9 01       LDA #$01
       06:D1CA  8D 23 00    STA PPU_PendingWrite
       06:D1CD  A9 3F       LDA #$3F
       06:D1CF  20 3F D1    JSR WriteToPPUString
       06:D1D2  A9 00       LDA #$00
       06:D1D4  20 3F D1    JSR WriteToPPUString
       06:D1D7  A9 00       LDA #DRAW_HORIZONTAL
       06:D1D9  20 3F D1    JSR WriteToPPUString
       06:D1DC  A9 20       LDA #$20 
       06:D1DE  20 3F D1    JSR WriteToPPUString
                            
  321                     
  322  06:D1E1  A9 00       LDA #$00
  323  06:D1E3  8D 00 00    STA temp1
  324                       
  325  06:D1E6            .loop:
  326                     
  327  06:D1E6  B1 16       LDA [table_address], y
  328  06:D1E8  C9 0F       CMP #$0F
  329  06:D1EA  F0 15       BEQ .addToString
  330  06:D1EC  C9 10       CMP #$10
  331  06:D1EE  90 0D       BCC .setBlack
  332                       
  333  06:D1F0  A9 80       LDA #$80
  334  06:D1F2  8D 00 00    STA temp1
  335                       
  336  06:D1F5  B1 16       LDA [table_address], y
  337  06:D1F7  38          SEC
  338  06:D1F8  E9 10       SBC #$10
  339  06:D1FA  4C FF D1    JMP .setColor
  340                     
  341  06:D1FD            .setBlack:
  342                     
  343  06:D1FD  A9 0F       LDA #$0F
  344                     
  345  06:D1FF            .setColor:
  346  06:D1FF  91 16       STA [table_address], y
  347                     
  348  06:D201            .addToString:
  349                     
  350  06:D201  20 3F D1    JSR WriteToPPUString
  351                     
  352  06:D204            .incY:
  353                       
  354  06:D204  C8          INY
  355  06:D205  C0 20       CPY #$20
  356  06:D207  D0 DD       BNE .loop
  357                     
  358  06:D209  0E 00 00    ASL temp1     ;get carry out, if we have one
  359                     
  360  06:D20C  60          RTS
  361                       
  362  06:D20D            FadeInPalettes:
  363                     
  364                     ;;need to be able to store off a target palette first
  365                     ;;we can use the palette copy we make during the game mode change as the target
  366  06:D20D  60          RTS
  367                     
  368  06:D20E            NameTableMemList:
  369  06:D20E  00 20       .word $2000, $2400, $2800, $2C00
       06:D210  00 24     
       06:D212  00 28     
       06:D214  00 2C     
  370  06:D216            PalettesMemList:
  371  06:D216  00 3F       .word $3F00, $3F04, $3F08, $3F0C
       06:D218  04 3F     
       06:D21A  08 3F     
       06:D21C  0C 3F     
  372  06:D21E  10 3F       .word $3F10, $3F14, $3F18, $3F1C  
       06:D220  14 3F     
       06:D222  18 3F     
       06:D224  1C 3F     
  373                       
  374           0024      BLANK_TILE = $24
#[1]   Picross.asm
#[2]   Routines/Utils/MapperUtils.asm
   97                       .include "Routines/Utils/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:D226            ResetMapper:
    7  06:D226  EE 26 D2    inc ResetMapper
    8  06:D229  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:D22A            SetMapperControls:
   23                       ;;A = controls
   24  06:D22A  AA          TAX
   25  06:D22B  A9 80       LDA #MAPPERCONTROL
   26  06:D22D  8D A6 00    STA mapper_address+1
   27  06:D230  8A          TXA
   28  06:D231  20 56 D2    JSR SendMapperCommand
   29  06:D234  60          RTS
   30                     
   31  06:D235            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:D235  AA                TAX
   35  06:D236  A9 E0             LDA #PRGBANK
   36  06:D238  8D A6 00          STA mapper_address+1
   37  06:D23B  8A                TXA
   38  06:D23C  20 56 D2          JSR SendMapperCommand
   39  06:D23F  60                RTS
   40                             
   41  06:D240            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:D240  AA                TAX
   44  06:D241  A9 A0             LDA #CHRBANK1
   45  06:D243  8D A6 00          STA mapper_address+1
   46  06:D246  8A                TXA
   47  06:D247  20 56 D2          JSR SendMapperCommand
   48  06:D24A  60                RTS
   49                             
   50  06:D24B            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:D24B  AA                TAX
   53  06:D24C  A9 C0             LDA #CHRBANK2
   54  06:D24E  8D A6 00          STA mapper_address+1
   55  06:D251  8A                TXA
   56  06:D252  20 56 D2          JSR SendMapperCommand
   57  06:D255  60                RTS
   58                             
   59  06:D256            SendMapperCommand:
   60                     
   61  06:D256  A0 00             LDY #$00
   62                             
   63  06:D258  91 A5             STA [mapper_address], y
   64  06:D25A  4A                LSR A
   65  06:D25B  91 A5             STA [mapper_address], y
   66  06:D25D  4A                LSR A
   67  06:D25E  91 A5             STA [mapper_address], y
   68  06:D260  4A                LSR A 
   69  06:D261  91 A5             STA [mapper_address], y
   70  06:D263  4A                LSR A
   71  06:D264  91 A5             STA [mapper_address], y
   72                             
   73  06:D266  60                RTS
   74                             
   75  06:D267            ResetBanks:
   76                     
   77  06:D267  20 26 D2          JSR ResetMapper
   78  06:D26A  A9 00             LDA #$00
   79  06:D26C  20 35 D2          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:D26F  20 26 D2          JSR ResetMapper
   83  06:D272  A9 00             LDA #$00
   84  06:D274  20 40 D2          JSR LoadCHRBankA
   85  06:D277  A9 01             LDA #$01
   86  06:D279  20 4B D2          JSR LoadCHRBankB
   87  06:D27C  60                RTS
   88                             
   89                       
#[1]   Picross.asm
#[2]   Routines/Game_Routines/ScreenEffects.asm
   98                       .include "Routines/Game_Routines/ScreenEffects.asm"
    1  06:D27D            PopulateClues:
    2                       
    3  06:D27D  A0 00       LDY #$00
    4  06:D27F  B1 AD       LDA [puzzle_address], y
    5  06:D281  AA          TAX
    6  06:D282  BD 6F D6    LDA PuzzleSizes, x
    7  06:D285  8D 00 00    STA temp1
    8                       
    9  06:D288            .getByte:
   10  06:D288  AC BF 00    LDY clueTableIndex
   11  06:D28B  B1 AF       LDA [clues_address], y
   12  06:D28D  D0 07       BNE .checkNewLine
   13  06:D28F  EE BF 00    INC clueTableIndex
   14  06:D292  A9 00       LDA #$00
   15  06:D294  F0 39       BEQ .drawClue
   16                       ;was 0, set up a draw
   17  06:D296            .checkNewLine
   18  06:D296  C9 FF       CMP #$FF
   19  06:D298  D0 18       BNE .getClue
   20                       
   21                       ;;was FF- need to inc stuff
   22  06:D29A  EE BF 00    INC clueTableIndex
   23  06:D29D  A9 00       LDA #$00
   24  06:D29F  8D C6 00    STA clueParity
   25                       
   26  06:D2A2  EE C0 00    INC clueLineIndex
   27  06:D2A5  AD C0 00    LDA clueLineIndex
   28  06:D2A8  CD 00 00    CMP temp1
   29                       ;CMP #$01
   30  06:D2AB  F0 28       BEQ .leave    ;carry will be set
   31                       
   32  06:D2AD  20 6C D3    JSR CreateOffsetFromIndex
   33                      
   34  06:D2B0  D0 D6       BNE .getByte
   35                       
   36  06:D2B2            .getClue:
   37                       ;;clues go from high nibble to low nibble
   38  06:D2B2  48          PHA 
   39  06:D2B3  AD C6 00    LDA clueParity
   40  06:D2B6  D0 0A       BNE .getSecondClue
   41  06:D2B8  EE C6 00    INC clueParity
   42  06:D2BB  68          PLA
   43  06:D2BC  4A          LSR A
   44  06:D2BD  4A          LSR A
   45  06:D2BE  4A          LSR A
   46  06:D2BF  4A          LSR A         ;move clue over to lower nibble
   47  06:D2C0  D0 0D       BNE .drawClue
   48                       
   49  06:D2C2            .getSecondClue:
   50                     
   51  06:D2C2  CE C6 00    DEC clueParity
   52  06:D2C5  EE BF 00    INC clueTableIndex
   53  06:D2C8  68          PLA 
   54  06:D2C9  29 0F       AND #$0F
   55  06:D2CB  D0 02       BNE .drawClue
   56                       ;;if 0, skip
   57  06:D2CD  F0 B9       BEQ .getByte
   58                      
   59  06:D2CF            .drawClue:
   60                       
   61  06:D2CF  09 40       ORA #$40
   62  06:D2D1  20 D6 D2    JSR WriteClueByteToPPUString
   63  06:D2D4  18          CLC
   64                       
   65  06:D2D5            .leave:
   66  06:D2D5  60          RTS
   67                       
   68  06:D2D6            WriteClueByteToPPUString:
   69                     
   70  06:D2D6  8D 00 00    STA temp1 ;store off the tile value
   71                     
   72                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:D2D9  A9 01       LDA #$01
       06:D2DB  8D 23 00    STA PPU_PendingWrite
       06:D2DE  AD BE 00    LDA clue_draw_address+1
       06:D2E1  20 3F D1    JSR WriteToPPUString
       06:D2E4  AD BD 00    LDA clue_draw_address
       06:D2E7  20 3F D1    JSR WriteToPPUString
       06:D2EA  A9 00       LDA #DRAW_HORIZONTAL
       06:D2EC  20 3F D1    JSR WriteToPPUString
       06:D2EF  A9 01       LDA #$01 
       06:D2F1  20 3F D1    JSR WriteToPPUString
                            
   73  06:D2F4  AD 00 00    LDA temp1
   74  06:D2F7  20 3F D1    JSR WriteToPPUString
   75                       
   76                       ;;also copy to ... copy
   77  06:D2FA  AD BD 00    LDA clue_draw_address
   78  06:D2FD  8D B5 00    STA copy_address
   79  06:D300  AD BE 00    LDA clue_draw_address+1
   80  06:D303  29 0F       AND #$0F
   81  06:D305  09 60       ORA #$60
   82  06:D307  8D B6 00    STA copy_address+1
   83  06:D30A  AD 00 00    LDA temp1
   84  06:D30D  A0 00       LDY #$00
   85  06:D30F  91 B5       STA [copy_address],y
   86  06:D311  AD B6 00    LDA copy_address+1
   87  06:D314  18          CLC
   88  06:D315  69 08       ADC #$08
   89  06:D317  8D B6 00    STA copy_address+1
   90  06:D31A  AD 00 00    LDA temp1
   91  06:D31D  91 B5       STA [copy_address],y
   92                       
   93  06:D31F  AD C2 00    LDA clueDrawAdd
   94  06:D322  20 49 D3    JSR SubFromClueDrawAddress
   95                         
   96  06:D325  60          RTS
   97                       
   98  06:D326            ResetClueDrawAddress:
   99                     
  100                       MACROGetPointer clue_start_address, clue_draw_address
                          
       06:D326  AD BB 00          LDA clue_start_address
       06:D329  8D BD 00          STA clue_draw_address
       06:D32C  AD BC 00          LDA clue_start_address+1
       06:D32F  8D BE 00          STA clue_draw_address+1
                          
  101                       
  102  06:D332  60          RTS
  103                       
  104  06:D333            AddToClueDrawAddress:
  105                     
  106  06:D333  8D 00 00    STA temp1
  107                       
  108  06:D336  AD BD 00    LDA clue_draw_address
  109  06:D339  18          CLC
  110  06:D33A  6D 00 00    ADC temp1
  111  06:D33D  8D BD 00    STA clue_draw_address
  112  06:D340  AD BE 00    LDA clue_draw_address+1
  113  06:D343  69 00       ADC #$00
  114  06:D345  8D BE 00    STA clue_draw_address+1
  115                       
  116  06:D348  60          RTS
  117                         
  118  06:D349            SubFromClueDrawAddress:
  119                     
  120  06:D349  8D 00 00    STA temp1
  121                       
  122  06:D34C  AD BD 00    LDA clue_draw_address
  123  06:D34F  38          SEC
  124  06:D350  ED 00 00    SBC temp1
  125  06:D353  8D BD 00    STA clue_draw_address
  126  06:D356  AD BE 00    LDA clue_draw_address+1
  127  06:D359  E9 00       SBC #$00
  128  06:D35B  8D BE 00    STA clue_draw_address+1
  129                       
  130  06:D35E  60          RTS
  131                       
  132  06:D35F            AddToClueDrawAddressHi:
  133                     
  134  06:D35F  8D 00 00    STA temp1
  135                       
  136  06:D362  AD BE 00    LDA clue_draw_address+1
  137  06:D365  6D 00 00    ADC temp1
  138  06:D368  8D BE 00    STA clue_draw_address+1
  139                       
  140  06:D36B  60          RTS
  141                       
  142  06:D36C            CreateOffsetFromIndex:
  143                     
  144                       ;;would be this, but we need to be able to go further- so we'll make a doulbe offset
  145  06:D36C  AD C0 00    LDA clueLineIndex
  146  06:D36F  8D C3 00    STA clueDrawOffset
  147  06:D372  A9 00       LDA #$00
  148  06:D374  8D C4 00    STA clueDrawOffset+1
  149                       
  150  06:D377  AD C1 00    LDA clueOffsetShift   
  151  06:D37A  F0 0E       BEQ .addOffset
  152                       
  153  06:D37C  A2 00       LDX #$00
  154                       
  155  06:D37E            .loopShift:
  156  06:D37E  0E C3 00    ASL clueDrawOffset
  157  06:D381  2E C4 00    ROL clueDrawOffset+1
  158  06:D384  E8          INX
  159  06:D385  EC C1 00    CPX clueOffsetShift
  160  06:D388  D0 F4       BNE .loopShift
  161                       
  162  06:D38A            .addOffset:
  163                       
  164  06:D38A  20 26 D3    JSR ResetClueDrawAddress
  165  06:D38D  AD C3 00    LDA clueDrawOffset
  166  06:D390  20 33 D3    JSR AddToClueDrawAddress 
  167  06:D393  AD C4 00    LDA clueDrawOffset+1
  168  06:D396  20 5F D3    JSR AddToClueDrawAddressHi
  169                       
  170  06:D399  60          RTS  
  171                       
  172  06:D39A            ClearPuzzle:
  173                     
  174                       ;we'll assume clue draw address has been set to the top of the 1st nametable
  175                      
  176                       MACROGetLabelPointer ClearLineDefs, table_address
                          
       06:D39A  A9 D6             LDA #HIGH(ClearLineDefs)
       06:D39C  A2 51             LDX #LOW(ClearLineDefs)
                                  
       06:D39E  8E 16 00          STX table_address
       06:D3A1  8D 17 00          STA table_address+1
                                  
  177                     
  178  06:D3A4  AC C0 00    LDY clueLineIndex
  179  06:D3A7  B1 16       LDA [table_address], y
  180  06:D3A9  8D 00 00    STA temp1
  181                       MACROAddPPUStringEntryRepeat clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp1, #$24
                          
       06:D3AC  A9 01       LDA #$01
       06:D3AE  8D 23 00    STA PPU_PendingWrite
       06:D3B1  AD BE 00    LDA clue_draw_address+1
       06:D3B4  20 3F D1    JSR WriteToPPUString
       06:D3B7  AD BD 00    LDA clue_draw_address
       06:D3BA  20 3F D1    JSR WriteToPPUString
       06:D3BD  A9 40       LDA #$40
       06:D3BF  09 00       ORA #DRAW_HORIZONTAL
       06:D3C1  0D 00 00    ORA temp1
       06:D3C4  20 3F D1    JSR WriteToPPUString
       06:D3C7  A9 24       LDA #$24
       06:D3C9  20 3F D1    JSR WriteToPPUString
                            
  182                       ;;no need to load anything else
  183                       
  184  06:D3CC  AD BD 00    LDA clue_draw_address
  185  06:D3CF  18          CLC
  186  06:D3D0  69 20       ADC #32
  187  06:D3D2  8D BD 00    STA clue_draw_address
  188  06:D3D5  AD BE 00    LDA clue_draw_address+1
  189  06:D3D8  69 00       ADC #$00
  190  06:D3DA  8D BE 00    STA clue_draw_address+1
  191                       
  192  06:D3DD  EE C0 00    INC clueLineIndex
  193  06:D3E0  60          RTS
  194                       
  195  06:D3E1            LoadPauseScreen:
  196                     
  197                     ;;use clue indexes again
  198                     ;;we want to draw one line at a time
  199                     ;;we have control codes, but those don't matter since we have to build ou the strings before hand
  200                     
  201                     ;load pause table
  202                     ;there are 6 lines of 13 tiles
  203                     ;one byte for the 6 lines, one byte to keep track of our index
  204                       ;STA clueLineIndex 
  205                       ;STA clueOffsetShift
  206                     
  207                     ;;pause_address has the table we want
  208                     ;;pause_draw_address will be the draw location
  209                     
  210                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:D3E1  A9 01       LDA #$01
       06:D3E3  8D 23 00    STA PPU_PendingWrite
       06:D3E6  AD B8 00    LDA pause_draw_address+1
       06:D3E9  20 3F D1    JSR WriteToPPUString
       06:D3EC  AD B7 00    LDA pause_draw_address
       06:D3EF  20 3F D1    JSR WriteToPPUString
       06:D3F2  A9 00       LDA #DRAW_HORIZONTAL
       06:D3F4  20 3F D1    JSR WriteToPPUString
       06:D3F7  A9 0D       LDA #13 
       06:D3F9  20 3F D1    JSR WriteToPPUString
                            
  211                     
  212  06:D3FC  A2 00       LDX #$00
  213  06:D3FE  AC C0 00    LDY clueLineIndex
  214  06:D401            .loop:
  215                      
  216  06:D401  8A          TXA
  217  06:D402  48          PHA
  218  06:D403  B1 B3       LDA [pause_address],y
  219  06:D405  20 3F D1    JSR WriteToPPUString
  220  06:D408  68          PLA
  221  06:D409  AA          TAX
  222  06:D40A  C8          INY
  223  06:D40B  E8          INX 
  224  06:D40C  E0 0D       CPX #13
  225  06:D40E  D0 F1       BNE .loop
  226                       
  227  06:D410  8C C0 00    STY clueLineIndex
  228                       
  229  06:D413  AD B7 00    LDA pause_draw_address
  230  06:D416  18          CLC
  231  06:D417  69 20       ADC #$20
  232  06:D419  8D B7 00    STA pause_draw_address
  233  06:D41C  AD B8 00    LDA pause_draw_address+1
  234  06:D41F  69 00       ADC #$00
  235  06:D421  8D B8 00    STA pause_draw_address+1
  236                       
  237  06:D424  EE C1 00    INC clueOffsetShift
  238  06:D427  60          RTS
  239                       
  240                       
  241                     
  242                     
  243  06:D428            ClearPauseScreen:  
  244                     
  245                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:D428  A9 01       LDA #$01
       06:D42A  8D 23 00    STA PPU_PendingWrite
       06:D42D  AD B8 00    LDA pause_draw_address+1
       06:D430  20 3F D1    JSR WriteToPPUString
       06:D433  AD B7 00    LDA pause_draw_address
       06:D436  20 3F D1    JSR WriteToPPUString
       06:D439  A9 00       LDA #DRAW_HORIZONTAL
       06:D43B  20 3F D1    JSR WriteToPPUString
       06:D43E  A9 0D       LDA #13 
       06:D440  20 3F D1    JSR WriteToPPUString
                            
  246                     
  247  06:D443  A2 00       LDX #$00
  248  06:D445  A0 00       LDY #$00
  249  06:D447            .loop:
  250                      
  251  06:D447  8A          TXA
  252  06:D448  48          PHA
  253  06:D449  B1 B3       LDA [pause_address],y
  254  06:D44B  20 3F D1    JSR WriteToPPUString
  255  06:D44E  68          PLA
  256  06:D44F  AA          TAX
  257  06:D450  C8          INY
  258  06:D451  E8          INX 
  259  06:D452  E0 0D       CPX #13
  260  06:D454  D0 F1       BNE .loop
  261                       
  262                       
  263  06:D456  AD B7 00    LDA pause_draw_address
  264  06:D459  18          CLC
  265  06:D45A  69 20       ADC #$20
  266  06:D45C  8D B7 00    STA pause_draw_address
  267  06:D45F  AD B8 00    LDA pause_draw_address+1
  268  06:D462  69 00       ADC #$00
  269  06:D464  8D B8 00    STA pause_draw_address+1
  270                       
  271  06:D467  AD B3 00    LDA pause_address
  272  06:D46A  18          CLC
  273  06:D46B  69 20       ADC #$20
  274  06:D46D  8D B3 00    STA pause_address
  275  06:D470  AD B4 00    LDA pause_address+1
  276  06:D473  69 00       ADC #$00
  277  06:D475  8D B4 00    STA pause_address+1
  278                       
  279  06:D478  EE C1 00    INC clueOffsetShift
  280  06:D47B  60         RTS
  281  06:D47C            DrawImage:
  282                     
  283                       ;;we have clueTableIndex, which should be at the image bytes now
  284                       ;;clue line index will keep track of our place in a byte
  285                        
  286  06:D47C  A9 00       LDA #$00
  287  06:D47E  8D 00 00    STA temp1
  288  06:D481  8D 01 00    STA temp2
  289  06:D484  8D 02 00    STA temp3
  290  06:D487  8D 03 00    STA temp4
  291  06:D48A  8D 05 00    STA temp6
  292                       
  293  06:D48D  A9 04       LDA #$04
  294  06:D48F  8D 04 00    STA temp5
  295                       
  296  06:D492  A0 00       LDY #$00
  297  06:D494  B1 AD       LDA [puzzle_address], y
  298  06:D496  AA          TAX
  299  06:D497  BD 6F D6    LDA PuzzleSizes, x
  300  06:D49A  8D 06 00    STA temp7
  301  06:D49D  BD 72 D6    LDA PuzzleImageSizes, x
  302  06:D4A0  8D 07 00    STA temp8
  303  06:D4A3  4A          LSR A
  304  06:D4A4  4A          LSR A
  305  06:D4A5  8D 09 00    STA tempy
  306  06:D4A8  AD 07 00    LDA temp8
  307  06:D4AB  29 03       AND #$03
  308  06:D4AD  F0 03       BEQ .skipAdd1
  309  06:D4AF  EE 09 00    INC tempy  
  310  06:D4B2            .skipAdd1:
  311  06:D4B2  BD 75 D6    LDA ImageDrawWrapOffsets, x
  312  06:D4B5  8D 08 00    STA tempx
  313                       
  314  06:D4B8  AC BF 00    LDY clueTableIndex
  315  06:D4BB  B1 AF       LDA [clues_address], y
  316                     
  317  06:D4BD  0A          ASL A
  318  06:D4BE  2E 00 00    ROL temp1
  319  06:D4C1  0A          ASL A
  320  06:D4C2  2E 00 00    ROL temp1
  321  06:D4C5  0A          ASL A
  322  06:D4C6  2E 01 00    ROL temp2
  323  06:D4C9  0A          ASL A
  324  06:D4CA  2E 01 00    ROL temp2
  325  06:D4CD  0A          ASL A
  326  06:D4CE  2E 02 00    ROL temp3
  327  06:D4D1  0A          ASL A
  328  06:D4D2  2E 02 00    ROL temp3
  329  06:D4D5  0A          ASL A
  330  06:D4D6  2E 03 00    ROL temp4
  331  06:D4D9  0A          ASL A
  332  06:D4DA  2E 03 00    ROL temp4
  333                       
  334                     
  335  06:D4DD  A2 00       LDX #$00
  336  06:D4DF            .moveUpTiles:
  337  06:D4DF  BD 00 00    LDA temp1, x
  338  06:D4E2  09 24       ORA #$24
  339  06:D4E4  9D 00 00    STA temp1, x
  340  06:D4E7  E8          INX
  341  06:D4E8  E0 04       CPX #$04
  342  06:D4EA  D0 F3       BNE .moveUpTiles
  343                       
  344                       
  345  06:D4EC  AD C1 00    LDA clueOffsetShift
  346  06:D4EF  18          CLC
  347  06:D4F0  69 04       ADC #$04
  348                     
  349  06:D4F2  8D C1 00    STA clueOffsetShift
  350                       ;;clue offset shift + 4, check if we went over puzle row length
  351  06:D4F5  38          SEC
  352  06:D4F6  ED 06 00    SBC temp7 ;;subtract 15
  353  06:D4F9  90 12       BCC .makeStrings
  354  06:D4FB  F0 10       BEQ .makeStrings
  355                       
  356  06:D4FD  8D C1 00    STA clueOffsetShift ;loop offset over
  357  06:D500  8D 05 00    STA temp6 ; length of second string
  358  06:D503  AD 04 00    LDA temp5
  359  06:D506  38          SEC
  360  06:D507  ED 05 00    SBC temp6 
  361  06:D50A  8D 04 00    STA temp5 ;length of first string 
  362                       
  363  06:D50D            .makeStrings:
  364                       
  365  06:D50D  A2 00       LDX #$00
  366                       
  367  06:D50F  AD 04 00    LDA temp5
  368  06:D512  F0 51       BEQ .makeSecondString
  369  06:D514  8A          TXA
  370  06:D515  48          PHA
  371                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp5
                          
       06:D516  A9 01       LDA #$01
       06:D518  8D 23 00    STA PPU_PendingWrite
       06:D51B  AD BE 00    LDA clue_draw_address+1
       06:D51E  20 3F D1    JSR WriteToPPUString
       06:D521  AD BD 00    LDA clue_draw_address
       06:D524  20 3F D1    JSR WriteToPPUString
       06:D527  A9 00       LDA #DRAW_HORIZONTAL
       06:D529  20 3F D1    JSR WriteToPPUString
       06:D52C  AD 04 00    LDA temp5 
       06:D52F  20 3F D1    JSR WriteToPPUString
                            
  372  06:D532  68          PLA
  373  06:D533  AA          TAX
  374                       
  375  06:D534            .firstStringLoop:
  376                       
  377  06:D534  8A          TXA 
  378  06:D535  48          PHA
  379  06:D536  BD 00 00    LDA temp1, x
  380  06:D539  20 3F D1    JSR WriteToPPUString
  381                       
  382  06:D53C  EE C0 00    INC clueLineIndex
  383  06:D53F  AD C0 00    LDA clueLineIndex
  384  06:D542  CD 07 00    CMP temp8
  385  06:D545  D0 04       BNE .continueLoop
  386  06:D547  68          PLA 
  387  06:D548  4C CC D5    JMP .leave
  388                       
  389  06:D54B            .continueLoop:
  390  06:D54B  68          PLA
  391  06:D54C  AA          TAX
  392  06:D54D  E8          INX
  393  06:D54E  EC 04 00    CPX temp5
  394  06:D551  D0 E1       BNE .firstStringLoop
  395                       
  396  06:D553  AD BD 00    LDA clue_draw_address
  397  06:D556  18          CLC
  398  06:D557  6D 04 00    ADC temp5
  399  06:D55A  8D BD 00    STA clue_draw_address
  400  06:D55D  AD BE 00    LDA clue_draw_address+1
  401  06:D560  69 00       ADC #$00
  402  06:D562  8D BE 00    STA clue_draw_address+1
  403                       
  404  06:D565            .makeSecondString:
  405                     
  406  06:D565  AD 05 00    LDA temp6
  407  06:D568  F0 62       BEQ .leave
  408                       
  409                       ;;loop draw address to next line
  410  06:D56A  AD BD 00    LDA clue_draw_address
  411  06:D56D  18          CLC
  412  06:D56E  6D 08 00    ADC tempx
  413  06:D571  8D BD 00    STA clue_draw_address
  414  06:D574  AD BE 00    LDA clue_draw_address+1
  415  06:D577  69 00       ADC #$00
  416  06:D579  8D BE 00    STA clue_draw_address+1
  417  06:D57C  8A          TXA
  418  06:D57D  48          PHA
  419                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp6
                          
       06:D57E  A9 01       LDA #$01
       06:D580  8D 23 00    STA PPU_PendingWrite
       06:D583  AD BE 00    LDA clue_draw_address+1
       06:D586  20 3F D1    JSR WriteToPPUString
       06:D589  AD BD 00    LDA clue_draw_address
       06:D58C  20 3F D1    JSR WriteToPPUString
       06:D58F  A9 00       LDA #DRAW_HORIZONTAL
       06:D591  20 3F D1    JSR WriteToPPUString
       06:D594  AD 05 00    LDA temp6 
       06:D597  20 3F D1    JSR WriteToPPUString
                            
  420  06:D59A  68          PLA 
  421  06:D59B  AA          TAX
  422                       
  423  06:D59C            .secondStringLoop:
  424                     
  425  06:D59C  8A          TXA
  426  06:D59D  48          PHA 
  427  06:D59E  BD 00 00    LDA temp1, x
  428  06:D5A1  20 3F D1    JSR WriteToPPUString
  429                       
  430  06:D5A4  EE C0 00    INC clueLineIndex
  431  06:D5A7  AD C0 00    LDA clueLineIndex
  432  06:D5AA  CD 07 00    CMP temp8
  433  06:D5AD  D0 04       BNE .continueSecondLoop
  434                       
  435  06:D5AF  68          PLA 
  436  06:D5B0  4C CC D5    JMP .leave
  437                       
  438  06:D5B3            .continueSecondLoop:
  439  06:D5B3  68          PLA
  440  06:D5B4  AA          TAX
  441  06:D5B5  E8          INX
  442  06:D5B6  E0 04       CPX #$04
  443  06:D5B8  D0 E2       BNE .secondStringLoop
  444                       
  445  06:D5BA  AD BD 00    LDA clue_draw_address
  446  06:D5BD  18          CLC
  447  06:D5BE  6D 05 00    ADC temp6
  448  06:D5C1  8D BD 00    STA clue_draw_address
  449  06:D5C4  AD BE 00    LDA clue_draw_address+1
  450  06:D5C7  69 00       ADC #$00
  451  06:D5C9  8D BE 00    STA clue_draw_address+1
  452                       
  453  06:D5CC            .leave:
  454  06:D5CC  20 7D C4    JSR PlayNoiseBlipSound
  455  06:D5CF  EE BF 00    INC clueTableIndex
  456  06:D5D2  60          RTS
  457                       
  458  06:D5D3            DrawTitle:
  459                     
  460                       ;; title draw address is stored ahead of time, along with title address
  461                       ;; we can use temp1 - 8 to handle this
  462  06:D5D3  A0 00       LDY #$00
  463  06:D5D5  B1 B1       LDA [title_address],y
  464  06:D5D7  4A          LSR A
  465  06:D5D8  8D 09 00    STA tempy
  466                       
  467  06:D5DB  AD B9 00    LDA title_draw_address
  468  06:D5DE  38          SEC 
  469  06:D5DF  ED 09 00    SBC tempy
  470  06:D5E2  8D B9 00    STA title_draw_address
  471  06:D5E5  AD BA 00    LDA title_draw_address+1
  472  06:D5E8  E9 00       SBC #$00
  473  06:D5EA  8D BA 00    STA title_draw_address+1
  474                       
  475                       MACROAddPPUStringEntryTablePtr title_draw_address+1, title_draw_address, #DRAW_HORIZONTAL, title_address
                           
       06:D5ED  A9 01       LDA #$01
       06:D5EF  8D 23 00    STA PPU_PendingWrite
       06:D5F2  AD BA 00    LDA title_draw_address+1
       06:D5F5  20 3F D1    JSR WriteToPPUString
       06:D5F8  AD B9 00    LDA title_draw_address
       06:D5FB  20 3F D1    JSR WriteToPPUString
       06:D5FE  A9 20       LDA #$20
       06:D600  09 00       ORA #DRAW_HORIZONTAL
       06:D602  20 3F D1    JSR WriteToPPUString
       06:D605  AD B1 00    LDA title_address
       06:D608  20 3F D1    JSR WriteToPPUString
       06:D60B  AD B2 00    LDA title_address+1
       06:D60E  20 3F D1    JSR WriteToPPUString
                           
  476                       
  477  06:D611            .leave:
  478  06:D611  60          RTS
  479                       
  480  06:D612            ApplyGameTimeToPPUString:
  481                     
  482  06:D612  8D 00 00    STA temp1
  483  06:D615  8E 01 00    STX temp2
  484                     
  485                       MACROAddPPUStringEntryRawData temp1, temp2, #DRAW_HORIZONTAL, #$05
                          
       06:D618  A9 01       LDA #$01
       06:D61A  8D 23 00    STA PPU_PendingWrite
       06:D61D  AD 00 00    LDA temp1
       06:D620  20 3F D1    JSR WriteToPPUString
       06:D623  AD 01 00    LDA temp2
       06:D626  20 3F D1    JSR WriteToPPUString
       06:D629  A9 00       LDA #DRAW_HORIZONTAL
       06:D62B  20 3F D1    JSR WriteToPPUString
       06:D62E  A9 05       LDA #$05 
       06:D630  20 3F D1    JSR WriteToPPUString
                            
  486  06:D633  AD 06 70    LDA GameTime+3
  487  06:D636  20 3F D1    JSR WriteToPPUString
  488  06:D639  AD 05 70    LDA GameTime+2
  489  06:D63C  20 3F D1    JSR WriteToPPUString
  490  06:D63F  A9 61       LDA #$61
  491  06:D641  20 3F D1    JSR WriteToPPUString
  492  06:D644  AD 04 70    LDA GameTime+1
  493  06:D647  20 3F D1    JSR WriteToPPUString
  494  06:D64A  AD 03 70    LDA GameTime
  495  06:D64D  20 3F D1    JSR WriteToPPUString
  496                       
  497  06:D650  60          RTS
  498                     
  499  06:D651            ClearLineDefs:
  500                     
  501  06:D651  20 20 20    .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
       06:D654  20 20 20  
       06:D657  20 20 20  
       06:D65A  20 20     
  502  06:D65C  0D 0D 0D    .db $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D
       06:D65F  0D 0D 0D  
       06:D662  0D 0D 0D  
       06:D665  0D 0D 0D  
       06:D668  0D 0D 0D  
       06:D66B  0D 0D     
  503  06:D66D  20 20       .db $20, $20
  504                       
  505  06:D66F            PuzzleSizes:
  506                       
  507  06:D66F  05 0A 0F    .db $05, $0A, $0F
  508                       
  509  06:D672            PuzzleImageSizes:
  510                     
  511                       ;.db $05, $0A, $0F
  512  06:D672  19 64 E1    .db $19, $64, $E1
  513                       
  514  06:D675            ImageDrawWrapOffsets:
  515                     
  516  06:D675  1B 16 11    .db $1B, $16, $11
  517                      
  518  06:D678            ImageTitleLowerHalfPos:
  519                      
  520  06:D678  70 22       .word $2270, $2313, $23B5
       06:D67A  13 23     
       06:D67C  B5 23     
#[1]   Picross.asm
   99                       
  100                       
  101                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  102                     ;;     NMI                  ;;
  103                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  104                     
#[2]   Routines/Common/NMI.asm
  105                       .include "Routines/Common/NMI.asm"
    1                      
    2  06:D67E            NMI:
    3                     
    4  06:D67E  48          PHA                              ;protect the registers
    5  06:D67F  8A          TXA
    6  06:D680  48          PHA
    7  06:D681  98          TYA
    8  06:D682  48          PHA
    9                       
   10  06:D683            nmi_started:
   11  06:D683  A9 00       LDA #$00
   12  06:D685  8D 03 20    STA OAM_LO      ; set the low byte (00) of the RAM address
   13  06:D688  A9 02       LDA #$02
   14  06:D68A  8D 14 40    STA OAM_HI       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:D68D  AD 10 00    LDA NMI_locks
   17  06:D690  F0 03       BEQ update_controllers
   18  06:D692  4C D2 D6    JMP WakeUp
   19                     
   20  06:D695            update_controllers:
   21                       
   22  06:D695  20 FC D6    JSR ReadControllers
   23  06:D698  20 7C D0    JSR ProcessPPUString
   24                       
   25                       
   26  06:D69B  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   27  06:D69D  8D 05 20    STA PPU_SCROLL
   28  06:D6A0  8D 05 20    STA PPU_SCROLL
   29                       
   30                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   31                       ; enable sprites, enable background, no clipping on left side 
   32  06:D6A3  20 99 D1    JSR UpdatePPUControl
   33                     
   34  06:D6A6            NMIUpdate:
   35                     
   36  06:D6A6  20 C6 D6    JSR StateNMIUpdate
   37                       
   38  06:D6A9  AD 1D 00    LDA PPU_Control
   39  06:D6AC  29 FC       AND #$FC
   40  06:D6AE  0D 21 00    ORA PPU_ScrollNT
   41  06:D6B1  8D 00 20    STA PPU_CTRL
   42                       
   43  06:D6B4  AD 1F 00    LDA PPU_ScrollX     ;;tell the ppu there is no background scrolling
   44  06:D6B7  8D 05 20    STA PPU_SCROLL
   45  06:D6BA  AD 20 00    LDA PPU_ScrollY
   46  06:D6BD  8D 05 20    STA PPU_SCROLL
   47                       
   48  06:D6C0  20 85 A1    jsr sound_play_frame 
   49  06:D6C3  4C D2 D6    JMP WakeUp
   50                     
   51  06:D6C6            StateNMIUpdate:
   52                     
   53                       MACROCallDynamicJump game_mode
                          
       06:D6C6  AD 0E 00    LDA game_mode
       06:D6C9  20 BD CF    JSR Dynamic_Jump
                                  
   54                     
   55  06:D6CC            NMIJumpTable:
   56                     
   57  06:D6CC  DD D6       .word UpdateTitleNMI
   58  06:D6CE  E1 D6       .word UpdateGameNMI
   59  06:D6D0  E2 D6       .word UpdateGameOverNMI
   60                     
   61  06:D6D2            WakeUp:
   62  06:D6D2  A9 00       LDA #$00
   63  06:D6D4  8D 0C 00    STA sleeping
   64                       
   65  06:D6D7  68          PLA             ;restore the registers
   66  06:D6D8  A8          TAY 
   67  06:D6D9  68          PLA
   68  06:D6DA  AA          TAX
   69  06:D6DB  68          PLA
   70                     
   71  06:D6DC  40          RTI             ; return from interrupt
   72                       
#[3]   Routines/NMI_States/UpdateTitleNMI.asm
   73                       .include "Routines/NMI_States/UpdateTitleNMI.asm"
    1  06:D6DD            UpdateTitleNMI:
    2                     
    3                       ;;load bank 0 for BG tiles, so we start with the right tile set
    4                       ;JSR ResetMapper
    5                       ;LDA #$01
    6                       ;JSR LoadCHRBankB
    7                     
    8                     
    9  06:D6DD  20 5F D1    JSR DetectSprite0
   10                     
   11                       ;JSR ResetMapper
   12                       ;LDA #$03
   13                       ;JSR LoadCHRBankB
   14                       
   15                     
   16                        
   17  06:D6E0  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameNMI.asm
   74                       .include "Routines/NMI_States/UpdateGameNMI.asm"
    1  06:D6E1            UpdateGameNMI:
    2  06:D6E1  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameOverNMI.asm
   75                       .include "Routines/NMI_States/UpdateGameOverNMI.asm"
    1  06:D6E2            UpdateGameOverNMI:
    2  06:D6E2  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/Common/ReadControllers.asm
   76                       .include "Routines/Common/ReadControllers.asm"
    1  06:D6E3            ReadControllersSafe:
    2  06:D6E3  8A                TXA
    3  06:D6E4  48                PHA
    4  06:D6E5  98                TYA
    5  06:D6E6  48                PHA
    6                     
    7  06:D6E7            .firstRead:
    8  06:D6E7  20 FC D6          JSR ReadControllers
    9  06:D6EA            .reRead:
   10  06:D6EA  AD 1A 00          LDA gamepad
   11  06:D6ED  48                PHA
   12  06:D6EE  20 FC D6          JSR ReadControllers
   13  06:D6F1  68                PLA 
   14  06:D6F2  CD 1A 00          CMP gamepad
   15  06:D6F5  D0 F3             BNE .reRead
   16                             
   17  06:D6F7  68                PLA
   18  06:D6F8  A8                TAY
   19  06:D6F9  68                PLA
   20  06:D6FA  AA                TAX     
   21  06:D6FB  60                RTS
   22                             
   23  06:D6FC            ReadControllers:
   24                     
   25  06:D6FC  A9 01             LDA #$01        ;load 1
   26  06:D6FE  8D 16 40          STA $4016       ; turn latch on
   27                             ;STA gamepad2
   28  06:D701  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   29  06:D702  8D 16 40          STA $4016       ;turn latch off
   30                             
   31  06:D705  A9 80             LDA #$80
   32  06:D707  8D 1A 00          STA gamepad
   33                     
   34  06:D70A            .readControllerABytesLoop:
   35  06:D70A  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   36  06:D70D  29 03             AND #%00000011  ;acc: %00000001 c: 0
   37  06:D70F  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   38                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   39  06:D711  6E 1A 00          ROR gamepad             ;gamepad: %11000000
   40                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   41  06:D714  90 F4             BCC .readControllerABytesLoop
   42                     
   43                             
   44  06:D716            .finishARead:
   45                             ;;comapre last to current, find the pressed buttons this frame
   46  06:D716  AD 1B 00          LDA gamepadLast
   47  06:D719  49 FF             EOR #$FF
   48  06:D71B  2D 1A 00          AND gamepad
   49  06:D71E  8D 1C 00          STA gamepadPressed
   50                             
   51                             
   52  06:D721  AD 1A 00          LDA gamepad
   53  06:D724  8D 1B 00          STA gamepadLast
   54                             
   55  06:D727  60                RTS
#[2]   Routines/Common/NMI.asm
#[1]   Picross.asm
  106                       
  107                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  108                     ;;    AUDIO                 ;;
  109                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  110                         ;.include "External/sound_engine.asm"
  111                             ;;test out DPCM here?
  112                     
  113  06:D728                    .ds (64-*)&63
  114  06:D740            sample0:                                                ;MOTHER bass kick
  115  06:D740                    .incbin "DMC/sample0.dmc"
  116  06:D7B1            sample0End:
  117  06:D7B1                    .ds (64-*)&63
  118  06:D7C0            sample1:                                                ;MOTHER snare
  119  06:D7C0                    .incbin "DMC/sample1.dmc"
  120  06:D8B1            sample1End:
  121                     
  122  06:D8B1            SampleStart:
  123  06:D8B1  5D                .db low(sample0 >> 6)
  124  06:D8B2  5F                .db low(sample1 >> 6)
  125                     
  126  06:D8B3            SampleLength:
  127  06:D8B3  07                .db low((sample0End - sample0) >> 4)
  128  06:D8B4  0F                .db low((sample1End - sample1) >> 4)
  129                     
  130                     ;;**************************;;
  131                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  132                     ;;       PRG ROM DATA       ;;
  133                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  134                     ;;**************************;; 
  135                       
  136           0007        .bank 7
  137           E000        .org $E000
  138                     
#[2]   NameTables/Tables.asm
  139                       .include "NameTables/Tables.asm"
    1  07:E000            Palettes:
    2                     
    3  07:E000  1C E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E002  3C E0     
       07:E004  5C E0     
    4                     
    5  07:E006            NameTables:
    6                     
    7  07:E006  12 E0       .word Title_Screens, Game_Screens, GameOver_Screens
       07:E008  14 E0     
       07:E00A  1A E0     
    8                       
    9  07:E00C            NameTables2:
   10                     
   11  07:E00C  7C E4       .word Title_Second, Blank_Screen, Blank_Screen
       07:E00E  7C F8     
       07:E010  7C F8     
   12                       
   13  07:E012            Title_Screens:
   14                     
   15  07:E012  7C E0       .word Title_Screen
   16                       
   17  07:E014            Game_Screens:
   18                     
   19  07:E014  7C E8       .word Game_5, Game_10, Game_15
       07:E016  7C EC     
       07:E018  7C F0     
   20                       
   21  07:E01A            GameOver_Screens:
   22                     
   23  07:E01A  7C F4       .word GameOver_Screen
   24                     
   25  07:E01C            Title_Palette:
   26                     
   27  07:E01C              .incbin "NameTables/Title_PAL.pal"
   28  07:E02C              .incbin "NameTables/Title_PAL.pal"
   29                       
   30  07:E03C            Game_Palette:
   31                     
   32  07:E03C              .incbin "NameTables/Game_PAL.pal"
   33  07:E04C              .incbin "NameTables/Game_PAL.pal"
   34                       
   35  07:E05C            GameOver_Palette:
   36                     
   37  07:E05C              .incbin "NameTables/GameOver_PAL.pal"
   38  07:E06C              .incbin "NameTables/GameOver_PAL.pal"
   39                       
   40  07:E07C            Title_Screen:
   41                     
   42  07:E07C              .incbin "NameTables/Title_NT.nam"
   43                       
   44  07:E47C            Title_Second:
   45                     
   46  07:E47C              .incbin "NameTables/Title_PuzzMen_NT.nam"
   47                       
   48  07:E87C            Game_5: 
   49                     
   50  07:E87C              .incbin "NameTables/Game_NT_5.nam"
   51                       
   52  07:EC7C            Game_10:
   53  07:EC7C              .incbin "NameTables/Game_NT_10.nam"
   54                       
   55  07:F07C            Game_15:
   56  07:F07C              .incbin "NameTables/Game_NT.nam"
   57                       
   58  07:F47C            GameOver_Screen:
   59                     
   60  07:F47C              .incbin "NameTables/GameOver_NT.nam"
   61                       
   62  07:F87C            Blank_Screen:
   63                     
   64  07:F87C              .incbin "NameTables/Blank_NT.nam"
   65                     
   66  07:FC7C            Pause_Menu:
   67  07:FC7C  28 2A 2A    .db $28,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$29
       07:FC7F  2A 2A 2A  
       07:FC82  2A 2A 2A  
       07:FC85  2A 2A 2A  
       07:FC88  29        
   68  07:FC89  2B 24 1C    .db $2b,$24,$1c,$0a,$1f,$0e,$62,$0e,$21,$12,$1d,$24,$3b
       07:FC8C  0A 1F 0E  
       07:FC8F  62 0E 21  
       07:FC92  12 1D 24  
       07:FC95  3B        
   69  07:FC96  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FC99  24 24 24  
       07:FC9C  24 24 24  
       07:FC9F  24 24 24  
       07:FCA2  3B        
   70  07:FCA3  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FCA6  24 24 24  
       07:FCA9  24 24 24  
       07:FCAC  24 24 24  
       07:FCAF  3B        
   71  07:FCB0  2B 24 24    .db $2b,$24,$24,$22,$0e,$1c,$24,$24,$17,$18,$24,$24,$3b
       07:FCB3  22 0E 1C  
       07:FCB6  24 24 17  
       07:FCB9  18 24 24  
       07:FCBC  3B        
   72  07:FCBD  38 3A 3A    .db $38,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$39
       07:FCC0  3A 3A 3A  
       07:FCC3  3A 3A 3A  
       07:FCC6  3A 3A 3A  
       07:FCC9  39        
   73                     
   74  07:FCCA            EndScreens:
   75                     
   76  07:FCCA  CE FC       .word PuzzleClearLines, PuzzleSavedLines
       07:FCCC  FD FC     
   77                       
   78  07:FCCE            PuzzleClearLines:
   79                     
   80  07:FCCE  EA 20       .db $EA, $20
   81  07:FCD0  0D 19 1E    .db $0D, $19,$1e,$23,$23,$15,$0e,$24,$0c,$15,$0e,$0a,$1b,$64
       07:FCD3  23 23 15  
       07:FCD6  0E 24 0C  
       07:FCD9  15 0E 0A  
       07:FCDC  1B 64     
   82  07:FCDE  07 1D 12    .db $07, $1d,$12,$16,$0e,$61,$24,$24 ;print the time here as a separate call, similar to how it's printed in update game at 2131
       07:FCE1  16 0E 61  
       07:FCE4  24 24     
   83  07:FCE6  0C 17 0E    .db $0C, $17,$0e,$21,$1d,$24,$19,$1e,$23,$23,$15,$0e,$63
       07:FCE9  21 1D 24  
       07:FCEC  19 1E 23  
       07:FCEF  23 15 0E  
       07:FCF2  63        
   84  07:FCF3  09 24 24    .db $09, $24,$24,$22,$0e,$1c,$24,$24,$17,$18
       07:FCF6  22 0E 1C  
       07:FCF9  24 24 17  
       07:FCFC  18        
   85                     
   86  07:FCFD            PuzzleSavedLines:
   87                       
   88  07:FCFD  2A 21       .db $2A, $21 
   89  07:FCFF  0D 19 1E    .db $0D, $19,$1e,$23,$23,$15,$0e,$24,$1c,$0a,$1f,$0e,$0d,$64
       07:FD02  23 23 15  
       07:FD05  0E 24 1C  
       07:FD08  0A 1F 0E  
       07:FD0B  0D 64     
   90                       
   91  07:FD0D            SelectDefaultName:
   92                      
   93  07:FD0D  47 26       .db $47, $26 
   94  07:FD0F  10 63 63    .db $10, $63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63
       07:FD12  63 63 63  
       07:FD15  63 63 63  
       07:FD18  63 63 63  
       07:FD1B  63 63 63  
       07:FD1E  63 63     
   95                     
   96  07:FD20            SelectDefaultTime:
   97                     
   98  07:FD20  8F 26       .db $8F, $26 
   99  07:FD22            DefaultTimeString:
  100  07:FD22  05 60 60    .db $05, $60,$60,$61,$60,$60
       07:FD25  61 60 60  
  101                     
  102                     
  103                      
  104                             
#[1]   Picross.asm
#[2]   Sprites/Sprites.asm
  140                       .include "Sprites/Sprites.asm"
    1                     
    2                     ;;Byte0
    3                     ;;Y position of top of sprite
    4                     ;;Sprite data is delayed by one scanline; 
    5                     ;;you must subtract 1 from the sprite's 
    6                     ;;Y coordinate before writing it here. 
    7                     ;;Hide a sprite by moving it down offscreen, 
    8                     ;;by writing any values between #$EF-#$FF here. 
    9                     ;;Sprites are never displayed on the first line of the picture, 
   10                     ;;and it is impossible to place a sprite partially off the top of the screen.
   11                     
   12                     ;;Byte 1
   13                     ;;Tile index number
   14                     ;;For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of PPUCTRL ($2000).
   15                     ;;For 8x16 sprites (bit 5 of PPUCTRL set), the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
   16                     ;;76543210
   17                     ;;||||||||
   18                     ;;|||||||+- Bank ($0000 or $1000) of tiles
   19                     ;;+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
   20                     
   21                     ;;Byte 2
   22                     ;;Attributes
   23                     ;;76543210
   24                     ;;||||||||
   25                     ;;||||||++- Palette (4 to 7) of sprite
   26                     ;;|||+++--- Unimplemented (read 0)
   27                     ;;||+------ Priority (0: in front of background; 1: behind background)
   28                     ;;|+------- Flip sprite horizontally
   29                     ;;+-------- Flip sprite vertically
   30                     
   31                     ;;Byte 3
   32                     ;;X position of left side of sprite.
   33                     ;;X-scroll values of $F9-FF results in parts of the 
   34                     ;;sprite to be past the right edge of the screen, thus invisible.
   35                     ;;It is not possible to have a sprite partially visible on the left edge. 
   36                     ;;Instead, left-clipping through PPUMASK ($2001) can be used to simulate this effect.
   37  07:FD28            Sprites:
   38  07:FD28  2E FD             .word Title_Sprites, Game_Sprites, GameOver_Sprites
       07:FD2A  37 FD     
       07:FD2C  40 FD     
   39                     
   40  07:FD2E            Title_Sprites:
   41  07:FD2E  02            .db $02
   42  07:FD2F  85 00 00          .db $85,$00,$00,$E8
       07:FD32  E8        
   43  07:FD33  A0 01 00          .db $A0,$01,$00,$60
       07:FD36  60        
   44  07:FD37            Game_Sprites:
   45  07:FD37  02            .db $02
   46  07:FD38  62 02 03          .db $62,$02,$03,$72
       07:FD3B  72        
   47  07:FD3C  5F FF 00          .db $5F,$FF,$00,$60
       07:FD3F  60        
   48  07:FD40            GameOver_Sprites:
   49  07:FD40  01                .db $01
   50  07:FD41  67 FF 00          .db $67,$FF,$00,$58
       07:FD44  58        
#[1]   Picross.asm
  141                     
  142           FFFA        .org $FFFA     ;first of the three vectors starts here
  143  07:FFFA  7E D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  144                                        ;processor will jump to the label NMI:
  145  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  146                                        ;to the label RESET:
  147  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  148                       
  149                     ;;**************************;;
  150                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  151                     ;;      CHR ROM DATA        ;;
  152                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  153                     ;;**************************;; 
  154                       
  155           0008        .bank 8
  156           0000        .org $0000
  157  08:0000              .incbin "CHRROM/Bank0.chr"   ;includes 8KB graphics file from SMB1
  158                       
  159           0009        .bank 9
  160           0000        .org $0000
  161  09:0000              .incbin "CHRROM/Bank1.chr"
  162                       
  163           000A        .bank 10
  164           0000        .org $0000
  165  0A:0000              .incbin "CHRROM/Bank2.chr"
  166                       
  167           000B        .bank 11
  168           0000        .org $0000
  169  0B:0000              .incbin "CHRROM/Bank3.chr"
