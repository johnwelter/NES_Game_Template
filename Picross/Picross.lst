#[1]   Picross.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/Defines.asm
   14                       .include "Defines/Defines.asm"
    1                     ;; define 0 page stuff here, and SRAM stuff if we have it
    2                     
    3           0000        .rsset $0000
#[3]   Defines/GeneralVars.asm
    4                       .include "Defines/GeneralVars.asm"
    1           0000      temp1                   .rs 1
    2           0001      temp2                   .rs 1
    3           0002      temp3                   .rs 1
    4           0003      temp4                   .rs 1
    5           0004      tempx                   .rs 1
    6           0005      tempy                   .rs 1
    7           0006      time                    .rs 1
    8           0007      sleeping                .rs 1
    9           0008      game_mode               .rs 1
   10           0009      mode_state              .rs 1
   11           000A      NMI_locks               .rs 1
   12           000B      game_locks              .rs 1
   13           000C      pointer_address .rs 2
   14           000E      table_address   .rs 2
   15           0010      jump_address    .rs 2
   16                     
   17                     ;game modes
   18           0000      TITLE_IDX = $00
   19           0001      GAME_IDX = $01
   20           0002      GAMEOVER_IDX = $02
   21                     
   22                     ;locks for input and rendering
   23           0001      BGLOAD_NMI_LOCK = %00000001
   24           0001      EFFECT_GAME_LOCK = %00000001
   25                     
   26                     
   27                     
#[2]   Defines/Defines.asm
#[3]   Defines/ControllerVars.asm
    5                       .include "Defines/ControllerVars.asm"
    1           0010      GAMEPAD_UP = $10
    2           0020      GAMEPAD_DOWN = $20
    3           0040      GAMEPAD_LEFT = $40
    4           0080      GAMEPAD_RIGHT = $80
    5           0001      GAMEPAD_A = $01
    6           0002      GAMEPAD_B = $02
    7           0004      GAMEPAD_SELECT = $04
    8           0008      GAMEPAD_START = $08
    9                     
   10           00C0      GAMEPAD_HORI = $C0
   11           0030      GAMEBAD_VERT = $30
   12           00F0      GAMEPAD_MOVE = $F0
   13                     
   14           0003      GAMEPAD_AB = $03
   15                     
   16           0012      gamepad                 .rs 1
   17           0013      gamepadLast     .rs 1
   18           0014      gamepadPressed  .rs 1
#[2]   Defines/Defines.asm
#[3]   Defines/PPUVariables.asm
    6                       .include "Defines/PPUVariables.asm"
    1           0015      PPU_PendingWrite        .rs 1
    2           0016      PPU_StringIdx           .rs 1
    3           0017      PPU_String                      .rs 32
    4                     
    5           0020      PPU_STRINGMAX = $20 ;up to size of a full nametable, I think
    6                     
    7           0000      SPRITE_YPOS = $00
    8           0003      SPRITE_XPOS = $03
    9           0200      SPRITE_DATA = $0200
   10                     
   11           2000      PPU_CTRL = $2000
   12           2001      PPU_MASK = $2001
   13           2002      PPU_STATUS = $2002
   14           2003      OAM_LO = $2003
   15           2004      OAM_DATA = $2004
   16           2005      PPU_SCROLL = $2005
   17           2006      PPU_ADDR = $2006
   18           2007      PPU_DATA = $2007
   19           4014      OAM_HI = $4014
   20                     
   21           0080      DRAW_VERTICAL = $80
   22           0000      DRAW_HORIZONTAL = $00
   23                     
   24           0040      SPRITE_0_MASK = %01000000
#[2]   Defines/Defines.asm
#[3]   Defines/MapperVars.asm
    7                       .include "Defines/MapperVars.asm"
    1           0037      mapper_address  .rs 2
    2           0039      currentCHRBankA .rs 1
    3           003A      currentCHRBankB .rs 1
    4           003B      currentPRGBank  .rs 1
    5           003C      mapperDebugVar  .rs 1
    6                     
    7                     
#[2]   Defines/Defines.asm
#[3]   Defines/GameVariables.asm
    8                       .include "Defines/GameVariables.asm"
    1           003D      puzzle_address          .rs 2
    2           003F      clues_address           .rs 2
    3           0041      clue_start_address      .rs 2
    4           0043      clue_draw_address       .rs 2
    5           0045      clueTableIndex          .rs 1
    6           0046      clueLineIndex           .rs 1
    7           0047      clueOffsetShift         .rs 1
    8           0048      clueDrawOffset          .rs 2
    9           004A      clueDrawAdd                     .rs 1
   10           004B      clueDrawDecSize         .rs 1
   11           004C      clueParity                      .rs 1
   12           004D      mouse_location          .rs 2
   13           004F      mouse_index                     .rs 2
   14           0051      currentPaintTile        .rs 1
   15           0052      solutionCount           .rs 1
   16           0053      nonSolutionCount        .rs 1
   17                     
#[2]   Defines/Defines.asm
    9                     ;; 0100 is the stack
   10                     ;; 0200 is sprite ram
   11           0300        .rsset $0300
   12           0400        .rsset $0400
   13           0500        .rsset $0500
   14           0600        .rsset $0600
   15           0700        .rsset $0700
   16           6000        .rsset $6000
#[3]   Defines/SaveVariables.asm
   17                       .include "Defines/SaveVariables.asm"
    1                     
#[2]   Defines/Defines.asm
#[3]   Defines/ScreenStateVariables.asm
   18                       .include "Defines/ScreenStateVariables.asm"
    1           6000      Screen_Copy             .rs 1024
    2           6400      Palette_Copy    .rs 32
#[2]   Defines/Defines.asm
   19                     
#[1]   Picross.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/PPUMacros.asm
    3                             .include "Macros/PPUMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetPPUControl .macro
    6                     
    7                       LDA #\1  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    8                       STA PPU_CTRL
    9                       LDA #\2   ; enable sprites, enable background, no clipping on left side
   10                       STA PPU_MASK
   11                             
   12                       .endm
   13                       
   14                     MACROSetPPUAddress .macro
   15                     
   16                       LDA PPU_STATUS             ; read PPU status to reset the high/low latch
   17                       LDA #HIGH(\1)
   18                       STA PPU_ADDR            ; write the high byte of $2000 address
   19                       LDA #LOW(\1)
   20                       STA PPU_ADDR           ; write the low byte of $2000 address
   21                       
   22                       .endm
   23                       
   24                     
   25                     MACROAddPPUStringEntryRawData .macro
   26                     
   27                       LDA #$01
   28                       STA PPU_PendingWrite
   29                       LDA \1
   30                       JSR WriteToPPUString
   31                       LDA \2
   32                       JSR WriteToPPUString
   33                       LDA \3
   34                       JSR WriteToPPUString
   35                       LDA \4
   36                       JSR WriteToPPUString
   37                       
   38                       .endm
   39                       
   40                     MACROAddPPUStringEntryTable .macro
   41                      
   42                       LDA #$01
   43                       STA PPU_PendingWrite
   44                       LDA \1
   45                       JSR WriteToPPUString
   46                       LDA \2
   47                       JSR WriteToPPUString
   48                       LDA #$40
   49                       ORA \3
   50                       JSR WriteToPPUString
   51                       LDA #LOW(\4)
   52                       JSR WriteToPPUString
   53                       LDA #HIGH(\4)
   54                       JSR WriteToPPUString
   55                      
   56                       .endm
   57                     
   58                     
#[2]   Macros/Macros.asm
#[3]   Macros/CallDynamicJump.asm
    4                             .include "Macros/CallDynamicJump.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROCallDynamicJump .macro
    6                     
    7                       LDA \1
    8                       JSR Dynamic_Jump
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetDoubleIndex.asm
    5                             .include "Macros/GetDoubleIndex.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = index to double
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROGetDoubleIndex .macro
    5                     
    6                             LDA \1
    7                             ASL A
    8                             TAY
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetLabelPointer.asm
    6                             .include "Macros/GetLabelPointer.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label we want address of
    3                     ;; \2 = address to store address to
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROGetLabelPointer .macro
    6                     
    7                             LDA #HIGH(\1)
    8                             LDX #LOW(\1)
    9                             
   10                             STX \2
   11                             STA \2+1
   12                             
   13                       .endm
   14                       
   15                     MACROGetPointer .macro
   16                     
   17                             LDA \1
   18                             STA \2
   19                             LDA \1+1
   20                             STA \2+1
   21                     
   22                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/FlagMacros.asm
    7                             .include "Macros/FlagMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetFlags .macro
    6                     
    7                       LDA \1
    8                       ORA #\2
    9                       STA \1
   10                             
   11                       .endm
   12                       
   13                     MACROClearFlags .macro
   14                     
   15                       LDA #\2
   16                       EOR #$FF
   17                       AND \1  
   18                       STA \1
   19                     
   20                       .endm
#[2]   Macros/Macros.asm
#[1]   Picross.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1           0000        .bank 0
    2           8000        .org $8000
    3                       
#[3]   Puzzles/cat.asm
    4                       .include "Puzzles/cat.asm"
    1  00:8000            cat:
    2  00:8000  03 7E 00    .db $03, $7E, $00, $0A
       00:8003  0A        
    3  00:8004  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $47, $C4, $7B, $BC, $7F, $FC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       00:8007  60 1E F0  
       00:800A  3E F8 3F  
       00:800D  F8 7F FC  
       00:8010  7F FC 47  
       00:8013  C4 7B BC  
       00:8016  7F FC 7C  
       00:8019  7C 76 DC  
       00:801C  39 38 1F  
       00:801F  F0 00 00  
    4  00:8022  00 FF 70    .db $00, $FF, $70, $FF, $54, $FF, $65, $FF, $23, $60, $FF, $13, $70, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $70, $FF, $23, $60, $FF, $65, $FF, $54, $FF, $70, $FF, $00, $FF
       00:8025  FF 54 FF  
       00:8028  65 FF 23  
       00:802B  60 FF 13  
       00:802E  70 FF 11  
       00:8031  80 FF 26  
       00:8034  FF 11 80  
       00:8037  FF 13 70  
       00:803A  FF 23 60  
       00:803D  FF 65 FF  
       00:8040  54 FF 70  
       00:8043  FF 00 FF  
    5  00:8046  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $15, $10, $FF, $43, $40, $FF, $D0, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       00:8049  FF 44 FF  
       00:804C  55 FF B0  
       00:804F  FF D0 FF  
       00:8052  D0 FF 15  
       00:8055  10 FF 43  
       00:8058  40 FF D0  
       00:805B  FF 55 FF  
       00:805E  32 23 FF  
       00:8061  31 30 FF  
       00:8064  90 FF 00  
       00:8067  FF        
    6  00:8068            catImage:
    7  00:8068  55 55 55   .db $55, $55, $55, $55, $56, $95, $A5, $55, $6A, $9A, $A5, $56, $AA, $6A, $A5, $5A, $AA, $AA, $95, $AA, $66, $6A, $96, $AA, $9A, $AA, $58, $0A, $E8, $09, $6A, $8F, $CA, $A5, $9A, $FF, $E9, $96, $AF, $57, $EA, $59, $CF, $7C, $D9, $5F, $C3, $0F, $D5, $5F, $FF, $FD, $55, $55, $55, $55, $04, $FF
       00:806B  55 56 95  
       00:806E  A5 55 6A  
       00:8071  9A A5 56  
       00:8074  AA 6A A5  
       00:8077  5A AA AA  
       00:807A  95 AA 66  
       00:807D  6A 96 AA  
       00:8080  9A AA 58  
       00:8083  0A E8 09  
       00:8086  6A 8F CA  
       00:8089  A5 9A FF  
       00:808C  E9 96 AF  
       00:808F  57 EA 59  
       00:8092  CF 7C D9  
       00:8095  5F C3 0F  
       00:8098  D5 5F FF  
       00:809B  FD 55 55  
       00:809E  55 55 04  
       00:80A1  FF        
    8  00:80A2            catName:
    9  00:80A2  0C 0A 1D    .db $0C, $0A, $1D, $FF
       00:80A5  FF        
#[2]   Banks/Bank0.asm
    5                     
    6                     
    7           0001        .bank 1
    8           A000        .org $A000
    9                       
   10  01:A000  00 80       .word cat
   11                       
   12           BFFA        .org $BFFA     ;first of the three vectors starts here
   13  01:BFFA  38 C6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   14                                        ;processor will jump to the label NMI:
   15  01:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   16                                        ;to the label RESET:
   17  01:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
    4  02:8000            TestBankB:
    5  02:8000  A9 02             LDA #$02
    6  02:8002  8D 3C 00          STA mapperDebugVar
    7  02:8005  60                RTS
    8                     
    9           0003        .bank 3
   10           A000        .org $A000
   11  03:A000  AD 02 00    LDA $02
   12                     
   13           BFFA        .org $BFFA     ;first of the three vectors starts here
   14  03:BFFA  38 C6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   15                                        ;processor will jump to the label NMI:
   16  03:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   17                                        ;to the label RESET:
   18  03:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
    4  04:8000            TestBankC:
    5  04:8000  A9 03             LDA #$03
    6  04:8002  8D 3C 00          STA mapperDebugVar
    7  04:8005  60                RTS
    8                     
    9           0005        .bank 5
   10           A000        .org $A000
   11  05:A000  AD 03 00    LDA $03
   12                     
   13           BFFA        .org $BFFA     ;first of the three vectors starts here
   14  05:BFFA  38 C6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   15                                        ;processor will jump to the label NMI:
   16  05:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   17                                        ;to the label RESET:
   18  05:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Common/Init.asm
   34                       .include "Routines/Common/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 F5 C4    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 F9 C4    JSR SetMapperControls
   34                       
   35  06:C040  20 36 C5    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   Picross.asm
   35                     
   36  06:C048  A9 00       LDA #TITLE_IDX
   37  06:C04A  20 0F C3    JSR ChangeGameMode
   38                       
   39                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   40                       ; enable sprites, enable background, no clipping on left side
   41                       MACROSetPPUControl %10010000, %00011110
                          
       06:C04D  A9 90       LDA #%10010000  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
       06:C04F  8D 00 20    STA PPU_CTRL
       06:C052  A9 1E       LDA #%00011110   ; enable sprites, enable background, no clipping on left side
       06:C054  8D 01 20    STA PPU_MASK
                                  
   42                     
   43                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   44                     ;;     Main Program         ;;
   45                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   46                     
   47  06:C057            Forever:
   48                     
   49  06:C057  EE 07 00    INC sleeping
   50                     
   51  06:C05A            .loop
   52  06:C05A  AD 07 00    LDA sleeping
   53  06:C05D  D0 FB       BNE .loop
   54                       
   55  06:C05F  20 68 C0    JSR GameLoop
   56  06:C062  EE 06 00    INC time
   57                     
   58  06:C065  4C 57 C0    JMP Forever     ;jump back to Forever, infinite loop
   59                       
   60                     ;; dynamic jump table
   61                     
   62  06:C068            GameLoop:
   63                     
   64                       MACROCallDynamicJump game_mode
                          
       06:C068  AD 08 00    LDA game_mode
       06:C06B  20 91 C3    JSR Dynamic_Jump
                                  
   65                       ;; we'll pop the return address here as the table index, so 
   66                       ;; the routine we pick will return us to whatever called Game Loop
   67                       ;; when it returns
   68                     
   69  06:C06E            GameLoopJumpTable:
   70                     
   71  06:C06E  74 C0       .word UpdateTitle
   72  06:C070  84 C0       .word UpdateGame
   73  06:C072  FF C2       .word UpdateGameOver
   74                       
   75                     
   76                       ;;RTS is called in the subroutine
   77                     
   78                       
#[2]   Routines/Game_States/UpdateTitle.asm
   79                       .include "Routines/Game_States/UpdateTitle.asm"
    1  06:C074            UpdateTitle:
    2                     
    3  06:C074  AD 0A 00    LDA NMI_locks
    4  06:C077  D0 0A       BNE .noInputDetected
    5                     
    6  06:C079  AD 14 00    LDA gamepadPressed
    7  06:C07C  F0 05       BEQ .noInputDetected
    8                       
    9  06:C07E  A9 01         LDA #GAME_IDX
   10  06:C080  20 0F C3          JSR ChangeGameMode
   11                      
   12  06:C083            .noInputDetected:
   13                      
   14  06:C083  60          RTS
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGame.asm
   80                       .include "Routines/Game_States/UpdateGame.asm"
    1                     ;;VERT_CLUES = $206E
    2                     ;;HORI_CLUES = $2145
    3                     
    4           214E      VERT_CLUES = $214E
    5           218C      HORI_CLUES = $218C
    6                     
    7                     ;;this will change with puzzle sizes
    8           005A      VERT_MIN = $5A ;12 - 1
    9           00DA      VERT_MAX = $DA
   10           006A      HORI_MIN = $6A ;14 - 1
   11           00EA      HORI_MAX = $EA
   12                     
   13           618E      MOUSE_START = $618E
   14                     
   15  06:C084            UpdateGame:
   16                     
   17  06:C084  AD 0A 00    LDA NMI_locks
   18  06:C087  F0 01       BEQ .unlocked
   19                       
   20  06:C089  60          RTS
   21                       
   22  06:C08A            .unlocked:
   23                     
   24  06:C08A  20 8E C0    JSR DoUpdateGame
   25  06:C08D  60          RTS
   26                       
   27  06:C08E            DoUpdateGame:
   28                     
   29  06:C08E  AD 09 00    LDA mode_state
   30  06:C091  20 91 C3    JSR Dynamic_Jump
   31                       
   32  06:C094            UpdateGameJumpTable:
   33                     
   34  06:C094  9E C0       .word UpdateGameInit
   35  06:C096  F9 C0       .word UpdateDrawVertClues
   36  06:C098  21 C1       .word UpdateDrawHoriClues
   37  06:C09A  2A C1       .word UpdateGamePlay
   38  06:C09C  64 C2       .word UpdateGameExit
   39                     
   40  06:C09E            UpdateGameInit:
   41                     
   42                       ;; get the puzzle table in the puzzle address
   43                       MACROGetLabelPointer $A000, table_address
                          
       06:C09E  A9 A0             LDA #HIGH($A000)
       06:C0A0  A2 00             LDX #LOW($A000)
                                  
       06:C0A2  8E 0E 00          STX table_address
       06:C0A5  8D 0F 00          STA table_address+1
                                  
   44                       MACROGetDoubleIndex #$00
                          
       06:C0A8  A9 00             LDA #$00
       06:C0AA  0A                ASL A
       06:C0AB  A8                TAY
                                  
   45  06:C0AC  20 B7 C3    JSR GetTableAtIndex
   46                       MACROGetPointer table_address, puzzle_address
                          
       06:C0AF  AD 0E 00          LDA table_address
       06:C0B2  8D 3D 00          STA puzzle_address
       06:C0B5  AD 0F 00          LDA table_address+1
       06:C0B8  8D 3E 00          STA puzzle_address+1
                          
   47                       MACROGetLabelPointer MOUSE_START, mouse_location
                          
       06:C0BB  A9 61             LDA #HIGH(MOUSE_START)
       06:C0BD  A2 8E             LDX #LOW(MOUSE_START)
                                  
       06:C0BF  8E 4D 00          STX mouse_location
       06:C0C2  8D 4E 00          STA mouse_location+1
                                  
   48                       
   49                       ;;for clues, we need to get past the header- for a 15x15 puzzle, that's 34 bytes ahead
   50  06:C0C5  AD 3D 00    LDA puzzle_address
   51  06:C0C8  18          CLC
   52  06:C0C9  69 22       ADC #34
   53  06:C0CB  8D 3F 00    STA clues_address
   54  06:C0CE  A9 00       LDA #$00
   55  06:C0D0  6D 3E 00    ADC puzzle_address+1
   56  06:C0D3  8D 40 00    STA clues_address+1
   57                     
   58  06:C0D6  A9 00       LDA #$00
   59  06:C0D8  8D 45 00    STA clueTableIndex
   60  06:C0DB  8D 46 00    STA clueLineIndex
   61  06:C0DE  8D 4C 00    STA clueParity
   62  06:C0E1  8D 47 00    STA clueOffsetShift
   63                       
   64  06:C0E4  A9 20       LDA #$20
   65  06:C0E6  8D 4A 00    STA clueDrawAdd
   66                        
   67                       MACROGetLabelPointer VERT_CLUES, clue_start_address
                          
       06:C0E9  A9 21             LDA #HIGH(VERT_CLUES)
       06:C0EB  A2 4E             LDX #LOW(VERT_CLUES)
                                  
       06:C0ED  8E 41 00          STX clue_start_address
       06:C0F0  8D 42 00          STA clue_start_address+1
                                  
   68  06:C0F3  20 C4 C5    JSR ResetClueDrawAddress
   69                         
   70  06:C0F6  EE 09 00    INC mode_state
   71                     
   72  06:C0F9            UpdateDrawVertClues:
   73                       
   74  06:C0F9  20 4C C5    JSR PopulateClues
   75  06:C0FC  90 22       BCC .leave
   76                       
   77  06:C0FE            .changeModeState:
   78                     
   79  06:C0FE  A9 00       LDA #$00
   80  06:C100  8D 46 00    STA clueLineIndex
   81  06:C103  8D 4C 00    STA clueParity
   82                       
   83  06:C106  A9 05       LDA #$05
   84  06:C108  8D 47 00    STA clueOffsetShift
   85                       
   86  06:C10B  A9 01       LDA #$01
   87  06:C10D  8D 4A 00    STA clueDrawAdd
   88                        
   89                       MACROGetLabelPointer HORI_CLUES, clue_start_address
                          
       06:C110  A9 21             LDA #HIGH(HORI_CLUES)
       06:C112  A2 8C             LDX #LOW(HORI_CLUES)
                                  
       06:C114  8E 41 00          STX clue_start_address
       06:C117  8D 42 00          STA clue_start_address+1
                                  
   90  06:C11A  20 C4 C5    JSR ResetClueDrawAddress
   91                     
   92  06:C11D  EE 09 00    INC mode_state
   93  06:C120            .leave:
   94  06:C120  60          RTS
   95                       
   96  06:C121            UpdateDrawHoriClues:
   97                     
   98  06:C121  20 4C C5    JSR PopulateClues
   99  06:C124  90 03       BCC .leave
  100                     
  101  06:C126            .changeModeState:
  102                     
  103  06:C126  EE 09 00    INC mode_state
  104  06:C129            .leave:
  105  06:C129  60          RTS
  106                       
  107  06:C12A            UpdateGamePlay:
  108                         
  109  06:C12A  A9 00       LDA #$00
  110  06:C12C  8D 00 00    STA temp1
  111  06:C12F  8D 01 00    STA temp2
  112  06:C132  8D 02 00    STA temp3
  113                     
  114                       
  115  06:C135  AD 14 00    LDA gamepadPressed
  116  06:C138  F0 6A       BEQ .updatePaint  
  117                       
  118  06:C13A            .parseInputs:
  119                     
  120  06:C13A  29 F0       AND #GAMEPAD_MOVE
  121  06:C13C  F0 1E       BEQ .checkPaintPress
  122  06:C13E  0A          ASL A
  123  06:C13F  90 03       BCC .checkLeft
  124  06:C141  EE 00 00    INC temp1
  125  06:C144            .checkLeft:
  126  06:C144  0A          ASL A
  127  06:C145  90 03       BCC .checkDown
  128  06:C147  CE 00 00    DEC temp1
  129  06:C14A            .checkDown:
  130  06:C14A  0A          ASL A
  131  06:C14B  90 03       BCC .checkUp
  132  06:C14D  EE 01 00    INC temp2
  133  06:C150            .checkUp:
  134  06:C150  0A          ASL A
  135  06:C151  90 03       BCC .move
  136  06:C153  CE 01 00    DEC temp2
  137                       
  138  06:C156            .move:
  139                      
  140  06:C156  20 6A C2    JSR MoveMouse
  141  06:C159  20 AB C2    JSR UpdateMouseScreenPos
  142                       
  143  06:C15C            .checkPaintPress:
  144                     
  145  06:C15C  AD 14 00    LDA gamepadPressed
  146  06:C15F  29 03       AND #GAMEPAD_AB
  147  06:C161  F0 41       BEQ .updatePaint
  148                       ;;A or B pressed, get current tile
  149                       
  150  06:C163  8D 00 00    STA temp1
  151                       
  152  06:C166  A0 00       LDY #$00
  153  06:C168  B1 4D       LDA [mouse_location], y
  154  06:C16A  8D 01 00    STA temp2
  155                       
  156                         ;;A treats X and Clear as clear
  157                             ;;B treats mark and clear as clear
  158                             ;;clear->mark->x
  159                             
  160                     
  161  06:C16D  C9 7C       CMP #$7C      ;check if this is a marked tile
  162  06:C16F  B0 0F       BCS .getClearTile
  163                       ;;cleared tile- store off marked tile to paint with instead
  164                       ;;not a clear tile- a mark or an x - check A or B  
  165  06:C171  4E 00 00    LSR temp1
  166  06:C174  B0 05       BCS .getMarkTile
  167                       
  168  06:C176            .getXTile:
  169  06:C176  A9 80       LDA #$80
  170  06:C178  4C 9E C1    JMP .finishGetTile
  171                       
  172  06:C17B            .getMarkTile:
  173  06:C17B  A9 70       LDA #$70
  174  06:C17D  4C 9E C1    JMP .finishGetTile
  175                     
  176  06:C180            .getClearTile:
  177                       
  178  06:C180  4E 00 00    LSR temp1
  179  06:C183  90 0A       BCC .checkB
  180  06:C185  AD 01 00    LDA temp2
  181  06:C188  C9 8C       CMP #$8C                      ;; check if in X tiles - will be if >=
  182  06:C18A  90 0D       BCC .clearTile
  183  06:C18C  4C 7B C1    JMP .getMarkTile
  184                       
  185  06:C18F            .checkB:
  186                       
  187  06:C18F  AD 01 00   LDA temp2
  188  06:C192  C9 8C      CMP #$8C
  189  06:C194  B0 03      BCS .clearTile
  190  06:C196  4C 76 C1   JMP .getXTile
  191                       
  192  06:C199            .clearTile:
  193  06:C199  A9 60       LDA #$60
  194  06:C19B  4C 9E C1    JMP .finishGetTile
  195                       
  196  06:C19E            .finishGetTile:
  197  06:C19E  8D 51 00    STA currentPaintTile
  198  06:C1A1  4C AC C1    JMP .setTile
  199                     
  200                     ;;we'll keep a copy of the puzzle tiles in memory, since we can't easily access tiles in the PPU
  201                     ;;might be best to just keep an entire copy of the nametable instead of trying to index it and deal with 16 bit math
  202                     ;;we can load the nametable into memory as we draw it
  203                     
  204  06:C1A4            .updatePaint:
  205                     
  206  06:C1A4  AD 12 00    LDA gamepad
  207  06:C1A7  29 03       AND #GAMEPAD_AB
  208  06:C1A9  D0 01       BNE .setTile
  209  06:C1AB  60          RTS  
  210                       
  211  06:C1AC            .setTile:
  212                     
  213                       ;;take Y position, mult by 2 to get starting index in puzzle solution
  214  06:C1AC  AD 50 00    LDA mouse_index+1
  215  06:C1AF  0A          ASL A
  216  06:C1B0  18          CLC
  217  06:C1B1  69 04       ADC #$04 ;; add to get past header
  218  06:C1B3  8D 00 00    STA temp1
  219                       
  220                       ;;div X position by 8 to get the byte index
  221  06:C1B6  AD 4F 00    LDA mouse_index
  222  06:C1B9  4A          LSR A
  223  06:C1BA  4A          LSR A
  224  06:C1BB  4A          LSR A
  225  06:C1BC  F0 03       BEQ .getMask
  226                       
  227  06:C1BE  EE 00 00    INC temp1
  228                       
  229  06:C1C1            .getMask:
  230                       
  231  06:C1C1  AD 4F 00    LDA mouse_index
  232  06:C1C4  29 07       AND #$07
  233  06:C1C6  AA          TAX
  234  06:C1C7  A9 80       LDA #$80
  235  06:C1C9  E0 00       CPX #$00
  236  06:C1CB  F0 04       BEQ .storeMask
  237                     
  238  06:C1CD            .maskLoop:
  239  06:C1CD  4A          LSR A
  240  06:C1CE  CA          DEX
  241  06:C1CF  D0 FC       BNE .maskLoop
  242  06:C1D1            .storeMask:
  243  06:C1D1  8D 01 00    STA temp2
  244                     
  245  06:C1D4  AC 00 00    LDY temp1
  246  06:C1D7  B1 3D       LDA [puzzle_address], y
  247  06:C1D9  2D 01 00    AND temp2
  248  06:C1DC  8D 00 00    STA temp1     ;get the 0/non zero solution flag 
  249                     
  250  06:C1DF  A0 00       LDY #$00
  251  06:C1E1  B1 4D       LDA [mouse_location], y
  252  06:C1E3  8D 02 00    STA temp3
  253  06:C1E6  29 F0       AND #$F0
  254  06:C1E8  CD 51 00    CMP currentPaintTile
  255  06:C1EB  F0 76       BEQ .leave
  256                       
  257                       ;;tiles are different- check if the current tile is marked as a solution tile
  258  06:C1ED  C9 70       CMP #$70
  259  06:C1EF  D0 0B       BNE .checkNewMark
  260                       ;;if erasing a mark, check if the tile was part of the solution
  261  06:C1F1  AD 00 00    LDA temp1
  262  06:C1F4  D0 18       BNE .antiMark
  263  06:C1F6  CE 53 00    DEC nonSolutionCount
  264  06:C1F9  4C 17 C2    JMP .checkSolution
  265                       
  266  06:C1FC            .checkNewMark:
  267                     
  268  06:C1FC  AD 51 00    LDA currentPaintTile
  269  06:C1FF  C9 70       CMP #$70
  270  06:C201  D0 22       BNE .overwriteTile
  271                       
  272  06:C203  AD 00 00    LDA temp1
  273  06:C206  D0 0C       BNE .proMark
  274  06:C208  EE 53 00    INC nonSolutionCount 
  275  06:C20B  4C 17 C2    JMP .checkSolution  
  276                       
  277  06:C20E            .antiMark:
  278  06:C20E  CE 52 00    DEC solutionCount
  279  06:C211  4C 25 C2    JMP .overwriteTile
  280  06:C214            .proMark:   
  281                       
  282  06:C214  EE 52 00    INC solutionCount
  283                     
  284  06:C217            .checkSolution: 
  285                     
  286  06:C217  A0 01       LDY #$01
  287  06:C219  B1 3D       LDA [puzzle_address], y
  288  06:C21B  CD 52 00    CMP solutionCount
  289  06:C21E  D0 05       BNE .overwriteTile
  290  06:C220  AD 53 00    LDA nonSolutionCount
  291  06:C223  F0 3B       BEQ .changeModeState
  292                       
  293  06:C225            .overwriteTile:
  294                       ;;overwrite tile
  295  06:C225  AD 02 00    LDA temp3
  296  06:C228  29 0F       AND #$0F
  297  06:C22A  0D 51 00    ORA currentPaintTile
  298  06:C22D  A0 00       LDY #$00
  299  06:C22F  91 4D       STA [mouse_location], y
  300  06:C231  8D 00 00    STA temp1
  301                       
  302  06:C234  AD 4E 00    LDA mouse_location+1
  303  06:C237  29 3F       AND #$3F
  304  06:C239  8D 01 00    STA temp2
  305                         
  306                       MACROAddPPUStringEntryRawData temp2, mouse_location, #DRAW_HORIZONTAL, #$01
                          
       06:C23C  A9 01       LDA #$01
       06:C23E  8D 15 00    STA PPU_PendingWrite
       06:C241  AD 01 00    LDA temp2
       06:C244  20 AF C4    JSR WriteToPPUString
       06:C247  AD 4D 00    LDA mouse_location
       06:C24A  20 AF C4    JSR WriteToPPUString
       06:C24D  A9 00       LDA #DRAW_HORIZONTAL
       06:C24F  20 AF C4    JSR WriteToPPUString
       06:C252  A9 01       LDA #$01
       06:C254  20 AF C4    JSR WriteToPPUString
                            
  307  06:C257  AD 00 00    LDA temp1
  308  06:C25A  20 AF C4    JSR WriteToPPUString
  309  06:C25D  4C 63 C2    JMP .leave
  310                       
  311                       ;;update the painting
  312  06:C260            .changeModeState:
  313                     
  314  06:C260  EE 09 00    INC mode_state
  315                     
  316  06:C263            .leave:
  317                      
  318  06:C263  60          RTS
  319                       
  320  06:C264            UpdateGameExit:
  321                     
  322  06:C264  A9 02       LDA #GAMEOVER_IDX
  323  06:C266  20 0F C3    JSR ChangeGameMode
  324  06:C269  60          RTS
  325                       
  326  06:C26A            MoveMouse:
  327                     
  328  06:C26A  AD 00 00    LDA temp1
  329  06:C26D  0E 00 00    ASL temp1
  330  06:C270  0E 00 00    ASL temp1
  331  06:C273  0E 00 00    ASL temp1
  332                       
  333  06:C276  AD 01 00    LDA temp2
  334  06:C279  0E 01 00    ASL temp2 
  335  06:C27C  0E 01 00    ASL temp2
  336  06:C27F  0E 01 00    ASL temp2
  337                       
  338  06:C282  A2 03       LDX #SPRITE_XPOS
  339  06:C284  BD 00 02    LDA SPRITE_DATA, x
  340  06:C287  18          CLC
  341  06:C288  6D 00 00    ADC temp1
  342                       ;;check against borders
  343  06:C28B  C9 6A       CMP #HORI_MIN
  344  06:C28D  F0 07       BEQ .moveVert
  345  06:C28F  C9 EA       CMP #HORI_MAX
  346  06:C291  F0 03       BEQ .moveVert
  347  06:C293  9D 00 02    STA SPRITE_DATA, x
  348                     
  349  06:C296            .moveVert:
  350                     
  351  06:C296  A2 00       LDX #SPRITE_YPOS
  352  06:C298  BD 00 02    LDA SPRITE_DATA, x
  353  06:C29B  18          CLC
  354  06:C29C  6D 01 00    ADC temp2
  355                       ;;check against borders
  356  06:C29F  C9 5A       CMP #VERT_MIN
  357  06:C2A1  F0 07       BEQ .leave
  358  06:C2A3  C9 DA       CMP #VERT_MAX
  359  06:C2A5  F0 03       BEQ .leave
  360  06:C2A7  9D 00 02    STA SPRITE_DATA, x
  361                     
  362  06:C2AA            .leave:
  363  06:C2AA  60          RTS
  364                             
  365  06:C2AB            UpdateMouseScreenPos:
  366                     
  367  06:C2AB  A2 00       LDX #$00
  368  06:C2AD  BD 00 02    LDA SPRITE_DATA, x;ypos       ;yyyy y...
  369  06:C2B0  4A          LSR A                                         ;0yyy yy..
  370  06:C2B1  4A          LSR A                                         ;00yy yyy.
  371  06:C2B2  4A          LSR A                                         ;000y yyyy
  372  06:C2B3  8D 00 00    STA temp1
  373  06:C2B6  8D 50 00    STA mouse_index+1
  374  06:C2B9  E8          INX
  375  06:C2BA  E8          INX
  376  06:C2BB  E8          INX   
  377  06:C2BC  BD 00 02    LDA SPRITE_DATA, x ;xpos  ;  xxxx x...
  378  06:C2BF  29 F8       AND #$F8                       ;              ;  xxxx x000
  379  06:C2C1  8D 01 00    STA temp2                      ;      ;  
  380  06:C2C4  4E 00 00    LSR temp1                      ;              ;  0000 yyyy y
  381  06:C2C7  6E 01 00    ROR temp2                      ;      ;  yxxx xx00
  382  06:C2CA  4E 00 00    LSR temp1                      ;              ;  0000 0yyy y
  383  06:C2CD  6E 01 00    ROR temp2                      ;              ;  yyxx xxx0
  384  06:C2D0  4E 00 00    LSR temp1              ;              ;  0000 00yy y
  385  06:C2D3  6E 01 00    ROR temp2                      ;              ;  yyyx xxxx
  386  06:C2D6  AD 01 00    LDA temp2
  387  06:C2D9  29 1F       AND #$1F
  388  06:C2DB  8D 4F 00    STA mouse_index
  389                       
  390  06:C2DE  AD 4F 00    LDA mouse_index
  391  06:C2E1  38          SEC 
  392  06:C2E2  E9 0E       SBC #$0E
  393  06:C2E4  8D 4F 00    STA mouse_index
  394                       
  395  06:C2E7  AD 50 00    LDA mouse_index+1
  396  06:C2EA  38          SEC 
  397  06:C2EB  E9 0C       SBC #$0C
  398  06:C2ED  8D 50 00    STA mouse_index+1
  399                       
  400                       ;subtract starting offsets for mouse index
  401                       
  402  06:C2F0  AD 00 00    LDA temp1                      ;              ;  0000 00yy
  403  06:C2F3  09 60       ORA #$60                       ;              ;  0110 00yy
  404                       
  405  06:C2F5  8D 4E 00    STA mouse_location+1
  406  06:C2F8  AD 01 00    LDA temp2
  407  06:C2FB  8D 4D 00    STA mouse_location
  408                       
  409  06:C2FE            .leave:
  410  06:C2FE  60          RTS
  411                     
  412                     ;;using the line index and a given count based on the direction, 
  413                       
  414                     ;;      JSR ResetMapper
  415                     ;;      INC currentCHRBank
  416                     ;;      LDA currentCHRBank
  417                     ;;      CMP #$03
  418                     ;;      BNE .dontModCHR
  419                             
  420                     ;;      LDA #$00
  421                     
  422                     ;;.dontModCHR:
  423                     ;;      STA currentCHRBank 
  424                     ;;      ;4kb switches- all the banks are seqential, so we gotta add 1 and mult by 2 for BG tiles
  425                     ;;      ASL A
  426                     ;;      CLC 
  427                     ;;      ADC #$01
  428                     ;;      JSR LoadCHRBankB
  429                     ;;      
  430                     ;;      JSR ResetMapper
  431                     ;;      INC currentPRGBank
  432                     ;;      LDA currentPRGBank
  433                     ;;      CMP #$03
  434                     ;;      BNE .dontModPRG
  435                             
  436                     ;;      LDA #$00
  437                             
  438                     ;;.dontModPRG:
  439                     ;;       STA currentPRGBank
  440                     ;;       JSR LoadPRGBank
  441                      
  442                     ;;       JSR TestBankA
  443                     ;;       LDA mapperDebugVar
  444                     ;;       STA $6000
  445                     ;;       JMP .noInputDetected
  446                     
  447                     
  448                       
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGameOver.asm
   81                       .include "Routines/Game_States/UpdateGameOver.asm"
    1  06:C2FF            UpdateGameOver:
    2                     
    3  06:C2FF  AD 0A 00    LDA NMI_locks
    4  06:C302  D0 0A       BNE .noInputDetected
    5                     
    6  06:C304  AD 14 00    LDA gamepadPressed
    7  06:C307  F0 05       BEQ .noInputDetected
    8                       
    9  06:C309  A9 00         LDA #TITLE_IDX
   10  06:C30B  20 0F C3          JSR ChangeGameMode
   11                      
   12  06:C30E            .noInputDetected:
   13                      
   14  06:C30E  60          RTS
#[1]   Picross.asm
   82                       
   83                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   84                     ;;     Routines             ;;
   85                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   86                     
   87                     
#[2]   Routines/Common/GameModeRoutines.asm
   88                       .include "Routines/Common/GameModeRoutines.asm"
    1  06:C30F            ChangeGameMode:
    2  06:C30F  8D 08 00    STA game_mode
    3  06:C312  A9 00       LDA #$00
    4  06:C314  8D 09 00    STA mode_state
    5  06:C317  20 BD C4    JSR ClearPPUString
    6  06:C31A  20 1E C3    JSR LoadGameModeScreen
    7  06:C31D  60          RTS
    8                       
    9  06:C31E            LoadGameModeScreen:
   10                     
   11                       MACROSetFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:C31E  AD 0A 00    LDA NMI_locks
       06:C321  09 01       ORA #BGLOAD_NMI_LOCK
       06:C323  8D 0A 00    STA NMI_locks
                                  
   12                       
   13  06:C326  A9 00       LDA #$00
   14  06:C328  8D 01 20    STA PPU_MASK    ; disable rendering- reenable on NMI when not updating
   15                     
   16  06:C32B  20 4C C3    JSR LoadGameModeBackground
   17  06:C32E  20 78 C3    JSR LoadGameModeSprites
   18                     
   19                       MACROClearFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:C331  A9 01       LDA #BGLOAD_NMI_LOCK
       06:C333  49 FF       EOR #$FF
       06:C335  2D 0A 00    AND NMI_locks  
       06:C338  8D 0A 00    STA NMI_locks
                          
   20                     
   21                       
   22                       ;; load the CHR bank for this mode
   23  06:C33B  20 F5 C4    JSR ResetMapper
   24                       ;;remember, we're loading the SECOND set in each chr bank
   25                       ;;so we'll take the index from the game mode chr table and add one mult 2
   26  06:C33E  AE 08 00    LDX game_mode
   27  06:C341  BD 8E C3    LDA gameModeInitCHRROM, x
   28  06:C344  0A          ASL A
   29  06:C345  18          CLC 
   30  06:C346  69 01       ADC #$01
   31  06:C348  20 1A C5    JSR LoadCHRBankB
   32                       
   33  06:C34B  60          RTS
   34                       
   35  06:C34C            LoadGameModeBackground:
   36                             
   37                       MACROGetDoubleIndex game_mode
                          
       06:C34C  AD 08 00          LDA game_mode
       06:C34F  0A                ASL A
       06:C350  A8                TAY
                                  
   38  06:C351  8C 00 00    STY temp1
   39                             
   40                       MACROGetLabelPointer Palettes, table_address
                          
       06:C354  A9 E0             LDA #HIGH(Palettes)
       06:C356  A2 00             LDX #LOW(Palettes)
                                  
       06:C358  8E 0E 00          STX table_address
       06:C35B  8D 0F 00          STA table_address+1
                                  
   41  06:C35E  20 B7 C3    JSR GetTableAtIndex
   42                     
   43  06:C361  20 C4 C3    JSR LoadFullPaletteFromTable
   44                             
   45  06:C364  AC 00 00    LDY temp1
   46                       MACROGetLabelPointer NameTables, table_address
                          
       06:C367  A9 E0             LDA #HIGH(NameTables)
       06:C369  A2 06             LDX #LOW(NameTables)
                                  
       06:C36B  8E 0E 00          STX table_address
       06:C36E  8D 0F 00          STA table_address+1
                                  
   47  06:C371  20 B7 C3    JSR GetTableAtIndex
   48                             
   49  06:C374  20 E4 C3    JSR LoadFullBackgroundFromTable
   50                       
   51  06:C377  60          RTS
   52                       
   53  06:C378            LoadGameModeSprites:
   54                     
   55                       MACROGetDoubleIndex game_mode  
                          
       06:C378  AD 08 00          LDA game_mode
       06:C37B  0A                ASL A
       06:C37C  A8                TAY
                                  
   56                       MACROGetLabelPointer Sprites, table_address
                          
       06:C37D  A9 EC             LDA #HIGH(Sprites)
       06:C37F  A2 6C             LDX #LOW(Sprites)
                                  
       06:C381  8E 0E 00          STX table_address
       06:C384  8D 0F 00          STA table_address+1
                                  
   57  06:C387  20 B7 C3    JSR GetTableAtIndex
   58  06:C38A  20 A2 C4    JSR LoadSprites_impl
   59                       
   60  06:C38D  60          RTS
   61                       
   62  06:C38E            gameModeInitCHRROM:
   63  06:C38E  00 02 02          .db $00, $02, $02
#[1]   Picross.asm
#[2]   Routines/Utils/PointerUtils.asm
   89                       .include "Routines/Utils/PointerUtils.asm"
    1  06:C391            Dynamic_Jump:
    2                     
    3  06:C391  0A          ASL A                                 ;; double the index passed into A
    4  06:C392  8E 04 00    STX tempx
    5  06:C395  8C 05 00    STY tempy
    6  06:C398  A8          TAY
    7  06:C399  C8          INY  
    8  06:C39A  68          PLA
    9  06:C39B  8D 10 00    STA jump_address
   10  06:C39E  68          PLA 
   11  06:C39F  8D 11 00    STA jump_address+1            
   12  06:C3A2  B1 10       LDA [jump_address], y
   13  06:C3A4  AA          TAX
   14  06:C3A5  C8          INY
   15  06:C3A6  B1 10       LDA [jump_address], y
   16  06:C3A8  8E 10 00    STX jump_address
   17  06:C3AB  8D 11 00    STA jump_address+1
   18  06:C3AE  AE 04 00    LDX tempx
   19  06:C3B1  AC 05 00    LDY tempy
   20  06:C3B4  6C 10 00    JMP [jump_address]
   21                       
   22  06:C3B7            GetTableAtIndex:
   23                     
   24  06:C3B7  B1 0E             LDA [table_address], y
   25  06:C3B9  AA                TAX
   26  06:C3BA  C8                INY
   27  06:C3BB  B1 0E             LDA [table_address], y
   28                             
   29  06:C3BD            SetTableAddress:
   30                             
   31                             ;;A is hi, X is lo
   32  06:C3BD  8E 0E 00          STX table_address
   33  06:C3C0  8D 0F 00          STA table_address+1
   34  06:C3C3  60                RTS
#[1]   Picross.asm
#[2]   Routines/Utils/PPUUtils.asm
   90                       .include "Routines/Utils/PPUUtils.asm"
    1  06:C3C4            LoadFullPaletteFromTable:
    2                     
    3                       MACROSetPPUAddress $3F00
                          
       06:C3C4  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:C3C7  A9 3F       LDA #HIGH($3F00)
       06:C3C9  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:C3CC  A9 00       LDA #LOW($3F00)
       06:C3CE  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
    4  06:C3D1  A0 00       LDY #$00              ; start out at 0
    5  06:C3D3  A2 00       LDX #$00
    6  06:C3D5            .loop:
    7  06:C3D5  B1 0E       LDA [table_address], y        ; load data from address (palette + the value in x)
    8  06:C3D7  8D 07 20    STA PPU_DATA            ; write to PPU
    9  06:C3DA  9D 00 64    STA Palette_Copy, x
   10  06:C3DD  C8          INY                   ; X = X + 1
   11  06:C3DE  E8          INX
   12  06:C3DF  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   13  06:C3E1  D0 F2       BNE .loop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   14  06:C3E3  60          RTS
   15                     
   16  06:C3E4            LoadFullBackgroundFromTable:
   17                     
   18                             MACROSetPPUAddress $2000
                          
       06:C3E4  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:C3E7  A9 20       LDA #HIGH($2000)
       06:C3E9  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:C3EC  A9 00       LDA #LOW($2000)
       06:C3EE  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
   19                             MACROGetLabelPointer Screen_Copy, pointer_address
                          
       06:C3F1  A9 60             LDA #HIGH(Screen_Copy)
       06:C3F3  A2 00             LDX #LOW(Screen_Copy)
                                  
       06:C3F5  8E 0C 00          STX pointer_address
       06:C3F8  8D 0D 00          STA pointer_address+1
                                  
   20                             
   21                             ;;set pointer
   22                             ;; set counters
   23  06:C3FB  A0 00             LDY #$00
   24  06:C3FD  A2 00             LDX #$00
   25                             
   26                             ;;start loop
   27                     
   28  06:C3FF            .outerloop:
   29                     
   30  06:C3FF            .innerloop:
   31                     
   32  06:C3FF  B1 0E             LDA [table_address], y
   33  06:C401  8D 07 20          STA PPU_DATA
   34  06:C404  91 0C             STA [pointer_address],y
   35  06:C406  C8                INY
   36  06:C407  C0 00             CPY #$00
   37  06:C409  D0 F4             BNE .innerloop
   38                     
   39  06:C40B  EE 0D 00          INC pointer_address+1
   40  06:C40E  EE 0F 00          INC table_address+1
   41                             
   42  06:C411  E8                INX
   43  06:C412  E0 04             CPX #$04
   44  06:C414  D0 E9             BNE .outerloop
   45  06:C416  60                RTS
   46                             
   47                     
   48           0000      DATA_LEN = temp1
   49           0001      WRITE_SETTINGS = temp2
   50                             
   51  06:C417            ProcessPPUString:
   52                     
   53  06:C417  AD 15 00          LDA PPU_PendingWrite
   54  06:C41A  F0 6F             BEQ .leave
   55  06:C41C  A0 00             LDY #$00
   56                             
   57  06:C41E  A9 17             LDA #LOW(PPU_String)
   58  06:C420  8D 0C 00          STA pointer_address
   59  06:C423  A9 00             LDA #HIGH(PPU_String)
   60  06:C425  8D 0D 00          STA pointer_address + 1
   61                     
   62  06:C428            .outerloop:
   63  06:C428  AD 02 20          LDA PPU_STATUS
   64  06:C42B  B1 0C             LDA [pointer_address], y
   65  06:C42D  F0 59             BEQ .finish
   66  06:C42F  8D 06 20          STA PPU_ADDR
   67  06:C432  C8                INY
   68  06:C433  B1 0C             LDA [pointer_address], y
   69  06:C435  8D 06 20          STA PPU_ADDR
   70  06:C438  C8            INY 
   71  06:C439  B1 0C             LDA [pointer_address], y
   72  06:C43B  8D 01 00          STA WRITE_SETTINGS
   73  06:C43E  C8                INY
   74                             
   75  06:C43F  AD 00 20          LDA PPU_CTRL
   76  06:C442  29 FB             AND #$FB
   77  06:C444  8D 00 20          STA PPU_CTRL
   78                             
   79  06:C447  AD 01 00          LDA WRITE_SETTINGS
   80  06:C44A  29 80             AND #%10000000
   81  06:C44C  F0 06             BEQ .checkTable
   82  06:C44E  0D 00 20          ORA PPU_CTRL 
   83  06:C451  8D 00 20          STA PPU_CTRL 
   84                             
   85  06:C454            .checkTable:
   86  06:C454  AD 01 00          LDA WRITE_SETTINGS
   87  06:C457  29 40             AND #%01000000
   88  06:C459  F0 16             BEQ .rawData
   89                             
   90  06:C45B  B1 0C             LDA [pointer_address], y
   91  06:C45D  8D 0E 00          STA table_address
   92  06:C460  C8                INY 
   93  06:C461  B1 0C             LDA [pointer_address], y
   94  06:C463  8D 0F 00          STA table_address + 1
   95  06:C466  C8                INY
   96  06:C467  98                TYA 
   97  06:C468  48                PHA
   98  06:C469  20 8C C4          JSR WriteToPPUFromTable
   99  06:C46C  68                PLA
  100  06:C46D  A8                TAY
  101  06:C46E  4C 28 C4          JMP .outerloop
  102                     
  103  06:C471            .rawData:
  104                     
  105  06:C471  B1 0C             LDA [pointer_address], y
  106  06:C473  C8                INY
  107  06:C474  8D 00 00          STA DATA_LEN
  108                     
  109  06:C477  A2 00             LDX #$00
  110                     
  111  06:C479            .innerloop:
  112                             
  113  06:C479  B1 0C             LDA [pointer_address], y
  114  06:C47B  8D 07 20          STA PPU_DATA
  115  06:C47E  C8                INY
  116  06:C47F  E8                INX
  117  06:C480  EC 00 00          CPX DATA_LEN
  118  06:C483  D0 F4             BNE .innerloop
  119  06:C485  4C 28 C4          JMP .outerloop
  120                             
  121  06:C488            .finish:
  122  06:C488  20 BD C4          JSR ClearPPUString
  123  06:C48B            .leave:
  124  06:C48B  60                RTS
  125                             
  126  06:C48C            WriteToPPUFromTable:
  127  06:C48C  A0 00             LDY #$00
  128  06:C48E  B1 0E             LDA [table_address], y
  129  06:C490  C8                INY
  130  06:C491  8D 00 00          STA DATA_LEN
  131  06:C494            .innerloop:
  132  06:C494  B1 0E             LDA [table_address], y
  133  06:C496  8D 07 20          STA PPU_DATA
  134  06:C499  C8                INY
  135  06:C49A  CC 00 00          CPY DATA_LEN
  136  06:C49D  90 F5             BCC .innerloop ;table should have the size in it, but since we count the byte count, we'll want to wait till we go over it
  137  06:C49F  F0 F3             BEQ .innerloop
  138  06:C4A1  60                RTS
  139                       
  140  06:C4A2            LoadSprites_impl:
  141  06:C4A2  A0 00       LDY #$00              ; start at 0
  142                       
  143  06:C4A4            .loop:
  144  06:C4A4  B1 0E       LDA [table_address], y; load data from address (sprites +  x)
  145  06:C4A6  99 00 02    STA SPRITE_DATA, y    ; store into RAM address ($0200 + x)
  146  06:C4A9  C8          INY                   ; X = X + 1
  147  06:C4AA  C0 05       CPY #$05              ; Compare X to hex $10, decimal 16
  148  06:C4AC  D0 F6       BNE .loop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
  149                                             ; if compare was equal to 16, keep going down   
  150  06:C4AE  60          RTS
  151                     
  152                     
  153  06:C4AF            WriteToPPUString:
  154                     
  155  06:C4AF  AE 16 00          LDX PPU_StringIdx
  156  06:C4B2  E0 20             CPX #PPU_STRINGMAX
  157  06:C4B4  F0 06             BEQ .finish
  158                             
  159  06:C4B6  9D 17 00          STA PPU_String, x
  160  06:C4B9  EE 16 00          INC PPU_StringIdx
  161                                     
  162  06:C4BC            .finish:
  163  06:C4BC  60                RTS
  164                     
  165  06:C4BD            ClearPPUString:
  166                             
  167  06:C4BD  A9 00             LDA #$00
  168  06:C4BF  8D 16 00          STA PPU_StringIdx
  169  06:C4C2  8D 17 00          STA PPU_String
  170  06:C4C5  8D 15 00          STA PPU_PendingWrite
  171  06:C4C8  60                RTS
  172                     
  173  06:C4C9            DetectSprite0:
  174  06:C4C9            WaitNotSprite0:
  175  06:C4C9  AD 02 20    lda PPU_STATUS
  176  06:C4CC  29 40       and #SPRITE_0_MASK
  177  06:C4CE  D0 F9       bne WaitNotSprite0   ; wait until sprite 0 not hit
  178                     
  179  06:C4D0            WaitSprite0:
  180  06:C4D0  AD 02 20    lda $2002
  181  06:C4D3  29 40       and #SPRITE_0_MASK
  182  06:C4D5  F0 F9       beq WaitSprite0      ; wait until sprite 0 is hit
  183                     
  184  06:C4D7  A2 05       ldx #$05                              ;do a scanline wait
  185  06:C4D9            WaitScanline:
  186  06:C4D9  CA          dex
  187  06:C4DA  D0 FD       bne WaitScanline
  188  06:C4DC  60          RTS
  189                     
  190  06:C4DD            NameTableMemList:
  191  06:C4DD  00 20       .word $2000, $2400, $2800, $2C00
       06:C4DF  00 24     
       06:C4E1  00 28     
       06:C4E3  00 2C     
  192  06:C4E5            PalettesMemList:
  193  06:C4E5  00 3F       .word $3F00, $3F04, $3F08, $3F0C
       06:C4E7  04 3F     
       06:C4E9  08 3F     
       06:C4EB  0C 3F     
  194  06:C4ED  10 3F       .word $3F10, $3F14, $3F18, $3F1C  
       06:C4EF  14 3F     
       06:C4F1  18 3F     
       06:C4F3  1C 3F     
#[1]   Picross.asm
#[2]   Routines/Utils/MapperUtils.asm
   91                       .include "Routines/Utils/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:C4F5            ResetMapper:
    7  06:C4F5  EE F5 C4    inc ResetMapper
    8  06:C4F8  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:C4F9            SetMapperControls:
   23                       ;;A = controls
   24  06:C4F9  AA          TAX
   25  06:C4FA  A9 80       LDA #MAPPERCONTROL
   26  06:C4FC  8D 38 00    STA mapper_address+1
   27  06:C4FF  8A          TXA
   28  06:C500  20 25 C5    JSR SendMapperCommand
   29  06:C503  60          RTS
   30                     
   31  06:C504            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:C504  AA                TAX
   35  06:C505  A9 E0             LDA #PRGBANK
   36  06:C507  8D 38 00          STA mapper_address+1
   37  06:C50A  8A                TXA
   38  06:C50B  20 25 C5          JSR SendMapperCommand
   39  06:C50E  60                RTS
   40                             
   41  06:C50F            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:C50F  AA                TAX
   44  06:C510  A9 A0             LDA #CHRBANK1
   45  06:C512  8D 38 00          STA mapper_address+1
   46  06:C515  8A                TXA
   47  06:C516  20 25 C5          JSR SendMapperCommand
   48  06:C519  60                RTS
   49                             
   50  06:C51A            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:C51A  AA                TAX
   53  06:C51B  A9 C0             LDA #CHRBANK2
   54  06:C51D  8D 38 00          STA mapper_address+1
   55  06:C520  8A                TXA
   56  06:C521  20 25 C5          JSR SendMapperCommand
   57  06:C524  60                RTS
   58                             
   59  06:C525            SendMapperCommand:
   60                     
   61  06:C525  A0 00             LDY #$00
   62                             
   63  06:C527  91 37             STA [mapper_address], y
   64  06:C529  4A                LSR A
   65  06:C52A  91 37             STA [mapper_address], y
   66  06:C52C  4A                LSR A
   67  06:C52D  91 37             STA [mapper_address], y
   68  06:C52F  4A                LSR A 
   69  06:C530  91 37             STA [mapper_address], y
   70  06:C532  4A                LSR A
   71  06:C533  91 37             STA [mapper_address], y
   72                             
   73  06:C535  60                RTS
   74                             
   75  06:C536            ResetBanks:
   76                     
   77  06:C536  20 F5 C4          JSR ResetMapper
   78  06:C539  A9 00             LDA #$00
   79  06:C53B  20 04 C5          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:C53E  20 F5 C4          JSR ResetMapper
   83  06:C541  A9 00             LDA #$00
   84  06:C543  20 0F C5          JSR LoadCHRBankA
   85  06:C546  A9 01             LDA #$01
   86  06:C548  20 1A C5          JSR LoadCHRBankB
   87  06:C54B  60                RTS
   88                             
   89                       
#[1]   Picross.asm
#[2]   Routines/Game_Routines/ScreenEffects.asm
   92                       .include "Routines/Game_Routines/ScreenEffects.asm"
    1  06:C54C            PopulateClues:
    2                     
    3  06:C54C            .getByte:
    4  06:C54C  AC 45 00    LDY clueTableIndex
    5  06:C54F  B1 3F       LDA [clues_address], y
    6  06:C551  D0 07       BNE .checkNewLine
    7  06:C553  EE 45 00    INC clueTableIndex
    8  06:C556  A9 00       LDA #$00
    9  06:C558  F0 38       BEQ .drawClue
   10                       ;was 0, set up a draw
   11  06:C55A            .checkNewLine
   12  06:C55A  C9 FF       CMP #$FF
   13  06:C55C  D0 17       BNE .getClue
   14                       
   15                       ;;was FF- need to inc stuff
   16  06:C55E  EE 45 00    INC clueTableIndex
   17  06:C561  A9 00       LDA #$00
   18  06:C563  8D 4C 00    STA clueParity
   19                       
   20  06:C566  EE 46 00    INC clueLineIndex
   21  06:C569  AD 46 00    LDA clueLineIndex
   22  06:C56C  C9 0F       CMP #$0F
   23                       ;CMP #$01
   24  06:C56E  F0 28       BEQ .leave    ;carry will be set
   25                       
   26  06:C570  20 0A C6    JSR CreateOffsetFromIndex
   27                      
   28  06:C573  D0 D7       BNE .getByte
   29                       
   30  06:C575            .getClue:
   31                       ;;clues go from high nibble to low nibble
   32  06:C575  48          PHA 
   33  06:C576  AD 4C 00    LDA clueParity
   34  06:C579  D0 0A       BNE .getSecondClue
   35  06:C57B  EE 4C 00    INC clueParity
   36  06:C57E  68          PLA
   37  06:C57F  4A          LSR A
   38  06:C580  4A          LSR A
   39  06:C581  4A          LSR A
   40  06:C582  4A          LSR A         ;move clue over to lower nibble
   41  06:C583  D0 0D       BNE .drawClue
   42                       
   43  06:C585            .getSecondClue:
   44                     
   45  06:C585  CE 4C 00    DEC clueParity
   46  06:C588  EE 45 00    INC clueTableIndex
   47  06:C58B  68          PLA 
   48  06:C58C  29 0F       AND #$0F
   49  06:C58E  D0 02       BNE .drawClue
   50                       ;;if 0, skip
   51  06:C590  F0 BA       BEQ .getByte
   52                      
   53  06:C592            .drawClue:
   54                       
   55  06:C592  09 40       ORA #$40
   56  06:C594  20 99 C5    JSR WriteClueByteToPPUString
   57  06:C597  18          CLC
   58                       
   59  06:C598            .leave:
   60  06:C598  60          RTS
   61                       
   62  06:C599            WriteClueByteToPPUString:
   63                     
   64  06:C599  8D 00 00    STA temp1 ;store off the tile value
   65                     
   66                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:C59C  A9 01       LDA #$01
       06:C59E  8D 15 00    STA PPU_PendingWrite
       06:C5A1  AD 44 00    LDA clue_draw_address+1
       06:C5A4  20 AF C4    JSR WriteToPPUString
       06:C5A7  AD 43 00    LDA clue_draw_address
       06:C5AA  20 AF C4    JSR WriteToPPUString
       06:C5AD  A9 00       LDA #DRAW_HORIZONTAL
       06:C5AF  20 AF C4    JSR WriteToPPUString
       06:C5B2  A9 01       LDA #$01
       06:C5B4  20 AF C4    JSR WriteToPPUString
                            
   67  06:C5B7  AD 00 00    LDA temp1
   68  06:C5BA  20 AF C4    JSR WriteToPPUString
   69                       
   70  06:C5BD  AD 4A 00    LDA clueDrawAdd
   71  06:C5C0  20 E7 C5    JSR SubFromClueDrawAddress
   72                         
   73  06:C5C3  60          RTS
   74                       
   75  06:C5C4            ResetClueDrawAddress:
   76                     
   77                       MACROGetPointer clue_start_address, clue_draw_address
                          
       06:C5C4  AD 41 00          LDA clue_start_address
       06:C5C7  8D 43 00          STA clue_draw_address
       06:C5CA  AD 42 00          LDA clue_start_address+1
       06:C5CD  8D 44 00          STA clue_draw_address+1
                          
   78                       
   79  06:C5D0  60          RTS
   80                       
   81  06:C5D1            AddToClueDrawAddress:
   82                     
   83  06:C5D1  8D 00 00    STA temp1
   84                       
   85  06:C5D4  AD 43 00    LDA clue_draw_address
   86  06:C5D7  18          CLC
   87  06:C5D8  6D 00 00    ADC temp1
   88  06:C5DB  8D 43 00    STA clue_draw_address
   89  06:C5DE  AD 44 00    LDA clue_draw_address+1
   90  06:C5E1  69 00       ADC #$00
   91  06:C5E3  8D 44 00    STA clue_draw_address+1
   92                       
   93  06:C5E6  60          RTS
   94                         
   95  06:C5E7            SubFromClueDrawAddress:
   96                     
   97  06:C5E7  8D 00 00    STA temp1
   98                       
   99  06:C5EA  AD 43 00    LDA clue_draw_address
  100  06:C5ED  38          SEC
  101  06:C5EE  ED 00 00    SBC temp1
  102  06:C5F1  8D 43 00    STA clue_draw_address
  103  06:C5F4  AD 44 00    LDA clue_draw_address+1
  104  06:C5F7  E9 00       SBC #$00
  105  06:C5F9  8D 44 00    STA clue_draw_address+1
  106                       
  107  06:C5FC  60          RTS
  108                       
  109  06:C5FD            AddToClueDrawAddressHi:
  110                     
  111  06:C5FD  8D 00 00    STA temp1
  112                       
  113  06:C600  AD 44 00    LDA clue_draw_address+1
  114  06:C603  6D 00 00    ADC temp1
  115  06:C606  8D 44 00    STA clue_draw_address+1
  116                       
  117  06:C609  60          RTS
  118                       
  119  06:C60A            CreateOffsetFromIndex:
  120                     
  121                       ;;would be this, but we need to be able to go further- so we'll make a doulbe offset
  122  06:C60A  AD 46 00    LDA clueLineIndex
  123  06:C60D  8D 48 00    STA clueDrawOffset
  124  06:C610  A9 00       LDA #$00
  125  06:C612  8D 49 00    STA clueDrawOffset+1
  126                       
  127  06:C615  AD 47 00    LDA clueOffsetShift   
  128  06:C618  F0 0E       BEQ .addOffset
  129                       
  130  06:C61A  A2 00       LDX #$00
  131                       
  132  06:C61C            .loopShift:
  133  06:C61C  0E 48 00    ASL clueDrawOffset
  134  06:C61F  2E 49 00    ROL clueDrawOffset+1
  135  06:C622  E8          INX
  136  06:C623  EC 47 00    CPX clueOffsetShift
  137  06:C626  D0 F4       BNE .loopShift
  138                       
  139  06:C628            .addOffset:
  140                       
  141  06:C628  20 C4 C5    JSR ResetClueDrawAddress
  142  06:C62B  AD 48 00    LDA clueDrawOffset
  143  06:C62E  20 D1 C5    JSR AddToClueDrawAddress 
  144  06:C631  AD 49 00    LDA clueDrawOffset+1
  145  06:C634  20 FD C5    JSR AddToClueDrawAddressHi
  146                       
  147  06:C637  60          RTS
#[1]   Picross.asm
   93                       
   94                       
   95                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   96                     ;;     NMI                  ;;
   97                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   98                     
#[2]   Routines/Common/NMI.asm
   99                       .include "Routines/Common/NMI.asm"
    1                      
    2  06:C638            NMI:
    3                     
    4  06:C638  48          PHA                              ;protect the registers
    5  06:C639  8A          TXA
    6  06:C63A  48          PHA
    7  06:C63B  98          TYA
    8  06:C63C  48          PHA
    9                       
   10  06:C63D            nmi_started:
   11  06:C63D  A9 00       LDA #$00
   12  06:C63F  8D 03 20    STA OAM_LO      ; set the low byte (00) of the RAM address
   13  06:C642  A9 02       LDA #$02
   14  06:C644  8D 14 40    STA OAM_HI       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:C647  AD 0A 00    LDA NMI_locks
   17  06:C64A  F0 03       BEQ update_controllers
   18  06:C64C  4C AB C6    JMP WakeUp
   19                     
   20  06:C64F            update_controllers:
   21                     
#[3]   Routines/Common/ReadControllers.asm
   22                       .include "Routines/Common/ReadControllers.asm"
    1                     
    2  06:C64F  8A            TXA
    3  06:C650  48                PHA
    4  06:C651  98                TYA
    5  06:C652  48                PHA
    6                     
    7  06:C653  A2 00             LDX #$00
    8                     
    9  06:C655            GamePadCheck:
   10  06:C655  A9 01             LDA #$01        ;load 1
   11  06:C657  8D 16 40          STA $4016       ; turn latch on
   12                             ;STA gamepad2
   13  06:C65A  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   14  06:C65B  8D 16 40          STA $4016       ;turn latch off
   15                             
   16                             ;do a ring counter technique- load %10000000 into both
   17  06:C65E  A9 80             LDA #$80
   18  06:C660  8D 12 00          STA gamepad
   19                     
   20  06:C663            ReadControllerABytesLoop:
   21  06:C663  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   22  06:C666  29 03             AND #%00000011  ;acc: %00000001 c: 0
   23  06:C668  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   24                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   25  06:C66A  6E 12 00          ROR gamepad             ;gamepad: %11000000
   26                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   27  06:C66D  90 F4             BCC ReadControllerABytesLoop
   28                             
   29                             ;;comapre last to current, find the pressed buttons this frame
   30  06:C66F  AD 13 00          LDA gamepadLast
   31  06:C672  49 FF             EOR #$FF
   32  06:C674  2D 12 00          AND gamepad
   33  06:C677  8D 14 00          STA gamepadPressed
   34                             
   35                             
   36  06:C67A  AD 12 00          LDA gamepad
   37  06:C67D  8D 13 00          STA gamepadLast
   38                             
   39                             ;return x and y... before resetting them all over again- always good to make sure we're clean
   40  06:C680  68                PLA
   41  06:C681  A8                TAY
   42  06:C682  68                PLA
   43  06:C683  AA                TAX     
#[2]   Routines/Common/NMI.asm
   23                       
   24  06:C684  20 17 C4    JSR ProcessPPUString
   25                       
   26                       
   27  06:C687  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   28  06:C689  8D 05 20    STA PPU_SCROLL
   29  06:C68C  8D 05 20    STA PPU_SCROLL
   30                       
   31                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   32                       ; enable sprites, enable background, no clipping on left side 
   33                       MACROSetPPUControl %10010000, %00011110 
                          
       06:C68F  A9 90       LDA #%10010000  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
       06:C691  8D 00 20    STA PPU_CTRL
       06:C694  A9 1E       LDA #%00011110   ; enable sprites, enable background, no clipping on left side
       06:C696  8D 01 20    STA PPU_MASK
                                  
   34                     
   35  06:C699            NMIUpdate:
   36                     
   37  06:C699  20 9F C6    JSR StateNMIUpdate
   38  06:C69C  4C AB C6    JMP WakeUp
   39                     
   40  06:C69F            StateNMIUpdate:
   41                     
   42                       MACROCallDynamicJump game_mode
                          
       06:C69F  AD 08 00    LDA game_mode
       06:C6A2  20 91 C3    JSR Dynamic_Jump
                                  
   43                     
   44  06:C6A5            NMIJumpTable:
   45                     
   46  06:C6A5  B6 C6       .word UpdateTitleNMI
   47  06:C6A7  CA C6       .word UpdateGameNMI
   48  06:C6A9  CB C6       .word UpdateGameOverNMI
   49                     
   50  06:C6AB            WakeUp:
   51  06:C6AB  A9 00       LDA #$00
   52  06:C6AD  8D 07 00    STA sleeping
   53                       
   54  06:C6B0  68          PLA             ;restore the registers
   55  06:C6B1  A8          TAY 
   56  06:C6B2  68          PLA
   57  06:C6B3  AA          TAX
   58  06:C6B4  68          PLA
   59                     
   60  06:C6B5  40          RTI             ; return from interrupt
   61                       
#[3]   Routines/NMI_States/UpdateTitleNMI.asm
   62                       .include "Routines/NMI_States/UpdateTitleNMI.asm"
    1  06:C6B6            UpdateTitleNMI:
    2                     
    3                       ;;load bank 0 for BG tiles, so we start with the right tile set
    4  06:C6B6  20 F5 C4    JSR ResetMapper
    5  06:C6B9  A9 01       LDA #$01
    6  06:C6BB  20 1A C5    JSR LoadCHRBankB
    7                                     
    8  06:C6BE  20 C9 C4    JSR DetectSprite0
    9                     
   10  06:C6C1  20 F5 C4    JSR ResetMapper
   11  06:C6C4  A9 03       LDA #$03
   12  06:C6C6  20 1A C5    JSR LoadCHRBankB
   13                       
   14  06:C6C9  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameNMI.asm
   63                       .include "Routines/NMI_States/UpdateGameNMI.asm"
    1  06:C6CA            UpdateGameNMI:
    2  06:C6CA  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameOverNMI.asm
   64                       .include "Routines/NMI_States/UpdateGameOverNMI.asm"
    1  06:C6CB            UpdateGameOverNMI:
    2  06:C6CB  60          RTS
#[2]   Routines/Common/NMI.asm
#[1]   Picross.asm
  100                       
  101                     ;;**************************;;
  102                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  103                     ;;       PRG ROM DATA       ;;
  104                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  105                     ;;**************************;; 
  106                       
  107           0007        .bank 7
  108           E000        .org $E000
  109                     
#[2]   NameTables/Tables.asm
  110                       .include "NameTables/Tables.asm"
    1  07:E000            Palettes:
    2                     
    3  07:E000  0C E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E002  2C E0     
       07:E004  4C E0     
    4                     
    5  07:E006            NameTables:
    6                     
    7  07:E006  6C E0       .word Title_Screen, Game_Screen, GameOver_Screen
       07:E008  6C E4     
       07:E00A  6C E8     
    8                     
    9  07:E00C            Title_Palette:
   10                     
   11  07:E00C              .incbin "NameTables/Title_PAL.pal"
   12  07:E01C              .incbin "NameTables/Title_PAL.pal"
   13                       
   14  07:E02C            Game_Palette:
   15                     
   16  07:E02C              .incbin "NameTables/Game_PAL.pal"
   17  07:E03C              .incbin "NameTables/Game_PAL.pal"
   18                       
   19  07:E04C            GameOver_Palette:
   20                     
   21  07:E04C              .incbin "NameTables/GameOver_PAL.pal"
   22  07:E05C              .incbin "NameTables/GameOver_PAL.pal"
   23                       
   24  07:E06C            Title_Screen:
   25                     
   26  07:E06C              .incbin "NameTables/Title_NT.nam"
   27                       
   28  07:E46C            Game_Screen: 
   29                     
   30  07:E46C              .incbin "NameTables/Game_NT.nam"
   31                       
   32  07:E86C            GameOver_Screen:
   33                     
   34  07:E86C              .incbin "NameTables/GameOver_NT.nam"
   35                       
   36                     
   37                       
   38                      
   39                             
#[1]   Picross.asm
#[2]   Sprites/Sprites.asm
  111                       .include "Sprites/Sprites.asm"
    1                     
    2                     ;;Byte0
    3                     ;;Y position of top of sprite
    4                     ;;Sprite data is delayed by one scanline; 
    5                     ;;you must subtract 1 from the sprite's 
    6                     ;;Y coordinate before writing it here. 
    7                     ;;Hide a sprite by moving it down offscreen, 
    8                     ;;by writing any values between #$EF-#$FF here. 
    9                     ;;Sprites are never displayed on the first line of the picture, 
   10                     ;;and it is impossible to place a sprite partially off the top of the screen.
   11                     
   12                     ;;Byte 1
   13                     ;;Tile index number
   14                     ;;For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of PPUCTRL ($2000).
   15                     ;;For 8x16 sprites (bit 5 of PPUCTRL set), the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
   16                     ;;76543210
   17                     ;;||||||||
   18                     ;;|||||||+- Bank ($0000 or $1000) of tiles
   19                     ;;+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
   20                     
   21                     ;;Byte 2
   22                     ;;Attributes
   23                     ;;76543210
   24                     ;;||||||||
   25                     ;;||||||++- Palette (4 to 7) of sprite
   26                     ;;|||+++--- Unimplemented (read 0)
   27                     ;;||+------ Priority (0: in front of background; 1: behind background)
   28                     ;;|+------- Flip sprite horizontally
   29                     ;;+-------- Flip sprite vertically
   30                     
   31                     ;;Byte 3
   32                     ;;X position of left side of sprite.
   33                     ;;X-scroll values of $F9-FF results in parts of the 
   34                     ;;sprite to be past the right edge of the screen, thus invisible.
   35                     ;;It is not possible to have a sprite partially visible on the left edge. 
   36                     ;;Instead, left-clipping through PPUMASK ($2001) can be used to simulate this effect.
   37  07:EC6C            Sprites:
   38  07:EC6C  72 EC             .word Title_Sprites, Game_Sprites, GameOver_Sprites
       07:EC6E  76 EC     
       07:EC70  7A EC     
   39                     
   40  07:EC72            Title_Sprites:
   41  07:EC72  90 00 00          .db $90,$00,$00,$E8
       07:EC75  E8        
   42  07:EC76            Game_Sprites:
   43  07:EC76  62 00 03          .db $62,$00,$03,$72
       07:EC79  72        
   44  07:EC7A            GameOver_Sprites:
   45  07:EC7A  00 00 00          .db $00,$00,$00,$00
       07:EC7D  00        
#[1]   Picross.asm
  112                     
  113           FFFA        .org $FFFA     ;first of the three vectors starts here
  114  07:FFFA  38 C6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  115                                        ;processor will jump to the label NMI:
  116  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  117                                        ;to the label RESET:
  118  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  119                       
  120                     ;;**************************;;
  121                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  122                     ;;      CHR ROM DATA        ;;
  123                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  124                     ;;**************************;; 
  125                       
  126           0008        .bank 8
  127           0000        .org $0000
  128  08:0000              .incbin "CHRROM/Bank0.chr"   ;includes 8KB graphics file from SMB1
  129                       
  130           0009        .bank 9
  131           0000        .org $0000
  132  09:0000              .incbin "CHRROM/Bank1.chr"
  133                       
  134           000A        .bank 10
  135           0000        .org $0000
  136  0A:0000              .incbin "CHRROM/Bank2.chr"
  137                       
  138           000B        .bank 11
  139           0000        .org $0000
  140  0B:0000              .incbin "CHRROM/Bank3.chr"
