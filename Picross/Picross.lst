#[1]   Picross.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/Defines.asm
   14                       .include "Defines/Defines.asm"
    1                     ;; define 0 page stuff here, and SRAM stuff if we have it
    2                     
    3           0000        .rsset $0000
#[3]   Defines/GeneralVars.asm
    4                       .include "Defines/GeneralVars.asm"
    1           0000      temp1                   .rs 1
    2           0001      temp2                   .rs 1
    3           0002      temp3                   .rs 1
    4           0003      temp4                   .rs 1
    5           0004      temp5                   .rs 1
    6           0005      temp6                   .rs 1
    7           0006      temp7                   .rs 1
    8           0007      temp8                   .rs 1
    9           0008      tempx                   .rs 1
   10           0009      tempy                   .rs 1
   11           000A      time                    .rs 1
   12           000B      scaledTime              .rs 1
   13           000C      sleeping                .rs 1
   14           000D      mode_loadFlags  .rs 1
   15                     ;;0rcb xxxx
   16                     ;;r = read from save copy 
   17                     ;;c = write to save copy
   18           000E      game_mode               .rs 1
   19           000F      mode_state              .rs 1
   20           0010      NMI_locks               .rs 1
   21           0011      game_locks              .rs 1
   22           0012      pointer_address .rs 2
   23           0014      pointerB_address .rs 2
   24           0016      table_address   .rs 2
   25           0018      jump_address    .rs 2
   26                     
   27                     ;game modes
   28           0000      TITLE_IDX = $00
   29           0001      GAME_IDX = $01
   30           0002      GAMEOVER_IDX = $02
   31                     
   32                     ;locks for input and rendering
   33           0001      BGLOAD_NMI_LOCK = %00000001
   34           0001      EFFECT_GAME_LOCK = %00000001
   35                     
   36                     
   37                     
#[2]   Defines/Defines.asm
#[3]   Defines/ControllerVars.asm
    5                       .include "Defines/ControllerVars.asm"
    1           0010      GAMEPAD_UP = $10
    2           0020      GAMEPAD_DOWN = $20
    3           0040      GAMEPAD_LEFT = $40
    4           0080      GAMEPAD_RIGHT = $80
    5           0001      GAMEPAD_A = $01
    6           0002      GAMEPAD_B = $02
    7           0004      GAMEPAD_SELECT = $04
    8           0008      GAMEPAD_START = $08
    9                     
   10           00C0      GAMEPAD_HORI = $C0
   11           0030      GAMEPAD_VERT = $30
   12           00F0      GAMEPAD_MOVE = $F0
   13                     
   14           0003      GAMEPAD_AB = $03
   15                     
   16           0009      GAMEPAD_CONFIRM = $09
   17                     
   18           001A      gamepad                 .rs 1
   19           001B      gamepadLast     .rs 1
   20           001C      gamepadPressed  .rs 1
#[2]   Defines/Defines.asm
#[3]   Defines/PPUVariables.asm
    6                       .include "Defines/PPUVariables.asm"
    1           001D      PPU_Control                     .rs 1
    2           001E      PPU_Mask                        .rs 1
    3           001F      PPU_ScrollX                     .rs 1
    4           0020      PPU_ScrollY                     .rs 1
    5           0021      PPU_ScrollNT            .rs 1   ;first two bits
    6           0022      PPU_NT                          .rs 1
    7                     
    8           0023      PPU_PendingWrite        .rs 1
    9           0024      PPU_StringIdx           .rs 1
   10           0025      PPU_String                      .rs 128
   11                     
   12           004F      PPU_STRINGMAX = $4F ;up to size of a full nametable, I think
   13                     
   14           0000      SPRITE_YPOS = $00
   15           0001      SPRITE_ID   = $01
   16           0003      SPRITE_XPOS = $03
   17           0200      SPRITE_DATA = $0200
   18                     
   19           2000      PPU_CTRL = $2000
   20           2001      PPU_MASK = $2001
   21           2002      PPU_STATUS = $2002
   22           2003      OAM_LO = $2003
   23           2004      OAM_DATA = $2004
   24           2005      PPU_SCROLL = $2005
   25           2006      PPU_ADDR = $2006
   26           2007      PPU_DATA = $2007
   27           4014      OAM_HI = $4014
   28                     
   29           0080      DRAW_VERTICAL = $80
   30           0000      DRAW_HORIZONTAL = $00
   31                     
   32           0040      SPRITE_0_MASK = %01000000
#[2]   Defines/Defines.asm
#[3]   Defines/MapperVars.asm
    7                       .include "Defines/MapperVars.asm"
    1           00A5      mapper_address  .rs 2
    2           00A7      currentCHRBankA .rs 1
    3           00A8      currentCHRBankB .rs 1
    4           00A9      currentPRGBank  .rs 1
    5           00AA      mapperDebugVar  .rs 1
    6                     
    7                     
#[2]   Defines/Defines.asm
#[3]   Defines/TitleVariables.asm
    8                       .include "Defines/TitleVariables.asm"
    1                     
#[2]   Defines/Defines.asm
#[3]   Defines/GameVariables.asm
    9                       .include "Defines/GameVariables.asm"
    1           A000      PUZZLE_TABLE = $A000
    2           A036      NAMES_TABLE = $A036
    3           A06C      SPRITES_TABLE = $A06C
    4                     
    5           00AB      tempBank                        .rs 1
    6           00AC      tempPuzz                        .rs 1
    7           00AD      puzzle_address          .rs 2
    8           00AF      clues_address           .rs 2
    9           00B1      title_address           .rs 2
   10           00B3      pause_address           .rs 2
   11           00B5      copy_address        .rs 2
   12           00B7      pause_draw_address  .rs 2
   13           00B9      title_draw_address      .rs 2
   14           00BB      clue_start_address      .rs 2
   15           00BD      clue_draw_address       .rs 2
   16           00BF      clueTableIndex          .rs 1
   17           00C0      clueLineIndex           .rs 1
   18           00C1      clueOffsetShift         .rs 1
   19           00C2      clueDrawAdd                     .rs 1
   20           00C3      clueDrawOffset          .rs 2
   21           00C5      clueDrawDecSize         .rs 1
   22           00C6      clueParity                      .rs 1
   23           00C7      mouse_location          .rs 2
   24           00C9      mouse_index                     .rs 2
   25           00CB      currentPaintTile        .rs 1
   26           00CC      pauseState                      .rs 1
   27           00CD      pauseInputLock          .rs 1
   28           00CE      holdTimer                       .rs 1
   29           00CF      targetGameMode          .rs 1
   30           00D0      targetScreenLoad        .rs 1
   31           00D1      recordSet                       .rs 1
#[2]   Defines/Defines.asm
   10           00D2      sound_ptr .rs 2
   11           00D4      sound_ptr2 .rs 2
   12           00D6      current_song .rs 1
   13                     ;; 0100 is the stack
   14                     ;; 0200 is sprite ram
   15           0300        .rsset $0300
   16           0400        .rsset $0400
   17           0500        .rsset $0500
   18           0600        .rsset $0600
   19           0700        .rsset $0700
   20           6000        .rsset $6000
#[3]   Defines/ScreenStateVariables.asm
   21                       .include "Defines/ScreenStateVariables.asm"
    1           6000      Screen_Copy             .rs 1024
    2           6400      ScreenB_Copy    .rs 1024
    3           6800      SaveScreen_Copy .rs 1024
    4           6C00      Palette_Copy    .rs 32
#[2]   Defines/Defines.asm
   22           7000        .rsset $7000
#[3]   Defines/SaveVariables.asm
   23                       .include "Defines/SaveVariables.asm"
    1           7000      hasContinue .rs 1
    2           7001      solutionCount           .rs 1
    3           7002      nonSolutionCount        .rs 1
    4           7003      GameTime                        .rs 4   ;in order - second, ten second, minute, 10 minute - max out at 99 minutes
    5           7007      bank_index      .rs 1
    6           7008      puzzle_index .rs 1
    7           7009      image_table_offset .rs 1
    8                     ;we can save these for the continue
    9                     ;on a continue- we just need to load the back ground as it was
   10                     ;we'll save out data for the puzzles- just need to know if it's 1) complete and 2) the time
   11                     ;we can do that in 4 bytes each, so 324 bytes
   12           700A      puzzle_clear_bank0 .rs 108
   13           7076      puzzle_clear_bank1 .rs 108
   14           70E2      puzzle_clear_bank2 .rs 108
   15                     
#[2]   Defines/Defines.asm
   24                     
#[1]   Picross.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/PPUMacros.asm
    3                             .include "Macros/PPUMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetPPUControl .macro
    6                     
    7                       LDA #\1  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    8                       STA PPU_CTRL
    9                       LDA #\2   ; enable sprites, enable background, no clipping on left side
   10                       STA PPU_MASK
   11                             
   12                       .endm
   13                       
   14                     MACROSetPPUAddress .macro
   15                     
   16                       LDA PPU_STATUS             ; read PPU status to reset the high/low latch
   17                       LDA #HIGH(\1)
   18                       STA PPU_ADDR            ; write the high byte of $2000 address
   19                       LDA #LOW(\1)
   20                       STA PPU_ADDR           ; write the low byte of $2000 address
   21                       
   22                       .endm
   23                         
   24                     
   25                     MACROAddPPUStringEntryRawData .macro
   26                     
   27                       LDA #$01
   28                       STA PPU_PendingWrite
   29                       LDA \1
   30                       JSR WriteToPPUString
   31                       LDA \2
   32                       JSR WriteToPPUString
   33                       LDA \3
   34                       JSR WriteToPPUString
   35                       LDA \4 
   36                       JSR WriteToPPUString
   37                       
   38                       .endm
   39                     
   40                     MACROAddPPUStringEntryRepeat .macro
   41                     
   42                       LDA #$01
   43                       STA PPU_PendingWrite
   44                       LDA \1
   45                       JSR WriteToPPUString
   46                       LDA \2
   47                       JSR WriteToPPUString
   48                       LDA #$40
   49                       ORA \3
   50                       ORA \4
   51                       JSR WriteToPPUString
   52                       LDA \5
   53                       JSR WriteToPPUString
   54                       
   55                       .endm
   56                       
   57                     MACROAddPPUStringEntryTable .macro
   58                      
   59                       LDA #$01
   60                       STA PPU_PendingWrite
   61                       LDA \1
   62                       JSR WriteToPPUString
   63                       LDA \2
   64                       JSR WriteToPPUString
   65                       LDA #$20
   66                       ORA \3
   67                       JSR WriteToPPUString
   68                       LDA #LOW(\4)
   69                       JSR WriteToPPUString
   70                       LDA #HIGH(\4)
   71                       JSR WriteToPPUString
   72                      
   73                       .endm
   74                     
   75                     MACROAddPPUStringEntryTablePtr .macro
   76                      
   77                       LDA #$01
   78                       STA PPU_PendingWrite
   79                       LDA \1
   80                       JSR WriteToPPUString
   81                       LDA \2
   82                       JSR WriteToPPUString
   83                       LDA #$20
   84                       ORA \3
   85                       JSR WriteToPPUString
   86                       LDA \4
   87                       JSR WriteToPPUString
   88                       LDA \4+1
   89                       JSR WriteToPPUString
   90                      
   91                       .endm
   92                     
#[2]   Macros/Macros.asm
#[3]   Macros/CallDynamicJump.asm
    4                             .include "Macros/CallDynamicJump.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROCallDynamicJump .macro
    6                     
    7                       LDA \1
    8                       JSR Dynamic_Jump
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetDoubleIndex.asm
    5                             .include "Macros/GetDoubleIndex.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = index to double
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROGetDoubleIndex .macro
    5                     
    6                             LDA \1
    7                             ASL A
    8                             TAY
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetLabelPointer.asm
    6                             .include "Macros/GetLabelPointer.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label we want address of
    3                     ;; \2 = address to store address to
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROGetLabelPointer .macro
    6                     
    7                             LDA #HIGH(\1)
    8                             LDX #LOW(\1)
    9                             
   10                             STX \2
   11                             STA \2+1
   12                             
   13                       .endm
   14                       
   15                     MACROGetPointer .macro
   16                     
   17                             LDA \1
   18                             STA \2
   19                             LDA \1+1
   20                             STA \2+1
   21                     
   22                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/FlagMacros.asm
    7                             .include "Macros/FlagMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetFlags .macro
    6                     
    7                       LDA \1
    8                       ORA #\2
    9                       STA \1
   10                             
   11                       .endm
   12                       
   13                     MACROClearFlags .macro
   14                     
   15                       LDA #\2
   16                       EOR #$FF
   17                       AND \1  
   18                       STA \1
   19                     
   20                       .endm
#[2]   Macros/Macros.asm
#[1]   Picross.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1                     
    2                     
    3           0000        .bank 0
    4           8000        .org $8000
    5                       
#[3]   Puzzles/house.asm
    6                       .include "Puzzles/house.asm" 
    1  00:8000            house:
    2  00:8000  02 82 00    .db $02, $82, $00, $21
       00:8003  21        
    3  00:8004  01 E0 0F    .db $01, $E0, $0F, $00, $78, $36, $C1, $08, $03, $80, $E7, $CE, $ED, $EE, $47, $44, $47, $44, $FF, $FE, $FF, $FE, $FF, $FE, $AB, $AA, $03, $80, $FF, $FE
       00:8007  00 78 36  
       00:800A  C1 08 03  
       00:800D  80 E7 CE  
       00:8010  ED EE 47  
       00:8013  44 47 44  
       00:8016  FF FE FF  
       00:8019  FE FF FE  
       00:801C  AB AA 03  
       00:801F  80 FF FE  
    4  00:8022  14 21 FF    .db $14, $21, $FF, $17, $20, $FF, $14, $21, $FF, $13, $10, $FF, $14, $12, $FF, $17, $10, $FF, $82, $10, $FF, $C2, $FF, $63, $10, $FF, $17, $10, $FF, $14, $11, $10, $FF, $13, $10, $FF, $14, $21, $FF, $17, $10, $FF, $14, $21, $FF
       00:8025  17 20 FF  
       00:8028  14 21 FF  
       00:802B  13 10 FF  
       00:802E  14 12 FF  
       00:8031  17 10 FF  
       00:8034  82 10 FF  
       00:8037  C2 FF 63  
       00:803A  10 FF 17  
       00:803D  10 FF 14  
       00:8040  11 10 FF  
       00:8043  13 10 FF  
       00:8046  14 21 FF  
       00:8049  17 10 FF  
       00:804C  14 21 FF  
    5  00:804F  40 FF 40    .db $40, $FF, $40, $FF, $22, $40, $FF, $11, $20, $FF, $30, $FF, $35, $30, $FF, $34, $23, $FF, $11, $31, $FF, $11, $31, $FF, $F0, $FF, $F0, $FF, $F0, $FF, $11, $13, $11, $10, $FF, $30, $FF, $F0, $FF
       00:8052  FF 22 40  
       00:8055  FF 11 20  
       00:8058  FF 30 FF  
       00:805B  35 30 FF  
       00:805E  34 23 FF  
       00:8061  11 31 FF  
       00:8064  11 31 FF  
       00:8067  F0 FF F0  
       00:806A  FF F0 FF  
       00:806D  11 13 11  
       00:8070  10 FF 30  
       00:8073  FF F0 FF  
    6  00:8076            houseImage:
    7  00:8076  AA AB FE   .db $AA, $AB, $FE, $AA, $AB, $FE, $AA, $AB, $FE, $AA, $FB, $FE, $AA, $2A, $BA, $AA, $A3, $2A, $A9, $5A, $3F, $29, $54, $63, $3F, $24, $62, $AF, $CE, $A2, $8A, $BF, $3A, $89, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $77, $75, $77, $77, $FF, $D5, $FF, $F5, $55, $55, $55, $40, $FF
       00:8079  AA AB FE  
       00:807C  AA AB FE  
       00:807F  AA FB FE  
       00:8082  AA 2A BA  
       00:8085  AA A3 2A  
       00:8088  A9 5A 3F  
       00:808B  29 54 63  
       00:808E  3F 24 62  
       00:8091  AF CE A2  
       00:8094  8A BF 3A  
       00:8097  89 55 55  
       00:809A  55 55 55  
       00:809D  55 55 55  
       00:80A0  55 55 55  
       00:80A3  77 75 77  
       00:80A6  77 FF D5  
       00:80A9  FF F5 55  
       00:80AC  55 55 40  
       00:80AF  FF        
    8  00:80B0            houseName:
    9  00:80B0  05 11 18    .db $05, $11, $18, $1E, $1C, $0E, $FF
       00:80B3  1E 1C 0E  
       00:80B6  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test.asm
    7                       .include "Puzzles/test.asm"
    1  00:80B7            test:
    2  00:80B7  02 01 00    .db $02, $01, $00, $00
       00:80BA  00        
    3  00:80BB  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:80BE  00 00 00  
       00:80C1  00 00 00  
       00:80C4  00 00 00  
       00:80C7  00 00 00  
       00:80CA  00 00 00  
       00:80CD  00 00 00  
       00:80D0  00 00 00  
       00:80D3  00 00 00  
       00:80D6  00 00 00  
    4  00:80D9  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80DC  FF 00 FF  
       00:80DF  00 FF 00  
       00:80E2  FF 00 FF  
       00:80E5  00 FF 00  
       00:80E8  FF 00 FF  
       00:80EB  00 FF 00  
       00:80EE  FF 00 FF  
       00:80F1  00 FF 00  
       00:80F4  FF 00 FF  
    5  00:80F7  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80FA  FF 00 FF  
       00:80FD  00 FF 00  
       00:8100  FF 00 FF  
       00:8103  00 FF 00  
       00:8106  FF 00 FF  
       00:8109  00 FF 00  
       00:810C  FF 00 FF  
       00:810F  00 FF 00  
       00:8112  FF 00 FF  
    6  00:8115            testImage:
    7  00:8115  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8118  1B 1B 1B  
       00:811B  1B 1B 1B  
       00:811E  1B 1B 1B  
       00:8121  1B 1B 1B  
       00:8124  1B 1B 1B  
       00:8127  1B 1B 1B  
       00:812A  1B 1B 1B  
       00:812D  1B 1B 1B  
       00:8130  1B 1B 1B  
       00:8133  1B 1B 1B  
       00:8136  1B 1B 1B  
       00:8139  1B 1B 1B  
       00:813C  1B 1B 1B  
       00:813F  1B 1B 1B  
       00:8142  1B 1B 1B  
       00:8145  1B 1B 1B  
       00:8148  1B 1B 1B  
       00:814B  1B 1B 00  
       00:814E  FF        
    8  00:814F            testName:
    9  00:814F  04 1D 0E    .db $04, $1D, $0E, $1C, $1D, $FF
       00:8152  1C 1D FF  
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test5.asm
    8                       .include "Puzzles/test5.asm"
    1  00:8155            test5:
    2  00:8155  00 01 00    .db $00, $01, $00, $32
       00:8158  32        
    3  00:8159  80 00 00    .db $80, $00, $00, $00, $00
       00:815C  00 00     
    4  00:815E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:8161  FF 00 FF  
       00:8164  00 FF 00  
       00:8167  FF        
    5  00:8168  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:816B  FF 00 FF  
       00:816E  00 FF 00  
       00:8171  FF        
    6  00:8172            test5Image:
    7  00:8172  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8175  1B 1B 1B  
       00:8178  00 FF     
    8  00:817A            test5Name:
    9  00:817A  05 1D 0E    .db $05, $1D, $0E, $1C, $1D, $05, $FF
       00:817D  1C 1D 05  
       00:8180  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test10.asm
    9                       .include "Puzzles/test10.asm"
    1  00:8181            test10:
    2  00:8181  01 01 00    .db $01, $01, $00, $16
       00:8184  16        
    3  00:8185  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:8188  00 00 00  
       00:818B  00 00 00  
       00:818E  00 00 00  
       00:8191  00 00 00  
       00:8194  00 00 00  
       00:8197  00 00     
    4  00:8199  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:819C  FF 00 FF  
       00:819F  00 FF 00  
       00:81A2  FF 00 FF  
       00:81A5  00 FF 00  
       00:81A8  FF 00 FF  
       00:81AB  00 FF     
    5  00:81AD  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:81B0  FF 00 FF  
       00:81B3  00 FF 00  
       00:81B6  FF 00 FF  
       00:81B9  00 FF 00  
       00:81BC  FF 00 FF  
       00:81BF  00 FF     
    6  00:81C1            test10Image:
    7  00:81C1  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $FF
       00:81C4  1B 1B 1B  
       00:81C7  1B 1B 1B  
       00:81CA  1B 1B 1B  
       00:81CD  1B 1B 1B  
       00:81D0  1B 1B 1B  
       00:81D3  1B 1B 1B  
       00:81D6  1B 1B 1B  
       00:81D9  1B FF     
    8  00:81DB            test10Name:
    9  00:81DB  06 1D 0E    .db $06, $1D, $0E, $1C, $1D, $01, $00, $FF
       00:81DE  1C 1D 01  
       00:81E1  00 FF     
#[2]   Banks/Bank0.asm
#[3]   Puzzles/myGlyph.asm
   10                       .include "Puzzles/myGlyph.asm"
    1  00:81E3            myGlyph:
    2  00:81E3  02 0F 00    .db $02, $0F, $00, $00
       00:81E6  00        
    3  00:81E7  AA AA 00    .db $AA, $AA, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00
       00:81EA  00 80 00  
       00:81ED  00 00 80  
       00:81F0  00 00 00  
       00:81F3  80 00 00  
       00:81F6  00 80 00  
       00:81F9  00 00 80  
       00:81FC  00 00 00  
       00:81FF  80 00 00  
       00:8202  00 80 00  
    4  00:8205  11 11 11    .db $11, $11, $11, $11, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF
       00:8208  11 FF 00  
       00:820B  FF 10 FF  
       00:820E  00 FF 10  
       00:8211  FF 00 FF  
       00:8214  10 FF 00  
       00:8217  FF 10 FF  
       00:821A  00 FF 10  
       00:821D  FF 00 FF  
       00:8220  10 FF 00  
       00:8223  FF 10 FF  
    5  00:8226  11 11 11    .db $11, $11, $11, $11, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF
       00:8229  11 FF 00  
       00:822C  FF 10 FF  
       00:822F  00 FF 10  
       00:8232  FF 00 FF  
       00:8235  10 FF 00  
       00:8238  FF 10 FF  
       00:823B  00 FF 10  
       00:823E  FF 00 FF  
       00:8241  10 FF 00  
       00:8244  FF 10 FF  
    6  00:8247            myGlyphImage:
    7  00:8247  D4 1F F0   .db $D4, $1F, $F0, $F3, $40, $F7, $57, $0D, $80, $AE, $8D, $16, $FA, $F0, $F5, $55, $5F, $AF, $C5, $AE, $F9, $7E, $8C, $EB, $E5, $55, $71, $B7, $DC, $A9, $7B, $EB, $4A, $21, $F2, $BD, $60, $99, $FA, $EA, $A1, $69, $3C, $02, $55, $25, $BF, $FA, $30, $06, $AF, $E0, $A0, $80, $3F, $C0, $00, $FF
       00:824A  F3 40 F7  
       00:824D  57 0D 80  
       00:8250  AE 8D 16  
       00:8253  FA F0 F5  
       00:8256  55 5F AF  
       00:8259  C5 AE F9  
       00:825C  7E 8C EB  
       00:825F  E5 55 71  
       00:8262  B7 DC A9  
       00:8265  7B EB 4A  
       00:8268  21 F2 BD  
       00:826B  60 99 FA  
       00:826E  EA A1 69  
       00:8271  3C 02 55  
       00:8274  25 BF FA  
       00:8277  30 06 AF  
       00:827A  E0 A0 80  
       00:827D  3F C0 00  
       00:8280  FF        
    8  00:8281            myGlyphName:
    9  00:8281  07 16 22    .db $07, $16, $22, $10, $15, $22, $19, $11, $FF
       00:8284  10 15 22  
       00:8287  19 11 FF  
#[2]   Banks/Bank0.asm
   11                     
   12           0001        .bank 1
   13           A000        .org $A000
   14                     ;puzzles
   15  01:A000  55 81       .word test5, test10, myGlyph, test, test, test, test, test, test
       01:A002  81 81     
       01:A004  E3 81     
       01:A006  B7 80     
       01:A008  B7 80     
       01:A00A  B7 80     
       01:A00C  B7 80     
       01:A00E  B7 80     
       01:A010  B7 80     
   16  01:A012  00 80       .word house, test, test, test, test, test, test, test, test
       01:A014  B7 80     
       01:A016  B7 80     
       01:A018  B7 80     
       01:A01A  B7 80     
       01:A01C  B7 80     
       01:A01E  B7 80     
       01:A020  B7 80     
       01:A022  B7 80     
   17  01:A024  00 80       .word house, test, test, test, test, test, test, test, test
       01:A026  B7 80     
       01:A028  B7 80     
       01:A02A  B7 80     
       01:A02C  B7 80     
       01:A02E  B7 80     
       01:A030  B7 80     
       01:A032  B7 80     
       01:A034  B7 80     
   18                     ;puzzle names
   19  01:A036  7A 81       .word test5Name, test10Name, myGlyphName, testName, testName, testName, testName, testName, testName
       01:A038  DB 81     
       01:A03A  81 82     
       01:A03C  4F 81     
       01:A03E  4F 81     
       01:A040  4F 81     
       01:A042  4F 81     
       01:A044  4F 81     
       01:A046  4F 81     
   20  01:A048  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A04A  4F 81     
       01:A04C  4F 81     
       01:A04E  4F 81     
       01:A050  4F 81     
       01:A052  4F 81     
       01:A054  4F 81     
       01:A056  4F 81     
       01:A058  4F 81     
   21  01:A05A  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A05C  4F 81     
       01:A05E  4F 81     
       01:A060  4F 81     
       01:A062  4F 81     
       01:A064  4F 81     
       01:A066  4F 81     
       01:A068  4F 81     
       01:A06A  4F 81     
   22                     ;puzzle sprites
   23  01:A06C  00 00 00    .db $00, $00, $00, $00
       01:A06F  00        
   24  01:A070  00 00 00    .db $00, $00, $00, $00
       01:A073  00        
   25  01:A074  00 00 00    .db $00, $00, $00, $00
       01:A077  00        
   26  01:A078  00 00 00    .db $00, $00, $00, $00
       01:A07B  00        
   27  01:A07C  00 00 00    .db $00, $00, $00, $00
       01:A07F  00        
   28  01:A080  00 00 00    .db $00, $00, $00, $00
       01:A083  00        
   29  01:A084  00 00 00    .db $00, $00, $00, $00
       01:A087  00        
   30  01:A088  00 00 00    .db $00, $00, $00, $00
       01:A08B  00        
   31  01:A08C  00 00 00    .db $00, $00, $00, $00
       01:A08F  00        
   32  01:A090  00 00 00    .db $00, $00, $00, $00
       01:A093  00        
   33  01:A094  00 00 00    .db $00, $00, $00, $00
       01:A097  00        
   34  01:A098  00 00 00    .db $00, $00, $00, $00
       01:A09B  00        
   35  01:A09C  00 00 00    .db $00, $00, $00, $00
       01:A09F  00        
   36  01:A0A0  00 00 00    .db $00, $00, $00, $00
       01:A0A3  00        
   37  01:A0A4  00 00 00    .db $00, $00, $00, $00
       01:A0A7  00        
   38  01:A0A8  00 00 00    .db $00, $00, $00, $00
       01:A0AB  00        
   39  01:A0AC  00 00 00    .db $00, $00, $00, $00
       01:A0AF  00        
   40  01:A0B0  00 00 00    .db $00, $00, $00, $00
       01:A0B3  00        
   41  01:A0B4  00 00 00    .db $00, $00, $00, $00
       01:A0B7  00        
   42  01:A0B8  00 00 00    .db $00, $00, $00, $00
       01:A0BB  00        
   43  01:A0BC  00 00 00    .db $00, $00, $00, $00
       01:A0BF  00        
   44  01:A0C0  00 00 00    .db $00, $00, $00, $00
       01:A0C3  00        
   45  01:A0C4  00 00 00    .db $00, $00, $00, $00
       01:A0C7  00        
   46  01:A0C8  00 00 00    .db $00, $00, $00, $00
       01:A0CB  00        
   47  01:A0CC  00 00 00    .db $00, $00, $00, $00
       01:A0CF  00        
   48  01:A0D0  00 00 00    .db $00, $00, $00, $00
       01:A0D3  00        
   49  01:A0D4  00 00 00    .db $00, $00, $00, $00
       01:A0D7  00        
   50                     ;bank song, A0D8
#[3]   Music/Bank0.i
   51                       .include "Music/Bank0.i"  ;holds the data for bank song
    1  01:A0D8            bank0_header:
    2  01:A0D8  04            .byte $04           ;4 streams
    3                         
    4  01:A0D9  00            .byte MUSIC_SQ1     ;which stream
    5  01:A0DA  01            .byte $01           ;status byte (stream enabled)
    6  01:A0DB  00            .byte SQUARE_1      ;which channel
    7  01:A0DC  70            .byte $70           ;initial duty (01)
    8  01:A0DD  0B            .byte ve_long_decay ;volume envelope
    9  01:A0DE  F9 A0         .word bank0_square1 ;pointer to stream
   10  01:A0E0  3A            .byte $3A           ;tempo
   11                         
   12  01:A0E1  01            .byte MUSIC_SQ2     ;which stream
   13  01:A0E2  01            .byte $01           ;status byte (stream enabled)
   14  01:A0E3  01            .byte SQUARE_2      ;which channel
   15  01:A0E4  70            .byte $70           ;initial duty (10)
   16  01:A0E5  03            .byte ve_tgl_1      ;volume envelope
   17  01:A0E6  6B A2         .word bank0_square2 ;pointer to stream
   18  01:A0E8  3A            .byte $3A           ;tempo
   19                         
   20  01:A0E9  02            .byte MUSIC_TRI     ;which stream
   21  01:A0EA  01            .byte $01           ;status byte (stream enabled)
   22  01:A0EB  02            .byte TRIANGLE      ;which channel
   23  01:A0EC  80            .byte $80           ;initial volume (on)
   24  01:A0ED  03            .byte ve_tgl_1      ;volume envelope
   25  01:A0EE  5E A4         .word bank0_tri     ;pointer to stream
   26  01:A0F0  3A            .byte $3A           ;tempo
   27                         
   28  01:A0F1  03            .byte MUSIC_NOI     ;which stream
   29  01:A0F2  01            .byte $01           ;enabled
   30  01:A0F3  03            .byte NOISE     
   31  01:A0F4  30            .byte $30           ;initial duty_vol
   32  01:A0F5  0A            .byte ve_hiHat_decay ;volume envelope
   33  01:A0F6  4A A6         .word bank0_noise   ;pointer to stream
   34  01:A0F8  3A            .byte $3A           ;tempo
   35                     
   36                         
   37  01:A0F9            bank0_square1:
   38                     
   39  01:A0F9  A2 0B             .byte volume_envelope, ve_long_decay 
   40  01:A0FB  A9 01             .byte pitch_envelope, pe_mod
   41  01:A0FD  83 5E         .byte quarter, rest
   42  01:A0FF  87 29             .byte d_eighth, D5
   43  01:A101  8E 27             .byte d_half_d_eight, C5
   44  01:A103  81 26 27          .byte sixteenth, B4, C5
   45  01:A106  82 26             .byte eighth, B4
   46  01:A108  81 21             .byte sixteenth, Fs4
   47  01:A10A  82 22 24          .byte eighth, G4,  A4
   48  01:A10D  81 26             .byte sixteenth, B4
   49  01:A10F  87 21             .byte d_eighth, Fs4
   50  01:A111  8F 24             .byte whole_quarter_sixteenth, A4
   51  01:A113  81 5E             .byte sixteenth, rest
   52  01:A115  15 16 17          .byte Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       01:A118  18 17 16  
       01:A11B  15        
   53                             
   54  01:A11C  83 5E             .byte quarter, rest
   55  01:A11E  87 29             .byte d_eighth, D5
   56  01:A120  8E 27             .byte d_half_d_eight, C5
   57  01:A122  81 26 27          .byte sixteenth, B4, C5
   58  01:A125  82 26             .byte eighth, B4
   59  01:A127  81 21             .byte sixteenth, Fs4
   60  01:A129  82 22 2B          .byte eighth, G4,  E5
   61  01:A12C  81 2E             .byte sixteenth, G5
   62  01:A12E  8A 2D             .byte d_whole, Fs5
   63  01:A130  81 5E             .byte sixteenth, rest
   64  01:A132  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       01:A135  16 18 1D  
       01:A138  21        
   65                         
   66  01:A139  83 5E             .byte quarter, rest
   67  01:A13B  87 2E             .byte d_eighth, G5
   68  01:A13D  8E 2C             .byte d_half_d_eight, F5
   69  01:A13F  81 2B 2C          .byte sixteenth, E5, F5
   70  01:A142  82 2B             .byte eighth, E5
   71  01:A144  81 26             .byte sixteenth, B4
   72  01:A146  82 27 29          .byte eighth, C5,  D5
   73  01:A149  81 2B 29          .byte sixteenth, E5, D5 
   74  01:A14C  82 26 27          .byte eighth, B4, C5, A4, B4, G4 
       01:A14F  24 26 22  
   75  01:A152  81 27 26          .byte sixteenth, C5, B4, G4, F4, D4
       01:A155  22 20 1D  
   76  01:A158  82 20             .byte eighth, F4
   77  01:A15A  81 24             .byte sixteenth, A4
   78  01:A15C  82 22             .byte eighth, G4
   79  01:A15E  81 27             .byte sixteenth, C5
   80  01:A160  8C 26             .byte five_eighths, B4
   81                             
   82  01:A162  83 5E             .byte quarter, rest
   83  01:A164  87 29             .byte d_eighth, D5
   84  01:A166  8E 27             .byte d_half_d_eight, C5
   85  01:A168  81 26 27          .byte sixteenth, B4, C5
   86  01:A16B  82 26             .byte eighth, B4
   87  01:A16D  81 21             .byte sixteenth, Fs4
   88  01:A16F  82 22 24          .byte eighth, G4,  A4
   89  01:A172  81 22             .byte sixteenth, G4
   90  01:A174  8A 21             .byte d_whole, Fs4
   91  01:A176  81 5E             .byte sixteenth, rest
   92  01:A178  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       01:A17B  16 18 1D  
       01:A17E  21        
   93                             
   94                             ;;bridge
   95                             
   96  01:A17F  87 24 22          .byte d_eighth, A4, G4, Fs4
       01:A182  21        
   97  01:A183  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       01:A186  0A 2E 0B  
       01:A189  2D 0C     
   98  01:A18B  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       01:A18E  0A 24 09  
       01:A191  22        
   99  01:A192  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       01:A195  1D 18     
  100  01:A197  82 1B             .byte eighth, C4
  101  01:A199  81 16             .byte sixteenth, G3
  102  01:A19B  91 15             .byte whole_sixteenth, Fs3
  103  01:A19D  84 5E             .byte half, rest
  104  01:A19F  81 5E             .byte sixteenth, rest
  105  01:A1A1  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:A1A4  18 16 18  
       01:A1A7  1D 21     
  106                             
  107  01:A1A9  87 24 22          .byte d_eighth, A4, G4, Fs4
       01:A1AC  21        
  108  01:A1AD  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       01:A1B0  0A 2E 0B  
       01:A1B3  2D 0C     
  109  01:A1B5  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       01:A1B8  0A 24 09  
       01:A1BB  22        
  110  01:A1BC  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       01:A1BF  1D 18     
  111  01:A1C1  82 1B             .byte eighth, C4
  112  01:A1C3  81 22             .byte sixteenth, G4
  113  01:A1C5  91 21             .byte whole_sixteenth, Fs4
  114  01:A1C7  84 5E             .byte half, rest
  115  01:A1C9  81 5E             .byte sixteenth, rest
  116  01:A1CB  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:A1CE  18 16 18  
       01:A1D1  1D 21     
  117                     
  118                             ;; reach-around
  119  01:A1D3  A2 0B             .byte volume_envelope, ve_long_decay 
  120  01:A1D5  87 22 22          .byte d_eighth, G4, G4
  121  01:A1D8  A2 04             .byte volume_envelope, ve_tgl_2
  122  01:A1DA  82 24             .byte eighth, A4
  123  01:A1DC  A2 03             .byte volume_envelope, ve_tgl_1
  124  01:A1DE  80 5E 38          .byte thirtysecond, rest, F6
  125  01:A1E1  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:A1E4  33 30 2E  
       01:A1E7  2D 30     
  126  01:A1E9  82 2E             .byte eighth, G5
  127  01:A1EB  81 27             .byte sixteenth, C5
  128  01:A1ED  82 2C             .byte eighth, F5
  129  01:A1EF  81 29             .byte sixteenth, D5
  130  01:A1F1  82 2E             .byte eighth, G5
  131  01:A1F3  81 2D             .byte sixteenth, Fs5
  132  01:A1F5  82 30             .byte eighth, A5
  133  01:A1F7  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       01:A1FA  2D 33 30  
  134                             
  135  01:A1FD  A2 0B             .byte volume_envelope, ve_long_decay 
  136  01:A1FF  87 22 22          .byte d_eighth, G4, G4
  137  01:A202  A2 04             .byte volume_envelope, ve_tgl_2
  138  01:A204  82 24             .byte eighth, A4
  139  01:A206  A2 03             .byte volume_envelope, ve_tgl_1
  140  01:A208  80 5E 1C          .byte thirtysecond, rest, Cs4
  141  01:A20B  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       01:A20E  29 24 29  
       01:A211  2D        
  142  01:A212  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       01:A215  2B 24 2C  
       01:A218  27 21     
  143  01:A21A  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6, D6
       01:A21D  24 29 24  
       01:A220  1F 2E 2D  
       01:A223  33 35     
  144                             
  145  01:A225  A2 0B             .byte volume_envelope, ve_long_decay 
  146  01:A227  87 22 22          .byte d_eighth, G4, G4
  147  01:A22A  A2 04             .byte volume_envelope, ve_tgl_2
  148  01:A22C  82 24             .byte eighth, A4
  149  01:A22E  A2 03             .byte volume_envelope, ve_tgl_1
  150  01:A230  80 5E 38          .byte thirtysecond, rest, F6
  151  01:A233  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:A236  33 30 2E  
       01:A239  2D 30     
  152  01:A23B  82 2E             .byte eighth, G5
  153  01:A23D  81 27             .byte sixteenth, C5
  154  01:A23F  82 2C             .byte eighth, F5
  155  01:A241  81 29             .byte sixteenth, D5
  156  01:A243  82 2E             .byte eighth, G5
  157  01:A245  81 2D             .byte sixteenth, Fs5
  158  01:A247  82 30             .byte eighth, A5
  159  01:A249  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       01:A24C  2D 33 30  
  160                             
  161  01:A24F  A2 0B             .byte volume_envelope, ve_long_decay 
  162  01:A251  87 22 22          .byte d_eighth, G4, G4
  163  01:A254  A2 04             .byte volume_envelope, ve_tgl_2
  164  01:A256  82 24             .byte eighth, A4
  165  01:A258  A2 0B             .byte volume_envelope, ve_long_decay 
  166  01:A25A  88 5E             .byte d_quarter, rest
  167  01:A25C  8C 24             .byte five_eighths, A4
  168  01:A25E  A2 03             .byte volume_envelope, ve_tgl_1
  169  01:A260  81 5E             .byte sixteenth, rest
  170  01:A262  82 21 22          .byte eighth, Fs4, G4, Gs4
       01:A265  23        
  171  01:A266  81 24             .byte sixteenth, A4
  172                     
  173  01:A268  A1                .byte loop
  174  01:A269  F9 A0         .word bank0_square1
  175                             
  176                             
  177                     
  178  01:A26B            bank0_square2:
  179                     
  180  01:A26B  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:A26E  0C 05     
  181  01:A270  82 11             .byte eighth, D3
  182  01:A272  81 05             .byte sixteenth, D2
  183  01:A274  88 0F             .byte d_quarter, C3
  184  01:A276  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:A279  0F        
  185  01:A27A  05 0A 0C          .byte D2, G2, A2, D2 
       01:A27D  05        
  186  01:A27E  82 11             .byte eighth, D3
  187  01:A280  81 05             .byte sixteenth, D2
  188  01:A282  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       01:A285  0A 0B     
  189  01:A287  81 0C             .byte sixteenth, A2
  190  01:A289  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:A28C  0C 05     
  191  01:A28E  82 11             .byte eighth, D3
  192  01:A290  81 05             .byte sixteenth, D2
  193  01:A292  88 0F             .byte d_quarter, C3
  194  01:A294  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:A297  0F        
  195  01:A298  05 0A 0C          .byte D2, G2, A2, D2 
       01:A29B  05        
  196  01:A29C  82 11             .byte eighth, D3
  197  01:A29E  81 05             .byte sixteenth, D2
  198  01:A2A0  82 0F             .byte eighth, C3 
  199  01:A2A2  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       01:A2A5  0B 0C 0B  
       01:A2A8  0A 09     
  200                             
  201  01:A2AA  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:A2AD  0C 05     
  202  01:A2AF  82 11             .byte eighth, D3
  203  01:A2B1  81 05             .byte sixteenth, D2
  204  01:A2B3  88 0F             .byte d_quarter, C3
  205  01:A2B5  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:A2B8  0F        
  206  01:A2B9  05 0A 0C          .byte D2, G2, A2, D2 
       01:A2BC  05        
  207  01:A2BD  82 11             .byte eighth, D3
  208  01:A2BF  81 05             .byte sixteenth, D2
  209  01:A2C1  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       01:A2C4  0A 0B     
  210  01:A2C6  81 0C             .byte sixteenth, A2
  211  01:A2C8  05 0A 0C          .byte D2, G2, A2, D2 
       01:A2CB  05        
  212  01:A2CC  82 11             .byte eighth, D3
  213  01:A2CE  81 05             .byte sixteenth, D2
  214  01:A2D0  88 0F             .byte d_quarter, C3
  215  01:A2D2  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:A2D5  0F        
  216  01:A2D6  05 0A 0C          .byte D2, G2, A2, D2 
       01:A2D9  05        
  217  01:A2DA  82 11             .byte eighth, D3
  218  01:A2DC  81 05             .byte sixteenth, D2
  219  01:A2DE  82 0F             .byte eighth, C3 
  220  01:A2E0  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       01:A2E3  0C 0A 0C  
       01:A2E6  11 15     
  221                             
  222  01:A2E8  0A 0F 11          .byte G2, C3, D3, G2 
       01:A2EB  0A        
  223  01:A2EC  82 16             .byte eighth, G3
  224  01:A2EE  81 0A             .byte sixteenth, G2
  225  01:A2F0  88 14             .byte d_quarter, F3
  226  01:A2F2  81 0F 11          .byte sixteenth, C3, D3, F3
       01:A2F5  14        
  227  01:A2F6  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       01:A2F9  11 0A     
  228  01:A2FB  82 16             .byte eighth, G3
  229  01:A2FD  81 0A             .byte sixteenth, G2
  230  01:A2FF  88 14             .byte d_quarter, F3
  231  01:A301  81 14 13          .byte sixteenth, F3, E3, D3
       01:A304  11        
  232  01:A305  0A 0F 11          .byte G2, C3, D3, G2 
       01:A308  0A        
  233  01:A309  82 16             .byte eighth, G3
  234  01:A30B  81 0A             .byte sixteenth, G2
  235  01:A30D  88 14             .byte d_quarter, F3
  236  01:A30F  81 0F 11          .byte sixteenth, C3, D3, F3
       01:A312  14        
  237  01:A313  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       01:A316  11 0A     
  238  01:A318  82 16             .byte eighth, G3
  239  01:A31A  81 0A             .byte sixteenth, G2
  240  01:A31C  88 14             .byte d_quarter, F3
  241  01:A31E  81 14 13          .byte sixteenth, F3, E3, D3
       01:A321  11        
  242                     
  243  01:A322  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:A325  0C 05     
  244  01:A327  82 11             .byte eighth, D3
  245  01:A329  81 05             .byte sixteenth, D2
  246  01:A32B  88 0F             .byte d_quarter, C3
  247  01:A32D  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:A330  0F        
  248  01:A331  05 0A 0C          .byte D2, G2, A2, D2 
       01:A334  05        
  249  01:A335  82 11             .byte eighth, D3
  250  01:A337  81 05             .byte sixteenth, D2
  251  01:A339  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       01:A33C  0A 0B     
  252  01:A33E  81 0C             .byte sixteenth, A2
  253  01:A340  05 0A 0C          .byte D2, G2, A2, D2 
       01:A343  05        
  254  01:A344  82 11             .byte eighth, D3
  255  01:A346  81 05             .byte sixteenth, D2
  256  01:A348  88 0F             .byte d_quarter, C3
  257  01:A34A  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:A34D  0F        
  258  01:A34E  05 0A 0C          .byte D2, G2, A2, D2 
       01:A351  05        
  259  01:A352  82 11             .byte eighth, D3
  260  01:A354  81 05             .byte sixteenth, D2
  261  01:A356  82 0F             .byte eighth, C3 
  262  01:A358  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       01:A35B  0C 0A 0C  
       01:A35E  11 15     
  263                             
  264                             ;;bridge
  265                             
  266  01:A360  A2 0B             .byte volume_envelope, ve_long_decay 
  267  01:A362  87 1B 1A          .byte d_eighth, C4, B3, A3
       01:A365  18        
  268  01:A366  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       01:A369  0B 0C 0B  
       01:A36C  0A 09     
  269  01:A36E  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       01:A371  15 11     
  270  01:A373  82 14             .byte eighth, F3
  271  01:A375  81 11             .byte sixteenth, D3
  272  01:A377  90 0F             .byte d_half_eighth, C3
  273  01:A379  A2 03             .byte volume_envelope, ve_tgl_1
  274  01:A37B  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:A37E  0F        
  275  01:A37F  05 0A 0C          .byte D2, G2, A2, D2 
       01:A382  05        
  276  01:A383  82 11             .byte eighth, D3
  277  01:A385  81 05             .byte sixteenth, D2
  278  01:A387  82 0F             .byte eighth, C3 
  279  01:A389  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       01:A38C  0C 0A 0C  
       01:A38F  11 15     
  280                             
  281  01:A391  A2 0B             .byte volume_envelope, ve_long_decay 
  282  01:A393  87 1B 1A          .byte d_eighth, C4, B3, A3
       01:A396  18        
  283  01:A397  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       01:A39A  0B 0C 0B  
       01:A39D  0A 09     
  284  01:A39F  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       01:A3A2  15 11     
  285  01:A3A4  82 14             .byte eighth, F3
  286  01:A3A6  81 1B             .byte sixteenth, C4
  287  01:A3A8  90 1D             .byte d_half_eighth, D4
  288  01:A3AA  A2 03             .byte volume_envelope, ve_tgl_1
  289  01:A3AC  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:A3AF  0F        
  290  01:A3B0  05 0A 0C          .byte D2, G2, A2, D2 
       01:A3B3  05        
  291  01:A3B4  82 11             .byte eighth, D3
  292  01:A3B6  81 05             .byte sixteenth, D2
  293  01:A3B8  82 0F             .byte eighth, C3 
  294  01:A3BA  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       01:A3BD  0C 0A 0C  
       01:A3C0  11 15     
  295                             
  296                             ;; reach-around
  297  01:A3C2  A2 0B             .byte volume_envelope, ve_long_decay 
  298  01:A3C4  87 1F 1F          .byte d_eighth, E4, E4
  299  01:A3C7  A2 04             .byte volume_envelope, ve_tgl_2
  300  01:A3C9  82 21             .byte eighth, Fs4
  301  01:A3CB  A2 07             .byte volume_envelope, ve_battlekid_2
  302  01:A3CD  86 5E             .byte d_sixteenth, rest
  303  01:A3CF  80 38             .byte thirtysecond, F6
  304  01:A3D1  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:A3D4  33 30 2E  
       01:A3D7  2D 30     
  305  01:A3D9  82 2E             .byte eighth, G5
  306  01:A3DB  81 27             .byte sixteenth, C5
  307  01:A3DD  82 2C             .byte eighth, F5
  308  01:A3DF  81 29             .byte sixteenth, D5
  309  01:A3E1  82 2E             .byte eighth, G5
  310  01:A3E3  81 2D             .byte sixteenth, Fs5
  311  01:A3E5  82 30             .byte eighth, A5
  312  01:A3E7  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       01:A3EA  2D 33     
  313                             
  314  01:A3EC  A2 0B             .byte volume_envelope, ve_long_decay 
  315  01:A3EE  87 1F 1F          .byte d_eighth, E4, E4
  316  01:A3F1  A2 04             .byte volume_envelope, ve_tgl_2
  317  01:A3F3  82 21             .byte eighth, Fs4
  318  01:A3F5  A2 07             .byte volume_envelope, ve_battlekid_2
  319  01:A3F7  86 5E             .byte d_sixteenth, rest
  320  01:A3F9  80 1C             .byte thirtysecond, Cs4
  321  01:A3FB  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       01:A3FE  29 24 29  
       01:A401  2D        
  322  01:A402  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       01:A405  2B 24 2C  
       01:A408  27 21     
  323  01:A40A  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6
       01:A40D  24 29 24  
       01:A410  1F 2E 2D  
       01:A413  33        
  324                             
  325  01:A414  A2 0B             .byte volume_envelope, ve_long_decay 
  326  01:A416  87 1F 1F          .byte d_eighth, E4, E4
  327  01:A419  A2 04             .byte volume_envelope, ve_tgl_2
  328  01:A41B  82 21             .byte eighth, Fs4
  329  01:A41D  A2 07             .byte volume_envelope, ve_battlekid_2
  330  01:A41F  86 5E             .byte d_sixteenth, rest
  331  01:A421  80 38             .byte thirtysecond, F6
  332  01:A423  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:A426  33 30 2E  
       01:A429  2D 30     
  333  01:A42B  82 2E             .byte eighth, G5
  334  01:A42D  81 27             .byte sixteenth, C5
  335  01:A42F  82 2C             .byte eighth, F5
  336  01:A431  81 29             .byte sixteenth, D5
  337  01:A433  82 2E             .byte eighth, G5
  338  01:A435  81 2D             .byte sixteenth, Fs5
  339  01:A437  82 30             .byte eighth, A5
  340  01:A439  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       01:A43C  2D 33     
  341                             
  342  01:A43E  A2 0B             .byte volume_envelope, ve_long_decay 
  343  01:A440  87 1F 1F          .byte d_eighth, E4, E4
  344  01:A443  A2 04             .byte volume_envelope, ve_tgl_2
  345  01:A445  82 21             .byte eighth, Fs4
  346  01:A447  A2 0B             .byte volume_envelope, ve_long_decay 
  347  01:A449  88 5E             .byte d_quarter, rest
  348  01:A44B  AA 01             .byte arpeggio, arp_lowerThird
  349  01:A44D  8C 27             .byte five_eighths, C5
  350  01:A44F  A2 03             .byte volume_envelope, ve_tgl_1
  351  01:A451  AA 00             .byte arpeggio, arp_none
  352  01:A453  81 5E             .byte sixteenth, rest
  353  01:A455  82 09 0A          .byte eighth, Fs2, G2, Gs2
       01:A458  0B        
  354  01:A459  81 0C             .byte sixteenth, A2
  355                             
  356  01:A45B  A1            .byte loop
  357  01:A45C  6B A2         .word bank0_square2
  358                         
  359  01:A45E            bank0_tri:
  360                     
  361  01:A45E  81 11 16          .byte sixteenth, D3, G3, A3, D3 
       01:A461  18 11     
  362  01:A463  82 1D             .byte eighth, D4
  363  01:A465  81 11             .byte sixteenth, D3
  364  01:A467  88 1B             .byte d_quarter, C4
  365  01:A469  81 16 18          .byte sixteenth, G3, A3, C4
       01:A46C  1B        
  366  01:A46D  11 16 18          .byte D3, G3, A3, D3 
       01:A470  11        
  367  01:A471  82 1D             .byte eighth, D4
  368  01:A473  81 11             .byte sixteenth, D3
  369  01:A475  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       01:A478  16 17     
  370  01:A47A  81 18             .byte sixteenth, A3
  371  01:A47C  11 16 18          .byte D3, G3, A3, D3 
       01:A47F  11        
  372  01:A480  82 1D             .byte eighth, D4
  373  01:A482  81 11             .byte sixteenth, D3
  374  01:A484  88 1B             .byte d_quarter, C4
  375  01:A486  81 16 18          .byte sixteenth, G3, A3, C4
       01:A489  1B        
  376  01:A48A  11 16 18          .byte D3, G3, A3, D3 
       01:A48D  11        
  377  01:A48E  82 1D             .byte eighth, D4
  378  01:A490  81 11             .byte sixteenth, D3
  379  01:A492  82 1B             .byte eighth, C4
  380  01:A494  81 15 16          .byte sixteenth, Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       01:A497  17 18 17  
       01:A49A  16 15     
  381                             
  382  01:A49C  11 16 18          .byte D3, G3, A3, D3 
       01:A49F  11        
  383  01:A4A0  82 1D             .byte eighth, D4
  384  01:A4A2  81 11             .byte sixteenth, D3
  385  01:A4A4  88 1B             .byte d_quarter, C4
  386  01:A4A6  81 16 18          .byte sixteenth, G3, A3, C4
       01:A4A9  1B        
  387  01:A4AA  11 16 18          .byte D3, G3, A3, D3 
       01:A4AD  11        
  388  01:A4AE  82 1D             .byte eighth, D4
  389  01:A4B0  81 11             .byte sixteenth, D3
  390  01:A4B2  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       01:A4B5  16 17     
  391  01:A4B7  81 18             .byte sixteenth, A3
  392  01:A4B9  11 16 18          .byte D3, G3, A3, D3 
       01:A4BC  11        
  393  01:A4BD  82 1D             .byte eighth, D4
  394  01:A4BF  81 11             .byte sixteenth, D3
  395  01:A4C1  88 1B             .byte d_quarter, C4
  396  01:A4C3  81 16 18          .byte sixteenth, G3, A3, C4
       01:A4C6  1B        
  397  01:A4C7  11 16 18          .byte D3, G3, A3, D3 
       01:A4CA  11        
  398  01:A4CB  82 1D             .byte eighth, D4
  399  01:A4CD  81 11             .byte sixteenth, D3
  400  01:A4CF  82 1B             .byte eighth, C4
  401  01:A4D1  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:A4D4  18 16 18  
       01:A4D7  1D 21     
  402                             
  403  01:A4D9  16 1B 1D          .byte G3, C4, D4, G3 
       01:A4DC  16        
  404  01:A4DD  82 22             .byte eighth, G4
  405  01:A4DF  81 16             .byte sixteenth, G3
  406  01:A4E1  88 20             .byte d_quarter, F4
  407  01:A4E3  81 1B 1D          .byte sixteenth, C4, D4, F4
       01:A4E6  20        
  408  01:A4E7  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       01:A4EA  1D 16     
  409  01:A4EC  82 22             .byte eighth, G4
  410  01:A4EE  81 16             .byte sixteenth, G3
  411  01:A4F0  88 20             .byte d_quarter, F4
  412  01:A4F2  81 20 1F          .byte sixteenth, F4, E4, D4
       01:A4F5  1D        
  413  01:A4F6  16 1B 1D          .byte G3, C4, D4, G3 
       01:A4F9  16        
  414  01:A4FA  82 22             .byte eighth, G4
  415  01:A4FC  81 16             .byte sixteenth, G3
  416  01:A4FE  88 20             .byte d_quarter, F4
  417  01:A500  81 1B 1D          .byte sixteenth, C4, D4, F4
       01:A503  20        
  418  01:A504  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       01:A507  1D 16     
  419  01:A509  82 22             .byte eighth, G4
  420  01:A50B  81 16             .byte sixteenth, G3
  421  01:A50D  88 20             .byte d_quarter, F4
  422  01:A50F  81 20 1F          .byte sixteenth, F4, E4, D4
       01:A512  1D        
  423                     
  424  01:A513  11 16 18          .byte D3, G3, A3, D3 
       01:A516  11        
  425  01:A517  82 1D             .byte eighth, D4
  426  01:A519  81 11             .byte sixteenth, D3
  427  01:A51B  88 1B             .byte d_quarter, C4
  428  01:A51D  81 16 18          .byte sixteenth, G3, A3, C4
       01:A520  1B        
  429  01:A521  11 16 18          .byte D3, G3, A3, D3 
       01:A524  11        
  430  01:A525  82 1D             .byte eighth, D4
  431  01:A527  81 11             .byte sixteenth, D3
  432  01:A529  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       01:A52C  16 17     
  433  01:A52E  81 18             .byte sixteenth, A3
  434  01:A530  11 16 18          .byte D3, G3, A3, D3 
       01:A533  11        
  435  01:A534  82 1D             .byte eighth, D4
  436  01:A536  81 11             .byte sixteenth, D3
  437  01:A538  88 1B             .byte d_quarter, C4
  438  01:A53A  81 16 18          .byte sixteenth, G3, A3, C4
       01:A53D  1B        
  439  01:A53E  11 16 18          .byte D3, G3, A3, D3 
       01:A541  11        
  440  01:A542  82 1D             .byte eighth, D4
  441  01:A544  81 11             .byte sixteenth, D3
  442  01:A546  82 1B             .byte eighth, C4
  443  01:A548  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:A54B  18 16 18  
       01:A54E  1D 21     
  444                             
  445                             ;;bridge
  446                             
  447  01:A550  81                .byte sixteenth
  448  01:A551  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       01:A554  22 1D 16  
       01:A557  18 1D 24  
  449  01:A55A  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       01:A55D  35 33 30  
       01:A560  2E        
  450  01:A561  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       01:A564  1F 18 12  
       01:A567  1D 18 11  
  451  01:A56A  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       01:A56D  18 11 14  
       01:A570  0F        
  452  01:A571  11 16 18          .byte D3, G3, A3, D3 
       01:A574  11        
  453  01:A575  82 1D             .byte eighth, D4
  454  01:A577  81 11             .byte sixteenth, D3
  455  01:A579  88 1B             .byte d_quarter, C4
  456  01:A57B  81 16 18          .byte sixteenth, G3, A3, C4
       01:A57E  1B        
  457  01:A57F  11 16 18          .byte D3, G3, A3, D3 
       01:A582  11        
  458  01:A583  82 1D             .byte eighth, D4
  459  01:A585  81 11             .byte sixteenth, D3
  460  01:A587  82 1B             .byte eighth, C4
  461  01:A589  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:A58C  18 16 18  
       01:A58F  1D 21     
  462  01:A591  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       01:A594  22 1D 16  
       01:A597  18 1D 24  
  463  01:A59A  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       01:A59D  35 33 30  
       01:A5A0  2E        
  464  01:A5A1  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       01:A5A4  1F 18 12  
       01:A5A7  1D 18 11  
  465  01:A5AA  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       01:A5AD  18 11 14  
       01:A5B0  0F        
  466  01:A5B1  11 16 18          .byte D3, G3, A3, D3 
       01:A5B4  11        
  467  01:A5B5  82 1D             .byte eighth, D4
  468  01:A5B7  81 11             .byte sixteenth, D3
  469  01:A5B9  88 1B             .byte d_quarter, C4
  470  01:A5BB  81 16 18          .byte sixteenth, G3, A3, C4
       01:A5BE  1B        
  471  01:A5BF  11 16 18          .byte D3, G3, A3, D3 
       01:A5C2  11        
  472  01:A5C3  82 1D             .byte eighth, D4
  473  01:A5C5  81 11             .byte sixteenth, D3
  474  01:A5C7  82 1B             .byte eighth, C4
  475  01:A5C9  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:A5CC  18 16 18  
       01:A5CF  1D 21     
  476                             
  477                             ;; reach-around
  478  01:A5D1  A2 0B             .byte volume_envelope, ve_long_decay 
  479  01:A5D3  87 0F 0F          .byte d_eighth, C3, C3
  480  01:A5D6  A2 04             .byte volume_envelope, ve_tgl_2
  481  01:A5D8  82 11             .byte eighth, D3
  482  01:A5DA  A2 03             .byte volume_envelope, ve_tgl_1
  483  01:A5DC  87 5E             .byte d_eighth, rest
  484  01:A5DE  81 11 11          .byte sixteenth, D3, D3, D4
       01:A5E1  1D        
  485  01:A5E2  8D 5E             .byte five_sixteenths, rest
  486  01:A5E4  81 11 11          .byte sixteenth, D3, D3, D4
       01:A5E7  1D        
  487  01:A5E8  8D 5E             .byte five_sixteenths, rest
  488  01:A5EA  81 11 11          .byte sixteenth, D3, D3, D4
       01:A5ED  1D        
  489  01:A5EE  82 5E             .byte eighth, rest
  490                             
  491  01:A5F0  A2 0B             .byte volume_envelope, ve_long_decay 
  492  01:A5F2  87 0F 0F          .byte d_eighth, C3, C3
  493  01:A5F5  A2 04             .byte volume_envelope, ve_tgl_2
  494  01:A5F7  82 11             .byte eighth, D3
  495  01:A5F9  A2 03             .byte volume_envelope, ve_tgl_1
  496  01:A5FB  87 5E             .byte d_eighth, rest
  497  01:A5FD  81 11 11          .byte sixteenth, D3, D3, D4
       01:A600  1D        
  498  01:A601  8D 5E             .byte five_sixteenths, rest
  499  01:A603  81 11 11          .byte sixteenth, D3, D3, D4
       01:A606  1D        
  500  01:A607  8D 5E             .byte five_sixteenths, rest
  501  01:A609  81 11 11          .byte sixteenth, D3, D3, D4
       01:A60C  1D        
  502  01:A60D  82 5E             .byte eighth, rest
  503                                     
  504  01:A60F  A2 0B             .byte volume_envelope, ve_long_decay 
  505  01:A611  87 0F 0F          .byte d_eighth, C3, C3
  506  01:A614  A2 04             .byte volume_envelope, ve_tgl_2
  507  01:A616  82 11             .byte eighth, D3
  508  01:A618  A2 03             .byte volume_envelope, ve_tgl_1
  509  01:A61A  87 5E             .byte d_eighth, rest
  510  01:A61C  81 11 11          .byte sixteenth, D3, D3, D4
       01:A61F  1D        
  511  01:A620  8D 5E             .byte five_sixteenths, rest
  512  01:A622  81 11 11          .byte sixteenth, D3, D3, D4
       01:A625  1D        
  513  01:A626  8D 5E             .byte five_sixteenths, rest
  514  01:A628  81 11 11          .byte sixteenth, D3, D3, D4
       01:A62B  1D        
  515  01:A62C  82 5E             .byte eighth, rest
  516                             
  517  01:A62E  A2 0B             .byte volume_envelope, ve_long_decay 
  518  01:A630  87 0F 0F          .byte d_eighth, C3, C3
  519  01:A633  A2 04             .byte volume_envelope, ve_tgl_2
  520  01:A635  82 11             .byte eighth, D3
  521  01:A637  A2 0B             .byte volume_envelope, ve_long_decay
  522  01:A639  88 5E             .byte d_quarter, rest
  523  01:A63B  8C 0C             .byte five_eighths, A2
  524  01:A63D  A2 03             .byte volume_envelope, ve_tgl_1
  525  01:A63F  81 5E             .byte sixteenth, rest
  526  01:A641  82 15 16          .byte eighth, Fs3, G3, Gs3
       01:A644  17        
  527  01:A645  81 18             .byte sixteenth, A3
  528                             
  529  01:A647  A1            .byte loop
  530  01:A648  5E A4         .word bank0_tri
  531                         
  532  01:A64A            bank0_noise:
  533  01:A64A  81 04 04      .byte sixteenth, $04, $04, $04, $04
       01:A64D  04 04     
  534  01:A64F  A2 09             .byte volume_envelope, ve_drum_decay 
  535  01:A651  81 04         .byte sixteenth, $04
  536  01:A653  A2 0A             .byte volume_envelope, ve_hiHat_decay
  537  01:A655  81 04 04      .byte sixteenth, $04, $04, $04, $04
       01:A658  04 04     
  538  01:A65A  A2 09         .byte volume_envelope, ve_drum_decay 
  539  01:A65C  81 04         .byte sixteenth, $04
  540  01:A65E  A2 0A             .byte volume_envelope, ve_hiHat_decay
  541  01:A660  81 04 04      .byte sixteenth, $04, $04
  542  01:A663  A2 09             .byte volume_envelope, ve_drum_decay 
  543  01:A665  81 04         .byte sixteenth, $04
  544  01:A667  A2 0A             .byte volume_envelope, ve_hiHat_decay
  545  01:A669  81 04 04          .byte sixteenth, $04, $04, $04
       01:A66C  04        
  546  01:A66D  A1            .byte loop
  547  01:A66E  4A A6         .word bank0_noise
#[2]   Banks/Bank0.asm
   52                     
   53           BFFA        .org $BFFA     ;first of the three vectors starts here
   54  01:BFFA  7E D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   55                                        ;processor will jump to the label NMI:
   56  01:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   57                                        ;to the label RESET:
   58  01:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
#[3]   Puzzles/frog.asm
    4                       .include "Puzzles/frog.asm"
    1  02:8000            frog:
    2  02:8000  02 62 00    .db $02, $62, $00, $19
       02:8003  19        
    3  02:8004  00 00 00    .db $00, $00, $00, $00, $18, $30, $24, $48, $2C, $68, $1F, $F0, $3F, $F8, $7F, $FC, $7F, $FC, $60, $0C, $33, $98, $18, $30, $0F, $E0, $3C, $78, $78, $3C
       02:8007  00 18 30  
       02:800A  24 48 2C  
       02:800D  68 1F F0  
       02:8010  3F F8 7F  
       02:8013  FC 7F FC  
       02:8016  60 0C 33  
       02:8019  98 18 30  
       02:801C  0F E0 3C  
       02:801F  78 78 3C  
    4  02:8022  00 FF 13    .db $00, $FF, $13, $FF, $25, $20, $FF, $22, $41, $FF, $45, $10, $FF, $26, $FF, $11, $40, $FF, $11, $40, $FF, $11, $40, $FF, $26, $FF, $45, $10, $FF, $22, $41, $FF, $25, $20, $FF, $13, $FF, $00, $FF
       02:8025  FF 25 20  
       02:8028  FF 22 41  
       02:802B  FF 45 10  
       02:802E  FF 26 FF  
       02:8031  11 40 FF  
       02:8034  11 40 FF  
       02:8037  11 40 FF  
       02:803A  26 FF 45  
       02:803D  10 FF 22  
       02:8040  41 FF 25  
       02:8043  20 FF 13  
       02:8046  FF 00 FF  
    5  02:8049  00 FF 00    .db $00, $FF, $00, $FF, $22, $FF, $11, $11, $FF, $12, $21, $FF, $90, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $22, $FF, $23, $20, $FF, $22, $FF, $70, $FF, $44, $FF, $44, $FF
       02:804C  FF 22 FF  
       02:804F  11 11 FF  
       02:8052  12 21 FF  
       02:8055  90 FF B0  
       02:8058  FF D0 FF  
       02:805B  D0 FF 22  
       02:805E  FF 23 20  
       02:8061  FF 22 FF  
       02:8064  70 FF 44  
       02:8067  FF 44 FF  
    6  02:806A            frogImage:
    7  02:806A  55 55 55   .db $55, $55, $55, $55, $55, $55, $55, $55, $69, $55, $A5, $56, $F9, $5B, $E5, $5B, $25, $63, $95, $5A, $AA, $A9, $55, $AA, $22, $A9, $5A, $AA, $AA, $A9, $6A, $AA, $AA, $A5, $A0, $00, $02, $95, $A0, $54, $29, $55, $A0, $02, $95, $55, $AA, $A9, $55, $6A, $BF, $AA, $56, $AB, $FF, $AA, $40, $FF
       02:806D  55 55 55  
       02:8070  55 55 69  
       02:8073  55 A5 56  
       02:8076  F9 5B E5  
       02:8079  5B 25 63  
       02:807C  95 5A AA  
       02:807F  A9 55 AA  
       02:8082  22 A9 5A  
       02:8085  AA AA A9  
       02:8088  6A AA AA  
       02:808B  A5 A0 00  
       02:808E  02 95 A0  
       02:8091  54 29 55  
       02:8094  A0 02 95  
       02:8097  55 AA A9  
       02:809A  55 6A BF  
       02:809D  AA 56 AB  
       02:80A0  FF AA 40  
       02:80A3  FF        
    8  02:80A4            frogName:
    9  02:80A4  04 0F 1B    .db $04, $0F, $1B, $18, $10, $FF
       02:80A7  18 10 FF  
#[2]   Banks/Bank1.asm
    5                     
    6           0003        .bank 3
    7           A000        .org $A000
    8                      
    9                     ;puzzles
   10  03:A000  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A002  00 80     
       03:A004  00 80     
       03:A006  00 80     
       03:A008  00 80     
       03:A00A  00 80     
       03:A00C  00 80     
       03:A00E  00 80     
       03:A010  00 80     
   11  03:A012  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A014  00 80     
       03:A016  00 80     
       03:A018  00 80     
       03:A01A  00 80     
       03:A01C  00 80     
       03:A01E  00 80     
       03:A020  00 80     
       03:A022  00 80     
   12  03:A024  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A026  00 80     
       03:A028  00 80     
       03:A02A  00 80     
       03:A02C  00 80     
       03:A02E  00 80     
       03:A030  00 80     
       03:A032  00 80     
       03:A034  00 80     
   13                     ;puzzle names
   14  03:A036  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A038  A4 80     
       03:A03A  A4 80     
       03:A03C  A4 80     
       03:A03E  A4 80     
       03:A040  A4 80     
       03:A042  A4 80     
       03:A044  A4 80     
       03:A046  A4 80     
   15  03:A048  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A04A  A4 80     
       03:A04C  A4 80     
       03:A04E  A4 80     
       03:A050  A4 80     
       03:A052  A4 80     
       03:A054  A4 80     
       03:A056  A4 80     
       03:A058  A4 80     
   16  03:A05A  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A05C  A4 80     
       03:A05E  A4 80     
       03:A060  A4 80     
       03:A062  A4 80     
       03:A064  A4 80     
       03:A066  A4 80     
       03:A068  A4 80     
       03:A06A  A4 80     
   17                     ;puzzle sprites
   18  03:A06C  00 00 00    .db $00, $00, $00, $00
       03:A06F  00        
   19  03:A070  00 00 00    .db $00, $00, $00, $00
       03:A073  00        
   20  03:A074  00 00 00    .db $00, $00, $00, $00
       03:A077  00        
   21  03:A078  00 00 00    .db $00, $00, $00, $00
       03:A07B  00        
   22  03:A07C  00 00 00    .db $00, $00, $00, $00
       03:A07F  00        
   23  03:A080  00 00 00    .db $00, $00, $00, $00
       03:A083  00        
   24  03:A084  00 00 00    .db $00, $00, $00, $00
       03:A087  00        
   25  03:A088  00 00 00    .db $00, $00, $00, $00
       03:A08B  00        
   26  03:A08C  00 00 00    .db $00, $00, $00, $00
       03:A08F  00        
   27  03:A090  00 00 00    .db $00, $00, $00, $00
       03:A093  00        
   28  03:A094  00 00 00    .db $00, $00, $00, $00
       03:A097  00        
   29  03:A098  00 00 00    .db $00, $00, $00, $00
       03:A09B  00        
   30  03:A09C  00 00 00    .db $00, $00, $00, $00
       03:A09F  00        
   31  03:A0A0  00 00 00    .db $00, $00, $00, $00
       03:A0A3  00        
   32  03:A0A4  00 00 00    .db $00, $00, $00, $00
       03:A0A7  00        
   33  03:A0A8  00 00 00    .db $00, $00, $00, $00
       03:A0AB  00        
   34  03:A0AC  00 00 00    .db $00, $00, $00, $00
       03:A0AF  00        
   35  03:A0B0  00 00 00    .db $00, $00, $00, $00
       03:A0B3  00        
   36  03:A0B4  00 00 00    .db $00, $00, $00, $00
       03:A0B7  00        
   37  03:A0B8  00 00 00    .db $00, $00, $00, $00
       03:A0BB  00        
   38  03:A0BC  00 00 00    .db $00, $00, $00, $00
       03:A0BF  00        
   39  03:A0C0  00 00 00    .db $00, $00, $00, $00
       03:A0C3  00        
   40  03:A0C4  00 00 00    .db $00, $00, $00, $00
       03:A0C7  00        
   41  03:A0C8  00 00 00    .db $00, $00, $00, $00
       03:A0CB  00        
   42  03:A0CC  00 00 00    .db $00, $00, $00, $00
       03:A0CF  00        
   43  03:A0D0  00 00 00    .db $00, $00, $00, $00
       03:A0D3  00        
   44  03:A0D4  00 00 00    .db $00, $00, $00, $00
       03:A0D7  00        
   45                       ;bank song, A0D8
#[3]   Music/Bank1.i
   46                       .include "Music/Bank1.i"  ;holds the data for bank song
    1  03:A0D8            bank1_header:
    2  03:A0D8  01            .byte $01           ;4 streams
    3                         
    4  03:A0D9  02            .byte MUSIC_TRI    ;which stream
    5  03:A0DA  01            .byte $01           ;status byte (stream enabled)
    6  03:A0DB  02            .byte TRIANGLE      ;which channel
    7  03:A0DC  80            .byte $80           ;initial duty (01)
    8  03:A0DD  0A            .byte ve_hiHat_decay ;volume envelope
    9  03:A0DE  E1 A0         .word bank1_square1 ;pointer to stream
   10  03:A0E0  50            .byte $50           ;tempo
   11                         
   12                         
   13  03:A0E1            bank1_square1:
   14                     
   15  03:A0E1  A9 03             .byte pitch_envelope, pe_bassKick
   16  03:A0E3  82                .byte eighth
   17  03:A0E4  27 27             .byte C5, C5
   18  03:A0E6  81                .byte sixteenth
   19  03:A0E7  24 24 24          .byte A4, A4, A4, rest
       03:A0EA  5E        
   20  03:A0EB  20 20 20          .byte F4, F4, F4, rest
       03:A0EE  5E        
   21  03:A0EF  83                .byte quarter
   22  03:A0F0  1B                .byte C4
   23                     
   24  03:A0F1  A1                .byte loop
   25  03:A0F2  E1 A0         .word bank1_square1
#[2]   Banks/Bank1.asm
   47                       
   48           BFFA        .org $BFFA     ;first of the three vectors starts here
   49  03:BFFA  7E D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   50                                        ;processor will jump to the label NMI:
   51  03:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   52                                        ;to the label RESET:
   53  03:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
#[3]   Puzzles/cat.asm
    4                       .include "Puzzles/cat.asm"
    1  04:8000            cat:
    2  04:8000  02 7E 00    .db $02, $7E, $00, $2B
       04:8003  2B        
    3  04:8004  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $47, $C4, $7B, $BC, $7F, $FC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       04:8007  60 1E F0  
       04:800A  3E F8 3F  
       04:800D  F8 7F FC  
       04:8010  7F FC 47  
       04:8013  C4 7B BC  
       04:8016  7F FC 7C  
       04:8019  7C 76 DC  
       04:801C  39 38 1F  
       04:801F  F0 00 00  
    4  04:8022  00 FF 70    .db $00, $FF, $70, $FF, $54, $FF, $65, $FF, $23, $60, $FF, $13, $70, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $70, $FF, $23, $60, $FF, $65, $FF, $54, $FF, $70, $FF, $00, $FF
       04:8025  FF 54 FF  
       04:8028  65 FF 23  
       04:802B  60 FF 13  
       04:802E  70 FF 11  
       04:8031  80 FF 26  
       04:8034  FF 11 80  
       04:8037  FF 13 70  
       04:803A  FF 23 60  
       04:803D  FF 65 FF  
       04:8040  54 FF 70  
       04:8043  FF 00 FF  
    5  04:8046  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $15, $10, $FF, $43, $40, $FF, $D0, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       04:8049  FF 44 FF  
       04:804C  55 FF B0  
       04:804F  FF D0 FF  
       04:8052  D0 FF 15  
       04:8055  10 FF 43  
       04:8058  40 FF D0  
       04:805B  FF 55 FF  
       04:805E  32 23 FF  
       04:8061  31 30 FF  
       04:8064  90 FF 00  
       04:8067  FF        
    6  04:8068            catImage:
    7  04:8068  55 55 55   .db $55, $55, $55, $55, $56, $95, $A5, $55, $6A, $9A, $A5, $56, $AA, $6A, $A5, $5A, $AA, $AA, $95, $AA, $66, $6A, $96, $AA, $9A, $AA, $58, $0A, $E8, $09, $6A, $8F, $CA, $A5, $9A, $FF, $E9, $96, $AF, $57, $EA, $59, $CF, $7C, $D9, $5F, $C3, $0F, $D5, $5F, $FF, $FD, $55, $55, $55, $55, $40, $FF
       04:806B  55 56 95  
       04:806E  A5 55 6A  
       04:8071  9A A5 56  
       04:8074  AA 6A A5  
       04:8077  5A AA AA  
       04:807A  95 AA 66  
       04:807D  6A 96 AA  
       04:8080  9A AA 58  
       04:8083  0A E8 09  
       04:8086  6A 8F CA  
       04:8089  A5 9A FF  
       04:808C  E9 96 AF  
       04:808F  57 EA 59  
       04:8092  CF 7C D9  
       04:8095  5F C3 0F  
       04:8098  D5 5F FF  
       04:809B  FD 55 55  
       04:809E  55 55 40  
       04:80A1  FF        
    8  04:80A2            catName:
    9  04:80A2  03 0C 0A    .db $03, $0C, $0A, $1D, $FF
       04:80A5  1D FF     
#[2]   Banks/Bank2.asm
    5                     
    6           0005        .bank 5
    7           A000        .org $A000
    8                       
    9                     ;puzzles
   10  05:A000  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A002  00 80     
       05:A004  00 80     
       05:A006  00 80     
       05:A008  00 80     
       05:A00A  00 80     
       05:A00C  00 80     
       05:A00E  00 80     
       05:A010  00 80     
   11  05:A012  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A014  00 80     
       05:A016  00 80     
       05:A018  00 80     
       05:A01A  00 80     
       05:A01C  00 80     
       05:A01E  00 80     
       05:A020  00 80     
       05:A022  00 80     
   12  05:A024  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat
       05:A026  00 80     
       05:A028  00 80     
       05:A02A  00 80     
       05:A02C  00 80     
       05:A02E  00 80     
       05:A030  00 80     
       05:A032  00 80     
       05:A034  00 80     
   13                     ;puzzle names
   14  05:A036  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A038  A2 80     
       05:A03A  A2 80     
       05:A03C  A2 80     
       05:A03E  A2 80     
       05:A040  A2 80     
       05:A042  A2 80     
       05:A044  A2 80     
       05:A046  A2 80     
   15  05:A048  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A04A  A2 80     
       05:A04C  A2 80     
       05:A04E  A2 80     
       05:A050  A2 80     
       05:A052  A2 80     
       05:A054  A2 80     
       05:A056  A2 80     
       05:A058  A2 80     
   16  05:A05A  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName
       05:A05C  A2 80     
       05:A05E  A2 80     
       05:A060  A2 80     
       05:A062  A2 80     
       05:A064  A2 80     
       05:A066  A2 80     
       05:A068  A2 80     
       05:A06A  A2 80     
   17                     ;puzzle sprites
   18  05:A06C  00 00 00    .db $00, $00, $00, $00
       05:A06F  00        
   19  05:A070  00 00 00    .db $00, $00, $00, $00
       05:A073  00        
   20  05:A074  00 00 00    .db $00, $00, $00, $00
       05:A077  00        
   21  05:A078  00 00 00    .db $00, $00, $00, $00
       05:A07B  00        
   22  05:A07C  00 00 00    .db $00, $00, $00, $00
       05:A07F  00        
   23  05:A080  00 00 00    .db $00, $00, $00, $00
       05:A083  00        
   24  05:A084  00 00 00    .db $00, $00, $00, $00
       05:A087  00        
   25  05:A088  00 00 00    .db $00, $00, $00, $00
       05:A08B  00        
   26  05:A08C  00 00 00    .db $00, $00, $00, $00
       05:A08F  00        
   27  05:A090  00 00 00    .db $00, $00, $00, $00
       05:A093  00        
   28  05:A094  00 00 00    .db $00, $00, $00, $00
       05:A097  00        
   29  05:A098  00 00 00    .db $00, $00, $00, $00
       05:A09B  00        
   30  05:A09C  00 00 00    .db $00, $00, $00, $00
       05:A09F  00        
   31  05:A0A0  00 00 00    .db $00, $00, $00, $00
       05:A0A3  00        
   32  05:A0A4  00 00 00    .db $00, $00, $00, $00
       05:A0A7  00        
   33  05:A0A8  00 00 00    .db $00, $00, $00, $00
       05:A0AB  00        
   34  05:A0AC  00 00 00    .db $00, $00, $00, $00
       05:A0AF  00        
   35  05:A0B0  00 00 00    .db $00, $00, $00, $00
       05:A0B3  00        
   36  05:A0B4  00 00 00    .db $00, $00, $00, $00
       05:A0B7  00        
   37  05:A0B8  00 00 00    .db $00, $00, $00, $00
       05:A0BB  00        
   38  05:A0BC  00 00 00    .db $00, $00, $00, $00
       05:A0BF  00        
   39  05:A0C0  00 00 00    .db $00, $00, $00, $00
       05:A0C3  00        
   40  05:A0C4  00 00 00    .db $00, $00, $00, $00
       05:A0C7  00        
   41  05:A0C8  00 00 00    .db $00, $00, $00, $00
       05:A0CB  00        
   42  05:A0CC  00 00 00    .db $00, $00, $00, $00
       05:A0CF  00        
   43  05:A0D0  00 00 00    .db $00, $00, $00, $00
       05:A0D3  00        
   44  05:A0D4  00 00 00    .db $00, $00, $00, $00
       05:A0D7  00        
   45                     ;bank song, A0D8
#[3]   Music/Bank2.i
   46                       .include "Music/Bank2.i"  ;holds the data for bank song
    1  05:A0D8            bank2_header:
    2  05:A0D8  04            .byte $04           ;4 streams
    3                         
    4  05:A0D9  00            .byte MUSIC_SQ1     ;which stream
    5  05:A0DA  01            .byte $01           ;status byte (stream enabled)
    6  05:A0DB  00            .byte SQUARE_1      ;which channel
    7  05:A0DC  70            .byte $70           ;initial duty (01)
    8  05:A0DD  0B            .byte ve_long_decay ;volume envelope
    9  05:A0DE  F9 A0         .word bank2_square1 ;pointer to stream
   10  05:A0E0  3A            .byte $3A           ;tempo
   11                         
   12  05:A0E1  01            .byte MUSIC_SQ2     ;which stream
   13  05:A0E2  01            .byte $01           ;status byte (stream enabled)
   14  05:A0E3  01            .byte SQUARE_2      ;which channel
   15  05:A0E4  70            .byte $70           ;initial duty (10)
   16  05:A0E5  03            .byte ve_tgl_1      ;volume envelope
   17  05:A0E6  69 A2         .word bank2_square2 ;pointer to stream
   18  05:A0E8  3A            .byte $3A           ;tempo
   19                         
   20  05:A0E9  02            .byte MUSIC_TRI     ;which stream
   21  05:A0EA  01            .byte $01           ;status byte (stream enabled)
   22  05:A0EB  02            .byte TRIANGLE      ;which channel
   23  05:A0EC  80            .byte $80           ;initial volume (on)
   24  05:A0ED  03            .byte ve_tgl_1      ;volume envelope
   25  05:A0EE  69 A4         .word bank2_tri     ;pointer to stream
   26  05:A0F0  3A            .byte $3A           ;tempo
   27                         
   28  05:A0F1  03            .byte MUSIC_NOI     ;which stream
   29  05:A0F2  01            .byte $01           ;enabled
   30  05:A0F3  03            .byte NOISE     
   31  05:A0F4  30            .byte $30           ;initial duty_vol
   32  05:A0F5  0A            .byte ve_hiHat_decay ;volume envelope
   33  05:A0F6  55 A6         .word bank2_noise   ;pointer to stream
   34  05:A0F8  3A            .byte $3A           ;tempo
   35                     
   36                         
   37  05:A0F9            bank2_square1:
   38                     
   39  05:A0F9  A2 0B             .byte volume_envelope, ve_long_decay 
   40  05:A0FB  83 5E         .byte quarter, rest
   41  05:A0FD  87 29             .byte d_eighth, D5
   42  05:A0FF  8E 27             .byte d_half_d_eight, C5
   43  05:A101  81 26 27          .byte sixteenth, B4, C5
   44  05:A104  82 26             .byte eighth, B4
   45  05:A106  81 21             .byte sixteenth, Fs4
   46  05:A108  82 22 24          .byte eighth, G4,  A4
   47  05:A10B  81 26             .byte sixteenth, B4
   48  05:A10D  87 21             .byte d_eighth, Fs4
   49  05:A10F  8F 24             .byte whole_quarter_sixteenth, A4
   50  05:A111  81 5E             .byte sixteenth, rest
   51  05:A113  15 16 17          .byte Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       05:A116  18 17 16  
       05:A119  15        
   52                             
   53  05:A11A  83 5E             .byte quarter, rest
   54  05:A11C  87 29             .byte d_eighth, D5
   55  05:A11E  8E 27             .byte d_half_d_eight, C5
   56  05:A120  81 26 27          .byte sixteenth, B4, C5
   57  05:A123  82 26             .byte eighth, B4
   58  05:A125  81 21             .byte sixteenth, Fs4
   59  05:A127  82 22 2B          .byte eighth, G4,  E5
   60  05:A12A  81 2E             .byte sixteenth, G5
   61  05:A12C  8A 2D             .byte d_whole, Fs5
   62  05:A12E  81 5E             .byte sixteenth, rest
   63  05:A130  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       05:A133  16 18 1D  
       05:A136  21        
   64                         
   65  05:A137  83 5E             .byte quarter, rest
   66  05:A139  87 2E             .byte d_eighth, G5
   67  05:A13B  8E 2C             .byte d_half_d_eight, F5
   68  05:A13D  81 2B 2C          .byte sixteenth, E5, F5
   69  05:A140  82 2B             .byte eighth, E5
   70  05:A142  81 26             .byte sixteenth, B4
   71  05:A144  82 27 29          .byte eighth, C5,  D5
   72  05:A147  81 2B 29          .byte sixteenth, E5, D5 
   73  05:A14A  82 26 27          .byte eighth, B4, C5, A4, B4, G4 
       05:A14D  24 26 22  
   74  05:A150  81 27 26          .byte sixteenth, C5, B4, G4, F4, D4
       05:A153  22 20 1D  
   75  05:A156  82 20             .byte eighth, F4
   76  05:A158  81 24             .byte sixteenth, A4
   77  05:A15A  82 22             .byte eighth, G4
   78  05:A15C  81 27             .byte sixteenth, C5
   79  05:A15E  8C 26             .byte five_eighths, B4
   80                             
   81  05:A160  83 5E             .byte quarter, rest
   82  05:A162  87 29             .byte d_eighth, D5
   83  05:A164  8E 27             .byte d_half_d_eight, C5
   84  05:A166  81 26 27          .byte sixteenth, B4, C5
   85  05:A169  82 26             .byte eighth, B4
   86  05:A16B  81 21             .byte sixteenth, Fs4
   87  05:A16D  82 22 24          .byte eighth, G4,  A4
   88  05:A170  81 22             .byte sixteenth, G4
   89  05:A172  8A 21             .byte d_whole, Fs4
   90  05:A174  81 5E             .byte sixteenth, rest
   91  05:A176  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       05:A179  16 18 1D  
       05:A17C  21        
   92                             
   93                             ;;bridge
   94                             
   95  05:A17D  87 24 22          .byte d_eighth, A4, G4, Fs4
       05:A180  21        
   96  05:A181  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       05:A184  0A 2E 0B  
       05:A187  2D 0C     
   97  05:A189  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       05:A18C  0A 24 09  
       05:A18F  22        
   98  05:A190  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       05:A193  1D 18     
   99  05:A195  82 1B             .byte eighth, C4
  100  05:A197  81 16             .byte sixteenth, G3
  101  05:A199  91 15             .byte whole_sixteenth, Fs3
  102  05:A19B  84 5E             .byte half, rest
  103  05:A19D  81 5E             .byte sixteenth, rest
  104  05:A19F  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:A1A2  18 16 18  
       05:A1A5  1D 21     
  105                             
  106  05:A1A7  87 24 22          .byte d_eighth, A4, G4, Fs4
       05:A1AA  21        
  107  05:A1AB  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       05:A1AE  0A 2E 0B  
       05:A1B1  2D 0C     
  108  05:A1B3  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       05:A1B6  0A 24 09  
       05:A1B9  22        
  109  05:A1BA  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       05:A1BD  1D 18     
  110  05:A1BF  82 1B             .byte eighth, C4
  111  05:A1C1  81 22             .byte sixteenth, G4
  112  05:A1C3  91 21             .byte whole_sixteenth, Fs4
  113  05:A1C5  84 5E             .byte half, rest
  114  05:A1C7  81 5E             .byte sixteenth, rest
  115  05:A1C9  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:A1CC  18 16 18  
       05:A1CF  1D 21     
  116                     
  117                             ;; reach-around
  118  05:A1D1  A2 0B             .byte volume_envelope, ve_long_decay 
  119  05:A1D3  87 22 22          .byte d_eighth, G4, G4
  120  05:A1D6  A2 04             .byte volume_envelope, ve_tgl_2
  121  05:A1D8  82 24             .byte eighth, A4
  122  05:A1DA  A2 03             .byte volume_envelope, ve_tgl_1
  123  05:A1DC  80 5E 38          .byte thirtysecond, rest, F6
  124  05:A1DF  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:A1E2  33 30 2E  
       05:A1E5  2D 30     
  125  05:A1E7  82 2E             .byte eighth, G5
  126  05:A1E9  81 27             .byte sixteenth, C5
  127  05:A1EB  82 2C             .byte eighth, F5
  128  05:A1ED  81 29             .byte sixteenth, D5
  129  05:A1EF  82 2E             .byte eighth, G5
  130  05:A1F1  81 2D             .byte sixteenth, Fs5
  131  05:A1F3  82 30             .byte eighth, A5
  132  05:A1F5  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       05:A1F8  2D 33 30  
  133                             
  134  05:A1FB  A2 0B             .byte volume_envelope, ve_long_decay 
  135  05:A1FD  87 22 22          .byte d_eighth, G4, G4
  136  05:A200  A2 04             .byte volume_envelope, ve_tgl_2
  137  05:A202  82 24             .byte eighth, A4
  138  05:A204  A2 03             .byte volume_envelope, ve_tgl_1
  139  05:A206  80 5E 1C          .byte thirtysecond, rest, Cs4
  140  05:A209  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       05:A20C  29 24 29  
       05:A20F  2D        
  141  05:A210  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       05:A213  2B 24 2C  
       05:A216  27 21     
  142  05:A218  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6, D6
       05:A21B  24 29 24  
       05:A21E  1F 2E 2D  
       05:A221  33 35     
  143                             
  144  05:A223  A2 0B             .byte volume_envelope, ve_long_decay 
  145  05:A225  87 22 22          .byte d_eighth, G4, G4
  146  05:A228  A2 04             .byte volume_envelope, ve_tgl_2
  147  05:A22A  82 24             .byte eighth, A4
  148  05:A22C  A2 03             .byte volume_envelope, ve_tgl_1
  149  05:A22E  80 5E 38          .byte thirtysecond, rest, F6
  150  05:A231  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:A234  33 30 2E  
       05:A237  2D 30     
  151  05:A239  82 2E             .byte eighth, G5
  152  05:A23B  81 27             .byte sixteenth, C5
  153  05:A23D  82 2C             .byte eighth, F5
  154  05:A23F  81 29             .byte sixteenth, D5
  155  05:A241  82 2E             .byte eighth, G5
  156  05:A243  81 2D             .byte sixteenth, Fs5
  157  05:A245  82 30             .byte eighth, A5
  158  05:A247  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       05:A24A  2D 33 30  
  159                             
  160  05:A24D  A2 0B             .byte volume_envelope, ve_long_decay 
  161  05:A24F  87 22 22          .byte d_eighth, G4, G4
  162  05:A252  A2 04             .byte volume_envelope, ve_tgl_2
  163  05:A254  82 24             .byte eighth, A4
  164  05:A256  A2 0B             .byte volume_envelope, ve_long_decay 
  165  05:A258  88 5E             .byte d_quarter, rest
  166  05:A25A  8C 24             .byte five_eighths, A4
  167  05:A25C  A2 03             .byte volume_envelope, ve_tgl_1
  168  05:A25E  81 5E             .byte sixteenth, rest
  169  05:A260  82 21 22          .byte eighth, Fs4, G4, Gs4
       05:A263  23        
  170  05:A264  81 24             .byte sixteenth, A4
  171                     
  172  05:A266  A1                .byte loop
  173  05:A267  F9 A0         .word bank2_square1
  174                             
  175                             
  176                     
  177  05:A269            bank2_square2:
  178                     
  179  05:A269  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:A26C  0C 05     
  180  05:A26E  82 11             .byte eighth, D3
  181  05:A270  81 05             .byte sixteenth, D2
  182  05:A272  88 0F             .byte d_quarter, C3
  183  05:A274  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:A277  0F        
  184  05:A278  05 0A 0C          .byte D2, G2, A2, D2 
       05:A27B  05        
  185  05:A27C  82 11             .byte eighth, D3
  186  05:A27E  81 05             .byte sixteenth, D2
  187  05:A280  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       05:A283  0A 0B     
  188  05:A285  81 0C             .byte sixteenth, A2
  189  05:A287  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:A28A  0C 05     
  190  05:A28C  82 11             .byte eighth, D3
  191  05:A28E  81 05             .byte sixteenth, D2
  192  05:A290  88 0F             .byte d_quarter, C3
  193  05:A292  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:A295  0F        
  194  05:A296  05 0A 0C          .byte D2, G2, A2, D2 
       05:A299  05        
  195  05:A29A  82 11             .byte eighth, D3
  196  05:A29C  81 05             .byte sixteenth, D2
  197  05:A29E  82 0F             .byte eighth, C3 
  198  05:A2A0  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       05:A2A3  0B 0C 0B  
       05:A2A6  0A 09     
  199                             
  200  05:A2A8  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:A2AB  0C 05     
  201  05:A2AD  82 11             .byte eighth, D3
  202  05:A2AF  81 05             .byte sixteenth, D2
  203  05:A2B1  88 0F             .byte d_quarter, C3
  204  05:A2B3  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:A2B6  0F        
  205  05:A2B7  05 0A 0C          .byte D2, G2, A2, D2 
       05:A2BA  05        
  206  05:A2BB  82 11             .byte eighth, D3
  207  05:A2BD  81 05             .byte sixteenth, D2
  208  05:A2BF  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       05:A2C2  0A 0B     
  209  05:A2C4  81 0C             .byte sixteenth, A2
  210  05:A2C6  05 0A 0C          .byte D2, G2, A2, D2 
       05:A2C9  05        
  211  05:A2CA  82 11             .byte eighth, D3
  212  05:A2CC  81 05             .byte sixteenth, D2
  213  05:A2CE  88 0F             .byte d_quarter, C3
  214  05:A2D0  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:A2D3  0F        
  215  05:A2D4  05 0A 0C          .byte D2, G2, A2, D2 
       05:A2D7  05        
  216  05:A2D8  82 11             .byte eighth, D3
  217  05:A2DA  81 05             .byte sixteenth, D2
  218  05:A2DC  82 0F             .byte eighth, C3 
  219  05:A2DE  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       05:A2E1  0C 0A 0C  
       05:A2E4  11 15     
  220                             
  221  05:A2E6  0A 0F 11          .byte G2, C3, D3, G2 
       05:A2E9  0A        
  222  05:A2EA  82 16             .byte eighth, G3
  223  05:A2EC  81 0A             .byte sixteenth, G2
  224  05:A2EE  88 14             .byte d_quarter, F3
  225  05:A2F0  81 0F 11          .byte sixteenth, C3, D3, F3
       05:A2F3  14        
  226  05:A2F4  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       05:A2F7  11 0A     
  227  05:A2F9  82 16             .byte eighth, G3
  228  05:A2FB  81 0A             .byte sixteenth, G2
  229  05:A2FD  88 14             .byte d_quarter, F3
  230  05:A2FF  81 14 13          .byte sixteenth, F3, E3, D3
       05:A302  11        
  231  05:A303  0A 0F 11          .byte G2, C3, D3, G2 
       05:A306  0A        
  232  05:A307  82 16             .byte eighth, G3
  233  05:A309  81 0A             .byte sixteenth, G2
  234  05:A30B  88 14             .byte d_quarter, F3
  235  05:A30D  81 0F 11          .byte sixteenth, C3, D3, F3
       05:A310  14        
  236  05:A311  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       05:A314  11 0A     
  237  05:A316  82 16             .byte eighth, G3
  238  05:A318  81 0A             .byte sixteenth, G2
  239  05:A31A  88 14             .byte d_quarter, F3
  240  05:A31C  81 14 13          .byte sixteenth, F3, E3, D3
       05:A31F  11        
  241                     
  242  05:A320  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:A323  0C 05     
  243  05:A325  82 11             .byte eighth, D3
  244  05:A327  81 05             .byte sixteenth, D2
  245  05:A329  88 0F             .byte d_quarter, C3
  246  05:A32B  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:A32E  0F        
  247  05:A32F  05 0A 0C          .byte D2, G2, A2, D2 
       05:A332  05        
  248  05:A333  82 11             .byte eighth, D3
  249  05:A335  81 05             .byte sixteenth, D2
  250  05:A337  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       05:A33A  0A 0B     
  251  05:A33C  81 0C             .byte sixteenth, A2
  252  05:A33E  05 0A 0C          .byte D2, G2, A2, D2 
       05:A341  05        
  253  05:A342  82 11             .byte eighth, D3
  254  05:A344  81 05             .byte sixteenth, D2
  255  05:A346  88 0F             .byte d_quarter, C3
  256  05:A348  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:A34B  0F        
  257  05:A34C  05 0A 0C          .byte D2, G2, A2, D2 
       05:A34F  05        
  258  05:A350  82 11             .byte eighth, D3
  259  05:A352  81 05             .byte sixteenth, D2
  260  05:A354  82 0F             .byte eighth, C3 
  261  05:A356  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       05:A359  0C 0A 0C  
       05:A35C  11 15     
  262                             
  263                             ;;bridge
  264                             
  265  05:A35E  A2 0B             .byte volume_envelope, ve_long_decay 
  266  05:A360  87 1B 1A          .byte d_eighth, C4, B3, A3
       05:A363  18        
  267  05:A364  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       05:A367  0B 0C 0B  
       05:A36A  0A 09     
  268  05:A36C  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       05:A36F  15 11     
  269  05:A371  82 14             .byte eighth, F3
  270  05:A373  81 11             .byte sixteenth, D3
  271  05:A375  90 0F             .byte d_half_eighth, C3
  272  05:A377  A2 03             .byte volume_envelope, ve_tgl_1
  273  05:A379  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:A37C  0F        
  274  05:A37D  05 0A 0C          .byte D2, G2, A2, D2 
       05:A380  05        
  275  05:A381  82 11             .byte eighth, D3
  276  05:A383  81 05             .byte sixteenth, D2
  277  05:A385  82 0F             .byte eighth, C3 
  278  05:A387  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       05:A38A  0C 0A 0C  
       05:A38D  11 15     
  279                             
  280  05:A38F  A2 0B             .byte volume_envelope, ve_long_decay 
  281  05:A391  87 1B 1A          .byte d_eighth, C4, B3, A3
       05:A394  18        
  282  05:A395  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       05:A398  0B 0C 0B  
       05:A39B  0A 09     
  283  05:A39D  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       05:A3A0  15 11     
  284  05:A3A2  82 14             .byte eighth, F3
  285  05:A3A4  81 1B             .byte sixteenth, C4
  286  05:A3A6  90 1D             .byte d_half_eighth, D4
  287  05:A3A8  A2 03             .byte volume_envelope, ve_tgl_1
  288  05:A3AA  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:A3AD  0F        
  289  05:A3AE  05 0A 0C          .byte D2, G2, A2, D2 
       05:A3B1  05        
  290  05:A3B2  82 11             .byte eighth, D3
  291  05:A3B4  81 05             .byte sixteenth, D2
  292  05:A3B6  82 0F             .byte eighth, C3 
  293  05:A3B8  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       05:A3BB  0C 0A 0C  
       05:A3BE  11 15     
  294                             
  295                             ;; reach-around
  296  05:A3C0  A2 0B             .byte volume_envelope, ve_long_decay 
  297  05:A3C2  87 1F 1F          .byte d_eighth, E4, E4
  298  05:A3C5  A2 04             .byte volume_envelope, ve_tgl_2
  299  05:A3C7  82 21             .byte eighth, Fs4
  300  05:A3C9  A2 07             .byte volume_envelope, ve_battlekid_2
  301  05:A3CB  86 5E             .byte d_sixteenth, rest
  302  05:A3CD  80 38             .byte thirtysecond, F6
  303  05:A3CF  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:A3D2  33 30 2E  
       05:A3D5  2D 30     
  304  05:A3D7  82 2E             .byte eighth, G5
  305  05:A3D9  81 27             .byte sixteenth, C5
  306  05:A3DB  82 2C             .byte eighth, F5
  307  05:A3DD  81 29             .byte sixteenth, D5
  308  05:A3DF  82 2E             .byte eighth, G5
  309  05:A3E1  81 2D             .byte sixteenth, Fs5
  310  05:A3E3  82 30             .byte eighth, A5
  311  05:A3E5  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       05:A3E8  2D 33     
  312                             
  313  05:A3EA  A2 0B             .byte volume_envelope, ve_long_decay 
  314  05:A3EC  87 1F 1F          .byte d_eighth, E4, E4
  315  05:A3EF  A2 04             .byte volume_envelope, ve_tgl_2
  316  05:A3F1  82 21             .byte eighth, Fs4
  317  05:A3F3  A2 07             .byte volume_envelope, ve_battlekid_2
  318  05:A3F5  86 5E             .byte d_sixteenth, rest
  319  05:A3F7  80 1C             .byte thirtysecond, Cs4
  320  05:A3F9  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       05:A3FC  29 24 29  
       05:A3FF  2D        
  321  05:A400  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       05:A403  2B 24 2C  
       05:A406  27 21     
  322  05:A408  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6
       05:A40B  24 29 24  
       05:A40E  1F 2E 2D  
       05:A411  33        
  323                             
  324  05:A412  A2 0B             .byte volume_envelope, ve_long_decay 
  325  05:A414  87 1F 1F          .byte d_eighth, E4, E4
  326  05:A417  A2 04             .byte volume_envelope, ve_tgl_2
  327  05:A419  82 21             .byte eighth, Fs4
  328  05:A41B  A2 07             .byte volume_envelope, ve_battlekid_2
  329  05:A41D  86 5E             .byte d_sixteenth, rest
  330  05:A41F  80 38             .byte thirtysecond, F6
  331  05:A421  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:A424  33 30 2E  
       05:A427  2D 30     
  332  05:A429  82 2E             .byte eighth, G5
  333  05:A42B  81 27             .byte sixteenth, C5
  334  05:A42D  82 2C             .byte eighth, F5
  335  05:A42F  81 29             .byte sixteenth, D5
  336  05:A431  82 2E             .byte eighth, G5
  337  05:A433  81 2D             .byte sixteenth, Fs5
  338  05:A435  82 30             .byte eighth, A5
  339  05:A437  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       05:A43A  2D 33     
  340                             
  341  05:A43C  A2 0B             .byte volume_envelope, ve_long_decay 
  342  05:A43E  87 1F 1F          .byte d_eighth, E4, E4
  343  05:A441  A2 04             .byte volume_envelope, ve_tgl_2
  344  05:A443  82 21             .byte eighth, Fs4
  345  05:A445  A2 03             .byte volume_envelope, ve_tgl_1
  346  05:A447  88 5E             .byte d_quarter, rest
  347  05:A449  80 27 1F          .byte thirtysecond, C5, E4, C5, E4, C5, E4, C5, E4, C5, E4
       05:A44C  27 1F 27  
       05:A44F  1F 27 1F  
       05:A452  27 1F     
  348  05:A454  27 1F 27          .byte C5, E4, C5, E4, C5, E4, C5, E4, C5, E4
       05:A457  1F 27 1F  
       05:A45A  27 1F 27  
       05:A45D  1F        
  349  05:A45E  81 5E             .byte sixteenth, rest
  350  05:A460  82 09 0A          .byte eighth, Fs2, G2, Gs2
       05:A463  0B        
  351  05:A464  81 0C             .byte sixteenth, A2
  352                             
  353  05:A466  A1            .byte loop
  354  05:A467  69 A2         .word bank2_square2
  355                         
  356  05:A469            bank2_tri:
  357                     
  358  05:A469  81 11 16          .byte sixteenth, D3, G3, A3, D3 
       05:A46C  18 11     
  359  05:A46E  82 1D             .byte eighth, D4
  360  05:A470  81 11             .byte sixteenth, D3
  361  05:A472  88 1B             .byte d_quarter, C4
  362  05:A474  81 16 18          .byte sixteenth, G3, A3, C4
       05:A477  1B        
  363  05:A478  11 16 18          .byte D3, G3, A3, D3 
       05:A47B  11        
  364  05:A47C  82 1D             .byte eighth, D4
  365  05:A47E  81 11             .byte sixteenth, D3
  366  05:A480  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       05:A483  16 17     
  367  05:A485  81 18             .byte sixteenth, A3
  368  05:A487  11 16 18          .byte D3, G3, A3, D3 
       05:A48A  11        
  369  05:A48B  82 1D             .byte eighth, D4
  370  05:A48D  81 11             .byte sixteenth, D3
  371  05:A48F  88 1B             .byte d_quarter, C4
  372  05:A491  81 16 18          .byte sixteenth, G3, A3, C4
       05:A494  1B        
  373  05:A495  11 16 18          .byte D3, G3, A3, D3 
       05:A498  11        
  374  05:A499  82 1D             .byte eighth, D4
  375  05:A49B  81 11             .byte sixteenth, D3
  376  05:A49D  82 1B             .byte eighth, C4
  377  05:A49F  81 15 16          .byte sixteenth, Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       05:A4A2  17 18 17  
       05:A4A5  16 15     
  378                             
  379  05:A4A7  11 16 18          .byte D3, G3, A3, D3 
       05:A4AA  11        
  380  05:A4AB  82 1D             .byte eighth, D4
  381  05:A4AD  81 11             .byte sixteenth, D3
  382  05:A4AF  88 1B             .byte d_quarter, C4
  383  05:A4B1  81 16 18          .byte sixteenth, G3, A3, C4
       05:A4B4  1B        
  384  05:A4B5  11 16 18          .byte D3, G3, A3, D3 
       05:A4B8  11        
  385  05:A4B9  82 1D             .byte eighth, D4
  386  05:A4BB  81 11             .byte sixteenth, D3
  387  05:A4BD  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       05:A4C0  16 17     
  388  05:A4C2  81 18             .byte sixteenth, A3
  389  05:A4C4  11 16 18          .byte D3, G3, A3, D3 
       05:A4C7  11        
  390  05:A4C8  82 1D             .byte eighth, D4
  391  05:A4CA  81 11             .byte sixteenth, D3
  392  05:A4CC  88 1B             .byte d_quarter, C4
  393  05:A4CE  81 16 18          .byte sixteenth, G3, A3, C4
       05:A4D1  1B        
  394  05:A4D2  11 16 18          .byte D3, G3, A3, D3 
       05:A4D5  11        
  395  05:A4D6  82 1D             .byte eighth, D4
  396  05:A4D8  81 11             .byte sixteenth, D3
  397  05:A4DA  82 1B             .byte eighth, C4
  398  05:A4DC  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:A4DF  18 16 18  
       05:A4E2  1D 21     
  399                             
  400  05:A4E4  16 1B 1D          .byte G3, C4, D4, G3 
       05:A4E7  16        
  401  05:A4E8  82 22             .byte eighth, G4
  402  05:A4EA  81 16             .byte sixteenth, G3
  403  05:A4EC  88 20             .byte d_quarter, F4
  404  05:A4EE  81 1B 1D          .byte sixteenth, C4, D4, F4
       05:A4F1  20        
  405  05:A4F2  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       05:A4F5  1D 16     
  406  05:A4F7  82 22             .byte eighth, G4
  407  05:A4F9  81 16             .byte sixteenth, G3
  408  05:A4FB  88 20             .byte d_quarter, F4
  409  05:A4FD  81 20 1F          .byte sixteenth, F4, E4, D4
       05:A500  1D        
  410  05:A501  16 1B 1D          .byte G3, C4, D4, G3 
       05:A504  16        
  411  05:A505  82 22             .byte eighth, G4
  412  05:A507  81 16             .byte sixteenth, G3
  413  05:A509  88 20             .byte d_quarter, F4
  414  05:A50B  81 1B 1D          .byte sixteenth, C4, D4, F4
       05:A50E  20        
  415  05:A50F  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       05:A512  1D 16     
  416  05:A514  82 22             .byte eighth, G4
  417  05:A516  81 16             .byte sixteenth, G3
  418  05:A518  88 20             .byte d_quarter, F4
  419  05:A51A  81 20 1F          .byte sixteenth, F4, E4, D4
       05:A51D  1D        
  420                     
  421  05:A51E  11 16 18          .byte D3, G3, A3, D3 
       05:A521  11        
  422  05:A522  82 1D             .byte eighth, D4
  423  05:A524  81 11             .byte sixteenth, D3
  424  05:A526  88 1B             .byte d_quarter, C4
  425  05:A528  81 16 18          .byte sixteenth, G3, A3, C4
       05:A52B  1B        
  426  05:A52C  11 16 18          .byte D3, G3, A3, D3 
       05:A52F  11        
  427  05:A530  82 1D             .byte eighth, D4
  428  05:A532  81 11             .byte sixteenth, D3
  429  05:A534  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       05:A537  16 17     
  430  05:A539  81 18             .byte sixteenth, A3
  431  05:A53B  11 16 18          .byte D3, G3, A3, D3 
       05:A53E  11        
  432  05:A53F  82 1D             .byte eighth, D4
  433  05:A541  81 11             .byte sixteenth, D3
  434  05:A543  88 1B             .byte d_quarter, C4
  435  05:A545  81 16 18          .byte sixteenth, G3, A3, C4
       05:A548  1B        
  436  05:A549  11 16 18          .byte D3, G3, A3, D3 
       05:A54C  11        
  437  05:A54D  82 1D             .byte eighth, D4
  438  05:A54F  81 11             .byte sixteenth, D3
  439  05:A551  82 1B             .byte eighth, C4
  440  05:A553  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:A556  18 16 18  
       05:A559  1D 21     
  441                             
  442                             ;;bridge
  443                             
  444  05:A55B  81                .byte sixteenth
  445  05:A55C  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       05:A55F  22 1D 16  
       05:A562  18 1D 24  
  446  05:A565  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       05:A568  35 33 30  
       05:A56B  2E        
  447  05:A56C  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       05:A56F  1F 18 12  
       05:A572  1D 18 11  
  448  05:A575  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       05:A578  18 11 14  
       05:A57B  0F        
  449  05:A57C  11 16 18          .byte D3, G3, A3, D3 
       05:A57F  11        
  450  05:A580  82 1D             .byte eighth, D4
  451  05:A582  81 11             .byte sixteenth, D3
  452  05:A584  88 1B             .byte d_quarter, C4
  453  05:A586  81 16 18          .byte sixteenth, G3, A3, C4
       05:A589  1B        
  454  05:A58A  11 16 18          .byte D3, G3, A3, D3 
       05:A58D  11        
  455  05:A58E  82 1D             .byte eighth, D4
  456  05:A590  81 11             .byte sixteenth, D3
  457  05:A592  82 1B             .byte eighth, C4
  458  05:A594  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:A597  18 16 18  
       05:A59A  1D 21     
  459  05:A59C  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       05:A59F  22 1D 16  
       05:A5A2  18 1D 24  
  460  05:A5A5  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       05:A5A8  35 33 30  
       05:A5AB  2E        
  461  05:A5AC  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       05:A5AF  1F 18 12  
       05:A5B2  1D 18 11  
  462  05:A5B5  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       05:A5B8  18 11 14  
       05:A5BB  0F        
  463  05:A5BC  11 16 18          .byte D3, G3, A3, D3 
       05:A5BF  11        
  464  05:A5C0  82 1D             .byte eighth, D4
  465  05:A5C2  81 11             .byte sixteenth, D3
  466  05:A5C4  88 1B             .byte d_quarter, C4
  467  05:A5C6  81 16 18          .byte sixteenth, G3, A3, C4
       05:A5C9  1B        
  468  05:A5CA  11 16 18          .byte D3, G3, A3, D3 
       05:A5CD  11        
  469  05:A5CE  82 1D             .byte eighth, D4
  470  05:A5D0  81 11             .byte sixteenth, D3
  471  05:A5D2  82 1B             .byte eighth, C4
  472  05:A5D4  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:A5D7  18 16 18  
       05:A5DA  1D 21     
  473                             
  474                             ;; reach-around
  475  05:A5DC  A2 0B             .byte volume_envelope, ve_long_decay 
  476  05:A5DE  87 0F 0F          .byte d_eighth, C3, C3
  477  05:A5E1  A2 04             .byte volume_envelope, ve_tgl_2
  478  05:A5E3  82 11             .byte eighth, D3
  479  05:A5E5  A2 03             .byte volume_envelope, ve_tgl_1
  480  05:A5E7  87 5E             .byte d_eighth, rest
  481  05:A5E9  81 11 11          .byte sixteenth, D3, D3, D4
       05:A5EC  1D        
  482  05:A5ED  8D 5E             .byte five_sixteenths, rest
  483  05:A5EF  81 11 11          .byte sixteenth, D3, D3, D4
       05:A5F2  1D        
  484  05:A5F3  8D 5E             .byte five_sixteenths, rest
  485  05:A5F5  81 11 11          .byte sixteenth, D3, D3, D4
       05:A5F8  1D        
  486  05:A5F9  82 5E             .byte eighth, rest
  487                             
  488  05:A5FB  A2 0B             .byte volume_envelope, ve_long_decay 
  489  05:A5FD  87 0F 0F          .byte d_eighth, C3, C3
  490  05:A600  A2 04             .byte volume_envelope, ve_tgl_2
  491  05:A602  82 11             .byte eighth, D3
  492  05:A604  A2 03             .byte volume_envelope, ve_tgl_1
  493  05:A606  87 5E             .byte d_eighth, rest
  494  05:A608  81 11 11          .byte sixteenth, D3, D3, D4
       05:A60B  1D        
  495  05:A60C  8D 5E             .byte five_sixteenths, rest
  496  05:A60E  81 11 11          .byte sixteenth, D3, D3, D4
       05:A611  1D        
  497  05:A612  8D 5E             .byte five_sixteenths, rest
  498  05:A614  81 11 11          .byte sixteenth, D3, D3, D4
       05:A617  1D        
  499  05:A618  82 5E             .byte eighth, rest
  500                                     
  501  05:A61A  A2 0B             .byte volume_envelope, ve_long_decay 
  502  05:A61C  87 0F 0F          .byte d_eighth, C3, C3
  503  05:A61F  A2 04             .byte volume_envelope, ve_tgl_2
  504  05:A621  82 11             .byte eighth, D3
  505  05:A623  A2 03             .byte volume_envelope, ve_tgl_1
  506  05:A625  87 5E             .byte d_eighth, rest
  507  05:A627  81 11 11          .byte sixteenth, D3, D3, D4
       05:A62A  1D        
  508  05:A62B  8D 5E             .byte five_sixteenths, rest
  509  05:A62D  81 11 11          .byte sixteenth, D3, D3, D4
       05:A630  1D        
  510  05:A631  8D 5E             .byte five_sixteenths, rest
  511  05:A633  81 11 11          .byte sixteenth, D3, D3, D4
       05:A636  1D        
  512  05:A637  82 5E             .byte eighth, rest
  513                             
  514  05:A639  A2 0B             .byte volume_envelope, ve_long_decay 
  515  05:A63B  87 0F 0F          .byte d_eighth, C3, C3
  516  05:A63E  A2 04             .byte volume_envelope, ve_tgl_2
  517  05:A640  82 11             .byte eighth, D3
  518  05:A642  A2 0B             .byte volume_envelope, ve_long_decay
  519  05:A644  88 5E             .byte d_quarter, rest
  520  05:A646  8C 0C             .byte five_eighths, A2
  521  05:A648  A2 03             .byte volume_envelope, ve_tgl_1
  522  05:A64A  81 5E             .byte sixteenth, rest
  523  05:A64C  82 15 16          .byte eighth, Fs3, G3, Gs3
       05:A64F  17        
  524  05:A650  81 18             .byte sixteenth, A3
  525                             
  526  05:A652  A1            .byte loop
  527  05:A653  69 A4         .word bank2_tri
  528                         
  529  05:A655            bank2_noise:
  530  05:A655  81 04 04      .byte sixteenth, $04, $04, $04, $04
       05:A658  04 04     
  531  05:A65A  A2 09             .byte volume_envelope, ve_drum_decay 
  532  05:A65C  81 04         .byte sixteenth, $04
  533  05:A65E  A2 0A             .byte volume_envelope, ve_hiHat_decay
  534  05:A660  81 04 04      .byte sixteenth, $04, $04, $04, $04
       05:A663  04 04     
  535  05:A665  A2 09         .byte volume_envelope, ve_drum_decay 
  536  05:A667  81 04         .byte sixteenth, $04
  537  05:A669  A2 0A             .byte volume_envelope, ve_hiHat_decay
  538  05:A66B  81 04 04      .byte sixteenth, $04, $04
  539  05:A66E  A2 09             .byte volume_envelope, ve_drum_decay 
  540  05:A670  81 04         .byte sixteenth, $04
  541  05:A672  A2 0A             .byte volume_envelope, ve_hiHat_decay
  542  05:A674  81 04 04          .byte sixteenth, $04, $04, $04
       05:A677  04        
  543  05:A678  A1            .byte loop
  544  05:A679  55 A6         .word bank2_noise
#[2]   Banks/Bank2.asm
   47           BFFA        .org $BFFA     ;first of the three vectors starts here
   48  05:BFFA  7E D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   49                                        ;processor will jump to the label NMI:
   50  05:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   51                                        ;to the label RESET:
   52  05:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Common/Init.asm
   34                       .include "Routines/Common/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 26 D2    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 2A D2    JSR SetMapperControls
   34                       
   35  06:C040  20 67 D2    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   Picross.asm
   35                     
   36  06:C048  20 15 D7    jsr sound_init
   37                         
   38  06:C04B  A9 00       LDA #TITLE_IDX
   39  06:C04D  A2 00       LDX #$00
   40  06:C04F  20 EC CE    JSR ChangeGameMode
   41  06:C052  20 AB D1    JSR InitPPUControl
   42                       
   43                     
   44                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   45                     ;;     Main Program         ;;
   46                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   47                     
   48  06:C055            Forever:
   49                     
   50  06:C055  EE 0C 00    INC sleeping
   51                     
   52  06:C058            .loop
   53  06:C058  AD 0C 00    LDA sleeping
   54  06:C05B  D0 FB       BNE .loop
   55                     
   56  06:C05D  EE 0A 00    INC time  
   57  06:C060  AD CC 00    LDA pauseState
   58  06:C063  D0 03       BNE .skipScaleUpdate
   59  06:C065  EE 0B 00    INC scaledTime
   60  06:C068            .skipScaleUpdate:
   61  06:C068  20 6E C0    JSR GameLoop
   62                     
   63                     
   64  06:C06B  4C 55 C0    JMP Forever     ;jump back to Forever, infinite loop
   65                       
   66                     ;; dynamic jump table
   67                     
   68  06:C06E            GameLoop:
   69                     
   70                       MACROCallDynamicJump game_mode
                          
       06:C06E  AD 0E 00    LDA game_mode
       06:C071  20 BD CF    JSR Dynamic_Jump
                                  
   71                       ;; we'll pop the return address here as the table index, so 
   72                       ;; the routine we pick will return us to whatever called Game Loop
   73                       ;; when it returns
   74                     
   75  06:C074            GameLoopJumpTable:
   76                     
   77  06:C074  7A C0       .word UpdateTitle
   78  06:C076  8F C4       .word UpdateGame
   79  06:C078  C8 CC       .word UpdateGameOver
   80                       
   81                     
   82                       ;;RTS is called in the subroutine
   83                     
   84                       
#[2]   Routines/Game_States/UpdateTitle.asm
   85                       .include "Routines/Game_States/UpdateTitle.asm"
    1  06:C07A            UpdateTitle:
    2                     
    3  06:C07A  AD 10 00    LDA NMI_locks
    4  06:C07D  F0 01       BEQ .unlocked
    5                       
    6  06:C07F  60          RTS
    7                       
    8  06:C080            .unlocked:
    9                     
   10  06:C080  20 84 C0    JSR DoUpdateTitle  
   11  06:C083  60          RTS
   12                       
   13  06:C084            DoUpdateTitle:
   14                     
   15  06:C084  AD 0F 00    LDA mode_state
   16  06:C087  20 BD CF    JSR Dynamic_Jump
   17                         
   18  06:C08A            UpdateTitleJumpTable:
   19                     
   20  06:C08A  96 C0       .word UpdateTitleInit
   21  06:C08C  D7 C0       .word UpdateBankSelection
   22  06:C08E  14 C1       .word UpdateScroll
   23  06:C090  3D C1       .word UpdatePuzzleSelection
   24  06:C092  9B C1       .word UpdateScrollBack
   25  06:C094  BA C1       .word UpdateTitleExit
   26                     
   27                       
   28                     ;;title should have two steps- the bank selection and the puzzle selection
   29                     ;;top half of screen can be used as the title screen, and the bottom half will have the selectable options
   30                     ;;
   31                     ;;starting options list: BANK 0, BANK 1, BANK 2
   32                     ;;select one, then scroll over to the right, with numbers for puzzles 
   33                     
   34  06:C096            UpdateTitleInit:
   35                     
   36  06:C096  A9 00       lda #$00
   37  06:C098  8D D6 00    sta current_song
   38  06:C09B  AD D6 00    lda current_song
   39  06:C09E  20 43 D7    jsr sound_load
   40                     
   41  06:C0A1  20 87 D1    JSR TurnOnSprites
   42                       
   43  06:C0A4  AD 00 70    LDA hasContinue
   44  06:C0A7  F0 20       BEQ .skipContinueText
   45                       MACROAddPPUStringEntryTable #$2B, #$4D, #DRAW_HORIZONTAL, ContinueText
                           
       06:C0A9  A9 01       LDA #$01
       06:C0AB  8D 23 00    STA PPU_PendingWrite
       06:C0AE  A9 2B       LDA #$2B
       06:C0B0  20 3F D1    JSR WriteToPPUString
       06:C0B3  A9 4D       LDA #$4D
       06:C0B5  20 3F D1    JSR WriteToPPUString
       06:C0B8  A9 20       LDA #$20
       06:C0BA  09 00       ORA #DRAW_HORIZONTAL
       06:C0BC  20 3F D1    JSR WriteToPPUString
       06:C0BF  A9 86       LDA #LOW(ContinueText)
       06:C0C1  20 3F D1    JSR WriteToPPUString
       06:C0C4  A9 C4       LDA #HIGH(ContinueText)
       06:C0C6  20 3F D1    JSR WriteToPPUString
                           
   46                       
   47  06:C0C9            .skipContinueText:
   48                       
   49  06:C0C9  A9 00       LDA #$00
   50  06:C0CB  8D C9 00    STA mouse_index
   51  06:C0CE  A9 00       LDA #$00
   52  06:C0D0  8D CA 00    STA mouse_index+1
   53                     
   54  06:C0D3            .changeModeState:
   55                     
   56  06:C0D3  EE 0F 00    INC mode_state
   57  06:C0D6            .leave:
   58  06:C0D6  60          RTS
   59                       
   60  06:C0D7            UpdateBankSelection:
   61                     
   62  06:C0D7  20 A1 C2    JSR UpdateBankPointer
   63                       
   64  06:C0DA  AD 1C 00    LDA gamepadPressed
   65  06:C0DD  29 01       AND #GAMEPAD_A
   66  06:C0DF  F0 32       BEQ .leave
   67                       
   68  06:C0E1  20 6B C4    JSR PlayMenuCursorSound
   69                       
   70  06:C0E4            .changeModeState:
   71                       
   72  06:C0E4  AD C9 00    LDA mouse_index
   73  06:C0E7  C9 03       CMP #$03
   74  06:C0E9  D0 0F       BNE .setBank
   75                       
   76  06:C0EB  EE 0F 00    INC mode_state
   77  06:C0EE  EE 0F 00    INC mode_state
   78  06:C0F1  EE 0F 00    INC mode_state
   79                       
   80                       ;;load bank
   81  06:C0F4  20 65 C3    JSR LoadBank
   82  06:C0F7  4C 0D C1    JMP .goToNext
   83                       
   84  06:C0FA            .setBank:
   85  06:C0FA  8D AB 00    STA tempBank
   86  06:C0FD  A9 FF       LDA #$FF
   87  06:C0FF  A2 01       LDX #$01
   88  06:C101  20 83 C2    JSR SetSpriteImage
   89                       
   90  06:C104  20 26 D2    JSR ResetMapper
   91  06:C107  AD AB 00    LDA tempBank
   92  06:C10A  20 35 D2    JSR LoadPRGBank
   93                     
   94  06:C10D            .goToNext:
   95  06:C10D  EE 0F 00    INC mode_state
   96                     
   97  06:C110  4C 13 C1    JMP .leave
   98                     
   99                     
  100  06:C113            .leave:
  101  06:C113  60          RTS
  102                       
  103  06:C114            UpdateScroll:
  104  06:C114  EE 1F 00    INC PPU_ScrollX
  105  06:C117  EE 1F 00    INC PPU_ScrollX
  106  06:C11A  EE 1F 00    INC PPU_ScrollX
  107  06:C11D  EE 1F 00    INC PPU_ScrollX
  108  06:C120  D0 1A       BNE .leave
  109  06:C122  AD 21 00    LDA PPU_ScrollNT
  110  06:C125  49 01       EOR #%00000001
  111  06:C127  8D 21 00    STA PPU_ScrollNT
  112                       
  113  06:C12A            .changeModeState:
  114  06:C12A  A9 01       LDA #$01
  115  06:C12C  A2 01       LDX #$01
  116  06:C12E  20 83 C2    JSR SetSpriteImage
  117  06:C131  20 45 C2    JSR InitPuzzlePointer
  118  06:C134  EE 0F 00    INC mode_state
  119  06:C137  A9 FF       LDA #$FF
  120  06:C139  8D AC 00    STA tempPuzz
  121  06:C13C            .leave:
  122  06:C13C  60          RTS
  123                       
  124  06:C13D            UpdatePuzzleSelection:
  125                     
  126  06:C13D  20 F3 C2    JSR UpdatePuzzlePointer
  127                       
  128  06:C140  AD C9 00    LDA mouse_index
  129  06:C143  0A          ASL A
  130  06:C144  0A          ASL A
  131  06:C145  0A          ASL A
  132  06:C146  18          CLC
  133  06:C147  6D C9 00    ADC mouse_index
  134  06:C14A  6D CA 00    ADC mouse_index+1
  135  06:C14D  CD AC 00    CMP tempPuzz
  136  06:C150  F0 06       BEQ .checkButtonPresses       ;no change
  137  06:C152  8D AC 00    STA tempPuzz
  138                       
  139  06:C155  20 72 C3    JSR UpdatePuzzleInfo
  140                       
  141  06:C158            .checkButtonPresses:
  142                     
  143  06:C158  AD 1C 00    LDA gamepadPressed
  144  06:C15B  29 02       AND #GAMEPAD_B
  145  06:C15D  D0 10       BNE .changeToScrollBack
  146  06:C15F  AD 1C 00    LDA gamepadPressed
  147  06:C162  29 09       AND #GAMEPAD_CONFIRM
  148  06:C164  F0 34       BEQ .leave
  149                       
  150  06:C166  EE 0F 00    INC mode_state
  151  06:C169  EE 0F 00    INC mode_state
  152  06:C16C  4C 9A C1    JMP .leave
  153                       
  154  06:C16F            .changeToScrollBack:
  155                      
  156  06:C16F  A9 FF       LDA #$FF
  157  06:C171  A2 01       LDX #$01
  158  06:C173  20 83 C2    JSR SetSpriteImage
  159  06:C176  20 3D C2    JSR InitBankPointer
  160  06:C179  AD AB 00    LDA tempBank
  161  06:C17C  8D C9 00    STA mouse_index
  162  06:C17F  20 E3 C2    JSR SetBankPointerFromIndex
  163                       
  164  06:C182  A9 00       LDA #$00
  165  06:C184  8D 20 00    STA PPU_ScrollY
  166  06:C187  A9 FC       LDA #$FC
  167  06:C189  8D 1F 00    STA PPU_ScrollX
  168  06:C18C  AD 21 00    LDA PPU_ScrollNT
  169  06:C18F  29 FE       AND #$FE
  170  06:C191  8D 21 00    STA PPU_ScrollNT
  171                       
  172  06:C194  EE 0F 00    INC mode_state
  173                       
  174  06:C197  20 6B C4    JSR PlayMenuCursorSound
  175  06:C19A            .leave:
  176  06:C19A  60          RTS
  177                       
  178  06:C19B            UpdateScrollBack:
  179                     
  180  06:C19B  CE 1F 00    DEC PPU_ScrollX
  181  06:C19E  CE 1F 00    DEC PPU_ScrollX
  182  06:C1A1  CE 1F 00    DEC PPU_ScrollX
  183  06:C1A4  CE 1F 00    DEC PPU_ScrollX
  184  06:C1A7  D0 10       BNE .leave
  185                       
  186  06:C1A9            .changeModeState:
  187                     
  188  06:C1A9  A9 01       LDA #$01
  189  06:C1AB  A2 01       LDX #$01
  190  06:C1AD  20 83 C2    JSR SetSpriteImage
  191  06:C1B0  CE 0F 00    DEC mode_state
  192  06:C1B3  CE 0F 00    DEC mode_state
  193  06:C1B6  CE 0F 00    DEC mode_state
  194                       
  195  06:C1B9            .leave:
  196  06:C1B9  60          RTS
  197                       
  198  06:C1BA            UpdateTitleExit:
  199                       
  200  06:C1BA  A9 00       lda #$00
  201  06:C1BC  8D D6 00    sta current_song
  202  06:C1BF  AD D6 00    lda current_song
  203  06:C1C2  20 43 D7    jsr sound_load
  204                       
  205                       ;;reset screen scroll
  206  06:C1C5  A9 00       LDA #$00
  207  06:C1C7  8D 1F 00    STA PPU_ScrollX
  208  06:C1CA  8D 21 00    STA PPU_ScrollNT
  209                       
  210  06:C1CD  A9 20       LDA #%00100000
  211  06:C1CF  8D 00 00    STA temp1
  212                       
  213  06:C1D2  AD C9 00    LDA mouse_index
  214  06:C1D5  C9 03       CMP #$03
  215  06:C1D7  D0 06       BNE .loadPuzzle
  216                       
  217  06:C1D9  0E 00 00    ASL temp1
  218  06:C1DC  4C F3 C1    JMP .setupPuzzle
  219                       
  220  06:C1DF            .loadPuzzle:
  221                       ;; we can also pick out the puzzle index
  222                       ;; we have the mouse indexes - one vert, one hori
  223                       ;; take vert, mult by 9- alternatively, mult by 8, add index 
  224                       ;; IE - ind = 1, mult 8 = 8, add 1 = 9
  225                       ;; add X index
  226  06:C1DF  AD AB 00    LDA tempBank
  227  06:C1E2  8D 07 70    STA bank_index
  228  06:C1E5  20 65 C3    JSR LoadBank
  229                       
  230  06:C1E8  AD AC 00    LDA tempPuzz
  231  06:C1EB  8D 08 70    STA puzzle_index
  232  06:C1EE  A9 00       LDA #$00
  233  06:C1F0  8D 00 70    STA hasContinue
  234                     
  235                     
  236  06:C1F3            .setupPuzzle:
  237                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C1F3  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C1F5  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C1F7  8E 16 00          STX table_address
       06:C1FA  8D 17 00          STA table_address+1
                                  
  238                       MACROGetDoubleIndex puzzle_index
                          
       06:C1FD  AD 08 70          LDA puzzle_index
       06:C200  0A                ASL A
       06:C201  A8                TAY
                                  
  239  06:C202  20 E3 CF    JSR GetTableAtIndex
  240                       MACROGetPointer table_address, puzzle_address
                          
       06:C205  AD 16 00          LDA table_address
       06:C208  8D AD 00          STA puzzle_address
       06:C20B  AD 17 00          LDA table_address+1
       06:C20E  8D AE 00          STA puzzle_address+1
                          
  241                       
  242                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:C211  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:C213  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:C215  8E 16 00          STX table_address
       06:C218  8D 17 00          STA table_address+1
                                  
  243                       MACROGetDoubleIndex puzzle_index
                          
       06:C21B  AD 08 70          LDA puzzle_index
       06:C21E  0A                ASL A
       06:C21F  A8                TAY
                                  
  244  06:C220  20 E3 CF    JSR GetTableAtIndex
  245                       MACROGetPointer table_address, title_address
                          
       06:C223  AD 16 00          LDA table_address
       06:C226  8D B1 00          STA title_address
       06:C229  AD 17 00          LDA table_address+1
       06:C22C  8D B2 00          STA title_address+1
                          
  246                     
  247  06:C22F  A0 00       LDY #$00
  248  06:C231  B1 AD       LDA [puzzle_address], y
  249  06:C233  0D 00 00    ORA temp1
  250                       
  251  06:C236  AA          TAX
  252                       
  253                     
  254  06:C237  A9 01       LDA #GAME_IDX
  255  06:C239  20 EC CE    JSR ChangeGameMode
  256                       
  257  06:C23C            .leave
  258  06:C23C  60          RTS
  259                       
  260  06:C23D            InitBankPointer:
  261                     
  262  06:C23D  A2 A0       LDX #$A0
  263  06:C23F  A9 60       LDA #$60
  264  06:C241  20 58 C2    JSR InitPointer
  265                       
  266  06:C244  60          RTS  
  267                       
  268  06:C245            InitPuzzlePointer:
  269                       
  270  06:C245  A2 AE       LDX #$AE
  271  06:C247  A9 10       LDA #$10
  272  06:C249  20 58 C2    JSR InitPointer
  273                       
  274  06:C24C  60          RTS
  275                     
  276  06:C24D            ResetMouseIndex:
  277                     
  278  06:C24D  A9 00       LDA #$00
  279  06:C24F  8D C9 00    STA mouse_index
  280  06:C252  A9 00       LDA #$00
  281  06:C254  8D CA 00    STA mouse_index+1
  282  06:C257  60          RTS
  283                     
  284  06:C258            InitPointer:
  285                     
  286  06:C258  20 5F C2    JSR SetPointerPosition
  287  06:C25B  20 4D C2    JSR ResetMouseIndex
  288  06:C25E  60          RTS  
  289                       
  290  06:C25F            SetPointerPosition:
  291                     
  292  06:C25F  48          PHA
  293  06:C260  8A          TXA
  294  06:C261  A2 01       LDX #$01
  295  06:C263  20 6D C2    JSR SetSpriteYPosition
  296  06:C266  68          PLA
  297  06:C267  A2 01       LDX #$01
  298  06:C269  20 78 C2    JSR SetSpriteXPosition
  299                      
  300  06:C26C  60          RTS
  301                       
  302  06:C26D            SetSpriteYPosition:
  303                       
  304  06:C26D  48          PHA
  305  06:C26E  A9 00       LDA #SPRITE_YPOS
  306  06:C270  20 8E C2    JSR GetSpriteDataIndexInX
  307  06:C273  68          PLA
  308  06:C274  9D 00 02    STA SPRITE_DATA, x
  309  06:C277  60          RTS
  310                       
  311  06:C278            SetSpriteXPosition:  
  312                       
  313  06:C278  48          PHA
  314  06:C279  A9 03       LDA #SPRITE_XPOS
  315  06:C27B  20 8E C2    JSR GetSpriteDataIndexInX
  316  06:C27E  68          PLA
  317  06:C27F  9D 00 02    STA SPRITE_DATA, x 
  318  06:C282  60          RTS
  319                     
  320  06:C283            SetSpriteImage:
  321                     
  322                     ;; A has sprite image index we want
  323                     ;; X has the sprite index
  324  06:C283  48          PHA
  325  06:C284  A9 01       LDA #SPRITE_ID
  326  06:C286  20 8E C2    JSR GetSpriteDataIndexInX
  327  06:C289  68          PLA
  328  06:C28A  9D 00 02    STA SPRITE_DATA, x
  329  06:C28D  60          RTS
  330                       
  331  06:C28E            GetSpriteDataIndexInX:
  332                     
  333                       ;; A has data index we want to get
  334                       ;; X has sprite index
  335  06:C28E  8D 02 00    STA temp3
  336  06:C291  8A          TXA
  337  06:C292  0A          ASL A
  338  06:C293  0A          ASL A
  339  06:C294  18          CLC
  340  06:C295  6D 02 00    ADC temp3
  341  06:C298  AA          TAX
  342                       
  343  06:C299  60          RTS  
  344  06:C29A            GetSpriteData:
  345                     
  346                       ;;A is data we want
  347                       ;;X is Sprite
  348  06:C29A  20 8E C2    JSR GetSpriteDataIndexInX
  349  06:C29D  BD 00 02    LDA SPRITE_DATA, x
  350  06:C2A0  60          RTS
  351                       
  352  06:C2A1            UpdateBankPointer:
  353                      
  354                       ;;bank pointer is 1D, will loop between 0->3
  355  06:C2A1  AD 1C 00    LDA gamepadPressed
  356  06:C2A4  D0 01       BNE .continue
  357  06:C2A6            .leaveEarly:
  358  06:C2A6  60          RTS
  359                       
  360  06:C2A7            .continue:
  361  06:C2A7  A9 00       LDA #$00
  362  06:C2A9  8D 00 00    STA temp1
  363                       
  364  06:C2AC  A9 02       LDA #$02
  365  06:C2AE  8D 01 00    STA temp2
  366                       
  367  06:C2B1  AD 00 70    LDA hasContinue
  368  06:C2B4  F0 05       BEQ .parseInputs
  369  06:C2B6  A9 03       LDA #$03
  370  06:C2B8  8D 01 00    STA temp2
  371                       
  372  06:C2BB            .parseInputs:
  373  06:C2BB  AD 1C 00    LDA gamepadPressed
  374  06:C2BE  29 30       AND #GAMEPAD_VERT
  375  06:C2C0  F0 E4       BEQ .leaveEarly
  376  06:C2C2  0A          ASL A
  377  06:C2C3  0A          ASL A
  378  06:C2C4            .checkDown:
  379  06:C2C4  0A          ASL A
  380  06:C2C5  90 03       BCC .checkUp
  381  06:C2C7  EE 00 00    INC temp1
  382  06:C2CA            .checkUp:
  383  06:C2CA  0A          ASL A
  384  06:C2CB  90 03       BCC .move
  385  06:C2CD  CE 00 00    DEC temp1
  386  06:C2D0            .move:
  387                       
  388  06:C2D0  AD C9 00    LDA mouse_index
  389  06:C2D3  18          CLC
  390  06:C2D4  6D 00 00    ADC temp1
  391  06:C2D7  CD 01 00    CMP temp2
  392  06:C2DA  F0 04       BEQ .skipMod
  393  06:C2DC  90 02       BCC .skipMod
  394  06:C2DE  A9 00       LDA #$00
  395  06:C2E0            .skipMod:
  396  06:C2E0  8D C9 00    STA mouse_index
  397                       ;; mult mouse_index by 16
  398  06:C2E3            SetBankPointerFromIndex:
  399                     
  400  06:C2E3  0A          ASL A
  401  06:C2E4  0A          ASL A
  402  06:C2E5  0A          ASL A
  403  06:C2E6  0A          ASL A
  404  06:C2E7  18          CLC
  405  06:C2E8  69 A0       ADC #$A0
  406  06:C2EA  A2 01       LDX #$01
  407  06:C2EC  20 6D C2    JSR SetSpriteYPosition
  408                       
  409  06:C2EF  20 6B C4    JSR PlayMenuCursorSound
  410                     
  411  06:C2F2            .leave:
  412                       
  413  06:C2F2  60          RTS
  414                       
  415  06:C2F3            UpdatePuzzlePointer:
  416                     
  417                       ;;puzzle pointer is 2D, will loop between 0-9 and 0-2
  418  06:C2F3  AD 1C 00    LDA gamepadPressed
  419  06:C2F6  F0 6C       BEQ .leave 
  420                       
  421  06:C2F8  A9 00       LDA #$00
  422  06:C2FA  8D 00 00    STA temp1
  423  06:C2FD  8D 01 00    STA temp2
  424                       
  425  06:C300            .parseInputs:
  426  06:C300  AD 1C 00    LDA gamepadPressed
  427  06:C303  29 F0       AND #GAMEPAD_MOVE
  428  06:C305  F0 5D       BEQ .leave
  429  06:C307  0A          ASL A
  430  06:C308  90 03       BCC .checkLeft
  431  06:C30A  EE 00 00    INC temp1
  432  06:C30D            .checkLeft:
  433  06:C30D  0A          ASL A
  434  06:C30E  90 03       BCC .checkDown
  435  06:C310  CE 00 00    DEC temp1
  436  06:C313            .checkDown:
  437  06:C313  0A          ASL A
  438  06:C314  90 03       BCC .checkUp
  439  06:C316  EE 01 00    INC temp2
  440  06:C319            .checkUp:
  441  06:C319  0A          ASL A
  442  06:C31A  90 03       BCC .move
  443  06:C31C  CE 01 00    DEC temp2
  444                       
  445  06:C31F            .move:
  446                     
  447  06:C31F  AD C9 00    LDA mouse_index
  448  06:C322  18          CLC
  449  06:C323  6D 01 00    ADC temp2
  450  06:C326  C9 02       CMP #$02
  451  06:C328  F0 04       BEQ .skipYMod
  452  06:C32A  90 02       BCC .skipYMod
  453  06:C32C  A9 00       LDA #$00
  454  06:C32E            .skipYMod:
  455  06:C32E  8D C9 00    STA mouse_index
  456                       ;; mult mouse_index by 16
  457  06:C331  0A          ASL A
  458  06:C332  0A          ASL A
  459  06:C333  0A          ASL A
  460  06:C334  0A          ASL A
  461  06:C335  18          CLC
  462  06:C336  69 AE       ADC #$AE
  463  06:C338  A2 01       LDX #$01
  464  06:C33A  20 6D C2    JSR SetSpriteYPosition
  465                       
  466  06:C33D  AD CA 00    LDA mouse_index+1
  467  06:C340  18          CLC
  468  06:C341  6D 00 00    ADC temp1
  469  06:C344  C9 08       CMP #$08
  470  06:C346  F0 04       BEQ .skipXMod
  471  06:C348  90 02       BCC .skipXMod
  472  06:C34A  A9 00       LDA #$00
  473  06:C34C            .skipXMod:
  474  06:C34C  8D CA 00    STA mouse_index+1
  475                       ;; we need to move 3 tiles each- so index * 3 * 8,
  476  06:C34F  18          CLC
  477  06:C350  6D CA 00    ADC mouse_index+1
  478  06:C353  6D CA 00    ADC mouse_index+1
  479  06:C356  0A          ASL A
  480  06:C357  0A          ASL A
  481  06:C358  0A          ASL A
  482  06:C359  18          CLC
  483  06:C35A  69 10       ADC #$10
  484  06:C35C  A2 01       LDX #$01
  485  06:C35E  20 78 C2    JSR SetSpriteXPosition
  486  06:C361  20 6B C4    JSR PlayMenuCursorSound
  487                       
  488  06:C364            .leave:
  489                       
  490  06:C364  60          RTS
  491                     
  492  06:C365            LoadBank:
  493                     
  494                       ;;load bank
  495  06:C365  20 26 D2    JSR ResetMapper
  496  06:C368  AD 07 70    LDA bank_index
  497  06:C36B  8D A9 00    STA currentPRGBank
  498  06:C36E  20 35 D2    JSR LoadPRGBank
  499  06:C371  60          RTS
  500                       
  501  06:C372            UpdatePuzzleInfo:
  502                     
  503                     
  504                       MACROGetLabelPointer PuzzleSaveLocations, table_address
                          
       06:C372  A9 CC             LDA #HIGH(PuzzleSaveLocations)
       06:C374  A2 C2             LDX #LOW(PuzzleSaveLocations)
                                  
       06:C376  8E 16 00          STX table_address
       06:C379  8D 17 00          STA table_address+1
                                  
  505  06:C37C  AD AB 00    LDA tempBank
  506  06:C37F  0A          ASL A
  507  06:C380  A8          TAY
  508  06:C381  20 E3 CF    JSR GetTableAtIndex
  509                       
  510                       ;;load title/time
  511                       ;;time first, we haven't done titles
  512  06:C384  A2 00       LDX #$00
  513  06:C386  BD 20 FD    LDA SelectDefaultTime,x
  514  06:C389  8D 01 00    STA temp2
  515  06:C38C  E8          INX
  516  06:C38D  BD 20 FD    LDA SelectDefaultTime,x
  517  06:C390  8D 00 00    STA temp1
  518                       
  519  06:C393  AD AC 00    LDA tempPuzz
  520  06:C396  0A          ASL A
  521  06:C397  0A          ASL A
  522  06:C398  A8          TAY
  523  06:C399  B1 16       LDA [table_address], y
  524  06:C39B  10 43       BPL .loadDefaultTime
  525                       
  526                       ;;time exists!
  527  06:C39D  29 0F       AND #$0F
  528  06:C39F  8D 02 00    STA temp3
  529  06:C3A2  C8          INY
  530  06:C3A3  C8          INY
  531  06:C3A4  C8          INY
  532                       MACROAddPPUStringEntryRawData temp1, temp2, #DRAW_HORIZONTAL, #$05
                          
       06:C3A5  A9 01       LDA #$01
       06:C3A7  8D 23 00    STA PPU_PendingWrite
       06:C3AA  AD 00 00    LDA temp1
       06:C3AD  20 3F D1    JSR WriteToPPUString
       06:C3B0  AD 01 00    LDA temp2
       06:C3B3  20 3F D1    JSR WriteToPPUString
       06:C3B6  A9 00       LDA #DRAW_HORIZONTAL
       06:C3B8  20 3F D1    JSR WriteToPPUString
       06:C3BB  A9 05       LDA #$05 
       06:C3BD  20 3F D1    JSR WriteToPPUString
                            
  533  06:C3C0  B1 16       LDA [table_address], y
  534  06:C3C2  20 3F D1    JSR WriteToPPUString
  535  06:C3C5  88          DEY
  536  06:C3C6  B1 16       LDA [table_address], y
  537  06:C3C8  20 3F D1    JSR WriteToPPUString
  538  06:C3CB  A9 61       LDA #$61
  539  06:C3CD  20 3F D1    JSR WriteToPPUString
  540  06:C3D0  88          DEY
  541  06:C3D1  B1 16       LDA [table_address], y
  542  06:C3D3  20 3F D1    JSR WriteToPPUString
  543  06:C3D6  88          DEY
  544  06:C3D7  AD 02 00    LDA temp3
  545  06:C3DA  20 3F D1    JSR WriteToPPUString  
  546  06:C3DD  4C 22 C4    JMP .drawTitle
  547                     
  548  06:C3E0            .loadDefaultTime:
  549                       
  550                       MACROAddPPUStringEntryRepeat #$26, #$47, #DRAW_HORIZONTAL, #$10, #$63
                          
       06:C3E0  A9 01       LDA #$01
       06:C3E2  8D 23 00    STA PPU_PendingWrite
       06:C3E5  A9 26       LDA #$26
       06:C3E7  20 3F D1    JSR WriteToPPUString
       06:C3EA  A9 47       LDA #$47
       06:C3EC  20 3F D1    JSR WriteToPPUString
       06:C3EF  A9 40       LDA #$40
       06:C3F1  09 00       ORA #DRAW_HORIZONTAL
       06:C3F3  09 10       ORA #$10
       06:C3F5  20 3F D1    JSR WriteToPPUString
       06:C3F8  A9 63       LDA #$63
       06:C3FA  20 3F D1    JSR WriteToPPUString
                            
  551                       MACROAddPPUStringEntryTable temp1, temp2, #DRAW_HORIZONTAL, DefaultTimeString
                           
       06:C3FD  A9 01       LDA #$01
       06:C3FF  8D 23 00    STA PPU_PendingWrite
       06:C402  AD 00 00    LDA temp1
       06:C405  20 3F D1    JSR WriteToPPUString
       06:C408  AD 01 00    LDA temp2
       06:C40B  20 3F D1    JSR WriteToPPUString
       06:C40E  A9 20       LDA #$20
       06:C410  09 00       ORA #DRAW_HORIZONTAL
       06:C412  20 3F D1    JSR WriteToPPUString
       06:C415  A9 22       LDA #LOW(DefaultTimeString)
       06:C417  20 3F D1    JSR WriteToPPUString
       06:C41A  A9 FD       LDA #HIGH(DefaultTimeString)
       06:C41C  20 3F D1    JSR WriteToPPUString
                           
  552  06:C41F  4C 6A C4    JMP .leave
  553                     
  554  06:C422            .drawTitle:
  555                       MACROAddPPUStringEntryRepeat #$26, #$47, #DRAW_HORIZONTAL, #$10, #$24
                          
       06:C422  A9 01       LDA #$01
       06:C424  8D 23 00    STA PPU_PendingWrite
       06:C427  A9 26       LDA #$26
       06:C429  20 3F D1    JSR WriteToPPUString
       06:C42C  A9 47       LDA #$47
       06:C42E  20 3F D1    JSR WriteToPPUString
       06:C431  A9 40       LDA #$40
       06:C433  09 00       ORA #DRAW_HORIZONTAL
       06:C435  09 10       ORA #$10
       06:C437  20 3F D1    JSR WriteToPPUString
       06:C43A  A9 24       LDA #$24
       06:C43C  20 3F D1    JSR WriteToPPUString
                            
  556                       
  557                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:C43F  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:C441  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:C443  8E 16 00          STX table_address
       06:C446  8D 17 00          STA table_address+1
                                  
  558                       MACROGetDoubleIndex tempPuzz
                          
       06:C449  AD AC 00          LDA tempPuzz
       06:C44C  0A                ASL A
       06:C44D  A8                TAY
                                  
  559  06:C44E  20 E3 CF    JSR GetTableAtIndex
  560                       MACROGetPointer table_address, title_address
                          
       06:C451  AD 16 00          LDA table_address
       06:C454  8D B1 00          STA title_address
       06:C457  AD 17 00          LDA table_address+1
       06:C45A  8D B2 00          STA title_address+1
                          
  561                     
  562                       ;draw title at 264F
  563  06:C45D  A9 4F       LDA #$4F 
  564  06:C45F  8D B9 00    STA title_draw_address
  565  06:C462  A9 26       LDA #$26
  566  06:C464  8D BA 00    STA title_draw_address+1
  567                       
  568  06:C467  20 D3 D5    JSR DrawTitle
  569  06:C46A            .leave:
  570  06:C46A  60          RTS
  571                     
  572  06:C46B            PlayMenuCursorSound:
  573                         
  574  06:C46B  A9 05       LDA #$05
  575  06:C46D  8D D6 00    STA current_song
  576  06:C470  20 43 D7    JSR sound_load
  577  06:C473  60          RTS 
  578                     
  579  06:C474            PlayPuzzleCursorSound:
  580  06:C474  A9 06       LDA #$06
  581  06:C476  8D D6 00    STA current_song
  582  06:C479  20 43 D7    JSR sound_load
  583  06:C47C  60          RTS 
  584                       
  585  06:C47D            PlayNoiseBlipSound:
  586                      
  587  06:C47D  A9 07       LDA #$07
  588  06:C47F  8D D6 00    STA current_song
  589  06:C482  20 43 D7    JSR sound_load
  590  06:C485  60          RTS 
  591                       
  592                     
  593  06:C486            ContinueText:
  594                     
  595  06:C486  08 0C 18    .db $08, $0C, $18, $17, $1D, $12, $17, $1E, $0E
       06:C489  17 1D 12  
       06:C48C  17 1E 0E  
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGame.asm
   86                       .include "Routines/Game_States/UpdateGame.asm"
    1                     ;;VERT_CLUES = $206E
    2                     ;;HORI_CLUES = $2145
    3                     
    4           214E      VERT_CLUES = $214E
    5           218C      HORI_CLUES = $218C
    6           20A8      BANK_LEVEL = $20A8
    7           20E5      TIMER_LOC = $20E5
    8                     
    9           618E      MOUSE_START = $618E
   10                     
   11           0010      HOLD_TIME = $10
   12           0004      HOLD_FREQ = $04
   13                     
   14  06:C48F            UpdateGame:
   15                     
   16  06:C48F  AD 10 00    LDA NMI_locks
   17  06:C492  F0 01       BEQ .unlocked
   18                       
   19  06:C494  60          RTS
   20                       
   21  06:C495            .unlocked:
   22                     
   23  06:C495  20 99 C4    JSR DoUpdateGame
   24  06:C498  60          RTS
   25                       
   26  06:C499            DoUpdateGame:
   27                     
   28  06:C499  AD 0F 00    LDA mode_state
   29  06:C49C  20 BD CF    JSR Dynamic_Jump
   30                       
   31  06:C49F            UpdateGameJumpTable:
   32                     
   33  06:C49F  B3 C4       .word UpdateGameInit
   34  06:C4A1  76 C5       .word UpdateDrawVertClues
   35  06:C4A3  A3 C5       .word UpdateDrawHoriClues
   36  06:C4A5  FD C5       .word UpdateGamePlay
   37  06:C4A7  DD C7       .word UpdateClearPuzzle
   38  06:C4A9  F0 C7       .word UpdateMoveScreen
   39  06:C4AB  69 C8       .word UpdateDrawImage
   40  06:C4AD  0D C9       .word UpdateWaitInput
   41  06:C4AF  23 C9       .word UpdateGameFadeOut
   42  06:C4B1  49 C9       .word UpdateGameExit
   43                     
   44  06:C4B3            UpdateGameInit:
   45                     
   46                       ;;start bank song
   47                       
   48  06:C4B3  A9 01       lda #$01
   49  06:C4B5  8D D6 00    sta current_song
   50  06:C4B8  AD D6 00    lda current_song
   51  06:C4BB  20 43 D7    jsr sound_load
   52                       
   53                       ;; get the puzzle table in the puzzle address
   54                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C4BE  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C4C0  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C4C2  8E 16 00          STX table_address
       06:C4C5  8D 17 00          STA table_address+1
                                  
   55                       MACROGetDoubleIndex puzzle_index
                          
       06:C4C8  AD 08 70          LDA puzzle_index
       06:C4CB  0A                ASL A
       06:C4CC  A8                TAY
                                  
   56  06:C4CD  20 E3 CF    JSR GetTableAtIndex
   57                       MACROGetPointer table_address, puzzle_address
                          
       06:C4D0  AD 16 00          LDA table_address
       06:C4D3  8D AD 00          STA puzzle_address
       06:C4D6  AD 17 00          LDA table_address+1
       06:C4D9  8D AE 00          STA puzzle_address+1
                          
   58                       MACROGetLabelPointer MOUSE_START, mouse_location
                          
       06:C4DC  A9 61             LDA #HIGH(MOUSE_START)
       06:C4DE  A2 8E             LDX #LOW(MOUSE_START)
                                  
       06:C4E0  8E C7 00          STX mouse_location
       06:C4E3  8D C8 00          STA mouse_location+1
                                  
   59                     
   60                       ;;for clues, we need to get past the header- for a 15x15 puzzle, that's 34 bytes ahead
   61  06:C4E6  A0 00       LDY #$00
   62  06:C4E8  B1 AD       LDA [puzzle_address], y
   63  06:C4EA  AA          TAX
   64  06:C4EB  BD BF CC    LDA PuzzleHeaderSkips, x
   65  06:C4EE  8D 00 00    STA temp1
   66                       
   67  06:C4F1  AD AD 00    LDA puzzle_address
   68  06:C4F4  18          CLC
   69  06:C4F5  6D 00 00    ADC temp1
   70  06:C4F8  8D AF 00    STA clues_address
   71  06:C4FB  A9 00       LDA #$00
   72  06:C4FD  6D AE 00    ADC puzzle_address+1
   73  06:C500  8D B0 00    STA clues_address+1
   74                     
   75  06:C503  A9 00       LDA #$00
   76  06:C505  8D BF 00    STA clueTableIndex
   77  06:C508  8D C0 00    STA clueLineIndex
   78  06:C50B  8D C6 00    STA clueParity
   79  06:C50E  8D C1 00    STA clueOffsetShift
   80  06:C511  8D C9 00    STA mouse_index
   81  06:C514  8D CA 00    STA mouse_index+1
   82                       
   83  06:C517  A9 01       LDA #$01
   84  06:C519  8D CD 00    STA pauseInputLock 
   85                      
   86  06:C51C  AD 00 70    LDA hasContinue
   87  06:C51F  D0 14       BNE .skipSolutionReset
   88                       
   89  06:C521  A9 00       LDA #$00
   90  06:C523  8D 01 70    STA solutionCount
   91  06:C526  8D 02 70    STA nonSolutionCount
   92  06:C529  8D 03 70    STA GameTime
   93  06:C52C  8D 04 70    STA GameTime+1
   94  06:C52F  8D 05 70    STA GameTime+2
   95  06:C532  8D 06 70    STA GameTime+3
   96                       
   97  06:C535            .skipSolutionReset:     
   98                       
   99  06:C535  A9 20       LDA #$20
  100  06:C537  8D C2 00    STA clueDrawAdd
  101                      
  102                       MACROGetLabelPointer VERT_CLUES, clue_start_address
                          
       06:C53A  A9 21             LDA #HIGH(VERT_CLUES)
       06:C53C  A2 4E             LDX #LOW(VERT_CLUES)
                                  
       06:C53E  8E BB 00          STX clue_start_address
       06:C541  8D BC 00          STA clue_start_address+1
                                  
  103  06:C544  20 26 D3    JSR ResetClueDrawAddress
  104                       
  105                       MACROAddPPUStringEntryRawData #HIGH(BANK_LEVEL), #LOW(BANK_LEVEL), #DRAW_HORIZONTAL, #$03
                          
       06:C547  A9 01       LDA #$01
       06:C549  8D 23 00    STA PPU_PendingWrite
       06:C54C  A9 20       LDA #HIGH(BANK_LEVEL)
       06:C54E  20 3F D1    JSR WriteToPPUString
       06:C551  A9 A8       LDA #LOW(BANK_LEVEL)
       06:C553  20 3F D1    JSR WriteToPPUString
       06:C556  A9 00       LDA #DRAW_HORIZONTAL
       06:C558  20 3F D1    JSR WriteToPPUString
       06:C55B  A9 03       LDA #$03 
       06:C55D  20 3F D1    JSR WriteToPPUString
                            
  106  06:C560  AD 07 70    LDA bank_index
  107  06:C563  20 3F D1    JSR WriteToPPUString
  108  06:C566  A9 60       LDA #$60
  109  06:C568  20 3F D1    JSR WriteToPPUString
  110  06:C56B  AE 08 70    LDX puzzle_index
  111  06:C56E  E8          INX
  112  06:C56F  8A          TXA 
  113  06:C570  20 3F D1    JSR WriteToPPUString
  114                       
  115  06:C573  EE 0F 00    INC mode_state
  116                     
  117  06:C576            UpdateDrawVertClues:
  118                       
  119  06:C576  AD 00 70    LDA hasContinue
  120  06:C579  D0 05       BNE .changeModeState
  121  06:C57B  20 7D D2    JSR PopulateClues
  122                       
  123  06:C57E  90 22       BCC .leave
  124                       
  125  06:C580            .changeModeState:
  126                     
  127  06:C580  A9 00       LDA #$00
  128  06:C582  8D C0 00    STA clueLineIndex
  129  06:C585  8D C6 00    STA clueParity
  130                       
  131  06:C588  A9 05       LDA #$05
  132  06:C58A  8D C1 00    STA clueOffsetShift
  133                       
  134  06:C58D  A9 01       LDA #$01
  135  06:C58F  8D C2 00    STA clueDrawAdd
  136                        
  137                       MACROGetLabelPointer HORI_CLUES, clue_start_address
                          
       06:C592  A9 21             LDA #HIGH(HORI_CLUES)
       06:C594  A2 8C             LDX #LOW(HORI_CLUES)
                                  
       06:C596  8E BB 00          STX clue_start_address
       06:C599  8D BC 00          STA clue_start_address+1
                                  
  138  06:C59C  20 26 D3    JSR ResetClueDrawAddress
  139                     
  140  06:C59F  EE 0F 00    INC mode_state
  141  06:C5A2            .leave:
  142  06:C5A2  60          RTS
  143                       
  144  06:C5A3            UpdateDrawHoriClues:
  145                     
  146  06:C5A3  AD 00 70    LDA hasContinue
  147  06:C5A6  D0 0B       BNE .changeModeState
  148  06:C5A8  20 7D D2    JSR PopulateClues
  149  06:C5AB  AD BF 00    LDA clueTableIndex
  150  06:C5AE  8D 09 70    STA image_table_offset
  151  06:C5B1  90 49       BCC .leave
  152                     
  153  06:C5B3            .changeModeState:
  154  06:C5B3  20 87 D1    JSR TurnOnSprites
  155                       
  156                       ;;set the timer to 00
  157                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C5B6  A9 01       LDA #$01
       06:C5B8  8D 23 00    STA PPU_PendingWrite
       06:C5BB  A9 20       LDA #HIGH(TIMER_LOC)
       06:C5BD  20 3F D1    JSR WriteToPPUString
       06:C5C0  A9 E5       LDA #LOW(TIMER_LOC)
       06:C5C2  20 3F D1    JSR WriteToPPUString
       06:C5C5  A9 00       LDA #DRAW_HORIZONTAL
       06:C5C7  20 3F D1    JSR WriteToPPUString
       06:C5CA  A9 05       LDA #$05 
       06:C5CC  20 3F D1    JSR WriteToPPUString
                            
  158  06:C5CF  AD 06 70    LDA GameTime+3
  159  06:C5D2  20 3F D1    JSR WriteToPPUString
  160  06:C5D5  AD 05 70    LDA GameTime+2
  161  06:C5D8  20 3F D1    JSR WriteToPPUString
  162  06:C5DB  A9 61       LDA #$61
  163  06:C5DD  20 3F D1    JSR WriteToPPUString
  164  06:C5E0  AD 04 70    LDA GameTime+1
  165  06:C5E3  20 3F D1    JSR WriteToPPUString
  166  06:C5E6  AD 03 70    LDA GameTime
  167  06:C5E9  20 3F D1    JSR WriteToPPUString
  168                       
  169                       ;;reset time
  170  06:C5EC  A9 00       LDA #$00
  171  06:C5EE  8D 0A 00    STA time
  172  06:C5F1  8D 0B 00    STA scaledTime
  173                       
  174                       ;;clear has continue
  175  06:C5F4  A9 00       LDA #$00
  176  06:C5F6  8D 00 70    STA hasContinue 
  177                       
  178                       
  179  06:C5F9  EE 0F 00    INC mode_state
  180  06:C5FC            .leave:
  181  06:C5FC  60          RTS
  182                       
  183  06:C5FD            UpdateGamePlay:
  184                         
  185  06:C5FD  AD CC 00    LDA pauseState
  186  06:C600  F0 04       BEQ .checkPause
  187  06:C602  20 22 CB    JSR UpdatePause
  188  06:C605  60          RTS
  189                       
  190  06:C606            .checkPause:
  191                       
  192  06:C606  AD 1C 00    LDA gamepadPressed
  193  06:C609  29 08       AND #GAMEPAD_START
  194  06:C60B  F0 29       BEQ .updatePlay
  195  06:C60D  A9 01       LDA #$01
  196  06:C60F  8D CC 00    STA pauseState
  197  06:C612  A9 00       LDA #$00
  198  06:C614  8D C0 00    STA clueLineIndex 
  199  06:C617  8D C1 00    STA clueOffsetShift   
  200                     
  201  06:C61A  A9 FF       LDA #$FF
  202  06:C61C  A2 00       LDX #$00
  203  06:C61E  20 83 C2    JSR SetSpriteImage
  204                     
  205                       ;;we need the pause screen table loaded
  206                       MACROGetLabelPointer Pause_Menu, pause_address
                          
       06:C621  A9 FC             LDA #HIGH(Pause_Menu)
       06:C623  A2 7C             LDX #LOW(Pause_Menu)
                                  
       06:C625  8E B3 00          STX pause_address
       06:C628  8D B4 00          STA pause_address+1
                                  
  207                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:C62B  A9 21             LDA #HIGH($210A)
       06:C62D  A2 0A             LDX #LOW($210A)
                                  
       06:C62F  8E B7 00          STX pause_draw_address
       06:C632  8D B8 00          STA pause_draw_address+1
                                  
  208                       
  209                       
  210  06:C635  60          RTS
  211                     
  212  06:C636            .updatePlay:
  213                     
  214  06:C636  20 D2 CA    JSR UpdateTimeDisplay
  215                             
  216  06:C639  A9 00       LDA #$00
  217  06:C63B  8D 00 00    STA temp1
  218  06:C63E  8D 01 00    STA temp2
  219  06:C641  8D 02 00    STA temp3
  220                       
  221  06:C644            .checkPressed:  
  222                     
  223  06:C644  AD 1C 00    LDA gamepadPressed
  224  06:C647  29 F0       AND #GAMEPAD_MOVE
  225  06:C649  F0 0B       BEQ .checkHeld
  226                       
  227  06:C64B  A9 10       LDA #HOLD_TIME
  228  06:C64D  8D CE 00    STA holdTimer 
  229  06:C650  AD 1C 00    LDA gamepadPressed
  230  06:C653  4C 6A C6    JMP .parseInputs
  231                       
  232  06:C656            .checkHeld:
  233                       
  234  06:C656  AD 1A 00    LDA gamepad
  235  06:C659  29 F0       AND #GAMEPAD_MOVE
  236  06:C65B  F0 2F       BEQ .checkPaintPress
  237                       
  238                       ;;decrement the hold timer
  239  06:C65D  CE CE 00    DEC holdTimer
  240  06:C660  D0 2A       BNE .checkPaintPress
  241  06:C662  A9 04       LDA #HOLD_FREQ
  242  06:C664  8D CE 00    STA holdTimer
  243  06:C667  AD 1A 00    LDA gamepad
  244                     
  245  06:C66A            .parseInputs:
  246                     
  247  06:C66A  29 F0       AND #GAMEPAD_MOVE
  248  06:C66C  F0 1E       BEQ .checkPaintPress
  249  06:C66E  0A          ASL A
  250  06:C66F  90 03       BCC .checkLeft
  251  06:C671  EE 00 00    INC temp1
  252  06:C674            .checkLeft:
  253  06:C674  0A          ASL A
  254  06:C675  90 03       BCC .checkDown
  255  06:C677  CE 00 00    DEC temp1
  256  06:C67A            .checkDown:
  257  06:C67A  0A          ASL A
  258  06:C67B  90 03       BCC .checkUp
  259  06:C67D  EE 01 00    INC temp2
  260  06:C680            .checkUp:
  261  06:C680  0A          ASL A
  262  06:C681  90 03       BCC .move
  263  06:C683  CE 01 00    DEC temp2
  264                       
  265  06:C686            .move:
  266                      
  267  06:C686  20 64 C9    JSR MoveMouse
  268  06:C689  20 5E CA    JSR UpdateMouseScreenPos
  269                       
  270  06:C68C            .checkPaintPress:
  271                     
  272  06:C68C  AD 1C 00    LDA gamepadPressed
  273  06:C68F  29 03       AND #GAMEPAD_AB
  274  06:C691  F0 41       BEQ .updatePaint
  275                       ;;A or B pressed, get current tile
  276                       
  277  06:C693  8D 00 00    STA temp1
  278                       
  279  06:C696  A0 00       LDY #$00
  280  06:C698  B1 C7       LDA [mouse_location], y
  281  06:C69A  8D 01 00    STA temp2
  282                       
  283                         ;;A treats X and Clear as clear
  284                             ;;B treats mark and clear as clear
  285                             ;;clear->mark->x
  286                             
  287                     
  288  06:C69D  C9 7C       CMP #$7C      ;check if this is a marked tile
  289  06:C69F  B0 0F       BCS .getClearTile
  290                       ;;cleared tile- store off marked tile to paint with instead
  291                       ;;not a clear tile- a mark or an x - check A or B  
  292  06:C6A1  4E 00 00    LSR temp1
  293  06:C6A4  B0 05       BCS .getMarkTile
  294                       
  295  06:C6A6            .getXTile:
  296  06:C6A6  A9 80       LDA #$80
  297  06:C6A8  4C CE C6    JMP .finishGetTile
  298                       
  299  06:C6AB            .getMarkTile:
  300  06:C6AB  A9 70       LDA #$70
  301  06:C6AD  4C CE C6    JMP .finishGetTile
  302                     
  303  06:C6B0            .getClearTile:
  304                       
  305  06:C6B0  4E 00 00    LSR temp1
  306  06:C6B3  90 0A       BCC .checkB
  307  06:C6B5  AD 01 00    LDA temp2
  308  06:C6B8  C9 8C       CMP #$8C                      ;; check if in X tiles - will be if >=
  309  06:C6BA  90 0D       BCC .clearTile
  310  06:C6BC  4C AB C6    JMP .getMarkTile
  311                       
  312  06:C6BF            .checkB:
  313                       
  314  06:C6BF  AD 01 00   LDA temp2
  315  06:C6C2  C9 8C      CMP #$8C
  316  06:C6C4  B0 03      BCS .clearTile
  317  06:C6C6  4C A6 C6   JMP .getXTile
  318                       
  319  06:C6C9            .clearTile:
  320  06:C6C9  A9 60       LDA #$60
  321  06:C6CB  4C CE C6    JMP .finishGetTile
  322                       
  323  06:C6CE            .finishGetTile:
  324  06:C6CE  8D CB 00    STA currentPaintTile
  325  06:C6D1  4C E6 C6    JMP .setTile
  326                     
  327                     ;;we'll keep a copy of the puzzle tiles in memory, since we can't easily access tiles in the PPU
  328                     ;;might be best to just keep an entire copy of the nametable instead of trying to index it and deal with 16 bit math
  329                     ;;we can load the nametable into memory as we draw it
  330                     
  331  06:C6D4            .updatePaint:
  332                     
  333  06:C6D4  AD 1A 00    LDA gamepad
  334  06:C6D7  29 03       AND #GAMEPAD_AB
  335  06:C6D9  D0 06       BNE .checkInputLock
  336                       
  337  06:C6DB  A9 00       LDA #$00
  338  06:C6DD  8D CD 00    STA pauseInputLock
  339                       
  340  06:C6E0            .leaveEarly:
  341  06:C6E0  60          RTS  
  342                     
  343  06:C6E1            .checkInputLock:
  344                     
  345                       ;;check if the input lock is on
  346  06:C6E1  2D CD 00    AND pauseInputLock
  347  06:C6E4  D0 FA       BNE .leaveEarly
  348                       
  349  06:C6E6            .setTile:
  350                       
  351  06:C6E6  AD C9 00    LDA mouse_index
  352  06:C6E9  0D CA 00    ORA mouse_index+1
  353  06:C6EC  29 10       AND #$10
  354  06:C6EE  F0 22       BEQ .getPuzzleTile
  355                       
  356  06:C6F0  AD 1C 00    LDA gamepadPressed ; only draw on click
  357  06:C6F3  29 03       AND #GAMEPAD_AB
  358  06:C6F5  F0 E9       BEQ .leaveEarly
  359                       
  360  06:C6F7  A0 00       LDY #$00
  361  06:C6F9  B1 C7       LDA [mouse_location], y
  362  06:C6FB  C9 40       CMP #$40
  363  06:C6FD  90 E1       BCC .leaveEarly
  364  06:C6FF  C9 5F       CMP #$5F
  365  06:C701  F0 02       BEQ .toggleClue
  366  06:C703  B0 DB       BCS .leaveEarly
  367                     
  368  06:C705            .toggleClue:
  369  06:C705  8D 02 00    STA temp3
  370  06:C708  29 F0       AND #$F0
  371  06:C70A  49 10       EOR #$10
  372  06:C70C  8D CB 00    STA currentPaintTile
  373  06:C70F  4C 15 C7    JMP .overwriteTile
  374                       
  375  06:C712            .getPuzzleTile:
  376  06:C712  20 32 CC    JSR CheckAgainstSolution
  377                       
  378  06:C715            .overwriteTile:
  379                       ;;overwrite tile
  380                        
  381  06:C715  AD 02 00    LDA temp3             ;tile taken from current mouse location
  382  06:C718  29 F0       AND #$F0
  383  06:C71A  CD CB 00    CMP currentPaintTile
  384  06:C71D  F0 03       BEQ .skipSound
  385  06:C71F  20 6B C4    JSR PlayMenuCursorSound
  386  06:C722            .skipSound:
  387  06:C722  AD 02 00    LDA temp3
  388  06:C725  29 0F       AND #$0F
  389  06:C727  0D CB 00    ORA currentPaintTile
  390  06:C72A  A0 00       LDY #$00
  391  06:C72C  91 C7       STA [mouse_location], y
  392  06:C72E  8D 00 00    STA temp1
  393                       
  394  06:C731  AD C8 00    LDA mouse_location+1
  395  06:C734  29 3F       AND #$3F
  396  06:C736  8D 01 00    STA temp2
  397                         
  398                       MACROAddPPUStringEntryRawData temp2, mouse_location, #DRAW_HORIZONTAL, #$01
                          
       06:C739  A9 01       LDA #$01
       06:C73B  8D 23 00    STA PPU_PendingWrite
       06:C73E  AD 01 00    LDA temp2
       06:C741  20 3F D1    JSR WriteToPPUString
       06:C744  AD C7 00    LDA mouse_location
       06:C747  20 3F D1    JSR WriteToPPUString
       06:C74A  A9 00       LDA #DRAW_HORIZONTAL
       06:C74C  20 3F D1    JSR WriteToPPUString
       06:C74F  A9 01       LDA #$01 
       06:C751  20 3F D1    JSR WriteToPPUString
                            
  399  06:C754  AD 00 00    LDA temp1
  400  06:C757  20 3F D1    JSR WriteToPPUString
  401                       
  402                       ;;also copy to save copy
  403  06:C75A  AD C7 00    LDA mouse_location
  404  06:C75D  8D B5 00    STA copy_address
  405  06:C760  AD C8 00    LDA mouse_location+1
  406  06:C763  29 0F       AND #$0F
  407  06:C765  09 60       ORA #$60
  408  06:C767  18          CLC
  409  06:C768  69 08       ADC #$08
  410  06:C76A  8D B6 00    STA copy_address+1
  411                       
  412  06:C76D  AD 00 00    LDA temp1
  413  06:C770  A0 00       LDY #$00
  414  06:C772  91 B5       STA [copy_address],y
  415                       
  416  06:C774            .checkSolution: 
  417                     
  418  06:C774  A0 01       LDY #$01
  419  06:C776  B1 AD       LDA [puzzle_address], y
  420  06:C778  CD 01 70    CMP solutionCount
  421  06:C77B  D0 5F       BNE .leave
  422  06:C77D  AD 02 70    LDA nonSolutionCount
  423  06:C780  F0 03       BEQ .changeModeState
  424                       
  425  06:C782  4C DC C7    JMP .leave
  426                       
  427                       ;;update the painting
  428  06:C785            .changeModeState:
  429                      
  430  06:C785  20 90 D1    JSR TurnOffSprites
  431                        
  432  06:C788  A9 00       LDA #$00
  433  06:C78A  8D BD 00    STA clue_draw_address
  434  06:C78D  8D C0 00    STA clueLineIndex
  435  06:C790  A9 20       LDA #$20
  436  06:C792  8D BE 00    STA clue_draw_address+1
  437                       
  438  06:C795  EE 0F 00    INC mode_state
  439                       
  440  06:C798  A9 00       lda #$00
  441  06:C79A  8D D6 00    sta current_song
  442  06:C79D  AD D6 00    lda current_song
  443  06:C7A0  20 43 D7    jsr sound_load
  444                       
  445                       ;;the puzzle is solved, store the time and solved bit in memory
  446                       ;;if the puzzle was solved before, only update the time
  447                       
  448                       MACROGetLabelPointer PuzzleSaveLocations, table_address
                          
       06:C7A3  A9 CC             LDA #HIGH(PuzzleSaveLocations)
       06:C7A5  A2 C2             LDX #LOW(PuzzleSaveLocations)
                                  
       06:C7A7  8E 16 00          STX table_address
       06:C7AA  8D 17 00          STA table_address+1
                                  
  449  06:C7AD  AD 07 70    LDA bank_index
  450  06:C7B0  0A          ASL A
  451  06:C7B1  A8          TAY
  452  06:C7B2  20 E3 CF    JSR GetTableAtIndex
  453                       
  454  06:C7B5  20 EA CB    JSR CheckNewBestTime
  455                       
  456  06:C7B8  AD D1 00    LDA recordSet
  457  06:C7BB  F0 1F       BEQ .leave
  458                       
  459  06:C7BD  AD 08 70    LDA puzzle_index
  460  06:C7C0  0A          ASL A
  461  06:C7C1  0A          ASL A
  462  06:C7C2  A8          TAY
  463  06:C7C3  AD 03 70    LDA GameTime
  464  06:C7C6  09 80       ORA #$80
  465  06:C7C8  91 16       STA [table_address], y
  466  06:C7CA  C8          INY
  467  06:C7CB  AD 04 70    LDA GameTime+1
  468  06:C7CE  91 16       STA [table_address], y
  469  06:C7D0  C8          INY
  470  06:C7D1  AD 05 70    LDA GameTime+2
  471  06:C7D4  91 16       STA [table_address], y
  472  06:C7D6  C8          INY
  473  06:C7D7  AD 06 70    LDA GameTime+3
  474  06:C7DA  91 16       STA [table_address],y
  475                     
  476                      
  477                       
  478  06:C7DC            .leave:
  479                     
  480  06:C7DC  60          RTS
  481                       
  482  06:C7DD            UpdateClearPuzzle:
  483                     
  484  06:C7DD  20 9A D3    JSR ClearPuzzle
  485  06:C7E0  AD C0 00    LDA clueLineIndex
  486  06:C7E3  C9 1E       CMP #30
  487  06:C7E5  D0 08       BNE .leave
  488                       
  489  06:C7E7            .changeModeState:
  490                     
  491  06:C7E7  A9 00       LDA #$00
  492  06:C7E9  8D C0 00    STA clueLineIndex ;using this as a scroller
  493  06:C7EC  EE 0F 00    INC mode_state
  494                     
  495  06:C7EF            .leave:
  496                      
  497  06:C7EF  60          RTS
  498  06:C7F0            UpdateMoveScreen:
  499                       
  500                       ;for 15x15, move 5 tiles left and 5 tiles up- let's do 1 at a time
  501                       ;we'll take the lower nibble of the clue line index as our scroll counter, and the higher nibble as the x/y flag
  502                       
  503  06:C7F0  A0 00       LDY #$00
  504  06:C7F2  B1 AD       LDA [puzzle_address], y
  505  06:C7F4  AA          TAX
  506  06:C7F5  BD B9 CC    LDA PuzzleScrollHori, x
  507  06:C7F8  8D 00 00    STA temp1
  508  06:C7FB  BD BC CC    LDA PuzzleScrollVert, x
  509  06:C7FE  8D 01 00    STA temp2
  510                       
  511  06:C801  AD C0 00    LDA clueLineIndex
  512  06:C804  29 10       AND #$10
  513  06:C806  D0 1E       BNE .scrollY
  514                       
  515                       ;;scroll X over
  516  06:C808  AD C0 00    LDA clueLineIndex
  517  06:C80B  29 0F       AND #$0F
  518  06:C80D  0A          ASL A
  519  06:C80E  0A          ASL A
  520  06:C80F  0A          ASL A ;mult by 8
  521  06:C810  8D 1F 00    STA PPU_ScrollX
  522                       
  523  06:C813  EE C0 00    INC clueLineIndex
  524  06:C816  AD C0 00    LDA clueLineIndex
  525  06:C819  CD 00 00    CMP temp1
  526  06:C81C  D0 4A       BNE .leave
  527  06:C81E  A9 10       LDA #$10
  528  06:C820  8D C0 00    STA clueLineIndex
  529  06:C823  4C 68 C8    JMP .leave
  530                       
  531  06:C826            .scrollY:
  532                     
  533  06:C826  AD C0 00    LDA clueLineIndex
  534  06:C829  29 0F       AND #$0F
  535  06:C82B  0A          ASL A
  536  06:C82C  0A          ASL A
  537  06:C82D  0A          ASL A ;mult by 8
  538  06:C82E  8D 20 00    STA PPU_ScrollY
  539                     
  540  06:C831  EE C0 00    INC clueLineIndex
  541  06:C834  AD C0 00    LDA clueLineIndex
  542  06:C837  29 0F       AND #$0F
  543  06:C839  CD 01 00    CMP temp2
  544  06:C83C  D0 2A       BNE .leave
  545                       
  546  06:C83E            .changeModeState:
  547                     
  548  06:C83E  A9 8E       LDA #$8E
  549  06:C840  8D BD 00    STA clue_draw_address
  550  06:C843  A9 21       LDA #$21
  551  06:C845  8D BE 00    STA clue_draw_address+1
  552                       
  553  06:C848  AD AF 00    LDA clues_address
  554  06:C84B  18          CLC
  555  06:C84C  6D 09 70    ADC image_table_offset
  556  06:C84F  8D AF 00    STA clues_address
  557  06:C852  AD B0 00    LDA clues_address+1
  558  06:C855  69 00       ADC #$00
  559  06:C857  8D B0 00    STA clues_address+1
  560                       
  561  06:C85A  A9 00       LDA #$00
  562  06:C85C  8D BF 00    STA clueTableIndex
  563  06:C85F  8D C0 00    STA clueLineIndex
  564  06:C862  8D C1 00    STA clueOffsetShift
  565                     
  566  06:C865  EE 0F 00    INC mode_state
  567                     
  568  06:C868            .leave:
  569                      
  570  06:C868  60          RTS
  571  06:C869            UpdateDrawImage:
  572                     
  573                       ;run it twice for a faster draw
  574  06:C869  AD 0A 00    LDA time
  575  06:C86C  29 01       AND #$01
  576  06:C86E  D0 0B       BNE .leaveEarly
  577  06:C870  20 7C D4    JSR DrawImage
  578  06:C873  AD BF 00    LDA clueTableIndex
  579  06:C876  CD 09 00    CMP tempy
  580                     
  581  06:C879  F0 01       BEQ .changeModeState
  582  06:C87B            .leaveEarly:
  583  06:C87B  60          RTS
  584                       
  585  06:C87C            .changeModeState:
  586                     
  587                       ;;do a palette draw
  588                       ;;puzzle address + 03 has the desired palette offset
  589                     
  590  06:C87C  A0 03       LDY #$03
  591  06:C87E  B1 AD       LDA [puzzle_address],y
  592  06:C880  29 0F       AND #$0F
  593  06:C882  AA          TAX
  594                       
  595  06:C883  B1 AD       LDA [puzzle_address],y
  596  06:C885  29 10       AND #$10
  597  06:C887  F0 15       BEQ .storeBottomVals
  598                       
  599  06:C889  8A          TXA
  600  06:C88A  09 10       ORA #$10
  601  06:C88C  8D 01 00    STA temp2
  602  06:C88F  8A          TXA
  603  06:C890  09 20       ORA #$20
  604  06:C892  8D 02 00    STA temp3
  605  06:C895  8A          TXA
  606  06:C896  09 30       ORA #$30
  607  06:C898  8D 03 00    STA temp4
  608                     
  609  06:C89B  4C B0 C8    JMP .checkKeepWhite
  610                       
  611  06:C89E            .storeBottomVals:
  612                     
  613  06:C89E  8A          TXA
  614  06:C89F  09 00       ORA #$00
  615  06:C8A1  8D 01 00    STA temp2
  616  06:C8A4  8A          TXA
  617  06:C8A5  09 10       ORA #$10
  618  06:C8A7  8D 02 00    STA temp3
  619  06:C8AA  8A          TXA
  620  06:C8AB  09 20       ORA #$20
  621  06:C8AD  8D 03 00    STA temp4
  622                       
  623  06:C8B0            .checkKeepWhite:
  624                       
  625  06:C8B0  B1 AD       LDA [puzzle_address],y
  626  06:C8B2  29 20       AND #$20
  627  06:C8B4  F0 05       BEQ .loadPalToPPUStr
  628                       
  629  06:C8B6  A9 30       LDA #$30
  630  06:C8B8  8D 03 00    STA temp4
  631                       
  632                       
  633  06:C8BB            .loadPalToPPUStr:
  634                       
  635                       MACROAddPPUStringEntryRawData #$3F, #$01, #DRAW_HORIZONTAL, #03
                          
       06:C8BB  A9 01       LDA #$01
       06:C8BD  8D 23 00    STA PPU_PendingWrite
       06:C8C0  A9 3F       LDA #$3F
       06:C8C2  20 3F D1    JSR WriteToPPUString
       06:C8C5  A9 01       LDA #$01
       06:C8C7  20 3F D1    JSR WriteToPPUString
       06:C8CA  A9 00       LDA #DRAW_HORIZONTAL
       06:C8CC  20 3F D1    JSR WriteToPPUString
       06:C8CF  A9 03       LDA #03 
       06:C8D1  20 3F D1    JSR WriteToPPUString
                            
  636  06:C8D4  AD 01 00    LDA temp2
  637  06:C8D7  20 3F D1    JSR WriteToPPUString
  638  06:C8DA  AD 02 00    LDA temp3
  639  06:C8DD  20 3F D1    JSR WriteToPPUString
  640  06:C8E0  AD 03 00    LDA temp4
  641  06:C8E3  20 3F D1    JSR WriteToPPUString
  642                       
  643  06:C8E6  A2 01       LDX #$01
  644  06:C8E8            .copyLoop:
  645                       ;;also store in the copy 
  646  06:C8E8  BD 00 00    LDA temp1, x
  647  06:C8EB  9D 00 6C    STA Palette_Copy, x
  648  06:C8EE  E8          INX
  649  06:C8EF  E0 04       CPX #$04
  650  06:C8F1  D0 F5       BNE .copyLoop
  651                       
  652  06:C8F3  A0 00       LDY #$00
  653  06:C8F5  B1 AD       LDA [puzzle_address], y
  654  06:C8F7  0A          ASL A
  655  06:C8F8  AA          TAX
  656  06:C8F9  BD 78 D6    LDA ImageTitleLowerHalfPos, x
  657  06:C8FC  8D B9 00    STA title_draw_address
  658  06:C8FF  E8          INX
  659  06:C900  BD 78 D6    LDA ImageTitleLowerHalfPos, x
  660  06:C903  8D BA 00    STA title_draw_address+1
  661                       
  662  06:C906  20 D3 D5    JSR DrawTitle
  663                       
  664  06:C909  EE 0F 00    INC mode_state
  665                     
  666  06:C90C            .leave:
  667                      
  668  06:C90C  60          RTS
  669                       
  670  06:C90D            UpdateWaitInput:
  671                     
  672  06:C90D  AD 1C 00    LDA gamepadPressed
  673  06:C910  F0 10       BEQ .leave
  674                       
  675  06:C912            .changeModeState:
  676  06:C912  A9 00       LDA #$00
  677  06:C914  8D 0A 00    STA time
  678  06:C917  8D 0B 00    STA scaledTime
  679  06:C91A  A9 02       LDA #GAMEOVER_IDX
  680  06:C91C  8D CF 00    STA targetGameMode
  681  06:C91F  EE 0F 00    INC mode_state
  682                     
  683  06:C922            .leave:
  684                      
  685  06:C922  60          RTS
  686                       
  687  06:C923            UpdateGameFadeOut:
  688                     
  689  06:C923  AD 0A 00    LDA time
  690  06:C926  29 07       AND #$07
  691  06:C928  D0 1E       BNE .leave
  692                       ;;every 8 frames, decrement the palettes
  693  06:C92A  20 BC D1    JSR FadeOutPalettes
  694  06:C92D  B0 19       BCS .leave
  695                     
  696  06:C92F            .changeModeState:
  697  06:C92F  A9 00       LDA #$00
  698  06:C931  8D 0A 00    STA time
  699  06:C934  EE 0F 00    INC mode_state
  700                       
  701                       ;;don't need to turn all the sprites off, just need to
  702                       ;;clear them out   
  703  06:C937  A9 FF       LDA #$FF
  704  06:C939  A2 00       LDX #$00
  705  06:C93B  20 83 C2    JSR SetSpriteImage
  706                       
  707  06:C93E  A9 FF       LDA #$FF
  708  06:C940  A2 01       LDX #$01
  709  06:C942  20 83 C2    JSR SetSpriteImage
  710                       
  711  06:C945  20 87 D1    JSR TurnOnSprites     ;turn sprite rendering back on
  712                       
  713  06:C948            .leave:
  714  06:C948  60          RTS  
  715                     
  716  06:C949            UpdateGameExit:
  717                     
  718                       ;JSR famistudio_music_stop
  719  06:C949  AD 0A 00    LDA time
  720  06:C94C  29 0F       AND #$0F
  721  06:C94E  D0 13       BNE .leave
  722                     
  723  06:C950  A9 00       LDA #$00
  724  06:C952  8D 1F 00    STA PPU_ScrollX
  725  06:C955  8D 20 00    STA PPU_ScrollY
  726  06:C958  8D 21 00    STA PPU_ScrollNT
  727                       
  728  06:C95B  AD CF 00    LDA targetGameMode
  729  06:C95E  A2 00       LDX #$00
  730  06:C960  20 EC CE    JSR ChangeGameMode
  731  06:C963            .leave:
  732  06:C963  60          RTS
  733                       
  734  06:C964            MoveMouse:
  735                     
  736  06:C964  20 74 C4    JSR PlayPuzzleCursorSound
  737                     
  738  06:C967  AD 00 00    LDA temp1                             ;horizontal move 
  739  06:C96A  0E 00 00    ASL temp1
  740  06:C96D  0E 00 00    ASL temp1
  741  06:C970  0E 00 00    ASL temp1
  742                       
  743  06:C973  AD 01 00    LDA temp2                             ;vertical move
  744  06:C976  0E 01 00    ASL temp2 
  745  06:C979  0E 01 00    ASL temp2
  746  06:C97C  0E 01 00    ASL temp2
  747                       
  748                       
  749  06:C97F  A0 00       LDY #$00
  750  06:C981  B1 AD       LDA [puzzle_address], y ;puzzle size 0 = 5, 1 = 10, 2 = 15  
  751  06:C983  0A          ASL A
  752  06:C984  AA          TAX
  753                     
  754  06:C985  AD CA 00    LDA mouse_index+1             ;horizontal index
  755  06:C988  29 10       AND #$10                              ;check clue flag
  756  06:C98A  8D 09 00    STA tempy                             ;store clue flag
  757  06:C98D  AD C9 00    LDA mouse_index               ;horizontal index
  758  06:C990  29 10       AND #$10                              ;check clue flag
  759  06:C992  8D 08 00    STA tempx                             ;store clue flag
  760                       
  761  06:C995  F0 0D       BEQ .puzzleHoriMin
  762  06:C997  A9 22       LDA #HORI_CLUE_MIN
  763  06:C999  8D 02 00    STA temp3 
  764  06:C99C  A9 6A       LDA #HORI_CLUE_MAX
  765  06:C99E  8D 03 00    STA temp4
  766  06:C9A1  4C B0 C9    JMP .checkHoriBorder
  767                       
  768  06:C9A4            .puzzleHoriMin:
  769  06:C9A4  BD AD CC    LDA MouseMinimums, x
  770  06:C9A7  8D 02 00    STA temp3 
  771  06:C9AA  BD B3 CC    LDA MouseMaximums, x
  772  06:C9AD  8D 03 00    STA temp4
  773                       
  774  06:C9B0            .checkHoriBorder:
  775  06:C9B0  8A          TXA
  776  06:C9B1  48          PHA
  777                       
  778  06:C9B2  A9 00       LDA #$00
  779  06:C9B4  8D 06 00    STA temp7
  780                       
  781  06:C9B7  A2 03       LDX #SPRITE_XPOS
  782  06:C9B9  BD 00 02    LDA SPRITE_DATA, x
  783  06:C9BC  18          CLC
  784  06:C9BD  6D 00 00    ADC temp1
  785                       ;;check against borders
  786  06:C9C0  CD 02 00    CMP temp3
  787  06:C9C3  D0 18       BNE .checkHoriMax
  788                       ;;equal - check if mouse index is in clue area
  789  06:C9C5  8D 05 00    STA temp6
  790  06:C9C8  AD 08 00    LDA tempx
  791  06:C9CB  0D 09 00    ORA tempy
  792  06:C9CE  D0 27       BNE .moveVert
  793  06:C9D0  EE 06 00    INC temp7
  794  06:C9D3  AD 05 00    LDA temp6
  795  06:C9D6  18          CLC
  796  06:C9D7  6D 00 00    ADC temp1
  797  06:C9DA  4C F4 C9    JMP .moveSpriteHori
  798                       
  799  06:C9DD            .checkHoriMax:
  800  06:C9DD  CD 03 00    CMP temp4
  801  06:C9E0  D0 12       BNE .moveSpriteHori
  802                       
  803  06:C9E2  8D 05 00    STA temp6
  804  06:C9E5  AD 08 00    LDA tempx
  805  06:C9E8  F0 0D       BEQ .moveVert
  806  06:C9EA  EE 06 00    INC temp7
  807  06:C9ED  AD 05 00    LDA temp6
  808  06:C9F0  18          CLC
  809  06:C9F1  6D 00 00    ADC temp1
  810                       
  811  06:C9F4            .moveSpriteHori:
  812  06:C9F4  9D 00 02    STA SPRITE_DATA, x
  813                     
  814  06:C9F7            .moveVert:
  815                     
  816  06:C9F7  68          PLA
  817  06:C9F8  AA          TAX
  818  06:C9F9  E8          INX
  819                       
  820  06:C9FA  AD 09 00    LDA tempy
  821  06:C9FD  F0 0D       BEQ .puzzleVertMin
  822  06:C9FF  A9 12       LDA #VERT_CLUE_MIN
  823  06:CA01  8D 02 00    STA temp3 
  824  06:CA04  A9 5A       LDA #VERT_CLUE_MAX
  825  06:CA06  8D 03 00    STA temp4
  826  06:CA09  4C 18 CA    JMP .checkVertBorder
  827                       
  828  06:CA0C            .puzzleVertMin:
  829  06:CA0C  BD AD CC    LDA MouseMinimums, x
  830  06:CA0F  8D 02 00    STA temp3
  831  06:CA12  BD B3 CC    LDA MouseMaximums, x
  832  06:CA15  8D 03 00    STA temp4
  833                     
  834                     
  835  06:CA18            .checkVertBorder:
  836                     
  837  06:CA18  A9 00       LDA #$00
  838  06:CA1A  8D 07 00    STA temp8
  839                     
  840  06:CA1D  A2 00       LDX #SPRITE_YPOS
  841  06:CA1F  BD 00 02    LDA SPRITE_DATA, x
  842  06:CA22  18          CLC
  843  06:CA23  6D 01 00    ADC temp2
  844                       ;;check against borders
  845  06:CA26  CD 02 00    CMP temp3
  846  06:CA29  D0 18       BNE .checkVertMax
  847                       ;;equal - check if mouse index is in clue area
  848  06:CA2B  8D 05 00    STA temp6
  849  06:CA2E  AD 09 00    LDA tempy
  850  06:CA31  0D 08 00    ORA tempx
  851  06:CA34  D0 27       BNE .leave
  852  06:CA36  EE 07 00    INC temp8
  853  06:CA39  AD 05 00    LDA temp6
  854  06:CA3C  18          CLC
  855  06:CA3D  6D 01 00    ADC temp2
  856  06:CA40  4C 5A CA    JMP .moveSpriteVert
  857                       
  858  06:CA43            .checkVertMax:
  859  06:CA43  CD 03 00    CMP temp4
  860  06:CA46  D0 12       BNE .moveSpriteVert
  861  06:CA48  8D 05 00    STA temp6
  862  06:CA4B  AD 09 00    LDA tempy
  863  06:CA4E  F0 0D       BEQ .leave
  864  06:CA50  EE 07 00    INC temp8
  865  06:CA53  AD 05 00    LDA temp6
  866  06:CA56  18          CLC
  867  06:CA57  6D 01 00    ADC temp2
  868                       
  869  06:CA5A            .moveSpriteVert:
  870  06:CA5A  9D 00 02    STA SPRITE_DATA, x
  871                     
  872  06:CA5D            .leave:
  873  06:CA5D  60          RTS
  874                             
  875  06:CA5E            UpdateMouseScreenPos:
  876                     
  877  06:CA5E  AD 06 00    LDA temp7
  878  06:CA61  F0 08       BEQ .skipHoriFlip
  879                       
  880  06:CA63  AD 08 00    LDA tempx
  881  06:CA66  49 10       EOR #$10
  882  06:CA68  8D 08 00    STA tempx
  883                       
  884  06:CA6B            .skipHoriFlip:
  885                     
  886  06:CA6B  AD 07 00    LDA temp8
  887  06:CA6E  F0 08       BEQ .skipVertFlip
  888                     
  889  06:CA70  AD 09 00    LDA tempy
  890  06:CA73  49 10       EOR #$10
  891  06:CA75  8D 09 00    STA tempy
  892                     
  893  06:CA78            .skipVertFlip:
  894                     
  895                     
  896  06:CA78  A2 00       LDX #$00
  897  06:CA7A  BD 00 02    LDA SPRITE_DATA, x;ypos       ;yyyy y...
  898  06:CA7D  4A          LSR A                                         ;0yyy yy..
  899  06:CA7E  4A          LSR A                                         ;00yy yyy.
  900  06:CA7F  4A          LSR A                                         ;000y yyyy
  901  06:CA80  8D 00 00    STA temp1
  902  06:CA83  8D CA 00    STA mouse_index+1                     ;vertical
  903  06:CA86  E8          INX
  904  06:CA87  E8          INX
  905  06:CA88  E8          INX   
  906  06:CA89  BD 00 02    LDA SPRITE_DATA, x ;xpos  ;  xxxx x...
  907  06:CA8C  29 F8       AND #$F8                       ;              ;  xxxx x000
  908  06:CA8E  8D 01 00    STA temp2                      ;      ;  
  909  06:CA91  4E 00 00    LSR temp1                      ;              ;  0000 yyyy y
  910  06:CA94  6E 01 00    ROR temp2                      ;      ;  yxxx xx00
  911  06:CA97  4E 00 00    LSR temp1                      ;              ;  0000 0yyy y
  912  06:CA9A  6E 01 00    ROR temp2                      ;              ;  yyxx xxx0
  913  06:CA9D  4E 00 00    LSR temp1              ;              ;  0000 00yy y
  914  06:CAA0  6E 01 00    ROR temp2                      ;              ;  yyyx xxxx
  915  06:CAA3  AD 01 00    LDA temp2
  916  06:CAA6  29 1F       AND #$1F
  917  06:CAA8  8D C9 00    STA mouse_index                       ;horizontal
  918                       
  919  06:CAAB  AD C9 00    LDA mouse_index
  920  06:CAAE  38          SEC 
  921  06:CAAF  E9 0E       SBC #$0E
  922  06:CAB1  0D 08 00    ORA tempx
  923  06:CAB4  8D C9 00    STA mouse_index
  924                       
  925  06:CAB7  AD CA 00    LDA mouse_index+1
  926  06:CABA  38          SEC 
  927  06:CABB  E9 0C       SBC #$0C
  928  06:CABD  0D 09 00    ORA tempy
  929  06:CAC0  8D CA 00    STA mouse_index+1
  930                       
  931                       ;subtract starting offsets for mouse index
  932                       
  933  06:CAC3  AD 00 00    LDA temp1                      ;              ;  0000 00yy
  934  06:CAC6  09 60       ORA #$60                       ;              ;  0110 00yy
  935                       
  936  06:CAC8  8D C8 00    STA mouse_location+1
  937  06:CACB  AD 01 00    LDA temp2
  938  06:CACE  8D C7 00    STA mouse_location
  939                       
  940  06:CAD1            .leave:
  941  06:CAD1  60          RTS
  942                       
  943  06:CAD2            UpdateTimeDisplay:
  944                     
  945  06:CAD2  AD 0B 00    LDA scaledTime
  946  06:CAD5  C9 3C       CMP #60
  947  06:CAD7  D0 48       BNE .leave
  948                       
  949  06:CAD9  A9 00       LDA #$00
  950  06:CADB  8D 0B 00    STA scaledTime
  951                       
  952  06:CADE  EE 03 70    INC GameTime
  953  06:CAE1  AD 03 70    LDA GameTime
  954  06:CAE4  C9 0A       CMP #10
  955  06:CAE6  D0 32       BNE .printTime
  956                       
  957  06:CAE8  A9 00       LDA #$00
  958  06:CAEA  8D 03 70    STA GameTime
  959  06:CAED  EE 04 70    INC GameTime+1
  960  06:CAF0  AD 04 70    LDA GameTime+1
  961  06:CAF3  C9 06       CMP #6
  962  06:CAF5  D0 23       BNE .printTime
  963                       
  964  06:CAF7  A9 00       LDA #$00
  965  06:CAF9  8D 04 70    STA GameTime+1
  966  06:CAFC  EE 05 70    INC GameTime+2
  967  06:CAFF  AD 05 70    LDA GameTime+2
  968  06:CB02  C9 0A       CMP #10
  969  06:CB04  D0 14       BNE .printTime
  970                       
  971  06:CB06  A9 00       LDA #$00
  972  06:CB08  8D 05 70    STA GameTime+2
  973  06:CB0B  EE 06 70    INC GameTime+3
  974  06:CB0E  AD 06 70    LDA GameTime+3
  975  06:CB11  C9 0A       CMP #10
  976  06:CB13  D0 05       BNE .printTime
  977                       
  978  06:CB15  A9 00       LDA #$00
  979  06:CB17  8D 06 70    STA GameTime+3
  980                         
  981                       
  982  06:CB1A            .printTime:
  983                     
  984  06:CB1A  A9 20       LDA #HIGH(TIMER_LOC)
  985  06:CB1C  A2 E5       LDX #LOW(TIMER_LOC)
  986                     
  987  06:CB1E  20 12 D6    JSR ApplyGameTimeToPPUString
  988                       
  989                       
  990  06:CB21            .leave: 
  991  06:CB21  60          RTS  
  992                       
  993  06:CB22            UpdatePause:
  994                     
  995                     ;;load screen
  996                     ;;update selection
  997                     ;; close - remove screen, then upause
  998                     ;; quit - jump to fade out
  999  06:CB22  AD CC 00    LDA pauseState
 1000  06:CB25  20 BD CF    JSR Dynamic_Jump
 1001                     
 1002  06:CB28            UpdatePauseJumpTable:  
 1003                     
 1004  06:CB28  E9 CB       .word ExitPause                       ;fail safe
 1005  06:CB2A  30 CB       .word UpdateLoadPauseScreen
 1006  06:CB2C  4C CB       .word UpdatePauseScreen
 1007  06:CB2E  CD CB       .word UpdateUnloadPauseScreen
 1008                       
 1009  06:CB30            UpdateLoadPauseScreen:
 1010                       
 1011  06:CB30  20 E1 D3    JSR LoadPauseScreen
 1012  06:CB33  AD C1 00    LDA clueOffsetShift
 1013  06:CB36  C9 06       CMP #$06
 1014  06:CB38  D0 11       BNE .leave
 1015                       
 1016  06:CB3A            .changePauseState:
 1017                     
 1018  06:CB3A  A9 60       LDA #PAUSE_YES
 1019  06:CB3C  A2 01       LDX #$01
 1020  06:CB3E  20 78 C2    JSR SetSpriteXPosition  
 1021  06:CB41  A9 01       LDA #$01
 1022  06:CB43  A2 01       LDX #$01
 1023  06:CB45  20 83 C2    JSR SetSpriteImage
 1024                       
 1025  06:CB48  EE CC 00    INC pauseState
 1026  06:CB4B            .leave:
 1027  06:CB4B  60          RTS
 1028                       
 1029  06:CB4C            UpdatePauseScreen:
 1030                       
 1031  06:CB4C  AD 1C 00    LDA gamepadPressed
 1032  06:CB4F  C9 08       CMP #GAMEPAD_START
 1033  06:CB51  F0 2C       BEQ .unPause
 1034  06:CB53  C9 02       CMP #GAMEPAD_B
 1035  06:CB55  F0 28       BEQ .unPause
 1036  06:CB57  C9 01       CMP #GAMEPAD_A
 1037  06:CB59  F0 4D       BEQ .checkA
 1038                       
 1039                       ;;update pointer
 1040                       
 1041  06:CB5B  AD 1C 00    LDA gamepadPressed
 1042  06:CB5E  29 C0       AND #GAMEPAD_HORI
 1043                       ;;binary system- left and right don't really matter, we'll just toggle the position
 1044  06:CB60  F0 6A       BEQ .leave
 1045                       
 1046  06:CB62  20 6B C4    JSR PlayMenuCursorSound
 1047                       
 1048  06:CB65  A9 03       LDA #SPRITE_XPOS
 1049  06:CB67  A2 01       LDX #$01
 1050  06:CB69  20 9A C2    JSR GetSpriteData
 1051                       
 1052  06:CB6C  C9 60       CMP #PAUSE_YES
 1053  06:CB6E  F0 05       BEQ .loadNo
 1054                       
 1055  06:CB70  A9 60       LDA #PAUSE_YES
 1056  06:CB72  4C 77 CB    JMP .setPosition
 1057                       
 1058  06:CB75            .loadNo:
 1059  06:CB75  A9 88       LDA #PAUSE_NO
 1060                     
 1061  06:CB77            .setPosition:
 1062                       
 1063  06:CB77  A2 01       LDX #$01
 1064  06:CB79  20 78 C2    JSR SetSpriteXPosition  
 1065                     
 1066  06:CB7C  4C CC CB    JMP .leave 
 1067                     
 1068  06:CB7F            .unPause:
 1069                     
 1070  06:CB7F  A9 00       LDA #$00
 1071  06:CB81  8D C0 00    STA clueLineIndex
 1072  06:CB84  8D C1 00    STA clueOffsetShift
 1073                       
 1074  06:CB87  A9 FF       LDA #$FF
 1075  06:CB89  A2 01       LDX #$01
 1076  06:CB8B  20 83 C2    JSR SetSpriteImage
 1077                     
 1078                       MACROGetLabelPointer $610A, pause_address
                          
       06:CB8E  A9 61             LDA #HIGH($610A)
       06:CB90  A2 0A             LDX #LOW($610A)
                                  
       06:CB92  8E B3 00          STX pause_address
       06:CB95  8D B4 00          STA pause_address+1
                                  
 1079                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:CB98  A9 21             LDA #HIGH($210A)
       06:CB9A  A2 0A             LDX #LOW($210A)
                                  
       06:CB9C  8E B7 00          STX pause_draw_address
       06:CB9F  8D B8 00          STA pause_draw_address+1
                                  
 1080                         
 1081  06:CBA2  EE CC 00    INC pauseState
 1082  06:CBA5  4C CC CB    JMP .leave
 1083                      
 1084  06:CBA8            .checkA:
 1085                       
 1086  06:CBA8  A9 03       LDA #SPRITE_XPOS
 1087  06:CBAA  A2 01       LDX #$01
 1088  06:CBAC  20 9A C2    JSR GetSpriteData
 1089                       
 1090  06:CBAF  C9 88       CMP #PAUSE_NO
 1091  06:CBB1  F0 CC       BEQ .unPause
 1092                        
 1093  06:CBB3            .quit:
 1094                             
 1095  06:CBB3  A9 01       LDA #$01
 1096  06:CBB5  8D 00 70    STA hasContinue
 1097  06:CBB8  A9 00       LDA #$00
 1098  06:CBBA  8D CC 00    STA pauseState
 1099  06:CBBD  A9 00       LDA #$00
 1100  06:CBBF  8D 0A 00    STA time
 1101  06:CBC2  A9 02       LDA #GAMEOVER_IDX
 1102  06:CBC4  8D CF 00    STA targetGameMode
 1103  06:CBC7  A9 08       LDA #$08
 1104  06:CBC9  8D 0F 00    STA mode_state
 1105                       
 1106  06:CBCC            .leave:
 1107  06:CBCC  60          RTS
 1108                       
 1109  06:CBCD            UpdateUnloadPauseScreen:
 1110                       
 1111  06:CBCD  20 28 D4    JSR ClearPauseScreen
 1112  06:CBD0  AD C1 00    LDA clueOffsetShift
 1113  06:CBD3  C9 06       CMP #$06
 1114  06:CBD5  D0 11       BNE .leave
 1115  06:CBD7            .changePauseState:
 1116                     
 1117  06:CBD7  A9 02       LDA #$02
 1118  06:CBD9  A2 00       LDX #$00
 1119  06:CBDB  20 83 C2    JSR SetSpriteImage
 1120                       
 1121  06:CBDE  A9 03       LDA #GAMEPAD_AB
 1122  06:CBE0  8D CD 00    STA pauseInputLock 
 1123                       
 1124  06:CBE3  A9 00       LDA #$00
 1125  06:CBE5  8D CC 00    STA pauseState
 1126  06:CBE8            .leave:
 1127  06:CBE8  60          RTS
 1128                       
 1129  06:CBE9            ExitPause:
 1130  06:CBE9  60          RTS
 1131                       
 1132  06:CBEA            CheckNewBestTime:
 1133                     
 1134                       ;let's say we already have the save data in the table address
 1135  06:CBEA  A9 00       LDA #$00
 1136  06:CBEC  8D D1 00    STA recordSet
 1137                       
 1138                       
 1139  06:CBEF  AD 08 70    LDA puzzle_index
 1140  06:CBF2  0A          ASL A
 1141  06:CBF3  0A          ASL A
 1142  06:CBF4  A8          TAY
 1143  06:CBF5  B1 16       LDA [table_address], y
 1144  06:CBF7  29 80       AND #$80
 1145  06:CBF9  F0 33       BEQ .updateTime
 1146                       ;MACROGetLabelPointer PuzzleSaveLocations, table_address
 1147                       ;LDA bank_index
 1148                       ;ASL A
 1149                       ;TAY
 1150                       ;JSR GetTableAtIndex
 1151                     
 1152  06:CBFB  C8          INY 
 1153  06:CBFC  C8          INY
 1154  06:CBFD  C8          INY   ;start at highest time loc
 1155  06:CBFE  AD 06 70    LDA GameTime+3
 1156  06:CC01  D1 16       CMP [table_address], y
 1157  06:CC03  90 29       BCC .updateTime
 1158  06:CC05  B0 2A       BCS .leave
 1159  06:CC07  88          DEY
 1160  06:CC08  AD 05 70    LDA GameTime+2
 1161  06:CC0B  D1 16       CMP [table_address], y
 1162  06:CC0D  90 1F       BCC .updateTime
 1163  06:CC0F  B0 20       BCS .leave
 1164  06:CC11  88          DEY
 1165  06:CC12  AD 04 70    LDA GameTime+1
 1166  06:CC15  D1 16       CMP [table_address], y
 1167  06:CC17  90 15       BCC .updateTime
 1168  06:CC19  B0 16       BCS .leave
 1169  06:CC1B  88          DEY
 1170  06:CC1C  B1 16       LDA [table_address], y
 1171  06:CC1E  29 0F       AND #$0F
 1172  06:CC20  8D 00 00    STA temp1
 1173  06:CC23  AD 03 70    LDA GameTime
 1174  06:CC26  CD 00 00    CMP temp1
 1175  06:CC29  90 03       BCC .updateTime
 1176  06:CC2B  4C 31 CC    JMP .leave
 1177                       
 1178  06:CC2E            .updateTime:
 1179                     
 1180  06:CC2E  EE D1 00    INC recordSet
 1181                       
 1182  06:CC31            .leave:
 1183  06:CC31  60          RTS
 1184                         
 1185                     
 1186  06:CC32            CheckAgainstSolution:
 1187                       ;;take Y position, mult by 2 to get starting index in puzzle solution
 1188  06:CC32  AD CA 00    LDA mouse_index+1
 1189                     ;;if the puzzle is a 5x5, we only have one byte per row, so no need to double this
 1190  06:CC35  8D 00 00    STA temp1
 1191  06:CC38  A0 00       LDY #$00
 1192  06:CC3A  B1 AD       LDA [puzzle_address], y
 1193  06:CC3C  F0 03       BEQ .skipDouble
 1194  06:CC3E  0E 00 00    ASL temp1
 1195  06:CC41            .skipDouble:
 1196  06:CC41  AD 00 00    LDA temp1
 1197  06:CC44  18          CLC
 1198  06:CC45  69 04       ADC #$04 ;; add to get past header
 1199  06:CC47  8D 00 00    STA temp1
 1200                       
 1201                       ;;div X position by 8 to get the byte index
 1202  06:CC4A  AD C9 00    LDA mouse_index
 1203  06:CC4D  4A          LSR A
 1204  06:CC4E  4A          LSR A
 1205  06:CC4F  4A          LSR A
 1206  06:CC50  F0 03       BEQ .getMask
 1207                       
 1208  06:CC52  EE 00 00    INC temp1
 1209                       
 1210  06:CC55            .getMask:
 1211                       
 1212  06:CC55  AD C9 00    LDA mouse_index
 1213  06:CC58  29 07       AND #$07
 1214  06:CC5A  AA          TAX
 1215  06:CC5B  A9 80       LDA #$80
 1216  06:CC5D  E0 00       CPX #$00
 1217  06:CC5F  F0 04       BEQ .storeMask
 1218                     
 1219  06:CC61            .maskLoop:
 1220  06:CC61  4A          LSR A
 1221  06:CC62  CA          DEX
 1222  06:CC63  D0 FC       BNE .maskLoop
 1223  06:CC65            .storeMask:
 1224  06:CC65  8D 01 00    STA temp2
 1225                     
 1226  06:CC68  AC 00 00    LDY temp1
 1227  06:CC6B  B1 AD       LDA [puzzle_address], y
 1228  06:CC6D  2D 01 00    AND temp2
 1229  06:CC70  8D 00 00    STA temp1     ;get the 0/non zero solution flag 
 1230                     
 1231  06:CC73  A0 00       LDY #$00
 1232  06:CC75  B1 C7       LDA [mouse_location], y
 1233  06:CC77  8D 02 00    STA temp3
 1234  06:CC7A  29 F0       AND #$F0
 1235  06:CC7C  CD CB 00    CMP currentPaintTile
 1236  06:CC7F  D0 01       BNE .diffTiles
 1237  06:CC81  60          RTS
 1238                       
 1239  06:CC82            .diffTiles:
 1240                       ;;tiles are different- check if the current tile is marked as a solution tile
 1241  06:CC82  C9 70       CMP #$70
 1242  06:CC84  D0 0B       BNE .checkNewMark
 1243                       ;;if erasing a mark, check if the tile was part of the solution
 1244  06:CC86  AD 00 00    LDA temp1
 1245  06:CC89  D0 18       BNE .antiMark
 1246  06:CC8B  CE 02 70    DEC nonSolutionCount
 1247  06:CC8E  4C AC CC    JMP .leave
 1248                       
 1249  06:CC91            .checkNewMark:
 1250                     
 1251  06:CC91  AD CB 00    LDA currentPaintTile
 1252  06:CC94  C9 70       CMP #$70
 1253  06:CC96  D0 14       BNE .leave
 1254                       
 1255  06:CC98  AD 00 00    LDA temp1
 1256  06:CC9B  D0 0C       BNE .proMark
 1257  06:CC9D  EE 02 70    INC nonSolutionCount 
 1258  06:CCA0  4C AC CC    JMP .leave 
 1259                       
 1260  06:CCA3            .antiMark:
 1261  06:CCA3  CE 01 70    DEC solutionCount
 1262  06:CCA6  4C AC CC    JMP .leave
 1263  06:CCA9            .proMark:   
 1264                       
 1265  06:CCA9  EE 01 70    INC solutionCount
 1266  06:CCAC            .leave:
 1267  06:CCAC  60          RTS   
 1268                     
 1269                     ;hori, vert
 1270  06:CCAD            MouseMinimums:
 1271  06:CCAD  6A 5A       .db $6A, $5A
 1272  06:CCAF  6A 5A       .db $6A, $5A
 1273  06:CCB1  6A 5A       .db $6A, $5A
 1274  06:CCB3            MouseMaximums:
 1275  06:CCB3  9A 8A       .db $9A, $8A
 1276  06:CCB5  C2 B2       .db $C2, $B2
 1277  06:CCB7  EA DA       .db $EA, $DA
 1278                       
 1279           0012      VERT_CLUE_MIN = $12
 1280           0022      HORI_CLUE_MIN = $22
 1281           006A      HORI_CLUE_MAX = $6A
 1282           005A      VERT_CLUE_MAX = $5A
 1283                       
 1284  06:CCB9            PuzzleScrollHori:
 1285  06:CCB9  01 04 06    .db $01, $04, $06
 1286  06:CCBC            PuzzleScrollVert:
 1287  06:CCBC  01 03 05    .db $01, $03, $05
 1288                       
 1289  06:CCBF            PuzzleHeaderSkips:
 1290                     
 1291  06:CCBF  09 18 22    .db $09, $18, $22
 1292                       
 1293  06:CCC2            PuzzleSaveLocations:
 1294  06:CCC2  0A 70       .word puzzle_clear_bank0, puzzle_clear_bank1, puzzle_clear_bank2
       06:CCC4  76 70     
       06:CCC6  E2 70     
 1295                     
 1296                       
 1297           0060      PAUSE_YES = $60
 1298           0088      PAUSE_NO = $88
 1299                     
 1300                       
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGameOver.asm
   87                       .include "Routines/Game_States/UpdateGameOver.asm"
    1  06:CCC8            UpdateGameOver:
    2                     
    3  06:CCC8  AD 10 00    LDA NMI_locks
    4  06:CCCB  F0 01       BEQ .unlocked
    5                       
    6  06:CCCD  60          RTS
    7                       
    8  06:CCCE            .unlocked:
    9                     
   10  06:CCCE  20 D2 CC    JSR DoUpdateGameOver 
   11  06:CCD1  60          RTS
   12                       
   13  06:CCD2            DoUpdateGameOver:
   14                     
   15  06:CCD2  AD 0F 00    LDA mode_state
   16  06:CCD5  20 BD CF    JSR Dynamic_Jump
   17                         
   18  06:CCD8            UpdateGameOverJumpTable:
   19                     
   20  06:CCD8  E2 CC       .word UpdateGameOverInit
   21  06:CCDA  31 CD       .word UpdateDrawMessage
   22  06:CCDC  56 CD       .word UpdateGameOverWaitInput
   23  06:CCDE  06 CE       .word UpdateGameOverFadeOut
   24  06:CCE0  1B CE       .word UpdateGameOverExit
   25                       
   26  06:CCE2            UpdateGameOverInit:
   27                     
   28                       ;load the hasContinue flag
   29                       ;choose the message to print based on the flag
   30  06:CCE2  A9 04       lda #$04
   31  06:CCE4  8D D6 00    sta current_song
   32  06:CCE7  AD D6 00    lda current_song
   33  06:CCEA  20 43 D7    jsr sound_load
   34                       
   35                       MACROGetLabelPointer EndScreens, table_address
                          
       06:CCED  A9 FC             LDA #HIGH(EndScreens)
       06:CCEF  A2 CA             LDX #LOW(EndScreens)
                                  
       06:CCF1  8E 16 00          STX table_address
       06:CCF4  8D 17 00          STA table_address+1
                                  
   36  06:CCF7  AD 00 70    LDA hasContinue
   37  06:CCFA  0A          ASL A
   38  06:CCFB  A8          TAY
   39  06:CCFC  20 E3 CF    JSR GetTableAtIndex
   40                       MACROGetPointer table_address, clues_address
                          
       06:CCFF  AD 16 00          LDA table_address
       06:CD02  8D AF 00          STA clues_address
       06:CD05  AD 17 00          LDA table_address+1
       06:CD08  8D B0 00          STA clues_address+1
                          
   41                       
   42                       ;this gets us the pointer to the table- now we'll set up the starting draw address
   43  06:CD0B  A0 00       LDY #$00
   44  06:CD0D  B1 AF       LDA [clues_address], y
   45  06:CD0F  8D BD 00    STA clue_draw_address
   46  06:CD12  C8          INY
   47  06:CD13  B1 AF       LDA [clues_address], y
   48  06:CD15  8D BE 00    STA clue_draw_address+1 
   49                     
   50  06:CD18  AD AF 00    LDA clues_address
   51  06:CD1B  18          CLC
   52  06:CD1C  69 02       ADC #$02
   53  06:CD1E  8D AF 00    STA clues_address
   54  06:CD21  AD B0 00    LDA clues_address+1
   55  06:CD24  69 00       ADC #$00
   56  06:CD26  8D B0 00    STA clues_address+1
   57                       
   58  06:CD29  A9 00       LDA #$00
   59  06:CD2B  8D C0 00    STA clueLineIndex
   60                       ;;table address is now at the first string to draw
   61                         
   62  06:CD2E  EE 0F 00    INC mode_state
   63                     
   64                     ;no RTS, just update a line immediately
   65                     
   66  06:CD31            UpdateDrawMessage:
   67                     
   68  06:CD31  AD 00 70    LDA hasContinue
   69                       
   70  06:CD34  F0 06       BEQ .drawClear
   71                       
   72  06:CD36  20 95 CE    JSR DrawSaveText
   73                     
   74  06:CD39  4C 3F CD    JMP .checkLeave
   75                       
   76  06:CD3C            .drawClear
   77                     
   78  06:CD3C  20 2C CE    JSR DrawClearText 
   79                       
   80  06:CD3F            .checkLeave:
   81  06:CD3F  90 14       BCC .leave
   82                     
   83  06:CD41            .changeModeState:
   84                     
   85  06:CD41  AD 00 70    LDA hasContinue
   86  06:CD44  D0 07       BNE .skipSpriteSet
   87                       
   88  06:CD46  A9 01       LDA #$01
   89  06:CD48  A2 00       LDX #$00
   90  06:CD4A  20 83 C2    JSR SetSpriteImage
   91                       
   92  06:CD4D            .skipSpriteSet:
   93  06:CD4D  EE 0F 00    INC mode_state
   94  06:CD50  A9 00       LDA #$00
   95  06:CD52  8D 0A 00    STA time
   96  06:CD55            .leave:
   97  06:CD55  60          RTS
   98                       
   99                       
  100  06:CD56            UpdateGameOverWaitInput:
  101                     
  102                       ;;if there was a record set, flash the time
  103  06:CD56  AD D1 00    LDA recordSet
  104  06:CD59  F0 03       BEQ .updateWait
  105  06:CD5B  20 BB CE    JSR FlashTime
  106                     
  107  06:CD5E            .updateWait:
  108  06:CD5E  AD 00 70    LDA hasContinue
  109  06:CD61  F0 06       BEQ .checkOption
  110                       
  111  06:CD63  AD 1C 00    LDA gamepadPressed
  112  06:CD66  D0 37       BNE .loadTitle
  113  06:CD68            .leaveEarly:
  114  06:CD68  60          RTS
  115                       
  116  06:CD69            .checkOption:
  117  06:CD69  AD 1C 00    LDA gamepadPressed
  118  06:CD6C  C9 01       CMP #GAMEPAD_A
  119  06:CD6E  F0 24       BEQ .checkA
  120                       
  121                       ;;update pointer
  122                       
  123  06:CD70  AD 1C 00    LDA gamepadPressed
  124  06:CD73  29 C0       AND #GAMEPAD_HORI
  125                       ;;binary system- left and right don't really matter, we'll just toggle the position
  126  06:CD75  F0 F1       BEQ .leaveEarly
  127  06:CD77  20 6B C4    JSR PlayMenuCursorSound
  128  06:CD7A  A9 03       LDA #SPRITE_XPOS
  129  06:CD7C  A2 00       LDX #$00
  130  06:CD7E  20 9A C2    JSR GetSpriteData
  131                       
  132  06:CD81  C9 58       CMP #GO_YES
  133  06:CD83  F0 05       BEQ .loadNo
  134                       
  135  06:CD85  A9 58       LDA #GO_YES
  136  06:CD87  4C 8C CD    JMP .setPosition
  137                       
  138  06:CD8A            .loadNo:
  139  06:CD8A  A9 80       LDA #GO_NO
  140                     
  141  06:CD8C            .setPosition:
  142                       
  143  06:CD8C  A2 00       LDX #$00
  144  06:CD8E  20 78 C2    JSR SetSpriteXPosition  
  145                     
  146  06:CD91  4C 05 CE    JMP .leave 
  147                       
  148  06:CD94            .checkA:
  149                       
  150  06:CD94  A9 03       LDA #SPRITE_XPOS
  151  06:CD96  A2 00       LDX #$00
  152  06:CD98  20 9A C2    JSR GetSpriteData
  153                       
  154  06:CD9B  C9 80       CMP #GO_NO
  155                       
  156                       ;no? go to main menu
  157                       ;yes? update puzzle index and go to game
  158                       ;if puzzle index is the last of the bank, return to menu anyways- we'll polish with a different message later
  159  06:CD9D  D0 0D       BNE .loadNext
  160                       
  161                       ;load the title as the next screen
  162  06:CD9F            .loadTitle:
  163  06:CD9F  A9 00       LDA #TITLE_IDX
  164  06:CDA1  8D CF 00    STA targetGameMode
  165  06:CDA4  A9 00       LDA #$00
  166  06:CDA6  8D D0 00    STA targetScreenLoad
  167  06:CDA9  4C FD CD    JMP .changeModeState
  168                      
  169  06:CDAC            .loadNext:  
  170                     
  171  06:CDAC  EE 08 70    INC puzzle_index
  172  06:CDAF  C9 28       CMP #$28
  173  06:CDB1  F0 EC       BEQ .loadTitle
  174                       
  175                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:CDB3  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:CDB5  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:CDB7  8E 16 00          STX table_address
       06:CDBA  8D 17 00          STA table_address+1
                                  
  176                       MACROGetDoubleIndex puzzle_index
                          
       06:CDBD  AD 08 70          LDA puzzle_index
       06:CDC0  0A                ASL A
       06:CDC1  A8                TAY
                                  
  177  06:CDC2  20 E3 CF    JSR GetTableAtIndex
  178                       MACROGetPointer table_address, puzzle_address
                          
       06:CDC5  AD 16 00          LDA table_address
       06:CDC8  8D AD 00          STA puzzle_address
       06:CDCB  AD 17 00          LDA table_address+1
       06:CDCE  8D AE 00          STA puzzle_address+1
                          
  179                       
  180                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:CDD1  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:CDD3  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:CDD5  8E 16 00          STX table_address
       06:CDD8  8D 17 00          STA table_address+1
                                  
  181                       MACROGetDoubleIndex puzzle_index
                          
       06:CDDB  AD 08 70          LDA puzzle_index
       06:CDDE  0A                ASL A
       06:CDDF  A8                TAY
                                  
  182  06:CDE0  20 E3 CF    JSR GetTableAtIndex
  183                       MACROGetPointer table_address, title_address
                          
       06:CDE3  AD 16 00          LDA table_address
       06:CDE6  8D B1 00          STA title_address
       06:CDE9  AD 17 00          LDA table_address+1
       06:CDEC  8D B2 00          STA title_address+1
                          
  184                     
  185  06:CDEF  A9 01       LDA #GAME_IDX
  186  06:CDF1  8D CF 00    STA targetGameMode
  187                       
  188  06:CDF4  A0 00       LDY #$00
  189  06:CDF6  B1 AD       LDA [puzzle_address], y
  190  06:CDF8  09 20       ORA #%00100000
  191  06:CDFA  8D D0 00    STA targetScreenLoad
  192                     
  193  06:CDFD            .changeModeState:
  194                     
  195  06:CDFD  A9 00       LDA #$00
  196  06:CDFF  8D 0A 00    STA time
  197  06:CE02  EE 0F 00    INC mode_state
  198  06:CE05            .leave:
  199  06:CE05  60          RTS
  200                     
  201  06:CE06            UpdateGameOverFadeOut:
  202                     
  203  06:CE06  AD 0A 00    LDA time
  204  06:CE09  29 07       AND #$07
  205  06:CE0B  D0 0D       BNE .leave
  206                       ;;every 8 frames, decrement the palettes
  207  06:CE0D  20 BC D1    JSR FadeOutPalettes
  208  06:CE10  B0 08       BCS .leave
  209                     
  210  06:CE12            .changeModeState:
  211  06:CE12  A9 00       LDA #$00
  212  06:CE14  8D 0A 00    STA time
  213  06:CE17  EE 0F 00    INC mode_state
  214  06:CE1A            .leave:
  215  06:CE1A  60          RTS
  216                     
  217  06:CE1B            UpdateGameOverExit:
  218                     
  219  06:CE1B  AD 0A 00    LDA time
  220  06:CE1E  29 0F       AND #$0F
  221  06:CE20  D0 09       BNE .leave
  222                     
  223  06:CE22  AD CF 00    LDA targetGameMode
  224  06:CE25  AE D0 00    LDX targetScreenLoad
  225  06:CE28  20 EC CE    JSR ChangeGameMode
  226                       
  227  06:CE2B            .leave:
  228  06:CE2B  60          RTS
  229                       
  230  06:CE2C            DrawClearText:
  231                     
  232                       ;;for the clear, we draw multiple lines
  233                       ;;table address location is the print loation
  234                       MACROAddPPUStringEntryTablePtr clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, clues_address
                           
       06:CE2C  A9 01       LDA #$01
       06:CE2E  8D 23 00    STA PPU_PendingWrite
       06:CE31  AD BE 00    LDA clue_draw_address+1
       06:CE34  20 3F D1    JSR WriteToPPUString
       06:CE37  AD BD 00    LDA clue_draw_address
       06:CE3A  20 3F D1    JSR WriteToPPUString
       06:CE3D  A9 20       LDA #$20
       06:CE3F  09 00       ORA #DRAW_HORIZONTAL
       06:CE41  20 3F D1    JSR WriteToPPUString
       06:CE44  AD AF 00    LDA clues_address
       06:CE47  20 3F D1    JSR WriteToPPUString
       06:CE4A  AD B0 00    LDA clues_address+1
       06:CE4D  20 3F D1    JSR WriteToPPUString
                           
  235  06:CE50  EE C0 00    INC clueLineIndex
  236  06:CE53  AD C0 00    LDA clueLineIndex
  237  06:CE56  C9 02       CMP #$02
  238  06:CE58  F0 07       BEQ .printTime
  239  06:CE5A  C9 04       CMP #$04
  240  06:CE5C  F0 35       BEQ .finish
  241  06:CE5E  4C 68 CE    JMP .updateClueAddress
  242                       
  243  06:CE61            .printTime:
  244                     
  245  06:CE61  A9 21       LDA #$21
  246  06:CE63  A2 31       LDX #$31  
  247  06:CE65  20 12 D6    JSR ApplyGameTimeToPPUString
  248                     
  249  06:CE68            .updateClueAddress:
  250  06:CE68  AD BD 00    LDA clue_draw_address
  251  06:CE6B  18          CLC
  252  06:CE6C  69 40       ADC #$40
  253  06:CE6E  8D BD 00    STA clue_draw_address
  254  06:CE71  AD BE 00    LDA clue_draw_address+1
  255  06:CE74  69 00       ADC #$00
  256  06:CE76  8D BE 00    STA clue_draw_address+1
  257                       
  258  06:CE79  A0 00       LDY #$00
  259  06:CE7B  B1 AF       LDA [clues_address],y
  260  06:CE7D  AA          TAX
  261  06:CE7E  E8          INX
  262  06:CE7F  8A          TXA
  263  06:CE80  18          CLC
  264  06:CE81  6D AF 00    ADC clues_address
  265  06:CE84  8D AF 00    STA clues_address
  266  06:CE87  AD B0 00    LDA clues_address+1
  267  06:CE8A  69 00       ADC #$00
  268  06:CE8C  8D B0 00    STA clues_address+1
  269                       
  270  06:CE8F  18          CLC
  271  06:CE90  4C 94 CE    JMP .leave
  272  06:CE93            .finish:
  273                     
  274  06:CE93  38          SEC
  275  06:CE94            .leave
  276  06:CE94  60          RTS
  277                       
  278  06:CE95            DrawSaveText:
  279                     
  280                       MACROAddPPUStringEntryTablePtr clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, clues_address
                           
       06:CE95  A9 01       LDA #$01
       06:CE97  8D 23 00    STA PPU_PendingWrite
       06:CE9A  AD BE 00    LDA clue_draw_address+1
       06:CE9D  20 3F D1    JSR WriteToPPUString
       06:CEA0  AD BD 00    LDA clue_draw_address
       06:CEA3  20 3F D1    JSR WriteToPPUString
       06:CEA6  A9 20       LDA #$20
       06:CEA8  09 00       ORA #DRAW_HORIZONTAL
       06:CEAA  20 3F D1    JSR WriteToPPUString
       06:CEAD  AD AF 00    LDA clues_address
       06:CEB0  20 3F D1    JSR WriteToPPUString
       06:CEB3  AD B0 00    LDA clues_address+1
       06:CEB6  20 3F D1    JSR WriteToPPUString
                           
  281  06:CEB9  38          SEC
  282  06:CEBA  60          RTS
  283                      
  284  06:CEBB            FlashTime:
  285                     
  286  06:CEBB  AD 0A 00    LDA time
  287  06:CEBE  29 03       AND #$03
  288  06:CEC0  D0 27       BNE .leave
  289                       
  290                       MACROAddPPUStringEntryRawData #$3F, #$02, #DRAW_HORIZONTAL, #$01
                          
       06:CEC2  A9 01       LDA #$01
       06:CEC4  8D 23 00    STA PPU_PendingWrite
       06:CEC7  A9 3F       LDA #$3F
       06:CEC9  20 3F D1    JSR WriteToPPUString
       06:CECC  A9 02       LDA #$02
       06:CECE  20 3F D1    JSR WriteToPPUString
       06:CED1  A9 00       LDA #DRAW_HORIZONTAL
       06:CED3  20 3F D1    JSR WriteToPPUString
       06:CED6  A9 01       LDA #$01 
       06:CED8  20 3F D1    JSR WriteToPPUString
                            
  291  06:CEDB  AD 0A 00    LDA time
  292  06:CEDE  4A          LSR A
  293  06:CEDF  4A          LSR A
  294  06:CEE0  29 01       AND #$01
  295  06:CEE2  AA          TAX
  296  06:CEE3  BD EA CE    LDA FlashColors, x
  297  06:CEE6  20 3F D1    JSR WriteToPPUString
  298                      
  299  06:CEE9            .leave
  300  06:CEE9  60          RTS 
  301                     
  302  06:CEEA            FlashColors:
  303                     
  304  06:CEEA  2C 16       .db $2C, $16
  305                     
  306                        
  307                     
  308           0058      GO_YES = $58
  309           0080      GO_NO = $80
#[1]   Picross.asm
   88                       
   89                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   90                     ;;     Routines             ;;
   91                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   92                     
   93                     
#[2]   Routines/Common/GameModeRoutines.asm
   94                       .include "Routines/Common/GameModeRoutines.asm"
    1  06:CEEC            ChangeGameMode:
    2                       ;A - game mode index
    3                       ;X - high nibble: palette start flag, low nibble: screen index
    4  06:CEEC  8D 0E 00    STA game_mode
    5  06:CEEF  8E 0D 00    STX mode_loadFlags
    6  06:CEF2  A9 00       LDA #$00
    7  06:CEF4  8D 0F 00    STA mode_state
    8  06:CEF7  20 53 D1    JSR ClearPPUString
    9  06:CEFA  20 FE CE    JSR LoadGameModeScreen
   10  06:CEFD  60          RTS
   11                       
   12  06:CEFE            LoadGameModeScreen:
   13                     
   14                       MACROSetFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:CEFE  AD 10 00    LDA NMI_locks
       06:CF01  09 01       ORA #BGLOAD_NMI_LOCK
       06:CF03  8D 10 00    STA NMI_locks
                                  
   15                       
   16  06:CF06  A9 00       LDA #$00
   17  06:CF08  8D 01 20    STA PPU_MASK    ; disable rendering- reenable on NMI when not updating
   18                     
   19  06:CF0B  20 39 CF    JSR LoadGameModeBackground
   20  06:CF0E  20 9A CF    JSR LoadGameModeSprites
   21                     
   22                       MACROClearFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:CF11  A9 01       LDA #BGLOAD_NMI_LOCK
       06:CF13  49 FF       EOR #$FF
       06:CF15  2D 10 00    AND NMI_locks  
       06:CF18  8D 10 00    STA NMI_locks
                          
   23                     
   24                       
   25                       ;; load the CHR bank for this mode
   26  06:CF1B  20 26 D2    JSR ResetMapper
   27                       ;;remember, we're loading the SECOND set in each chr bank
   28                       ;;so we'll take the index from the game mode chr table and add one mult 2
   29  06:CF1E  AE 0E 00    LDX game_mode
   30  06:CF21  BD B7 CF    LDA gameModeInitCHRROMB, x
   31  06:CF24  0A          ASL A
   32  06:CF25  18          CLC 
   33  06:CF26  69 01       ADC #$01
   34  06:CF28  20 4B D2    JSR LoadCHRBankB
   35                       
   36  06:CF2B  20 26 D2    JSR ResetMapper
   37  06:CF2E  AE 0E 00    LDX game_mode
   38  06:CF31  BD BA CF    LDA gameModeInitCHRROMA, x
   39  06:CF34  0A          ASL A
   40  06:CF35  20 40 D2    JSR LoadCHRBankA
   41                       
   42                       
   43                       
   44  06:CF38  60          RTS
   45                       
   46  06:CF39            LoadGameModeBackground:
   47                             
   48                       MACROGetDoubleIndex game_mode
                          
       06:CF39  AD 0E 00          LDA game_mode
       06:CF3C  0A                ASL A
       06:CF3D  A8                TAY
                                  
   49  06:CF3E  8C 00 00    STY temp1
   50                             
   51                       MACROGetLabelPointer Palettes, table_address
                          
       06:CF41  A9 E0             LDA #HIGH(Palettes)
       06:CF43  A2 00             LDX #LOW(Palettes)
                                  
       06:CF45  8E 16 00          STX table_address
       06:CF48  8D 17 00          STA table_address+1
                                  
   52  06:CF4B  20 E3 CF    JSR GetTableAtIndex
   53                     
   54  06:CF4E  20 F0 CF    JSR LoadFullPaletteFromTable
   55                             
   56  06:CF51  AC 00 00    LDY temp1
   57  06:CF54  AD 0D 00    LDA mode_loadFlags
   58  06:CF57  29 40       AND #%01000000 ; copy from saved screen
   59  06:CF59  F0 0D       BEQ .dontUseSaveCopy
   60                       MACROGetLabelPointer SaveScreen_Copy, table_address
                          
       06:CF5B  A9 68             LDA #HIGH(SaveScreen_Copy)
       06:CF5D  A2 00             LDX #LOW(SaveScreen_Copy)
                                  
       06:CF5F  8E 16 00          STX table_address
       06:CF62  8D 17 00          STA table_address+1
                                  
   61  06:CF65  4C 7F CF    JMP .loadTable
   62                       
   63  06:CF68            .dontUseSaveCopy:
   64                       MACROGetLabelPointer NameTables, table_address
                          
       06:CF68  A9 E0             LDA #HIGH(NameTables)
       06:CF6A  A2 06             LDX #LOW(NameTables)
                                  
       06:CF6C  8E 16 00          STX table_address
       06:CF6F  8D 17 00          STA table_address+1
                                  
   65  06:CF72  20 E3 CF    JSR GetTableAtIndex
   66  06:CF75  AD 0D 00    LDA mode_loadFlags
   67  06:CF78  29 0F       AND #$0F
   68  06:CF7A  0A          ASL A
   69  06:CF7B  A8          TAY
   70  06:CF7C  20 E3 CF    JSR GetTableAtIndex
   71                             
   72  06:CF7F            .loadTable:
   73  06:CF7F  A9 00       LDA #$00
   74  06:CF81  20 1F D0    JSR LoadFullBackgroundFromTable
   75                       
   76  06:CF84  AC 00 00    LDY temp1
   77                       MACROGetLabelPointer NameTables2, table_address
                          
       06:CF87  A9 E0             LDA #HIGH(NameTables2)
       06:CF89  A2 0C             LDX #LOW(NameTables2)
                                  
       06:CF8B  8E 16 00          STX table_address
       06:CF8E  8D 17 00          STA table_address+1
                                  
   78  06:CF91  20 E3 CF    JSR GetTableAtIndex
   79                       
   80  06:CF94  A9 01       LDA #$01
   81  06:CF96  20 1F D0    JSR LoadFullBackgroundFromTable
   82                       
   83  06:CF99  60          RTS
   84                       
   85  06:CF9A            LoadGameModeSprites:
   86                     
   87                       MACROGetDoubleIndex game_mode  
                          
       06:CF9A  AD 0E 00          LDA game_mode
       06:CF9D  0A                ASL A
       06:CF9E  A8                TAY
                                  
   88                       MACROGetLabelPointer Sprites, table_address
                          
       06:CF9F  A9 FD             LDA #HIGH(Sprites)
       06:CFA1  A2 28             LDX #LOW(Sprites)
                                  
       06:CFA3  8E 16 00          STX table_address
       06:CFA6  8D 17 00          STA table_address+1
                                  
   89  06:CFA9  20 E3 CF    JSR GetTableAtIndex
   90  06:CFAC  A0 00       LDY #$00
   91  06:CFAE  B1 16       LDA [table_address],y
   92  06:CFB0  EE 16 00    INC table_address
   93  06:CFB3  20 28 D1    JSR LoadSprites_impl
   94                       
   95  06:CFB6  60          RTS
   96                       
   97  06:CFB7            gameModeInitCHRROMB:
   98  06:CFB7  00 02 02          .db $00, $02, $02
   99  06:CFBA            gameModeInitCHRROMA:
  100  06:CFBA  00 02 02          .db $00, $02, $02
  101                             
#[1]   Picross.asm
#[2]   Routines/Utils/PointerUtils.asm
   95                       .include "Routines/Utils/PointerUtils.asm"
    1  06:CFBD            Dynamic_Jump:
    2                     
    3  06:CFBD  0A          ASL A                                 ;; double the index passed into A
    4  06:CFBE  8E 08 00    STX tempx
    5  06:CFC1  8C 09 00    STY tempy
    6  06:CFC4  A8          TAY
    7  06:CFC5  C8          INY  
    8  06:CFC6  68          PLA
    9  06:CFC7  8D 18 00    STA jump_address
   10  06:CFCA  68          PLA 
   11  06:CFCB  8D 19 00    STA jump_address+1            
   12  06:CFCE  B1 18       LDA [jump_address], y
   13  06:CFD0  AA          TAX
   14  06:CFD1  C8          INY
   15  06:CFD2  B1 18       LDA [jump_address], y
   16  06:CFD4  8E 18 00    STX jump_address
   17  06:CFD7  8D 19 00    STA jump_address+1
   18  06:CFDA  AE 08 00    LDX tempx
   19  06:CFDD  AC 09 00    LDY tempy
   20  06:CFE0  6C 18 00    JMP [jump_address]
   21                       
   22  06:CFE3            GetTableAtIndex:
   23                     
   24  06:CFE3  B1 16             LDA [table_address], y
   25  06:CFE5  AA                TAX
   26  06:CFE6  C8                INY
   27  06:CFE7  B1 16             LDA [table_address], y
   28                             
   29  06:CFE9            SetTableAddress:
   30                             
   31                             ;;A is hi, X is lo
   32  06:CFE9  8E 16 00          STX table_address
   33  06:CFEC  8D 17 00          STA table_address+1
   34  06:CFEF  60                RTS
#[1]   Picross.asm
#[2]   Routines/Utils/PPUUtils.asm
   96                       .include "Routines/Utils/PPUUtils.asm"
    1  06:CFF0            LoadFullPaletteFromTable:
    2                     
    3                       MACROSetPPUAddress $3F00
                          
       06:CFF0  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:CFF3  A9 3F       LDA #HIGH($3F00)
       06:CFF5  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:CFF8  A9 00       LDA #LOW($3F00)
       06:CFFA  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
    4  06:CFFD  A0 00       LDY #$00              ; start out at 0
    5  06:CFFF  A2 00       LDX #$00
    6  06:D001            .loop:
    7  06:D001  B1 16       LDA [table_address], y        ; load data from address (palette + the value in x)
    8  06:D003  9D 00 6C    STA Palette_Copy, x
    9  06:D006  48          PHA 
   10  06:D007  AD 0D 00    LDA mode_loadFlags
   11  06:D00A  29 10       AND #$10
   12  06:D00C  D0 04       BNE .setBlack
   13  06:D00E  68          PLA 
   14  06:D00F  4C 15 D0    JMP .setPPUData
   15  06:D012            .setBlack:
   16                     
   17  06:D012  68          PLA 
   18  06:D013  A9 0F       LDA #$0F
   19                       
   20  06:D015            .setPPUData:
   21  06:D015  8D 07 20    STA PPU_DATA            ; write to PPU
   22  06:D018  C8          INY                   ; X = X + 1
   23  06:D019  E8          INX
   24  06:D01A  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   25  06:D01C  D0 E3       BNE .loop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   26  06:D01E  60          RTS
   27                     
   28  06:D01F            LoadFullBackgroundFromTable:
   29                     
   30                         ;;use A as an index for which nametable to write to
   31  06:D01F  20 73 D1          JSR SetNametableFromIndex
   32  06:D022  8A                TXA
   33  06:D023  4A                LSR A
   34  06:D024  29 01             AND #$01
   35  06:D026  D0 17             BNE .copyScreenB
   36                             MACROGetLabelPointer Screen_Copy, pointer_address
                          
       06:D028  A9 60             LDA #HIGH(Screen_Copy)
       06:D02A  A2 00             LDX #LOW(Screen_Copy)
                                  
       06:D02C  8E 12 00          STX pointer_address
       06:D02F  8D 13 00          STA pointer_address+1
                                  
   37                             MACROGetLabelPointer SaveScreen_Copy, pointerB_address
                          
       06:D032  A9 68             LDA #HIGH(SaveScreen_Copy)
       06:D034  A2 00             LDX #LOW(SaveScreen_Copy)
                                  
       06:D036  8E 14 00          STX pointerB_address
       06:D039  8D 15 00          STA pointerB_address+1
                                  
   38  06:D03C  4C 52 D0          JMP .setCounters
   39                             
   40  06:D03F            .copyScreenB:
   41                             MACROGetLabelPointer ScreenB_Copy, pointer_address
                          
       06:D03F  A9 64             LDA #HIGH(ScreenB_Copy)
       06:D041  A2 00             LDX #LOW(ScreenB_Copy)
                                  
       06:D043  8E 12 00          STX pointer_address
       06:D046  8D 13 00          STA pointer_address+1
                                  
   42  06:D049  AD 0D 00          LDA mode_loadFlags
   43  06:D04C  2D 00 00          AND $%11011111
   44  06:D04F  8D 0D 00          STA mode_loadFlags ;kill the copy flag, just in case
   45                             
   46                             ;;set pointer
   47                             ;; set counters
   48  06:D052            .setCounters:
   49  06:D052  A0 00             LDY #$00
   50  06:D054  A2 00             LDX #$00
   51                             
   52                             ;;start loop
   53                     
   54  06:D056            .outerloop:
   55                     
   56  06:D056            .innerloop:
   57                     
   58  06:D056  B1 16             LDA [table_address], y
   59  06:D058  8D 07 20          STA PPU_DATA
   60  06:D05B  91 12             STA [pointer_address],y
   61  06:D05D  AD 0D 00      LDA mode_loadFlags
   62  06:D060  29 20         AND #%00100000      ;check copy flag
   63  06:D062  F0 04             BEQ .skipSaveCopy
   64  06:D064  B1 16         LDA [table_address], y
   65  06:D066  91 14             STA [pointerB_address],y
   66                     
   67  06:D068            .skipSaveCopy:
   68  06:D068  C8                INY
   69  06:D069  C0 00             CPY #$00
   70  06:D06B  D0 E9             BNE .innerloop
   71                     
   72  06:D06D  EE 13 00          INC pointer_address+1
   73  06:D070  EE 17 00          INC table_address+1
   74  06:D073  EE 15 00          INC pointerB_address+1
   75                             
   76  06:D076  E8                INX
   77  06:D077  E0 04             CPX #$04
   78  06:D079  D0 DB             BNE .outerloop
   79  06:D07B  60                RTS
   80                             
   81                     
   82           0000      DATA_LEN = temp1
   83           0001      WRITE_SETTINGS = temp2
   84                             
   85  06:D07C            ProcessPPUString:
   86                     
   87  06:D07C  AD 23 00          LDA PPU_PendingWrite
   88  06:D07F  D0 01             BNE .continueProcess
   89  06:D081  60                RTS
   90                             
   91  06:D082            .continueProcess:
   92  06:D082  A0 00             LDY #$00
   93                             
   94  06:D084  A9 25             LDA #LOW(PPU_String)
   95  06:D086  8D 12 00          STA pointer_address
   96  06:D089  A9 00             LDA #HIGH(PPU_String)
   97  06:D08B  8D 13 00          STA pointer_address + 1
   98                     
   99  06:D08E            .outerloop:
  100  06:D08E  AD 02 20          LDA PPU_STATUS
  101  06:D091  B1 12             LDA [pointer_address], y
  102  06:D093  F0 79             BEQ .finish
  103  06:D095  8D 06 20          STA PPU_ADDR
  104  06:D098  C8                INY
  105  06:D099  B1 12             LDA [pointer_address], y
  106  06:D09B  8D 06 20          STA PPU_ADDR
  107  06:D09E  C8            INY 
  108  06:D09F  B1 12             LDA [pointer_address], y
  109  06:D0A1  8D 01 00          STA WRITE_SETTINGS
  110  06:D0A4  C8                INY
  111                             
  112  06:D0A5  AD 00 20          LDA PPU_CTRL
  113  06:D0A8  29 FB             AND #$FB
  114  06:D0AA  8D 00 20          STA PPU_CTRL
  115                             
  116  06:D0AD  AD 01 00          LDA WRITE_SETTINGS      ;check horizontal or vertical write
  117  06:D0B0  29 80             AND #%10000000
  118  06:D0B2  F0 06             BEQ .checkRepeat
  119  06:D0B4  0D 00 20          ORA PPU_CTRL 
  120  06:D0B7  8D 00 20          STA PPU_CTRL 
  121                             
  122                             
  123  06:D0BA            .checkRepeat:
  124  06:D0BA  AD 01 00    LDA WRITE_SETTINGS
  125  06:D0BD  29 40       AND #%01000000
  126  06:D0BF  F0 19       BEQ .checkTable
  127                       
  128  06:D0C1  AD 01 00    LDA WRITE_SETTINGS
  129  06:D0C4  29 3F       AND #$3F
  130  06:D0C6  8D 00 00    STA DATA_LEN
  131                       ;;the usual data length byte is now the repeatable byte
  132  06:D0C9  A2 00       LDX #$00
  133                       
  134  06:D0CB            .repeatLoop:
  135  06:D0CB  B1 12       LDA [pointer_address], y
  136  06:D0CD  8D 07 20    STA PPU_DATA
  137  06:D0D0  E8          INX 
  138  06:D0D1  EC 00 00    CPX DATA_LEN
  139  06:D0D4  D0 F5       BNE .repeatLoop
  140  06:D0D6  C8          INY
  141  06:D0D7  4C 8E D0    JMP .outerloop
  142                             
  143  06:D0DA            .checkTable:
  144  06:D0DA  AD 01 00          LDA WRITE_SETTINGS
  145  06:D0DD  29 20             AND #%00100000
  146  06:D0DF  F0 16             BEQ .rawData
  147                             
  148  06:D0E1  B1 12             LDA [pointer_address], y
  149  06:D0E3  8D 16 00          STA table_address
  150  06:D0E6  C8                INY 
  151  06:D0E7  B1 12             LDA [pointer_address], y
  152  06:D0E9  8D 17 00          STA table_address + 1
  153  06:D0EC  C8                INY
  154  06:D0ED  98                TYA 
  155  06:D0EE  48                PHA
  156  06:D0EF  20 12 D1          JSR WriteToPPUFromTable
  157  06:D0F2  68                PLA
  158  06:D0F3  A8                TAY
  159  06:D0F4  4C 8E D0          JMP .outerloop
  160                             
  161  06:D0F7            .rawData:
  162                     
  163  06:D0F7  B1 12             LDA [pointer_address], y
  164  06:D0F9  C8                INY
  165  06:D0FA  8D 00 00          STA DATA_LEN
  166                     
  167  06:D0FD  A2 00             LDX #$00
  168                     
  169  06:D0FF            .innerloop:
  170                             
  171  06:D0FF  B1 12             LDA [pointer_address], y
  172  06:D101  8D 07 20          STA PPU_DATA
  173  06:D104  C8                INY
  174  06:D105  E8                INX
  175  06:D106  EC 00 00          CPX DATA_LEN
  176  06:D109  D0 F4             BNE .innerloop
  177  06:D10B  4C 8E D0          JMP .outerloop
  178                             
  179  06:D10E            .finish:
  180  06:D10E  20 53 D1          JSR ClearPPUString
  181  06:D111            .leave:
  182  06:D111  60                RTS
  183                             
  184  06:D112            WriteToPPUFromTable:
  185  06:D112  A0 00             LDY #$00
  186  06:D114  B1 16             LDA [table_address], y
  187  06:D116  C8                INY
  188  06:D117  8D 00 00          STA DATA_LEN
  189  06:D11A            .innerloop:
  190  06:D11A  B1 16             LDA [table_address], y
  191  06:D11C  8D 07 20          STA PPU_DATA
  192  06:D11F  C8                INY
  193  06:D120  CC 00 00          CPY DATA_LEN
  194  06:D123  90 F5             BCC .innerloop ;table should have the size in it, but since we count the byte count, we'll want to wait till we go over it
  195  06:D125  F0 F3             BEQ .innerloop
  196  06:D127  60                RTS
  197                       
  198  06:D128            LoadSprites_impl:
  199                       ;;A will be the amount of sprites to load
  200  06:D128  8D 00 00    STA DATA_LEN
  201  06:D12B  0E 00 00    ASL DATA_LEN
  202  06:D12E  0E 00 00    ASL DATA_LEN
  203                       
  204  06:D131  A0 00       LDY #$00              ; start at 0
  205                       
  206  06:D133            .loop:
  207  06:D133  B1 16       LDA [table_address], y; load data from address (sprites +  x)
  208  06:D135  99 00 02    STA SPRITE_DATA, y    ; store into RAM address ($0200 + x)
  209  06:D138  C8          INY                   ; X = X + 1
  210  06:D139  CC 00 00    CPY DATA_LEN             ; Compare X to hex $10, decimal 16
  211  06:D13C  D0 F5       BNE .loop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
  212                                             ; if compare was equal to 16, keep going down   
  213  06:D13E  60          RTS
  214                     
  215                     
  216  06:D13F            WriteToPPUString:
  217                     
  218  06:D13F  AE 24 00          LDX PPU_StringIdx
  219  06:D142  E0 4F             CPX #PPU_STRINGMAX
  220  06:D144  F0 0C             BEQ .finish
  221                             
  222  06:D146  9D 25 00          STA PPU_String, x
  223  06:D149  EE 24 00          INC PPU_StringIdx
  224  06:D14C  E8                INX
  225  06:D14D  A9 00             LDA #$00
  226  06:D14F  9D 25 00          STA PPU_String, x
  227                                     
  228  06:D152            .finish:
  229  06:D152  60                RTS
  230                     
  231  06:D153            ClearPPUString:
  232                             
  233  06:D153  A9 00             LDA #$00
  234  06:D155  8D 24 00          STA PPU_StringIdx
  235  06:D158  8D 25 00          STA PPU_String
  236  06:D15B  8D 23 00          STA PPU_PendingWrite
  237  06:D15E  60                RTS
  238                     
  239  06:D15F            DetectSprite0:
  240  06:D15F            WaitNotSprite0:
  241  06:D15F  AD 02 20    lda PPU_STATUS
  242  06:D162  29 40       and #SPRITE_0_MASK
  243  06:D164  D0 F9       bne WaitNotSprite0   ; wait until sprite 0 not hit
  244                     
  245  06:D166            WaitSprite0:
  246  06:D166  AD 02 20    lda $2002
  247  06:D169  29 40       and #SPRITE_0_MASK
  248  06:D16B  F0 F9       beq WaitSprite0      ; wait until sprite 0 is hit
  249                     
  250  06:D16D  A2 05       ldx #$05                              ;do a scanline wait
  251  06:D16F            WaitScanline:
  252  06:D16F  CA          dex
  253  06:D170  D0 FD       bne WaitScanline
  254  06:D172  60          RTS
  255                     
  256                     
  257  06:D173            SetNametableFromIndex:
  258                     
  259  06:D173  48          PHA
  260  06:D174  AD 02 20    LDA PPU_STATUS
  261  06:D177  68          PLA
  262  06:D178  0A          ASL A
  263  06:D179  AA          TAX
  264  06:D17A  BD 0F D2    LDA NameTableMemList+1, x
  265  06:D17D  8D 06 20    STA PPU_ADDR
  266  06:D180  BD 0E D2    LDA NameTableMemList, x
  267  06:D183  8D 06 20    STA PPU_ADDR
  268  06:D186  60          RTS
  269                       
  270  06:D187            TurnOnSprites:
  271                      
  272  06:D187  AD 1E 00    LDA PPU_Mask
  273  06:D18A  09 10       ORA #%00010000
  274  06:D18C  8D 1E 00    STA PPU_Mask
  275  06:D18F  60          RTS
  276                       
  277  06:D190            TurnOffSprites:
  278                       
  279  06:D190  AD 1E 00    LDA PPU_Mask
  280  06:D193  29 EF       AND #%11101111
  281  06:D195  8D 1E 00    STA PPU_Mask
  282  06:D198  60          RTS
  283                     
  284  06:D199            UpdatePPUControl:
  285                     
  286  06:D199  AD 1D 00    LDA PPU_Control
  287  06:D19C  29 FC       AND #$FC
  288  06:D19E  0D 22 00    ORA PPU_NT
  289  06:D1A1  8D 00 20    STA PPU_CTRL
  290  06:D1A4  AD 1E 00    LDA PPU_Mask
  291  06:D1A7  8D 01 20    STA PPU_MASK
  292  06:D1AA  60          RTS
  293                       
  294  06:D1AB            InitPPUControl:
  295                       
  296                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
  297                       ; enable sprites, enable background, no clipping on left side
  298  06:D1AB  A9 90       LDA #%10010000
  299  06:D1AD  8D 00 20    STA PPU_CTRL
  300  06:D1B0  8D 1D 00    STA PPU_Control
  301  06:D1B3  A9 1E       LDA #%00011110
  302  06:D1B5  8D 01 20    STA PPU_MASK
  303  06:D1B8  8D 1E 00    STA PPU_Mask
  304  06:D1BB  60          RTS
  305                       
  306  06:D1BC            FadeOutPalettes:
  307                     
  308                     ;;take the current values, and decrement the lower nibbles
  309                     ;;we can access from the palette copy 
  310                     ;;we'll make this fade out one level per call
  311                     ;;once all the palettes are blacked out we'll return true, so we'll keep the carry flag as a return result
  312                     
  313                     ;;go through the palette copy, decrement, make a raw data PPU string and add all the bytes into it
  314                     ;;for any palette color already in the 0x range, change it to 0f to get black
  315                     
  316                       MACROGetLabelPointer Palette_Copy, table_address
                          
       06:D1BC  A9 6C             LDA #HIGH(Palette_Copy)
       06:D1BE  A2 00             LDX #LOW(Palette_Copy)
                                  
       06:D1C0  8E 16 00          STX table_address
       06:D1C3  8D 17 00          STA table_address+1
                                  
  317                     ;;palette copy address is now X accessable
  318                     
  319  06:D1C6  A0 00       LDY #$00
  320                       MACROAddPPUStringEntryRawData #$3F, #$00, #DRAW_HORIZONTAL, #$20  
                          
       06:D1C8  A9 01       LDA #$01
       06:D1CA  8D 23 00    STA PPU_PendingWrite
       06:D1CD  A9 3F       LDA #$3F
       06:D1CF  20 3F D1    JSR WriteToPPUString
       06:D1D2  A9 00       LDA #$00
       06:D1D4  20 3F D1    JSR WriteToPPUString
       06:D1D7  A9 00       LDA #DRAW_HORIZONTAL
       06:D1D9  20 3F D1    JSR WriteToPPUString
       06:D1DC  A9 20       LDA #$20 
       06:D1DE  20 3F D1    JSR WriteToPPUString
                            
  321                     
  322  06:D1E1  A9 00       LDA #$00
  323  06:D1E3  8D 00 00    STA temp1
  324                       
  325  06:D1E6            .loop:
  326                     
  327  06:D1E6  B1 16       LDA [table_address], y
  328  06:D1E8  C9 0F       CMP #$0F
  329  06:D1EA  F0 15       BEQ .addToString
  330  06:D1EC  C9 10       CMP #$10
  331  06:D1EE  90 0D       BCC .setBlack
  332                       
  333  06:D1F0  A9 80       LDA #$80
  334  06:D1F2  8D 00 00    STA temp1
  335                       
  336  06:D1F5  B1 16       LDA [table_address], y
  337  06:D1F7  38          SEC
  338  06:D1F8  E9 10       SBC #$10
  339  06:D1FA  4C FF D1    JMP .setColor
  340                     
  341  06:D1FD            .setBlack:
  342                     
  343  06:D1FD  A9 0F       LDA #$0F
  344                     
  345  06:D1FF            .setColor:
  346  06:D1FF  91 16       STA [table_address], y
  347                     
  348  06:D201            .addToString:
  349                     
  350  06:D201  20 3F D1    JSR WriteToPPUString
  351                     
  352  06:D204            .incY:
  353                       
  354  06:D204  C8          INY
  355  06:D205  C0 20       CPY #$20
  356  06:D207  D0 DD       BNE .loop
  357                     
  358  06:D209  0E 00 00    ASL temp1     ;get carry out, if we have one
  359                     
  360  06:D20C  60          RTS
  361                       
  362  06:D20D            FadeInPalettes:
  363                     
  364                     ;;need to be able to store off a target palette first
  365                     ;;we can use the palette copy we make during the game mode change as the target
  366  06:D20D  60          RTS
  367                     
  368  06:D20E            NameTableMemList:
  369  06:D20E  00 20       .word $2000, $2400, $2800, $2C00
       06:D210  00 24     
       06:D212  00 28     
       06:D214  00 2C     
  370  06:D216            PalettesMemList:
  371  06:D216  00 3F       .word $3F00, $3F04, $3F08, $3F0C
       06:D218  04 3F     
       06:D21A  08 3F     
       06:D21C  0C 3F     
  372  06:D21E  10 3F       .word $3F10, $3F14, $3F18, $3F1C  
       06:D220  14 3F     
       06:D222  18 3F     
       06:D224  1C 3F     
  373                       
  374           0024      BLANK_TILE = $24
#[1]   Picross.asm
#[2]   Routines/Utils/MapperUtils.asm
   97                       .include "Routines/Utils/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:D226            ResetMapper:
    7  06:D226  EE 26 D2    inc ResetMapper
    8  06:D229  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:D22A            SetMapperControls:
   23                       ;;A = controls
   24  06:D22A  AA          TAX
   25  06:D22B  A9 80       LDA #MAPPERCONTROL
   26  06:D22D  8D A6 00    STA mapper_address+1
   27  06:D230  8A          TXA
   28  06:D231  20 56 D2    JSR SendMapperCommand
   29  06:D234  60          RTS
   30                     
   31  06:D235            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:D235  AA                TAX
   35  06:D236  A9 E0             LDA #PRGBANK
   36  06:D238  8D A6 00          STA mapper_address+1
   37  06:D23B  8A                TXA
   38  06:D23C  20 56 D2          JSR SendMapperCommand
   39  06:D23F  60                RTS
   40                             
   41  06:D240            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:D240  AA                TAX
   44  06:D241  A9 A0             LDA #CHRBANK1
   45  06:D243  8D A6 00          STA mapper_address+1
   46  06:D246  8A                TXA
   47  06:D247  20 56 D2          JSR SendMapperCommand
   48  06:D24A  60                RTS
   49                             
   50  06:D24B            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:D24B  AA                TAX
   53  06:D24C  A9 C0             LDA #CHRBANK2
   54  06:D24E  8D A6 00          STA mapper_address+1
   55  06:D251  8A                TXA
   56  06:D252  20 56 D2          JSR SendMapperCommand
   57  06:D255  60                RTS
   58                             
   59  06:D256            SendMapperCommand:
   60                     
   61  06:D256  A0 00             LDY #$00
   62                             
   63  06:D258  91 A5             STA [mapper_address], y
   64  06:D25A  4A                LSR A
   65  06:D25B  91 A5             STA [mapper_address], y
   66  06:D25D  4A                LSR A
   67  06:D25E  91 A5             STA [mapper_address], y
   68  06:D260  4A                LSR A 
   69  06:D261  91 A5             STA [mapper_address], y
   70  06:D263  4A                LSR A
   71  06:D264  91 A5             STA [mapper_address], y
   72                             
   73  06:D266  60                RTS
   74                             
   75  06:D267            ResetBanks:
   76                     
   77  06:D267  20 26 D2          JSR ResetMapper
   78  06:D26A  A9 00             LDA #$00
   79  06:D26C  20 35 D2          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:D26F  20 26 D2          JSR ResetMapper
   83  06:D272  A9 00             LDA #$00
   84  06:D274  20 40 D2          JSR LoadCHRBankA
   85  06:D277  A9 01             LDA #$01
   86  06:D279  20 4B D2          JSR LoadCHRBankB
   87  06:D27C  60                RTS
   88                             
   89                       
#[1]   Picross.asm
#[2]   Routines/Game_Routines/ScreenEffects.asm
   98                       .include "Routines/Game_Routines/ScreenEffects.asm"
    1  06:D27D            PopulateClues:
    2                       
    3  06:D27D  A0 00       LDY #$00
    4  06:D27F  B1 AD       LDA [puzzle_address], y
    5  06:D281  AA          TAX
    6  06:D282  BD 6F D6    LDA PuzzleSizes, x
    7  06:D285  8D 00 00    STA temp1
    8                       
    9  06:D288            .getByte:
   10  06:D288  AC BF 00    LDY clueTableIndex
   11  06:D28B  B1 AF       LDA [clues_address], y
   12  06:D28D  D0 07       BNE .checkNewLine
   13  06:D28F  EE BF 00    INC clueTableIndex
   14  06:D292  A9 00       LDA #$00
   15  06:D294  F0 39       BEQ .drawClue
   16                       ;was 0, set up a draw
   17  06:D296            .checkNewLine
   18  06:D296  C9 FF       CMP #$FF
   19  06:D298  D0 18       BNE .getClue
   20                       
   21                       ;;was FF- need to inc stuff
   22  06:D29A  EE BF 00    INC clueTableIndex
   23  06:D29D  A9 00       LDA #$00
   24  06:D29F  8D C6 00    STA clueParity
   25                       
   26  06:D2A2  EE C0 00    INC clueLineIndex
   27  06:D2A5  AD C0 00    LDA clueLineIndex
   28  06:D2A8  CD 00 00    CMP temp1
   29                       ;CMP #$01
   30  06:D2AB  F0 28       BEQ .leave    ;carry will be set
   31                       
   32  06:D2AD  20 6C D3    JSR CreateOffsetFromIndex
   33                      
   34  06:D2B0  D0 D6       BNE .getByte
   35                       
   36  06:D2B2            .getClue:
   37                       ;;clues go from high nibble to low nibble
   38  06:D2B2  48          PHA 
   39  06:D2B3  AD C6 00    LDA clueParity
   40  06:D2B6  D0 0A       BNE .getSecondClue
   41  06:D2B8  EE C6 00    INC clueParity
   42  06:D2BB  68          PLA
   43  06:D2BC  4A          LSR A
   44  06:D2BD  4A          LSR A
   45  06:D2BE  4A          LSR A
   46  06:D2BF  4A          LSR A         ;move clue over to lower nibble
   47  06:D2C0  D0 0D       BNE .drawClue
   48                       
   49  06:D2C2            .getSecondClue:
   50                     
   51  06:D2C2  CE C6 00    DEC clueParity
   52  06:D2C5  EE BF 00    INC clueTableIndex
   53  06:D2C8  68          PLA 
   54  06:D2C9  29 0F       AND #$0F
   55  06:D2CB  D0 02       BNE .drawClue
   56                       ;;if 0, skip
   57  06:D2CD  F0 B9       BEQ .getByte
   58                      
   59  06:D2CF            .drawClue:
   60                       
   61  06:D2CF  09 40       ORA #$40
   62  06:D2D1  20 D6 D2    JSR WriteClueByteToPPUString
   63  06:D2D4  18          CLC
   64                       
   65  06:D2D5            .leave:
   66  06:D2D5  60          RTS
   67                       
   68  06:D2D6            WriteClueByteToPPUString:
   69                     
   70  06:D2D6  8D 00 00    STA temp1 ;store off the tile value
   71                     
   72                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:D2D9  A9 01       LDA #$01
       06:D2DB  8D 23 00    STA PPU_PendingWrite
       06:D2DE  AD BE 00    LDA clue_draw_address+1
       06:D2E1  20 3F D1    JSR WriteToPPUString
       06:D2E4  AD BD 00    LDA clue_draw_address
       06:D2E7  20 3F D1    JSR WriteToPPUString
       06:D2EA  A9 00       LDA #DRAW_HORIZONTAL
       06:D2EC  20 3F D1    JSR WriteToPPUString
       06:D2EF  A9 01       LDA #$01 
       06:D2F1  20 3F D1    JSR WriteToPPUString
                            
   73  06:D2F4  AD 00 00    LDA temp1
   74  06:D2F7  20 3F D1    JSR WriteToPPUString
   75                       
   76                       ;;also copy to ... copy
   77  06:D2FA  AD BD 00    LDA clue_draw_address
   78  06:D2FD  8D B5 00    STA copy_address
   79  06:D300  AD BE 00    LDA clue_draw_address+1
   80  06:D303  29 0F       AND #$0F
   81  06:D305  09 60       ORA #$60
   82  06:D307  8D B6 00    STA copy_address+1
   83  06:D30A  AD 00 00    LDA temp1
   84  06:D30D  A0 00       LDY #$00
   85  06:D30F  91 B5       STA [copy_address],y
   86  06:D311  AD B6 00    LDA copy_address+1
   87  06:D314  18          CLC
   88  06:D315  69 08       ADC #$08
   89  06:D317  8D B6 00    STA copy_address+1
   90  06:D31A  AD 00 00    LDA temp1
   91  06:D31D  91 B5       STA [copy_address],y
   92                       
   93  06:D31F  AD C2 00    LDA clueDrawAdd
   94  06:D322  20 49 D3    JSR SubFromClueDrawAddress
   95                         
   96  06:D325  60          RTS
   97                       
   98  06:D326            ResetClueDrawAddress:
   99                     
  100                       MACROGetPointer clue_start_address, clue_draw_address
                          
       06:D326  AD BB 00          LDA clue_start_address
       06:D329  8D BD 00          STA clue_draw_address
       06:D32C  AD BC 00          LDA clue_start_address+1
       06:D32F  8D BE 00          STA clue_draw_address+1
                          
  101                       
  102  06:D332  60          RTS
  103                       
  104  06:D333            AddToClueDrawAddress:
  105                     
  106  06:D333  8D 00 00    STA temp1
  107                       
  108  06:D336  AD BD 00    LDA clue_draw_address
  109  06:D339  18          CLC
  110  06:D33A  6D 00 00    ADC temp1
  111  06:D33D  8D BD 00    STA clue_draw_address
  112  06:D340  AD BE 00    LDA clue_draw_address+1
  113  06:D343  69 00       ADC #$00
  114  06:D345  8D BE 00    STA clue_draw_address+1
  115                       
  116  06:D348  60          RTS
  117                         
  118  06:D349            SubFromClueDrawAddress:
  119                     
  120  06:D349  8D 00 00    STA temp1
  121                       
  122  06:D34C  AD BD 00    LDA clue_draw_address
  123  06:D34F  38          SEC
  124  06:D350  ED 00 00    SBC temp1
  125  06:D353  8D BD 00    STA clue_draw_address
  126  06:D356  AD BE 00    LDA clue_draw_address+1
  127  06:D359  E9 00       SBC #$00
  128  06:D35B  8D BE 00    STA clue_draw_address+1
  129                       
  130  06:D35E  60          RTS
  131                       
  132  06:D35F            AddToClueDrawAddressHi:
  133                     
  134  06:D35F  8D 00 00    STA temp1
  135                       
  136  06:D362  AD BE 00    LDA clue_draw_address+1
  137  06:D365  6D 00 00    ADC temp1
  138  06:D368  8D BE 00    STA clue_draw_address+1
  139                       
  140  06:D36B  60          RTS
  141                       
  142  06:D36C            CreateOffsetFromIndex:
  143                     
  144                       ;;would be this, but we need to be able to go further- so we'll make a doulbe offset
  145  06:D36C  AD C0 00    LDA clueLineIndex
  146  06:D36F  8D C3 00    STA clueDrawOffset
  147  06:D372  A9 00       LDA #$00
  148  06:D374  8D C4 00    STA clueDrawOffset+1
  149                       
  150  06:D377  AD C1 00    LDA clueOffsetShift   
  151  06:D37A  F0 0E       BEQ .addOffset
  152                       
  153  06:D37C  A2 00       LDX #$00
  154                       
  155  06:D37E            .loopShift:
  156  06:D37E  0E C3 00    ASL clueDrawOffset
  157  06:D381  2E C4 00    ROL clueDrawOffset+1
  158  06:D384  E8          INX
  159  06:D385  EC C1 00    CPX clueOffsetShift
  160  06:D388  D0 F4       BNE .loopShift
  161                       
  162  06:D38A            .addOffset:
  163                       
  164  06:D38A  20 26 D3    JSR ResetClueDrawAddress
  165  06:D38D  AD C3 00    LDA clueDrawOffset
  166  06:D390  20 33 D3    JSR AddToClueDrawAddress 
  167  06:D393  AD C4 00    LDA clueDrawOffset+1
  168  06:D396  20 5F D3    JSR AddToClueDrawAddressHi
  169                       
  170  06:D399  60          RTS  
  171                       
  172  06:D39A            ClearPuzzle:
  173                     
  174                       ;we'll assume clue draw address has been set to the top of the 1st nametable
  175                      
  176                       MACROGetLabelPointer ClearLineDefs, table_address
                          
       06:D39A  A9 D6             LDA #HIGH(ClearLineDefs)
       06:D39C  A2 51             LDX #LOW(ClearLineDefs)
                                  
       06:D39E  8E 16 00          STX table_address
       06:D3A1  8D 17 00          STA table_address+1
                                  
  177                     
  178  06:D3A4  AC C0 00    LDY clueLineIndex
  179  06:D3A7  B1 16       LDA [table_address], y
  180  06:D3A9  8D 00 00    STA temp1
  181                       MACROAddPPUStringEntryRepeat clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp1, #$24
                          
       06:D3AC  A9 01       LDA #$01
       06:D3AE  8D 23 00    STA PPU_PendingWrite
       06:D3B1  AD BE 00    LDA clue_draw_address+1
       06:D3B4  20 3F D1    JSR WriteToPPUString
       06:D3B7  AD BD 00    LDA clue_draw_address
       06:D3BA  20 3F D1    JSR WriteToPPUString
       06:D3BD  A9 40       LDA #$40
       06:D3BF  09 00       ORA #DRAW_HORIZONTAL
       06:D3C1  0D 00 00    ORA temp1
       06:D3C4  20 3F D1    JSR WriteToPPUString
       06:D3C7  A9 24       LDA #$24
       06:D3C9  20 3F D1    JSR WriteToPPUString
                            
  182                       ;;no need to load anything else
  183                       
  184  06:D3CC  AD BD 00    LDA clue_draw_address
  185  06:D3CF  18          CLC
  186  06:D3D0  69 20       ADC #32
  187  06:D3D2  8D BD 00    STA clue_draw_address
  188  06:D3D5  AD BE 00    LDA clue_draw_address+1
  189  06:D3D8  69 00       ADC #$00
  190  06:D3DA  8D BE 00    STA clue_draw_address+1
  191                       
  192  06:D3DD  EE C0 00    INC clueLineIndex
  193  06:D3E0  60          RTS
  194                       
  195  06:D3E1            LoadPauseScreen:
  196                     
  197                     ;;use clue indexes again
  198                     ;;we want to draw one line at a time
  199                     ;;we have control codes, but those don't matter since we have to build ou the strings before hand
  200                     
  201                     ;load pause table
  202                     ;there are 6 lines of 13 tiles
  203                     ;one byte for the 6 lines, one byte to keep track of our index
  204                       ;STA clueLineIndex 
  205                       ;STA clueOffsetShift
  206                     
  207                     ;;pause_address has the table we want
  208                     ;;pause_draw_address will be the draw location
  209                     
  210                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:D3E1  A9 01       LDA #$01
       06:D3E3  8D 23 00    STA PPU_PendingWrite
       06:D3E6  AD B8 00    LDA pause_draw_address+1
       06:D3E9  20 3F D1    JSR WriteToPPUString
       06:D3EC  AD B7 00    LDA pause_draw_address
       06:D3EF  20 3F D1    JSR WriteToPPUString
       06:D3F2  A9 00       LDA #DRAW_HORIZONTAL
       06:D3F4  20 3F D1    JSR WriteToPPUString
       06:D3F7  A9 0D       LDA #13 
       06:D3F9  20 3F D1    JSR WriteToPPUString
                            
  211                     
  212  06:D3FC  A2 00       LDX #$00
  213  06:D3FE  AC C0 00    LDY clueLineIndex
  214  06:D401            .loop:
  215                      
  216  06:D401  8A          TXA
  217  06:D402  48          PHA
  218  06:D403  B1 B3       LDA [pause_address],y
  219  06:D405  20 3F D1    JSR WriteToPPUString
  220  06:D408  68          PLA
  221  06:D409  AA          TAX
  222  06:D40A  C8          INY
  223  06:D40B  E8          INX 
  224  06:D40C  E0 0D       CPX #13
  225  06:D40E  D0 F1       BNE .loop
  226                       
  227  06:D410  8C C0 00    STY clueLineIndex
  228                       
  229  06:D413  AD B7 00    LDA pause_draw_address
  230  06:D416  18          CLC
  231  06:D417  69 20       ADC #$20
  232  06:D419  8D B7 00    STA pause_draw_address
  233  06:D41C  AD B8 00    LDA pause_draw_address+1
  234  06:D41F  69 00       ADC #$00
  235  06:D421  8D B8 00    STA pause_draw_address+1
  236                       
  237  06:D424  EE C1 00    INC clueOffsetShift
  238  06:D427  60          RTS
  239                       
  240                       
  241                     
  242                     
  243  06:D428            ClearPauseScreen:  
  244                     
  245                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:D428  A9 01       LDA #$01
       06:D42A  8D 23 00    STA PPU_PendingWrite
       06:D42D  AD B8 00    LDA pause_draw_address+1
       06:D430  20 3F D1    JSR WriteToPPUString
       06:D433  AD B7 00    LDA pause_draw_address
       06:D436  20 3F D1    JSR WriteToPPUString
       06:D439  A9 00       LDA #DRAW_HORIZONTAL
       06:D43B  20 3F D1    JSR WriteToPPUString
       06:D43E  A9 0D       LDA #13 
       06:D440  20 3F D1    JSR WriteToPPUString
                            
  246                     
  247  06:D443  A2 00       LDX #$00
  248  06:D445  A0 00       LDY #$00
  249  06:D447            .loop:
  250                      
  251  06:D447  8A          TXA
  252  06:D448  48          PHA
  253  06:D449  B1 B3       LDA [pause_address],y
  254  06:D44B  20 3F D1    JSR WriteToPPUString
  255  06:D44E  68          PLA
  256  06:D44F  AA          TAX
  257  06:D450  C8          INY
  258  06:D451  E8          INX 
  259  06:D452  E0 0D       CPX #13
  260  06:D454  D0 F1       BNE .loop
  261                       
  262                       
  263  06:D456  AD B7 00    LDA pause_draw_address
  264  06:D459  18          CLC
  265  06:D45A  69 20       ADC #$20
  266  06:D45C  8D B7 00    STA pause_draw_address
  267  06:D45F  AD B8 00    LDA pause_draw_address+1
  268  06:D462  69 00       ADC #$00
  269  06:D464  8D B8 00    STA pause_draw_address+1
  270                       
  271  06:D467  AD B3 00    LDA pause_address
  272  06:D46A  18          CLC
  273  06:D46B  69 20       ADC #$20
  274  06:D46D  8D B3 00    STA pause_address
  275  06:D470  AD B4 00    LDA pause_address+1
  276  06:D473  69 00       ADC #$00
  277  06:D475  8D B4 00    STA pause_address+1
  278                       
  279  06:D478  EE C1 00    INC clueOffsetShift
  280  06:D47B  60         RTS
  281  06:D47C            DrawImage:
  282                     
  283                       ;;we have clueTableIndex, which should be at the image bytes now
  284                       ;;clue line index will keep track of our place in a byte
  285                        
  286  06:D47C  A9 00       LDA #$00
  287  06:D47E  8D 00 00    STA temp1
  288  06:D481  8D 01 00    STA temp2
  289  06:D484  8D 02 00    STA temp3
  290  06:D487  8D 03 00    STA temp4
  291  06:D48A  8D 05 00    STA temp6
  292                       
  293  06:D48D  A9 04       LDA #$04
  294  06:D48F  8D 04 00    STA temp5
  295                       
  296  06:D492  A0 00       LDY #$00
  297  06:D494  B1 AD       LDA [puzzle_address], y
  298  06:D496  AA          TAX
  299  06:D497  BD 6F D6    LDA PuzzleSizes, x
  300  06:D49A  8D 06 00    STA temp7
  301  06:D49D  BD 72 D6    LDA PuzzleImageSizes, x
  302  06:D4A0  8D 07 00    STA temp8
  303  06:D4A3  4A          LSR A
  304  06:D4A4  4A          LSR A
  305  06:D4A5  8D 09 00    STA tempy
  306  06:D4A8  AD 07 00    LDA temp8
  307  06:D4AB  29 03       AND #$03
  308  06:D4AD  F0 03       BEQ .skipAdd1
  309  06:D4AF  EE 09 00    INC tempy  
  310  06:D4B2            .skipAdd1:
  311  06:D4B2  BD 75 D6    LDA ImageDrawWrapOffsets, x
  312  06:D4B5  8D 08 00    STA tempx
  313                       
  314  06:D4B8  AC BF 00    LDY clueTableIndex
  315  06:D4BB  B1 AF       LDA [clues_address], y
  316                     
  317  06:D4BD  0A          ASL A
  318  06:D4BE  2E 00 00    ROL temp1
  319  06:D4C1  0A          ASL A
  320  06:D4C2  2E 00 00    ROL temp1
  321  06:D4C5  0A          ASL A
  322  06:D4C6  2E 01 00    ROL temp2
  323  06:D4C9  0A          ASL A
  324  06:D4CA  2E 01 00    ROL temp2
  325  06:D4CD  0A          ASL A
  326  06:D4CE  2E 02 00    ROL temp3
  327  06:D4D1  0A          ASL A
  328  06:D4D2  2E 02 00    ROL temp3
  329  06:D4D5  0A          ASL A
  330  06:D4D6  2E 03 00    ROL temp4
  331  06:D4D9  0A          ASL A
  332  06:D4DA  2E 03 00    ROL temp4
  333                       
  334                     
  335  06:D4DD  A2 00       LDX #$00
  336  06:D4DF            .moveUpTiles:
  337  06:D4DF  BD 00 00    LDA temp1, x
  338  06:D4E2  09 24       ORA #$24
  339  06:D4E4  9D 00 00    STA temp1, x
  340  06:D4E7  E8          INX
  341  06:D4E8  E0 04       CPX #$04
  342  06:D4EA  D0 F3       BNE .moveUpTiles
  343                       
  344                       
  345  06:D4EC  AD C1 00    LDA clueOffsetShift
  346  06:D4EF  18          CLC
  347  06:D4F0  69 04       ADC #$04
  348                     
  349  06:D4F2  8D C1 00    STA clueOffsetShift
  350                       ;;clue offset shift + 4, check if we went over puzle row length
  351  06:D4F5  38          SEC
  352  06:D4F6  ED 06 00    SBC temp7 ;;subtract 15
  353  06:D4F9  90 12       BCC .makeStrings
  354  06:D4FB  F0 10       BEQ .makeStrings
  355                       
  356  06:D4FD  8D C1 00    STA clueOffsetShift ;loop offset over
  357  06:D500  8D 05 00    STA temp6 ; length of second string
  358  06:D503  AD 04 00    LDA temp5
  359  06:D506  38          SEC
  360  06:D507  ED 05 00    SBC temp6 
  361  06:D50A  8D 04 00    STA temp5 ;length of first string 
  362                       
  363  06:D50D            .makeStrings:
  364                       
  365  06:D50D  A2 00       LDX #$00
  366                       
  367  06:D50F  AD 04 00    LDA temp5
  368  06:D512  F0 51       BEQ .makeSecondString
  369  06:D514  8A          TXA
  370  06:D515  48          PHA
  371                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp5
                          
       06:D516  A9 01       LDA #$01
       06:D518  8D 23 00    STA PPU_PendingWrite
       06:D51B  AD BE 00    LDA clue_draw_address+1
       06:D51E  20 3F D1    JSR WriteToPPUString
       06:D521  AD BD 00    LDA clue_draw_address
       06:D524  20 3F D1    JSR WriteToPPUString
       06:D527  A9 00       LDA #DRAW_HORIZONTAL
       06:D529  20 3F D1    JSR WriteToPPUString
       06:D52C  AD 04 00    LDA temp5 
       06:D52F  20 3F D1    JSR WriteToPPUString
                            
  372  06:D532  68          PLA
  373  06:D533  AA          TAX
  374                       
  375  06:D534            .firstStringLoop:
  376                       
  377  06:D534  8A          TXA 
  378  06:D535  48          PHA
  379  06:D536  BD 00 00    LDA temp1, x
  380  06:D539  20 3F D1    JSR WriteToPPUString
  381                       
  382  06:D53C  EE C0 00    INC clueLineIndex
  383  06:D53F  AD C0 00    LDA clueLineIndex
  384  06:D542  CD 07 00    CMP temp8
  385  06:D545  D0 04       BNE .continueLoop
  386  06:D547  68          PLA 
  387  06:D548  4C CC D5    JMP .leave
  388                       
  389  06:D54B            .continueLoop:
  390  06:D54B  68          PLA
  391  06:D54C  AA          TAX
  392  06:D54D  E8          INX
  393  06:D54E  EC 04 00    CPX temp5
  394  06:D551  D0 E1       BNE .firstStringLoop
  395                       
  396  06:D553  AD BD 00    LDA clue_draw_address
  397  06:D556  18          CLC
  398  06:D557  6D 04 00    ADC temp5
  399  06:D55A  8D BD 00    STA clue_draw_address
  400  06:D55D  AD BE 00    LDA clue_draw_address+1
  401  06:D560  69 00       ADC #$00
  402  06:D562  8D BE 00    STA clue_draw_address+1
  403                       
  404  06:D565            .makeSecondString:
  405                     
  406  06:D565  AD 05 00    LDA temp6
  407  06:D568  F0 62       BEQ .leave
  408                       
  409                       ;;loop draw address to next line
  410  06:D56A  AD BD 00    LDA clue_draw_address
  411  06:D56D  18          CLC
  412  06:D56E  6D 08 00    ADC tempx
  413  06:D571  8D BD 00    STA clue_draw_address
  414  06:D574  AD BE 00    LDA clue_draw_address+1
  415  06:D577  69 00       ADC #$00
  416  06:D579  8D BE 00    STA clue_draw_address+1
  417  06:D57C  8A          TXA
  418  06:D57D  48          PHA
  419                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp6
                          
       06:D57E  A9 01       LDA #$01
       06:D580  8D 23 00    STA PPU_PendingWrite
       06:D583  AD BE 00    LDA clue_draw_address+1
       06:D586  20 3F D1    JSR WriteToPPUString
       06:D589  AD BD 00    LDA clue_draw_address
       06:D58C  20 3F D1    JSR WriteToPPUString
       06:D58F  A9 00       LDA #DRAW_HORIZONTAL
       06:D591  20 3F D1    JSR WriteToPPUString
       06:D594  AD 05 00    LDA temp6 
       06:D597  20 3F D1    JSR WriteToPPUString
                            
  420  06:D59A  68          PLA 
  421  06:D59B  AA          TAX
  422                       
  423  06:D59C            .secondStringLoop:
  424                     
  425  06:D59C  8A          TXA
  426  06:D59D  48          PHA 
  427  06:D59E  BD 00 00    LDA temp1, x
  428  06:D5A1  20 3F D1    JSR WriteToPPUString
  429                       
  430  06:D5A4  EE C0 00    INC clueLineIndex
  431  06:D5A7  AD C0 00    LDA clueLineIndex
  432  06:D5AA  CD 07 00    CMP temp8
  433  06:D5AD  D0 04       BNE .continueSecondLoop
  434                       
  435  06:D5AF  68          PLA 
  436  06:D5B0  4C CC D5    JMP .leave
  437                       
  438  06:D5B3            .continueSecondLoop:
  439  06:D5B3  68          PLA
  440  06:D5B4  AA          TAX
  441  06:D5B5  E8          INX
  442  06:D5B6  E0 04       CPX #$04
  443  06:D5B8  D0 E2       BNE .secondStringLoop
  444                       
  445  06:D5BA  AD BD 00    LDA clue_draw_address
  446  06:D5BD  18          CLC
  447  06:D5BE  6D 05 00    ADC temp6
  448  06:D5C1  8D BD 00    STA clue_draw_address
  449  06:D5C4  AD BE 00    LDA clue_draw_address+1
  450  06:D5C7  69 00       ADC #$00
  451  06:D5C9  8D BE 00    STA clue_draw_address+1
  452                       
  453  06:D5CC            .leave:
  454  06:D5CC  20 7D C4    JSR PlayNoiseBlipSound
  455  06:D5CF  EE BF 00    INC clueTableIndex
  456  06:D5D2  60          RTS
  457                       
  458  06:D5D3            DrawTitle:
  459                     
  460                       ;; title draw address is stored ahead of time, along with title address
  461                       ;; we can use temp1 - 8 to handle this
  462  06:D5D3  A0 00       LDY #$00
  463  06:D5D5  B1 B1       LDA [title_address],y
  464  06:D5D7  4A          LSR A
  465  06:D5D8  8D 09 00    STA tempy
  466                       
  467  06:D5DB  AD B9 00    LDA title_draw_address
  468  06:D5DE  38          SEC 
  469  06:D5DF  ED 09 00    SBC tempy
  470  06:D5E2  8D B9 00    STA title_draw_address
  471  06:D5E5  AD BA 00    LDA title_draw_address+1
  472  06:D5E8  E9 00       SBC #$00
  473  06:D5EA  8D BA 00    STA title_draw_address+1
  474                       
  475                       MACROAddPPUStringEntryTablePtr title_draw_address+1, title_draw_address, #DRAW_HORIZONTAL, title_address
                           
       06:D5ED  A9 01       LDA #$01
       06:D5EF  8D 23 00    STA PPU_PendingWrite
       06:D5F2  AD BA 00    LDA title_draw_address+1
       06:D5F5  20 3F D1    JSR WriteToPPUString
       06:D5F8  AD B9 00    LDA title_draw_address
       06:D5FB  20 3F D1    JSR WriteToPPUString
       06:D5FE  A9 20       LDA #$20
       06:D600  09 00       ORA #DRAW_HORIZONTAL
       06:D602  20 3F D1    JSR WriteToPPUString
       06:D605  AD B1 00    LDA title_address
       06:D608  20 3F D1    JSR WriteToPPUString
       06:D60B  AD B2 00    LDA title_address+1
       06:D60E  20 3F D1    JSR WriteToPPUString
                           
  476                       
  477  06:D611            .leave:
  478  06:D611  60          RTS
  479                       
  480  06:D612            ApplyGameTimeToPPUString:
  481                     
  482  06:D612  8D 00 00    STA temp1
  483  06:D615  8E 01 00    STX temp2
  484                     
  485                       MACROAddPPUStringEntryRawData temp1, temp2, #DRAW_HORIZONTAL, #$05
                          
       06:D618  A9 01       LDA #$01
       06:D61A  8D 23 00    STA PPU_PendingWrite
       06:D61D  AD 00 00    LDA temp1
       06:D620  20 3F D1    JSR WriteToPPUString
       06:D623  AD 01 00    LDA temp2
       06:D626  20 3F D1    JSR WriteToPPUString
       06:D629  A9 00       LDA #DRAW_HORIZONTAL
       06:D62B  20 3F D1    JSR WriteToPPUString
       06:D62E  A9 05       LDA #$05 
       06:D630  20 3F D1    JSR WriteToPPUString
                            
  486  06:D633  AD 06 70    LDA GameTime+3
  487  06:D636  20 3F D1    JSR WriteToPPUString
  488  06:D639  AD 05 70    LDA GameTime+2
  489  06:D63C  20 3F D1    JSR WriteToPPUString
  490  06:D63F  A9 61       LDA #$61
  491  06:D641  20 3F D1    JSR WriteToPPUString
  492  06:D644  AD 04 70    LDA GameTime+1
  493  06:D647  20 3F D1    JSR WriteToPPUString
  494  06:D64A  AD 03 70    LDA GameTime
  495  06:D64D  20 3F D1    JSR WriteToPPUString
  496                       
  497  06:D650  60          RTS
  498                     
  499  06:D651            ClearLineDefs:
  500                     
  501  06:D651  20 20 20    .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
       06:D654  20 20 20  
       06:D657  20 20 20  
       06:D65A  20 20     
  502  06:D65C  0D 0D 0D    .db $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D
       06:D65F  0D 0D 0D  
       06:D662  0D 0D 0D  
       06:D665  0D 0D 0D  
       06:D668  0D 0D 0D  
       06:D66B  0D 0D     
  503  06:D66D  20 20       .db $20, $20
  504                       
  505  06:D66F            PuzzleSizes:
  506                       
  507  06:D66F  05 0A 0F    .db $05, $0A, $0F
  508                       
  509  06:D672            PuzzleImageSizes:
  510                     
  511                       ;.db $05, $0A, $0F
  512  06:D672  19 64 E1    .db $19, $64, $E1
  513                       
  514  06:D675            ImageDrawWrapOffsets:
  515                     
  516  06:D675  1B 16 11    .db $1B, $16, $11
  517                      
  518  06:D678            ImageTitleLowerHalfPos:
  519                      
  520  06:D678  70 22       .word $2270, $2313, $23B5
       06:D67A  13 23     
       06:D67C  B5 23     
#[1]   Picross.asm
   99                       
  100                       
  101                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  102                     ;;     NMI                  ;;
  103                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  104                     
#[2]   Routines/Common/NMI.asm
  105                       .include "Routines/Common/NMI.asm"
    1                      
    2  06:D67E            NMI:
    3                     
    4  06:D67E  48          PHA                              ;protect the registers
    5  06:D67F  8A          TXA
    6  06:D680  48          PHA
    7  06:D681  98          TYA
    8  06:D682  48          PHA
    9                       
   10  06:D683            nmi_started:
   11  06:D683  A9 00       LDA #$00
   12  06:D685  8D 03 20    STA OAM_LO      ; set the low byte (00) of the RAM address
   13  06:D688  A9 02       LDA #$02
   14  06:D68A  8D 14 40    STA OAM_HI       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:D68D  AD 10 00    LDA NMI_locks
   17  06:D690  F0 03       BEQ update_controllers
   18  06:D692  4C 04 D7    JMP WakeUp
   19                     
   20  06:D695            update_controllers:
   21                     
#[3]   Routines/Common/ReadControllers.asm
   22                       .include "Routines/Common/ReadControllers.asm"
    1                     
    2  06:D695  8A            TXA
    3  06:D696  48                PHA
    4  06:D697  98                TYA
    5  06:D698  48                PHA
    6                     
    7  06:D699  A2 00             LDX #$00
    8                     
    9  06:D69B            GamePadCheck:
   10  06:D69B  A9 01             LDA #$01        ;load 1
   11  06:D69D  8D 16 40          STA $4016       ; turn latch on
   12                             ;STA gamepad2
   13  06:D6A0  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   14  06:D6A1  8D 16 40          STA $4016       ;turn latch off
   15                             
   16                             ;do a ring counter technique- load %10000000 into both
   17  06:D6A4  A9 80             LDA #$80
   18  06:D6A6  8D 1A 00          STA gamepad
   19                     
   20  06:D6A9            ReadControllerABytesLoop:
   21  06:D6A9  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   22  06:D6AC  29 03             AND #%00000011  ;acc: %00000001 c: 0
   23  06:D6AE  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   24                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   25  06:D6B0  6E 1A 00          ROR gamepad             ;gamepad: %11000000
   26                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   27  06:D6B3  90 F4             BCC ReadControllerABytesLoop
   28                             
   29                             ;;comapre last to current, find the pressed buttons this frame
   30  06:D6B5  AD 1B 00          LDA gamepadLast
   31  06:D6B8  49 FF             EOR #$FF
   32  06:D6BA  2D 1A 00          AND gamepad
   33  06:D6BD  8D 1C 00          STA gamepadPressed
   34                             
   35                             
   36  06:D6C0  AD 1A 00          LDA gamepad
   37  06:D6C3  8D 1B 00          STA gamepadLast
   38                             
   39                             ;return x and y... before resetting them all over again- always good to make sure we're clean
   40  06:D6C6  68                PLA
   41  06:D6C7  A8                TAY
   42  06:D6C8  68                PLA
   43  06:D6C9  AA                TAX     
#[2]   Routines/Common/NMI.asm
   23                       
   24  06:D6CA  20 7C D0    JSR ProcessPPUString
   25                       
   26                       
   27  06:D6CD  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   28  06:D6CF  8D 05 20    STA PPU_SCROLL
   29  06:D6D2  8D 05 20    STA PPU_SCROLL
   30                       
   31                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   32                       ; enable sprites, enable background, no clipping on left side 
   33  06:D6D5  20 99 D1    JSR UpdatePPUControl
   34                     
   35  06:D6D8            NMIUpdate:
   36                     
   37  06:D6D8  20 F8 D6    JSR StateNMIUpdate
   38                       
   39  06:D6DB  AD 1D 00    LDA PPU_Control
   40  06:D6DE  29 FC       AND #$FC
   41  06:D6E0  0D 21 00    ORA PPU_ScrollNT
   42  06:D6E3  8D 00 20    STA PPU_CTRL
   43                       
   44  06:D6E6  AD 1F 00    LDA PPU_ScrollX     ;;tell the ppu there is no background scrolling
   45  06:D6E9  8D 05 20    STA PPU_SCROLL
   46  06:D6EC  AD 20 00    LDA PPU_ScrollY
   47  06:D6EF  8D 05 20    STA PPU_SCROLL
   48                       
   49  06:D6F2  20 BD D7    jsr sound_play_frame 
   50  06:D6F5  4C 04 D7    JMP WakeUp
   51                     
   52  06:D6F8            StateNMIUpdate:
   53                     
   54                       MACROCallDynamicJump game_mode
                          
       06:D6F8  AD 0E 00    LDA game_mode
       06:D6FB  20 BD CF    JSR Dynamic_Jump
                                  
   55                     
   56  06:D6FE            NMIJumpTable:
   57                     
   58  06:D6FE  0F D7       .word UpdateTitleNMI
   59  06:D700  13 D7       .word UpdateGameNMI
   60  06:D702  14 D7       .word UpdateGameOverNMI
   61                     
   62  06:D704            WakeUp:
   63  06:D704  A9 00       LDA #$00
   64  06:D706  8D 0C 00    STA sleeping
   65                       
   66  06:D709  68          PLA             ;restore the registers
   67  06:D70A  A8          TAY 
   68  06:D70B  68          PLA
   69  06:D70C  AA          TAX
   70  06:D70D  68          PLA
   71                     
   72  06:D70E  40          RTI             ; return from interrupt
   73                       
#[3]   Routines/NMI_States/UpdateTitleNMI.asm
   74                       .include "Routines/NMI_States/UpdateTitleNMI.asm"
    1  06:D70F            UpdateTitleNMI:
    2                     
    3                       ;;load bank 0 for BG tiles, so we start with the right tile set
    4                       ;JSR ResetMapper
    5                       ;LDA #$01
    6                       ;JSR LoadCHRBankB
    7                     
    8                     
    9  06:D70F  20 5F D1    JSR DetectSprite0
   10                     
   11                       ;JSR ResetMapper
   12                       ;LDA #$03
   13                       ;JSR LoadCHRBankB
   14                       
   15                     
   16                        
   17  06:D712  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameNMI.asm
   75                       .include "Routines/NMI_States/UpdateGameNMI.asm"
    1  06:D713            UpdateGameNMI:
    2  06:D713  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameOverNMI.asm
   76                       .include "Routines/NMI_States/UpdateGameOverNMI.asm"
    1  06:D714            UpdateGameOverNMI:
    2  06:D714  60          RTS
#[2]   Routines/Common/NMI.asm
#[1]   Picross.asm
  106                       
  107                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  108                     ;;    AUDIO                 ;;
  109                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#[2]   External/sound_engine.asm
  110                         .include "External/sound_engine.asm"
    1           0000      SQUARE_1 = $00 ;these are channel constants
    2           0001      SQUARE_2 = $01
    3           0002      TRIANGLE = $02
    4           0003      NOISE = $03
    5                     
    6           0000      MUSIC_SQ1 = $00 ;these are stream # constants
    7           0001      MUSIC_SQ2 = $01 ;stream # is used to index into variables
    8           0002      MUSIC_TRI = $02
    9           0003      MUSIC_NOI = $03
   10           0004      SFX_1     = $04
   11           0005      SFX_2     = $05
   12                     
   13           0300          .rsset $0300 ;sound engine variables will be on the $0300 page of RAM
   14                         
   15           0300      sound_disable_flag  .rs 1   ;a flag variable that keeps track of whether the sound engine is disabled or not. 
   16           0301      sound_temp1 .rs 1           ;temporary variables
   17           0302      sound_temp2 .rs 1
   18           0303      sound_sq1_old .rs 1  ;the last value written to $4003
   19           0304      sound_sq2_old .rs 1  ;the last value written to $4007
   20           0305      soft_apu_ports .rs 16
   21                     
   22                     ;reserve 6 bytes, one for each stream
   23           0315      stream_curr_sound .rs 6     ;current song/sfx loaded
   24           031B      stream_status .rs 6         ;status byte.   bit0: (1: stream enabled; 0: stream disabled)
   25           0321      stream_channel .rs 6        ;what channel is this stream playing on?
   26           0327      stream_ptr_LO .rs 6         ;low byte of pointer to data stream
   27           032D      stream_ptr_HI .rs 6         ;high byte of pointer to data stream
   28           0333      stream_ve .rs 6             ;current volume envelope
   29           0339      stream_ve_index .rs 6       ;current position within the volume envelope
   30           033F      stream_vol_duty .rs 6       ;stream volume/duty settings
   31           0345      stream_note_idx .rs 6
   32           034B      stream_note_LO .rs 6        ;low 8 bits of period for the current note on a stream
   33           0351      stream_note_HI .rs 6        ;high 3 bits of period for the current note on a stream 
   34           0357      stream_tempo .rs 6          ;the value to add to our ticker total each frame
   35           035D      stream_ticker_total .rs 6   ;our running ticker total.
   36           0363      stream_note_length_counter .rs 6
   37           0369      stream_note_length .rs 6
   38           036F      stream_loop1 .rs 6          ;loop counter
   39           0375      stream_note_offset .rs 6
   40           037B      stream_pe .rs 6             ;current volume envelope
   41           0381      stream_pe_index .rs 6       ;current position within the volume envelope
   42           0387      stream_pe_offset .rs 6
   43           038D      stream_pe_delay .rs 6
   44           0393      stream_arp .rs 6
   45           0399      stream_arp_index .rs 6
   46           039F      stream_arp_offset .rs 6
   47                         
   48  06:D715            sound_init:
   49  06:D715  A9 0F         lda #$0F
   50  06:D717  8D 15 40      sta $4015   ;enable Square 1, Square 2, Triangle and Noise channels
   51                         
   52  06:D71A  A9 00         lda #$00
   53  06:D71C  8D 00 03      sta sound_disable_flag  ;clear disable flag
   54                         ;later, if we have other variables we want to initialize, we will do that here.
   55  06:D71F  A9 FF         lda #$FF
   56  06:D721  8D 03 03      sta sound_sq1_old   ;initializing these to $FF ensures that the first notes of the first song isn't skipped
   57  06:D724  8D 04 03      sta sound_sq2_old
   58  06:D727            se_silence:
   59  06:D727  A9 30         lda #$30
   60  06:D729  8D 05 03      sta soft_apu_ports      ;set Square 1 volume to 0
   61  06:D72C  8D 09 03      sta soft_apu_ports+4    ;set Square 2 volume to 0
   62  06:D72F  8D 11 03      sta soft_apu_ports+12   ;set Noise volume to 0
   63  06:D732  A9 80         lda #$80
   64  06:D734  8D 0D 03      sta soft_apu_ports+8     ;silence Triangle
   65                     
   66  06:D737  60            rts
   67                         
   68  06:D738            sound_disable:
   69  06:D738  A9 00         lda #$00
   70  06:D73A  8D 15 40      sta $4015   ;disable all channels
   71  06:D73D  A9 01         lda #$01
   72  06:D73F  8D 00 03      sta sound_disable_flag  ;set disable flag
   73  06:D742  60            rts
   74                         
   75                     ;-------------------------------------
   76                     ; load_sound will prepare the sound engine to play a song or sfx.
   77                     ;   input:
   78                     ;       A: song/sfx number to play
   79  06:D743            sound_load:
   80  06:D743  8D 01 03      sta sound_temp1         ;save song number
   81  06:D746  0A            asl a                   ;multiply by 2.  We are indexing into a table of pointers (words)
   82  06:D747  A8            tay
   83  06:D748  B9 BB DA      lda song_headers, y     ;setup the pointer to our song header
   84  06:D74B  8D D2 00      sta sound_ptr
   85  06:D74E  B9 BC DA      lda song_headers+1, y
   86  06:D751  8D D3 00      sta sound_ptr+1
   87                         
   88  06:D754  A0 00         ldy #$00
   89  06:D756  B1 D2         lda [sound_ptr], y      ;read the first byte: # streams
   90  06:D758  8D 02 03      sta sound_temp2         ;store in a temp variable.  We will use this as a loop counter: how many streams to read stream headers for
   91  06:D75B  C8            iny
   92  06:D75C            .loop:
   93  06:D75C  B1 D2         lda [sound_ptr], y      ;stream number
   94  06:D75E  AA            tax                     ;stream number acts as our variable index
   95  06:D75F  C8            iny
   96                         
   97  06:D760  B1 D2         lda [sound_ptr], y      ;status byte.  1= enable, 0=disable
   98  06:D762  9D 1B 03      sta stream_status, x
   99  06:D765  F0 49         beq .next_stream        ;if status byte is 0, stream disabled, so we are done
  100  06:D767  C8            iny
  101                         
  102  06:D768  B1 D2         lda [sound_ptr], y      ;channel number
  103  06:D76A  9D 21 03      sta stream_channel, x
  104  06:D76D  C8            iny
  105                         
  106  06:D76E  B1 D2         lda [sound_ptr], y      ;initial duty and volume settings
  107  06:D770  9D 3F 03      sta stream_vol_duty, x
  108  06:D773  C8            iny
  109                         
  110  06:D774  B1 D2         lda [sound_ptr], y
  111  06:D776  9D 33 03      sta stream_ve, x
  112  06:D779  C8            iny
  113                             
  114                             ;temp solution
  115  06:D77A  A9 00             lda #pe_none
  116  06:D77C  9D 7B 03          sta stream_pe, x
  117                             
  118  06:D77F  A9 00             lda #arp_none
  119  06:D781  9D 93 03          sta stream_arp, x
  120                         
  121  06:D784  B1 D2         lda [sound_ptr], y      ;pointer to stream data.  Little endian, so low byte first
  122  06:D786  9D 27 03      sta stream_ptr_LO, x
  123  06:D789  C8            iny
  124                         
  125  06:D78A  B1 D2         lda [sound_ptr], y
  126  06:D78C  9D 2D 03      sta stream_ptr_HI, x
  127  06:D78F  C8            iny
  128                         
  129  06:D790  B1 D2         lda [sound_ptr], y
  130  06:D792  9D 57 03      sta stream_tempo, x
  131                         
  132  06:D795  A9 A0         lda #$A0
  133  06:D797  9D 5D 03      sta stream_ticker_total, x
  134                         
  135  06:D79A  A9 01         lda #$01
  136  06:D79C  9D 63 03      sta stream_note_length_counter,x
  137                         
  138  06:D79F  A9 00         lda #$00
  139  06:D7A1  9D 39 03      sta stream_ve_index, x
  140  06:D7A4  9D 81 03          sta stream_pe_index, x
  141  06:D7A7  9D 99 03          sta stream_arp_index, x
  142  06:D7AA  9D 6F 03      sta stream_loop1, x
  143  06:D7AD  9D 75 03      sta stream_note_offset, x
  144  06:D7B0            .next_stream:
  145  06:D7B0  C8            iny
  146                         
  147  06:D7B1  AD 01 03      lda sound_temp1         ;song number
  148  06:D7B4  9D 15 03      sta stream_curr_sound, x
  149                         
  150  06:D7B7  CE 02 03      dec sound_temp2         ;our loop counter
  151  06:D7BA  D0 A0         bne .loop
  152  06:D7BC  60            rts
  153                     
  154                     ;--------------------------
  155                     ; sound_play_frame advances the sound engine by one frame
  156  06:D7BD            sound_play_frame:
  157  06:D7BD  AD 00 03      lda sound_disable_flag
  158  06:D7C0  D0 31         bne .done   ;if disable flag is set, don't advance a frame
  159                     
  160  06:D7C2  20 27 D7      jsr se_silence  ;silence all channels.  se_set_apu will set volume later for all channels that are enabled.
  161                                         ;the purpose of this subroutine call is to silence channels that aren't used by any streams.
  162  06:D7C5  A2 00         ldx #$00
  163  06:D7C7            .loop:
  164  06:D7C7  BD 1B 03      lda stream_status, x
  165  06:D7CA  29 01         and #$01    ;check whether the stream is active
  166  06:D7CC  F0 1D         beq .endloop  ;if the stream isn't active, skip it
  167                         
  168                         ;add the tempo to the ticker total.  If there is a FF-> 0 transition, there is a tick
  169  06:D7CE  BD 5D 03      lda stream_ticker_total, x
  170  06:D7D1  18            clc
  171  06:D7D2  7D 57 03      adc stream_tempo, x
  172  06:D7D5  9D 5D 03      sta stream_ticker_total, x
  173  06:D7D8  90 0E         bcc .set_buffer    ;carry clear = no tick.  if no tick, we are done with this stream
  174                         
  175  06:D7DA  DE 63 03      dec stream_note_length_counter, x   ;else there is a tick. decrement the note length counter
  176  06:D7DD  D0 09         bne .set_buffer    ;if counter is non-zero, our note isn't finished playing yet
  177  06:D7DF  BD 69 03      lda stream_note_length, x   ;else our note is finished. reload the note length counter
  178  06:D7E2  9D 63 03      sta stream_note_length_counter, x
  179                         
  180  06:D7E5  20 F4 D7      jsr se_fetch_byte   ;read the next byte from the data stream
  181                         
  182  06:D7E8            .set_buffer:
  183  06:D7E8  20 C1 D8      jsr se_set_temp_ports   ;copy the current stream's sound data for the current frame into our temporary APU vars (soft_apu_ports)
  184  06:D7EB            .endloop:
  185  06:D7EB  E8            inx
  186  06:D7EC  E0 06         cpx #$06
  187  06:D7EE  D0 D7         bne .loop
  188  06:D7F0  20 56 DA      jsr se_set_apu      ;copy the temporary APU variables (soft_apu_ports) to the real APU ports ($4000, $4001, etc)
  189  06:D7F3            .done:
  190  06:D7F3  60            rts
  191                     
  192                     ;--------------------------
  193                     ; se_fetch_byte reads one byte from a sound data stream and handles it
  194                     ;   input: 
  195                     ;       X: stream number    
  196  06:D7F4            se_fetch_byte:
  197  06:D7F4  BD 27 03      lda stream_ptr_LO, x
  198  06:D7F7  8D D2 00      sta sound_ptr
  199  06:D7FA  BD 2D 03      lda stream_ptr_HI, x
  200  06:D7FD  8D D3 00      sta sound_ptr+1
  201                         
  202  06:D800  A0 00         ldy #$00
  203  06:D802            .fetch:
  204  06:D802  B1 D2         lda [sound_ptr], y
  205  06:D804  10 26         bpl .note                ;if < #$80, it's a Note
  206  06:D806  C9 A0         cmp #$A0
  207  06:D808  90 0C         bcc .note_length         ;else if < #$A0, it's a Note Length
  208  06:D80A            .opcode:                     ;else it's an opcode
  209                         ;do Opcode stuff
  210  06:D80A  20 A6 D8      jsr se_opcode_launcher
  211  06:D80D  C8            iny                      ;next position in the data stream
  212  06:D80E  BD 1B 03      lda stream_status, x
  213  06:D811  29 01         and #%00000001
  214  06:D813  D0 ED         bne .fetch               ;after our opcode is done, grab another byte unless the stream is disabled
  215  06:D815  60            rts                      ; in which case we quit  (explained below)
  216  06:D816            .note_length:
  217                         ;do note length stuff
  218  06:D816  29 7F         and #%01111111          ;chop off bit7
  219  06:D818  8C 01 03      sty sound_temp1         ;save Y because we are about to destroy it
  220  06:D81B  A8            tay
  221  06:D81C  B9 3C DC      lda note_length_table, y    ;get the note length count value
  222  06:D81F  9D 69 03      sta stream_note_length, x
  223  06:D822  9D 63 03      sta stream_note_length_counter, x   ;stick it in our note length counter
  224  06:D825  AC 01 03      ldy sound_temp1         ;restore Y
  225  06:D828  C8            iny                     ;set index to next byte in the stream
  226  06:D829  4C 02 D8      jmp .fetch              ;fetch another byte
  227  06:D82C            .note:
  228                         ;do Note stuff
  229  06:D82C  8D 02 03      sta sound_temp2
  230  06:D82F  BD 21 03      lda stream_channel, x
  231  06:D832  C9 03         cmp #NOISE
  232  06:D834  D0 06         bne .not_noise
  233  06:D836  20 7A D8      jsr se_do_noise
  234  06:D839  4C 5D D8      jmp .reset_ve
  235  06:D83C            .not_noise:
  236  06:D83C  AD 02 03      lda sound_temp2
  237  06:D83F  8C 01 03      sty sound_temp1     ;save our index into the data stream
  238  06:D842  18            clc
  239  06:D843  7D 75 03      adc stream_note_offset, x   ;add note offset
  240  06:D846  0A            asl a
  241  06:D847  A8            tay
  242  06:D848  9D 45 03          sta stream_note_idx, x
  243  06:D84B  B9 7E DB      lda note_table, y
  244  06:D84E  9D 4B 03      sta stream_note_LO, x
  245  06:D851  B9 7F DB      lda note_table+1, y
  246  06:D854  9D 51 03      sta stream_note_HI, x
  247  06:D857  AC 01 03      ldy sound_temp1     ;restore data stream index
  248                         
  249                         ;check if it's a rest and modify the status flag appropriately
  250  06:D85A  20 90 D8      jsr se_check_rest
  251  06:D85D            .reset_ve:    
  252  06:D85D  A9 00         lda #$00
  253  06:D85F  9D 39 03      sta stream_ve_index, x  
  254  06:D862  9D 81 03          sta stream_pe_index, x
  255  06:D865  9D 8D 03          sta stream_pe_delay, x
  256  06:D868  9D 99 03          sta stream_arp_index,x
  257  06:D86B            .update_pointer:
  258  06:D86B  C8            iny
  259  06:D86C  98            tya
  260  06:D86D  18            clc
  261  06:D86E  7D 27 03      adc stream_ptr_LO, x
  262  06:D871  9D 27 03      sta stream_ptr_LO, x
  263  06:D874  90 03         bcc .end
  264  06:D876  FE 2D 03      inc stream_ptr_HI, x
  265  06:D879            .end:
  266  06:D879  60            rts
  267                     
  268  06:D87A            se_do_noise:
  269  06:D87A  AD 02 03      lda sound_temp2
  270  06:D87D  29 10         and #%00010000
  271  06:D87F  F0 08         beq .mode0
  272  06:D881  AD 02 03      lda sound_temp2
  273  06:D884  09 80         ora #%10000000      ;set bit 7 to set mode1
  274  06:D886  8D 02 03      sta sound_temp2
  275  06:D889            .mode0:
  276  06:D889  AD 02 03      lda sound_temp2
  277  06:D88C  9D 4B 03      sta stream_note_LO, x
  278  06:D88F  60            rts
  279                     ;--------------------------------------------------
  280                     ; se_check_rest will read a byte from the data stream and
  281                     ;       determine if it is a rest or not.  It will set or clear the current
  282                     ;       stream's rest flag accordingly.
  283                     ;       input:
  284                     ;           X: stream number
  285                     ;           Y: data stream index
  286  06:D890            se_check_rest:
  287  06:D890  B1 D2         lda [sound_ptr], y  ;read the note byte again
  288  06:D892  C9 5E         cmp #rest
  289  06:D894  D0 07         bne .not_rest
  290  06:D896  BD 1B 03      lda stream_status, x
  291  06:D899  09 02         ora #%00000010  ;set the rest bit in the status byte
  292  06:D89B  D0 05         bne .store  ;this will always branch.  bne is cheaper than a jmp.
  293  06:D89D            .not_rest:
  294  06:D89D  BD 1B 03      lda stream_status, x
  295  06:D8A0  29 FD         and #%11111101  ;clear the rest bit in the status byte
  296  06:D8A2            .store:
  297  06:D8A2  9D 1B 03      sta stream_status, x
  298  06:D8A5  60            rts
  299                         
  300                     ;-----------------------------------------
  301                     ; se_opcode_launcher will read an address from the opcode jump table and indirect jump there.
  302                     ;    input: A: opcode byte
  303                     ;               Y: data stream position
  304                     ;               X: stream number
  305  06:D8A6            se_opcode_launcher:
  306  06:D8A6  8C 01 03      sty sound_temp1         ;save y register, because we are about to destroy it
  307  06:D8A9  38            sec
  308  06:D8AA  E9 A0         sbc #$A0                ;turn our opcode byte into a table index by subtracting $A0
  309  06:D8AC  0A            asl a                   ;multiply by 2 because we index into a table of addresses (words)
  310  06:D8AD  A8            tay
  311  06:D8AE  B9 CB DA      lda sound_opcodes, y    ;get low byte of subroutine address
  312  06:D8B1  8D D4 00      sta sound_ptr2
  313  06:D8B4  B9 CC DA      lda sound_opcodes+1, y  ;get high byte
  314  06:D8B7  8D D5 00      sta sound_ptr2+1
  315  06:D8BA  AC 01 03      ldy sound_temp1         ;restore our y register
  316  06:D8BD  C8            iny                     ;set to next position in data stream (assume an argument)
  317  06:D8BE  6C D4 00      jmp [sound_ptr2]           ;indirect jump to our opcode subroutine    
  318                         
  319                     ;----------------------------------------------------
  320                     ; se_set_temp_ports will copy a stream's sound data to the temporary apu variables
  321                     ;      input:
  322                     ;           X: stream number
  323  06:D8C1            se_set_temp_ports:
  324  06:D8C1  BD 21 03      lda stream_channel, x
  325  06:D8C4  0A            asl a
  326  06:D8C5  0A            asl a
  327  06:D8C6  A8            tay
  328                         
  329  06:D8C7  20 EA D8      jsr se_set_stream_volume
  330                             
  331                         
  332  06:D8CA  A9 08         lda #$08
  333  06:D8CC  99 06 03      sta soft_apu_ports+1, y     ;sweep
  334                         
  335                             
  336  06:D8CF  BD 93 03          LDA stream_arp, x
  337  06:D8D2  F0 06             BEQ .updatePitch
  338                             
  339  06:D8D4  20 46 D9          JSR se_set_stream_arpeggio
  340  06:D8D7  4C E9 D8          JMP .leaveTempSet
  341                             
  342  06:D8DA            .updatePitch:
  343  06:D8DA  BD 4B 03      lda stream_note_LO, x
  344  06:D8DD  99 07 03      sta soft_apu_ports+2, y     ;period LO
  345                         
  346  06:D8E0  BD 51 03      lda stream_note_HI, x
  347  06:D8E3  99 08 03      sta soft_apu_ports+3, y     ;period HI
  348                             
  349                     
  350  06:D8E6  20 9E D9          jsr se_set_stream_pitch
  351                     
  352  06:D8E9            .leaveTempSet:
  353  06:D8E9  60            rts    
  354                     
  355                     ;----------------------------------
  356                     ;    
  357  06:D8EA            se_set_stream_volume:
  358  06:D8EA  8C 01 03      sty sound_temp1             ;save our index into soft_apu_ports (we are about to destroy y)
  359                         
  360  06:D8ED  BD 33 03      lda stream_ve, x            ;which volume envelope?
  361  06:D8F0  0A            asl a                       ;multiply by 2 because we are indexing into a table of addresses (words)
  362  06:D8F1  A8            tay
  363  06:D8F2  B9 4F DC      lda volume_envelopes, y     ;get the low byte of the address from the pointer table
  364  06:D8F5  8D D2 00      sta sound_ptr               ;put it into our pointer variable
  365  06:D8F8  B9 50 DC      lda volume_envelopes+1, y   ;get the high byte of the address
  366  06:D8FB  8D D3 00      sta sound_ptr+1
  367                         
  368  06:D8FE            .read_ve:
  369  06:D8FE  BC 39 03      ldy stream_ve_index, x      ;our current position within the volume envelope.
  370  06:D901  B1 D2         lda [sound_ptr], y          ;grab the value.
  371  06:D903  C9 FF         cmp #$FF
  372  06:D905  D0 06         bne .set_vol                ;if not FF, set the volume
  373  06:D907  DE 39 03      dec stream_ve_index, x      ;else if FF, go back one and read again
  374  06:D90A  4C FE D8      jmp .read_ve                ;  FF essentially tells us to repeat the last
  375                                                     ;  volume value for the remainder of the note
  376  06:D90D            .set_vol:
  377  06:D90D  8D 02 03      sta sound_temp2             ;save our new volume value (about to destroy A)
  378                         
  379  06:D910  E0 02         cpx #TRIANGLE               
  380  06:D912  D0 09         bne .squares                ;if not triangle channel, go ahead
  381  06:D914  AD 02 03      lda sound_temp2
  382  06:D917  D0 04         bne .squares                ;else if volume not zero, go ahead (treat same as squares)
  383  06:D919  A9 80         lda #$80
  384  06:D91B  30 08         bmi .store_vol              ;else silence the channel with #$80
  385  06:D91D            .squares:
  386  06:D91D  BD 3F 03      lda stream_vol_duty, x      ;get current vol/duty settings
  387  06:D920  29 F0         and #$F0                    ;zero out the old volume
  388  06:D922  0D 02 03      ora sound_temp2             ;OR our new volume in.
  389                     
  390  06:D925            .store_vol:
  391  06:D925  AC 01 03      ldy sound_temp1             ;get our index into soft_apu_ports
  392  06:D928  99 05 03      sta soft_apu_ports, y       ;store the volume in our temp port
  393  06:D92B  FE 39 03      inc stream_ve_index, x      ;set our volume envelop index to the next position
  394                     
  395  06:D92E            .rest_check:
  396                         ;check the rest flag. if set, overwrite volume with silence value 
  397  06:D92E  BD 1B 03      lda stream_status, x
  398  06:D931  29 02         and #%00000010
  399  06:D933  F0 10         beq .done                   ;if clear, no rest, so quit
  400  06:D935  BD 21 03      lda stream_channel, x
  401  06:D938  C9 02         cmp #TRIANGLE               ;if triangle, silence with #$80
  402  06:D93A  F0 04         beq .tri                    ;else, silence with #$30
  403  06:D93C  A9 30         lda #$30        
  404  06:D93E  D0 02         bne .store                  ;this always branches.  bne is cheaper than a jmp
  405  06:D940            .tri:
  406  06:D940  A9 80         lda #$80
  407  06:D942            .store:    
  408  06:D942  99 05 03      sta soft_apu_ports, y
  409  06:D945            .done:
  410  06:D945  60            rts   
  411                             
  412                     ;---------------------------------------
  413                     ;
  414  06:D946            se_set_stream_arpeggio:
  415                         
  416  06:D946  BD 1B 03          lda stream_status, x
  417  06:D949  29 02         and #%00000010
  418  06:D94B  F0 01             beq .continue
  419  06:D94D  60                rts
  420                             
  421  06:D94E            .continue:
  422  06:D94E  8C 01 03      sty sound_temp1             ;save our index into soft_apu_ports (we are about to destroy y)
  423                         
  424  06:D951  BD 93 03      lda stream_arp, x            ;which volume envelope?
  425  06:D954  0A            asl a                       ;multiply by 2 because we are indexing into a table of addresses (words)
  426  06:D955  A8            tay
  427  06:D956  B9 8C DD      lda arpeggios, y     ;get the low byte of the address from the pointer table
  428  06:D959  8D D2 00      sta sound_ptr               ;put it into our pointer variable
  429  06:D95C  B9 8D DD      lda arpeggios+1, y   ;get the high byte of the address
  430  06:D95F  8D D3 00      sta sound_ptr+1
  431                         
  432  06:D962            .read_arp:
  433  06:D962  BC 99 03      ldy stream_arp_index, x      ;our current position within the volume envelope.
  434  06:D965  B1 D2         lda [sound_ptr], y          ;grab the value.
  435  06:D967  C9 FF         cmp #$FF
  436  06:D969  D0 08         bne .set_arp                ;if not FF, set the volume
  437  06:D96B  A9 00             LDA #$00
  438  06:D96D  9D 99 03      STA stream_arp_index, x      ;else if FF, go back one and read again
  439  06:D970  4C 62 D9      jmp .read_arp                ;  FF essentially tells us to repeat the last
  440                                                     ;  volume value for the remainder of the note
  441  06:D973            .set_arp:
  442  06:D973  8D 02 03      STA sound_temp2             ;save our new volume value (about to destroy A)
  443  06:D976  BD 45 03          LDA stream_note_idx, x
  444  06:D979  18                CLC
  445  06:D97A  6D 02 03          ADC sound_temp2
  446  06:D97D  8D 02 03          STA sound_temp2
  447                             
  448                             
  449  06:D980  AC 01 03          LDY sound_temp1
  450  06:D983  8E 01 03          STX sound_temp1
  451  06:D986  AA                TAX 
  452                     
  453  06:D987  BD 7E DB          LDA note_table, x
  454  06:D98A  99 07 03          STA soft_apu_ports+2, y
  455  06:D98D  BD 7F DB          LDA note_table+1, x
  456  06:D990  99 08 03          STA soft_apu_ports+3, y
  457                             
  458  06:D993  AE 01 03          LDX sound_temp1
  459                             
  460  06:D996  FE 99 03      inc stream_arp_index, x      ;set our volume envelop index to the next position
  461                             
  462  06:D999  98                TYA
  463  06:D99A  8D 01 03          STA sound_temp1
  464                     
  465  06:D99D  60            rts 
  466                     ;--------------------------------------
  467                     ;
  468  06:D99E            se_set_stream_pitch:
  469  06:D99E  8C 01 03      sty sound_temp1             ;save our index into soft_apu_ports (we are about to destroy y)
  470                         
  471  06:D9A1  BD 7B 03      lda stream_pe, x            ;which volume envelope?
  472  06:D9A4  0A            asl a                       ;multiply by 2 because we are indexing into a table of addresses (words)
  473  06:D9A5  A8            tay
  474  06:D9A6  B9 51 DD      lda pitch_envelopes, y     ;get the low byte of the address from the pointer table
  475  06:D9A9  8D D2 00      sta sound_ptr               ;put it into our pointer variable
  476  06:D9AC  B9 52 DD      lda pitch_envelopes+1, y   ;get the high byte of the address
  477  06:D9AF  8D D3 00      sta sound_ptr+1
  478                             
  479  06:D9B2  BD 8D 03          LDA stream_pe_delay, x
  480                             ;if not 0, decrement
  481  06:D9B5  29 7F             AND #$7F                        ;check if, without minus flag, the delay is 0
  482  06:D9B7  F0 04             BEQ .read_pe
  483  06:D9B9  DE 8D 03          DEC stream_pe_delay, x
  484  06:D9BC  60                RTS
  485                         
  486  06:D9BD            .read_pe:
  487  06:D9BD  BC 81 03      ldy stream_pe_index, x      ;our current position within the volume envelope.
  488  06:D9C0  B1 D2         lda [sound_ptr], y          ;grab the value.
  489  06:D9C2  C9 80         cmp #pe_loopLast
  490  06:D9C4  D0 06             BNE .notLoopLast
  491  06:D9C6  DE 81 03          dec stream_pe_index, x      ;else if loop last, go back one and read again
  492  06:D9C9  4C BD D9          jmp .read_pe 
  493                     
  494  06:D9CC            .notLoopLast:
  495  06:D9CC  C9 81             cmp #pe_loopAll
  496  06:D9CE  D0 08             BNE .notLoopAll
  497  06:D9D0  A9 00             LDA #$00
  498  06:D9D2  9D 81 03          STA stream_pe_index, x
  499  06:D9D5  4C BD D9          jmp .read_pe
  500                             
  501  06:D9D8            .notLoopAll:
  502  06:D9D8  C9 82             cmp #pe_loopPart
  503  06:D9DA  D0 0D             BNE .notLoopPart
  504  06:D9DC  C8                iny
  505  06:D9DD  BD 81 03          lda stream_pe_index, x
  506  06:D9E0  38                SEC
  507  06:D9E1  F1 D2             SBC [sound_ptr], y
  508  06:D9E3  9D 81 03          STA stream_pe_index, x
  509  06:D9E6  4C BD D9          jmp .read_pe
  510                     
  511  06:D9E9            .notLoopPart:
  512  06:D9E9  C9 83             cmp #pe_delay
  513  06:D9EB  D0 1C             BNE .notLoopDelay
  514  06:D9ED  BD 8D 03          LDA stream_pe_delay, x
  515  06:D9F0  30 0E             BMI .delayUsed  ;negative, delay was already used this time
  516  06:D9F2  C8                iny
  517  06:D9F3  B1 D2             lda [sound_ptr], y
  518  06:D9F5  09 80             ORA #$80
  519  06:D9F7  9D 8D 03          STA stream_pe_delay, x
  520  06:D9FA  FE 81 03          inc stream_pe_index, x
  521  06:D9FD  4C 46 DA          jmp .finish_pitchShift
  522  06:DA00            .delayUsed:
  523  06:DA00  FE 81 03          inc stream_pe_index, x
  524  06:DA03  FE 81 03          inc stream_pe_index, x
  525  06:DA06  4C BD D9          jmp .read_pe
  526                             
  527  06:DA09            .notLoopDelay:
  528  06:DA09            .set_pitch:
  529                     
  530  06:DA09  9D 87 03      sta stream_pe_offset, x      ;get current vol/duty settings
  531  06:DA0C  8D 02 03          STA sound_temp2
  532  06:DA0F  AC 01 03          LDY sound_temp1
  533  06:DA12  AD 02 03          LDA sound_temp2
  534  06:DA15  10 1D             BPL .add_pitch
  535                             
  536  06:DA17            .sub_pitch:
  537                             
  538  06:DA17  49 FF             EOR #$FF        ;flip bits
  539  06:DA19  18                CLC
  540  06:DA1A  69 01             ADC #$01        ;add one - two's compliment
  541  06:DA1C  8D 02 03          STA sound_temp2
  542                             
  543  06:DA1F  B9 07 03          LDA soft_apu_ports+2, y       
  544  06:DA22  38                SEC
  545  06:DA23  ED 02 03          SBC sound_temp2
  546  06:DA26  99 07 03          STA soft_apu_ports+2, y
  547  06:DA29  B9 08 03          LDA soft_apu_ports+3, y
  548  06:DA2C  E9 00             SBC #$00
  549  06:DA2E  99 08 03          STA soft_apu_ports+3, y
  550                             
  551  06:DA31  4C 46 DA          JMP .finish_pitchShift
  552                     
  553  06:DA34            .add_pitch:
  554                     
  555  06:DA34  B9 07 03      LDA soft_apu_ports+2, y       
  556  06:DA37  18                CLC
  557  06:DA38  6D 02 03          ADC sound_temp2
  558  06:DA3B  99 07 03          STA soft_apu_ports+2, y
  559  06:DA3E  B9 08 03          LDA soft_apu_ports+3, y
  560  06:DA41  69 00             ADC #$00
  561  06:DA43  99 08 03          STA soft_apu_ports+3, y
  562                             
  563  06:DA46            .finish_pitchShift:
  564  06:DA46  FE 81 03      inc stream_pe_index, x      ;set our volume envelop index to the next position
  565                     
  566  06:DA49            .rest_check:
  567                         ;check the rest flag. if set, overwrite volume with silence value 
  568  06:DA49  BD 1B 03      lda stream_status, x
  569  06:DA4C  29 02         and #%00000010
  570  06:DA4E  F0 05         beq .done                   ;if clear, no rest, so quit
  571                        
  572  06:DA50  A9 00         LDA #$00
  573  06:DA52  9D 87 03          STA stream_pe_offset, x
  574  06:DA55            .done:
  575  06:DA55  60            rts    
  576                     
  577                     ;--------------------------
  578                     ; se_set_apu copies the temporary RAM ports to the APU ports
  579  06:DA56            se_set_apu:
  580  06:DA56            .square1:
  581  06:DA56  AD 05 03      lda soft_apu_ports+0
  582  06:DA59  8D 00 40      sta $4000
  583  06:DA5C  AD 06 03      lda soft_apu_ports+1
  584  06:DA5F  8D 01 40      sta $4001
  585  06:DA62  AD 07 03      lda soft_apu_ports+2
  586  06:DA65  8D 02 40      sta $4002
  587  06:DA68  AD 08 03      lda soft_apu_ports+3
  588  06:DA6B  CD 03 03      cmp sound_sq1_old       ;compare to last write
  589  06:DA6E  F0 06         beq .square2            ;don't write this frame if they were equal
  590  06:DA70  8D 03 40      sta $4003
  591  06:DA73  8D 03 03      sta sound_sq1_old       ;save the value we just wrote to $4003
  592  06:DA76            .square2:
  593  06:DA76  AD 09 03      lda soft_apu_ports+4
  594  06:DA79  8D 04 40      sta $4004
  595  06:DA7C  AD 0A 03      lda soft_apu_ports+5
  596  06:DA7F  8D 05 40      sta $4005
  597  06:DA82  AD 0B 03      lda soft_apu_ports+6
  598  06:DA85  8D 06 40      sta $4006
  599  06:DA88  AD 0C 03      lda soft_apu_ports+7
  600  06:DA8B  CD 04 03      cmp sound_sq2_old
  601  06:DA8E  F0 06         beq .triangle
  602  06:DA90  8D 07 40      sta $4007
  603  06:DA93  8D 04 03      sta sound_sq2_old       ;save the value we just wrote to $4007
  604  06:DA96            .triangle:
  605  06:DA96  AD 0D 03      lda soft_apu_ports+8
  606  06:DA99  8D 08 40      sta $4008
  607  06:DA9C  AD 0F 03      lda soft_apu_ports+10   ;there is no $4009, so we skip it
  608  06:DA9F  8D 0A 40      sta $400A
  609  06:DAA2  AD 10 03      lda soft_apu_ports+11
  610  06:DAA5  8D 0B 40      sta $400B
  611  06:DAA8            .noise:
  612  06:DAA8  AD 11 03      lda soft_apu_ports+12
  613  06:DAAB  8D 0C 40      sta $400C
  614  06:DAAE  AD 13 03      lda soft_apu_ports+14   ;there is no $400D, so we skip it
  615  06:DAB1  8D 0E 40      sta $400E
  616  06:DAB4  AD 14 03      lda soft_apu_ports+15
  617  06:DAB7  8D 0F 40      sta $400F
  618  06:DABA  60            rts
  619                         
  620                         
  621           0009      NUM_SONGS = $09 ;if you add a new song, change this number.    
  622                                     ;the main asm file checks this number in its song_up and song_down subroutines
  623                                     ;to determine when to wrap around.
  624                     
  625                     ;this is our pointer table.  Each entry is a pointer to a song header                
  626  06:DABB            song_headers:
  627                             
  628  06:DABB  97 DD         .word song0_header
  629  06:DABD  D8 A0             .word $A0D8
  630  06:DABF  A4 DD             .word menu_header
  631  06:DAC1  A7 DD         .word drawImg_header  ;The Guardian Legend Boss song
  632  06:DAC3  AA DD             .word endScreen_header
  633  06:DAC5  42 DE             .word menuCursor_header
  634  06:DAC7  4E DE             .word puzzleCursor_header
  635  06:DAC9  5A DE             .word noiseBlip_header
  636                     
  637                         
#[3]   External/sound_opcodes.asm
  638                         .include "External/sound_opcodes.asm"    ;our opcode subroutines, jump table and aliases
    1                     ;these are aliases to use in the sound data.
    2           00A0      endsound = $A0
    3           00A1      loop = $A1
    4           00A2      volume_envelope = $A2
    5           00A3      duty = $A3
    6           00A4      set_loop1_counter = $A4
    7           00A5      loop1 = $A5
    8           00A6      set_note_offset = $A6
    9           00A7      adjust_note_offset = $A7
   10           00A8      transpose = $A8
   11           00A9      pitch_envelope = $A9
   12           00AA      arpeggio = $AA
   13                     
   14                     ;-----------------------------------------------------------------------
   15                     ;this is our JUMP TABLE!
   16  06:DACB            sound_opcodes:
   17  06:DACB  E1 DA         .word se_op_endsound            ;$A0
   18  06:DACD  FA DA         .word se_op_infinite_loop       ;$A1
   19  06:DACF  11 DB         .word se_op_change_ve           ;$A2
   20  06:DAD1  1C DB         .word se_op_duty                ;$A3
   21  06:DAD3  22 DB         .word se_op_set_loop1_counter   ;$A4
   22  06:DAD5  28 DB         .word se_op_loop1               ;$A5
   23  06:DAD7  35 DB         .word se_op_set_note_offset     ;$A6
   24  06:DAD9  3B DB         .word se_op_adjust_note_offset  ;$A7
   25  06:DADB  45 DB         .word se_op_transpose           ;$A8
   26  06:DADD  65 DB             .word se_op_change_pe                   ;$A9
   27  06:DADF  73 DB             .word se_op_change_arp
   28                         ;etc, 1 entry per subroutine
   29                     
   30                         
   31                     ;-----------------------------------------------------------------
   32                     ; these are the actual opcode subroutines
   33  06:DAE1            se_op_endsound:
   34  06:DAE1  BD 1B 03      lda stream_status, x    ;end of stream, so disable it and silence
   35  06:DAE4  29 FE         and #%11111110
   36  06:DAE6  9D 1B 03      sta stream_status, x    ;clear enable flag in status byte
   37                         
   38  06:DAE9  BD 21 03      lda stream_channel, x
   39  06:DAEC  C9 02         cmp #TRIANGLE
   40  06:DAEE  F0 04         beq .silence_tri        ;triangle is silenced differently from squares and noise
   41  06:DAF0  A9 30         lda #$30                ;squares and noise silenced with #$30
   42  06:DAF2  D0 02         bne .silence            ; (this will always branch.  bne is cheaper than a jmp)
   43  06:DAF4            .silence_tri:
   44  06:DAF4  A9 80         lda #$80                ;triangle silenced with #$80
   45  06:DAF6            .silence:
   46  06:DAF6  9D 3F 03      sta stream_vol_duty, x  ;store silence value in the stream's volume variable.
   47                     
   48  06:DAF9  60            rts
   49                         
   50  06:DAFA            se_op_infinite_loop:
   51  06:DAFA  B1 D2         lda [sound_ptr], y      ;read ptr LO from the data stream
   52  06:DAFC  9D 27 03      sta stream_ptr_LO, x    ;update our data stream position
   53  06:DAFF  C8            iny
   54  06:DB00  B1 D2         lda [sound_ptr], y      ;read ptr HI from the data stream
   55  06:DB02  9D 2D 03      sta stream_ptr_HI, x    ;update our data stream position
   56                         
   57  06:DB05  8D D3 00      sta sound_ptr+1         ;update the pointer to reflect the new position.
   58  06:DB08  BD 27 03      lda stream_ptr_LO, x
   59  06:DB0B  8D D2 00      sta sound_ptr
   60  06:DB0E  A0 FF         ldy #$FF                ;after opcodes return, we do an iny.  Since we reset  
   61                                                 ;the stream buffer position, we will want y to start out at 0 again.
   62  06:DB10  60            rts
   63                         
   64  06:DB11            se_op_change_ve:
   65  06:DB11  B1 D2         lda [sound_ptr], y      ;read the argument
   66  06:DB13  9D 33 03      sta stream_ve, x        ;store it in our volume envelope variable
   67  06:DB16  A9 00         lda #$00
   68  06:DB18  9D 39 03      sta stream_ve_index, x  ;reset volume envelope index to the beginning
   69  06:DB1B  60            rts
   70                         
   71  06:DB1C            se_op_duty:
   72  06:DB1C  B1 D2         lda [sound_ptr], y
   73  06:DB1E  9D 3F 03      sta stream_vol_duty, x
   74  06:DB21  60            rts
   75                         
   76  06:DB22            se_op_set_loop1_counter:
   77  06:DB22  B1 D2         lda [sound_ptr], y      ;read the argument (# times to loop)
   78  06:DB24  9D 6F 03      sta stream_loop1, x     ;store it in the loop counter variable
   79  06:DB27  60            rts
   80                         
   81  06:DB28            se_op_loop1:
   82  06:DB28  DE 6F 03      dec stream_loop1, x     ;decrement the counter
   83  06:DB2B  BD 6F 03      lda stream_loop1, x
   84  06:DB2E  F0 03         beq .last_iteration     ;if zero, we are done looping
   85  06:DB30  4C FA DA      jmp se_op_infinite_loop ;if not zero, jump back
   86  06:DB33            .last_iteration:
   87  06:DB33  C8            iny                     ;skip the first byte of the address argument
   88                                                 ; the second byte will be skipped automatically upon return
   89                                                 ; (see se_fetch_byte after "jsr se_opcode_launcher")
   90  06:DB34  60            rts
   91                         
   92  06:DB35            se_op_set_note_offset:
   93  06:DB35  B1 D2         lda [sound_ptr], y          ;read the argument
   94  06:DB37  9D 75 03      sta stream_note_offset, x      ;set the note offset.
   95  06:DB3A  60            rts
   96                         
   97  06:DB3B            se_op_adjust_note_offset:
   98  06:DB3B  B1 D2         lda [sound_ptr], y          ;read the argument (what value to add)
   99  06:DB3D  18            clc
  100  06:DB3E  7D 75 03      adc stream_note_offset, x   ;add it to the current offset
  101  06:DB41  9D 75 03      sta stream_note_offset, x   ;and save.
  102  06:DB44  60            rts
  103                         
  104  06:DB45            se_op_transpose:
  105  06:DB45  B1 D2         lda [sound_ptr], y          ;read low byte of the pointer to our lookup table
  106  06:DB47  8D D4 00      sta sound_ptr2              ;store it in a new pointer variable
  107  06:DB4A  C8            iny
  108  06:DB4B  B1 D2         lda [sound_ptr], y          ;read high byte of pointer to table
  109  06:DB4D  8D D5 00      sta sound_ptr2+1
  110                         
  111  06:DB50  8C 01 03      sty sound_temp1             ;save y because we are about to destroy it
  112  06:DB53  BD 6F 03      lda stream_loop1, x         ;get loop counter, put it in Y
  113  06:DB56  A8            tay                         ;   this will be our index into the lookup table
  114  06:DB57  88            dey                         ;subtract 1 because indexes start from 0.
  115                         
  116  06:DB58  B1 D4         lda [sound_ptr2], y         ;read a value from the table.
  117  06:DB5A  18            clc
  118  06:DB5B  7D 75 03      adc stream_note_offset, x   ;add it to the note offset
  119  06:DB5E  9D 75 03      sta stream_note_offset, x
  120                         
  121  06:DB61  AC 01 03      ldy sound_temp1             ;restore Y
  122  06:DB64  60            rts
  123                             
  124  06:DB65            se_op_change_pe:
  125  06:DB65  B1 D2         lda [sound_ptr], y      ;read the argument
  126  06:DB67  9D 7B 03      sta stream_pe, x        ;store it in our volume envelope variable
  127  06:DB6A  A9 00         lda #$00
  128  06:DB6C  9D 81 03      sta stream_pe_index, x  ;reset volume envelope index to the beginning
  129  06:DB6F  9D 8D 03          sta stream_pe_delay, x
  130  06:DB72  60            rts
  131                             
  132  06:DB73            se_op_change_arp:
  133  06:DB73  B1 D2             lda [sound_ptr], y
  134  06:DB75  9D 93 03          sta stream_arp, x
  135  06:DB78  A9 00             lda #$00
  136  06:DB7A  9D 99 03          sta stream_arp_index, x
  137  06:DB7D  60                rts
#[2]   External/sound_engine.asm
#[3]   External/note_table.i
  639                         .include "External/note_table.i" ;period lookup table for notes
    1                     ;NTSC Period Lookup Table.  Thanks Celius!
    2                     ;http://www.freewebs.com/the_bott/NotesTableNTSC.txt
    3  06:DB7E            note_table:
    4  06:DB7E  F1 07         .word                                                                $07F1, $0780, $0713 ; A1-B1 ($00-$02)
       06:DB80  80 07     
       06:DB82  13 07     
    5  06:DB84  AD 06         .word $06AD, $064D, $05F3, $059D, $054D, $0500, $04B8, $0475, $0435, $03F8, $03BF, $0389 ; C2-B2 ($03-$0E)
       06:DB86  4D 06     
       06:DB88  F3 05     
       06:DB8A  9D 05     
       06:DB8C  4D 05     
       06:DB8E  00 05     
       06:DB90  B8 04     
       06:DB92  75 04     
       06:DB94  35 04     
       06:DB96  F8 03     
       06:DB98  BF 03     
       06:DB9A  89 03     
    6  06:DB9C  56 03         .word $0356, $0326, $02F9, $02CE, $02A6, $027F, $025C, $023A, $021A, $01FB, $01DF, $01C4 ; C3-B3 ($0F-$1A)
       06:DB9E  26 03     
       06:DBA0  F9 02     
       06:DBA2  CE 02     
       06:DBA4  A6 02     
       06:DBA6  7F 02     
       06:DBA8  5C 02     
       06:DBAA  3A 02     
       06:DBAC  1A 02     
       06:DBAE  FB 01     
       06:DBB0  DF 01     
       06:DBB2  C4 01     
    7  06:DBB4  AB 01         .word $01AB, $0193, $017C, $0167, $0151, $013F, $012D, $011C, $010C, $00FD, $00EF, $00E2 ; C4-B4 ($1B-$26)
       06:DBB6  93 01     
       06:DBB8  7C 01     
       06:DBBA  67 01     
       06:DBBC  51 01     
       06:DBBE  3F 01     
       06:DBC0  2D 01     
       06:DBC2  1C 01     
       06:DBC4  0C 01     
       06:DBC6  FD 00     
       06:DBC8  EF 00     
       06:DBCA  E2 00     
    8  06:DBCC  D2 00         .word $00D2, $00C9, $00BD, $00B3, $00A9, $009F, $0096, $008E, $0086, $007E, $0077, $0070 ; C5-B5 ($27-$32)
       06:DBCE  C9 00     
       06:DBD0  BD 00     
       06:DBD2  B3 00     
       06:DBD4  A9 00     
       06:DBD6  9F 00     
       06:DBD8  96 00     
       06:DBDA  8E 00     
       06:DBDC  86 00     
       06:DBDE  7E 00     
       06:DBE0  77 00     
       06:DBE2  70 00     
    9  06:DBE4  6A 00         .word $006A, $0064, $005E, $0059, $0054, $004F, $004B, $0046, $0042, $003F, $003B, $0038 ; C6-B6 ($33-$3E)
       06:DBE6  64 00     
       06:DBE8  5E 00     
       06:DBEA  59 00     
       06:DBEC  54 00     
       06:DBEE  4F 00     
       06:DBF0  4B 00     
       06:DBF2  46 00     
       06:DBF4  42 00     
       06:DBF6  3F 00     
       06:DBF8  3B 00     
       06:DBFA  38 00     
   10  06:DBFC  34 00         .word $0034, $0031, $002F, $002C, $0029, $0027, $0025, $0023, $0021, $001F, $001D, $001B ; C7-B7 ($3F-$4A)
       06:DBFE  31 00     
       06:DC00  2F 00     
       06:DC02  2C 00     
       06:DC04  29 00     
       06:DC06  27 00     
       06:DC08  25 00     
       06:DC0A  23 00     
       06:DC0C  21 00     
       06:DC0E  1F 00     
       06:DC10  1D 00     
       06:DC12  1B 00     
   11  06:DC14  1A 00         .word $001A, $0018, $0017, $0015, $0014, $0013, $0012, $0011, $0010, $000F, $000E, $000D ; C8-B8 ($4B-$56)
       06:DC16  18 00     
       06:DC18  17 00     
       06:DC1A  15 00     
       06:DC1C  14 00     
       06:DC1E  13 00     
       06:DC20  12 00     
       06:DC22  11 00     
       06:DC24  10 00     
       06:DC26  0F 00     
       06:DC28  0E 00     
       06:DC2A  0D 00     
   12  06:DC2C  0C 00         .word $000C, $000C, $000B, $000A, $000A, $0009, $0008                                    ; C9-F#9 ($57-$5D)
       06:DC2E  0C 00     
       06:DC30  0B 00     
       06:DC32  0A 00     
       06:DC34  0A 00     
       06:DC36  09 00     
       06:DC38  08 00     
   13  06:DC3A  00 00         .word $0000 ;rest
   14                     
   15                     ;Note: octaves in music traditionally start at C, not A    
   16           0000      A1 = $00    ;the "1" means Octave 1
   17           0001      As1 = $01   ;the "s" means "sharp"
   18           0001      Bb1 = $01   ;the "b" means "flat"  A# == Bb, so same value
   19           0002      B1 = $02
   20                     
   21           0003      C2 = $03
   22           0004      Cs2 = $04
   23           0004      Db2 = $04
   24           0005      D2 = $05
   25           0006      Ds2 = $06
   26           0006      Eb2 = $06
   27           0007      E2 = $07
   28           0008      F2 = $08
   29           0009      Fs2 = $09
   30           0009      Gb2 = $09
   31           000A      G2 = $0A
   32           000B      Gs2 = $0B
   33           000B      Ab2 = $0B
   34           000C      A2 = $0C
   35           000D      As2 = $0D
   36           000D      Bb2 = $0D
   37           000E      B2 = $0E
   38                     
   39           000F      C3 = $0F
   40           0010      Cs3 = $10
   41           0010      Db3 = $10
   42           0011      D3 = $11
   43           0012      Ds3 = $12
   44           0012      Eb3 = $12
   45           0013      E3 = $13
   46           0014      F3 = $14
   47           0015      Fs3 = $15
   48           0015      Gb3 = $15
   49           0016      G3 = $16
   50           0017      Gs3 = $17
   51           0017      Ab3 = $17
   52           0018      A3 = $18
   53           0019      As3 = $19
   54           0019      Bb3 = $19
   55           001A      B3 = $1a
   56                     
   57           001B      C4 = $1b
   58           001C      Cs4 = $1c
   59           001C      Db4 = $1c
   60           001D      D4 = $1d
   61           001E      Ds4 = $1e
   62           001E      Eb4 = $1e
   63           001F      E4 = $1f
   64           0020      F4 = $20
   65           0021      Fs4 = $21
   66           0021      Gb4 = $21
   67           0022      G4 = $22
   68           0023      Gs4 = $23
   69           0023      Ab4 = $23
   70           0024      A4 = $24
   71           0025      As4 = $25
   72           0025      Bb4 = $25
   73           0026      B4 = $26
   74                     
   75           0027      C5 = $27
   76           0028      Cs5 = $28
   77           0028      Db5 = $28
   78           0029      D5 = $29
   79           002A      Ds5 = $2a
   80           002A      Eb5 = $2a
   81           002B      E5 = $2b
   82           002C      F5 = $2c
   83           002D      Fs5 = $2d
   84           002D      Gb5 = $2d
   85           002E      G5 = $2e
   86           002F      Gs5 = $2f
   87           002F      Ab5 = $2f
   88           0030      A5 = $30
   89           0031      As5 = $31
   90           0031      Bb5 = $31
   91           0032      B5 = $32
   92                     
   93           0033      C6 = $33
   94           0034      Cs6 = $34
   95           0034      Db6 = $34
   96           0035      D6 = $35
   97           0036      Ds6 = $36
   98           0036      Eb6 = $36
   99           0037      E6 = $37
  100           0038      F6 = $38
  101           0039      Fs6 = $39
  102           0039      Gb6 = $39
  103           003A      G6 = $3a
  104           003B      Gs6 = $3b
  105           003B      Ab6 = $3b
  106           003C      A6 = $3c
  107           003D      As6 = $3d
  108           003D      Bb6 = $3d
  109           003E      B6 = $3e
  110                     
  111           003F      C7 = $3f
  112           0040      Cs7 = $40
  113           0040      Db7 = $40
  114           0041      D7 = $41
  115           0042      Ds7 = $42
  116           0042      Eb7 = $42
  117           0043      E7 = $43
  118           0044      F7 = $44
  119           0045      Fs7 = $45
  120           0045      Gb7 = $45
  121           0046      G7 = $46
  122           0047      Gs7 = $47
  123           0047      Ab7 = $47
  124           0048      A7 = $48
  125           0049      As7 = $49
  126           0049      Bb7 = $49
  127           004A      B7 = $4a
  128                     
  129           004B      C8 = $4b
  130           004C      Cs8 = $4c
  131           004C      Db8 = $4c
  132           004D      D8 = $4d
  133           004E      Ds8 = $4e
  134           004E      Eb8 = $4e
  135           004F      E8 = $4f
  136           0050      F8 = $50
  137           0051      Fs8 = $51
  138           0051      Gb8 = $51
  139           0052      G8 = $52
  140           0053      Gs8 = $53
  141           0053      Ab8 = $53
  142           0054      A8 = $54
  143           0055      As8 = $55
  144           0055      Bb8 = $55
  145           0056      B8 = $56
  146                     
  147           0057      C9 = $57
  148           0058      Cs9 = $58
  149           0058      Db9 = $58
  150           0059      D9 = $59
  151           005A      Ds9 = $5a
  152           005A      Eb9 = $5a
  153           005B      E9 = $5b
  154           005C      F9 = $5c
  155           005D      Fs9 = $5d
  156           005D      Gb9 = $5d
  157                     
  158           005E      rest = $5e
#[2]   External/sound_engine.asm
#[3]   External/note_length_table.i
  640                         .include "External/note_length_table.i"
    1                     ;note length constants (aliases)
    2           0080      thirtysecond = $80
    3           0081      sixteenth = $81
    4           0082      eighth = $82
    5           0083      quarter = $83
    6           0084      half = $84
    7           0085      whole = $85
    8           0086      d_sixteenth = $86
    9           0087      d_eighth = $87
   10           0088      d_quarter = $88
   11           0089      d_half = $89
   12           008A      d_whole = $8A   ;don't forget we are counting in hex
   13           008B      t_quarter = $8B
   14           008C      five_eighths =$8C
   15           008D      five_sixteenths=$8D
   16           008E      d_half_d_eight = $8E
   17           008F      whole_quarter_sixteenth = $8F
   18           0090      d_half_eighth = $90
   19           0091      whole_sixteenth = $91
   20           0092      sixtyfourth = $92
   21                     
   22                     
   23  06:DC3C            note_length_table:
   24  06:DC3C  01            .byte $01   ;32nd note
   25  06:DC3D  02            .byte $02   ;16th note
   26  06:DC3E  04            .byte $04   ;8th note
   27  06:DC3F  08            .byte $08   ;quarter note
   28  06:DC40  10            .byte $10   ;half note
   29  06:DC41  20            .byte $20   ;whole note
   30                                   ;---dotted notes
   31  06:DC42  03            .byte $03   ;dotted 16th note
   32  06:DC43  06            .byte $06   ;dotted 8th note
   33  06:DC44  0C            .byte $0C   ;dotted quarter note
   34  06:DC45  18            .byte $18   ;dotted half note
   35  06:DC46  30            .byte $30   ;dotted whole note?
   36                                   ;---other
   37  06:DC47  07            .byte $07   ;modified quarter to fit after d_sixteenth triplets
   38  06:DC48  14            .byte $14   ;2 quarters plus an 8th
   39  06:DC49  0A            .byte $0A   
   40  06:DC4A  1E                .byte $1E       ;dotted half + dotted eighth
   41  06:DC4B  2A                .byte $2A
   42  06:DC4C  1C                .byte $1C
   43  06:DC4D  22                .byte $22
   44  06:DC4E  00                .byte $00
#[2]   External/sound_engine.asm
#[3]   External/vol_envelopes.i
  641                         .include "External/vol_envelopes.i"
    1  06:DC4F            volume_envelopes:
    2  06:DC4F  6D DC         .word se_ve_1
    3  06:DC51  75 DC         .word se_ve_2
    4  06:DC53  8C DC         .word se_ve_3
    5  06:DC55  AF DC         .word se_ve_tgl_1
    6  06:DC57  B7 DC         .word se_ve_tgl_2
    7  06:DC59  C2 DC         .word se_battlekid_loud
    8  06:DC5B  C8 DC         .word se_battlekid_loud_long
    9  06:DC5D  CE DC         .word se_battlekid_soft
   10  06:DC5F  D4 DC         .word se_battlekid_soft_long
   11  06:DC61  DA DC         .word se_drum_decay
   12  06:DC63  E4 DC             .word se_hiHat_decay
   13  06:DC65  E9 DC             .word se_long_decay
   14  06:DC67  1C DD             .word se_tinyDecy
   15  06:DC69  1F DD             .word se_noDecay
   16  06:DC6B  21 DD             .word se_long_tremelo
   17                         
   18  06:DC6D            se_ve_1:
   19  06:DC6D  0F 0E 0D      .byte $0F, $0E, $0D, $0C, $09, $05, $00
       06:DC70  0C 09 05  
       06:DC73  00        
   20  06:DC74  FF            .byte $FF
   21  06:DC75            se_ve_2:
   22  06:DC75  01 01 02      .byte $01, $01, $02, $02, $03, $03, $04, $04, $07, $07
       06:DC78  02 03 03  
       06:DC7B  04 04 07  
       06:DC7E  07        
   23  06:DC7F  08 08 0A      .byte $08, $08, $0A, $0A, $0C, $0C, $0D, $0D, $0E, $0E
       06:DC82  0A 0C 0C  
       06:DC85  0D 0D 0E  
       06:DC88  0E        
   24  06:DC89  0F 0F         .byte $0F, $0F
   25  06:DC8B  FF            .byte $FF
   26  06:DC8C            se_ve_3:
   27  06:DC8C  0D 0D 0D      .byte $0D, $0D, $0D, $0C, $0B, $00, $00, $00, $00, $00
       06:DC8F  0C 0B 00  
       06:DC92  00 00 00  
       06:DC95  00        
   28  06:DC96  00 00 00      .byte $00, $00, $00, $00, $06, $06, $06, $05, $04, $00
       06:DC99  00 06 06  
       06:DC9C  06 05 04  
       06:DC9F  00        
   29  06:DCA0  00 00 00          .byte $00, $00, $00, $00, $00, $00, $00, $00, $03, $03
       06:DCA3  00 00 00  
       06:DCA6  00 00 03  
       06:DCA9  03        
   30  06:DCAA  03 02 01          .byte $03, $02, $01, $00
       06:DCAD  00        
   31  06:DCAE  FF            .byte $FF
   32                         
   33  06:DCAF            se_ve_tgl_1:
   34  06:DCAF  0F 0B 09      .byte $0F, $0B, $09, $08, $07, $06, $00
       06:DCB2  08 07 06  
       06:DCB5  00        
   35  06:DCB6  FF            .byte $FF
   36                         
   37  06:DCB7            se_ve_tgl_2:
   38  06:DCB7  0B 0B 0A      .byte $0B, $0B, $0A, $09, $08, $07, $06, $06, $06, $05
       06:DCBA  09 08 07  
       06:DCBD  06 06 06  
       06:DCC0  05        
   39  06:DCC1  FF            .byte $FF
   40                         
   41                         
   42  06:DCC2            se_battlekid_loud:
   43  06:DCC2  0F 0E 0C      .byte $0f, $0e, $0c, $0a, $00
       06:DCC5  0A 00     
   44  06:DCC7  FF            .byte $FF
   45                         
   46  06:DCC8            se_battlekid_loud_long:
   47  06:DCC8  0F 0E 0C      .byte $0f, $0e, $0c, $0a, $09
       06:DCCB  0A 09     
   48  06:DCCD  FF            .byte $FF
   49                         
   50  06:DCCE            se_battlekid_soft:
   51  06:DCCE  09 08 06      .byte $09, $08, $06, $04, $00
       06:DCD1  04 00     
   52  06:DCD3  FF            .byte $FF
   53                         
   54  06:DCD4            se_battlekid_soft_long:
   55  06:DCD4  09 08 06      .byte $09, $08, $06, $04, $03
       06:DCD7  04 03     
   56  06:DCD9  FF            .byte $FF
   57                         
   58  06:DCDA            se_drum_decay:
   59  06:DCDA  0E 09 08      .byte $0E, $09, $08, $06, $04, $03, $02, $01, $00
       06:DCDD  06 04 03  
       06:DCE0  02 01 00  
   60  06:DCE3  FF            .byte $FF
   61                             
   62  06:DCE4            se_hiHat_decay:
   63  06:DCE4  0E 06 02      .byte $0E, $06, $02, $00
       06:DCE7  00        
   64  06:DCE8  FF                .byte $FF
   65                         
   66  06:DCE9            se_long_decay:
   67                             ;attack
   68  06:DCE9  0E            .byte $0E
   69                             ;decay
   70  06:DCEA  0F 0F 0F          .byte $0F, $0F, $0F, $0E, $0E, $0E, $0D, $0D, $0D
       06:DCED  0E 0E 0E  
       06:DCF0  0D 0D 0D  
   71  06:DCF3  0C 0C 0C          .byte $0C, $0C, $0C, $0B, $0B, $0B, $0A, $0A, $0A
       06:DCF6  0B 0B 0B  
       06:DCF9  0A 0A 0A  
   72  06:DCFC  0A 0A 0A          .byte $0A, $0A, $0A, $09, $09, $09, $08, $08, $08
       06:DCFF  09 09 09  
       06:DD02  08 08 08  
   73  06:DD05  07 07 07          .byte $07, $07, $07, $06, $06, $06, $05, $05, $05
       06:DD08  06 06 06  
       06:DD0B  05 05 05  
   74  06:DD0E  04 04 04      .byte $04, $04, $04, $03, $03, $03, $02, $02, $02
       06:DD11  03 03 03  
       06:DD14  02 02 02  
   75  06:DD17  01 01 01          .byte $01, $01, $01, $00
       06:DD1A  00        
   76  06:DD1B  FF            .byte $FF
   77                             
   78  06:DD1C            se_tinyDecy:
   79  06:DD1C  0F 00             .byte $0F, $00
   80  06:DD1E  FF                .byte $FF
   81                     
   82  06:DD1F            se_noDecay:
   83  06:DD1F  0F                .byte $0F
   84  06:DD20  FF                .byte $FF
   85                             
   86  06:DD21            se_long_tremelo:
   87                             ;attack
   88  06:DD21  0E            .byte $0E
   89                             ;decay
   90  06:DD22  0F 0F 0F          .byte $0F, $0F, $0F, $09, $09, $09, $0E, $0E, $0E
       06:DD25  09 09 09  
       06:DD28  0E 0E 0E  
   91  06:DD2B  08 08 08      .byte $08, $08, $08, $0D, $0D, $0D, $07, $07, $07
       06:DD2E  0D 0D 0D  
       06:DD31  07 07 07  
   92  06:DD34  0C 0C 0C          .byte $0C, $0C, $0C, $06, $06, $06, $0B, $0B, $0B
       06:DD37  06 06 06  
       06:DD3A  0B 0B 0B  
   93  06:DD3D  05 05 05          .byte $05, $05, $05, $0A, $0A, $0A, $04, $04, $04
       06:DD40  0A 0A 0A  
       06:DD43  04 04 04  
   94  06:DD46  09 09 09          .byte $09, $09, $09, $03, $03, $03, $08, $08, $08
       06:DD49  03 03 03  
       06:DD4C  08 08 08  
   95  06:DD4F  00            .byte $00
   96  06:DD50  FF            .byte $FF
   97                     
   98                             
   99           0000      ve_short_staccato = $00
  100           0001      ve_fade_in = $01
  101           0002      ve_blip_echo = $02
  102           0003      ve_tgl_1 = $03
  103           0004      ve_tgl_2 = $04
  104           0005      ve_battlekid_1 = $05
  105           0006      ve_battlekid_1b = $06
  106           0007      ve_battlekid_2 = $07
  107           0008      ve_battlekid_2b = $08
  108           0009      ve_drum_decay = $09
  109           000A      ve_hiHat_decay = $0A
  110           000B      ve_long_decay = $0B
  111           000C      ve_tinyDecy = $0C
  112           000D      ve_noDecay = $0D
  113           000E      ve_long_tremelo = $0E
#[2]   External/sound_engine.asm
#[3]   External/pitch_envelopes.i
  642                             .include "External/pitch_envelopes.i"
    1  06:DD51            pitch_envelopes:
    2  06:DD51  59 DD         .word se_pe_none
    3  06:DD53  5B DD         .word se_pe_mod
    4  06:DD55  6F DD             .word se_pe_sweep
    5  06:DD57  85 DD             .word se_pe_bassKick
    6                     
    7           0080      pe_loopLast = $80
    8           0081      pe_loopAll = $81
    9           0082      pe_loopPart = $82       ;requires byte timer amount after
   10           0083      pe_delay = $83          ;requires byte amount after - of negative, not yet reset. only allow if timer is currently 0
   11                     
   12  06:DD59            se_pe_none:
   13  06:DD59  00                .byte $00
   14  06:DD5A  80                .byte pe_loopLast
   15                     
   16  06:DD5B            se_pe_mod:
   17                     
   18  06:DD5B  00 83 0A          .byte $00, pe_delay, $0A, $00, $00, $FE, $FE, $FC, $FC, $FE, $FE, $00, $00, $02, $02, $04, $04, $02, $02
       06:DD5E  00 00 FE  
       06:DD61  FE FC FC  
       06:DD64  FE FE 00  
       06:DD67  00 02 02  
       06:DD6A  04 04 02  
       06:DD6D  02        
   19  06:DD6E  81                .byte pe_loopAll
   20                     
   21  06:DD6F            se_pe_sweep:
   22                             
   23  06:DD6F  10 0C 08          .byte $10, $0C, $08, $04, $00, $00, $FE, $FE, $FC, $FC, $FE, $FE, $00, $00, $02, $02, $04, $04, $02, $02
       06:DD72  04 00 00  
       06:DD75  FE FE FC  
       06:DD78  FC FE FE  
       06:DD7B  00 00 02  
       06:DD7E  02 04 04  
       06:DD81  02 02     
   24  06:DD83  82 10             .byte pe_loopPart, $10
   25                     
   26  06:DD85            se_pe_bassKick:
   27  06:DD85  90 C0 F0          .byte $90, $C0, $F0, $20, $50, $70
       06:DD88  20 50 70  
   28  06:DD8B  80                .byte pe_loopLast
   29                     
   30           0000      pe_none = $00
   31           0001      pe_mod = $01
   32           0002      pe_sweep = $02
   33           0003      pe_bassKick = $03
   34                     
#[2]   External/sound_engine.asm
#[3]   External/arpeggios.i
  643                             .include "External/arpeggios.i"
    1  06:DD8C            arpeggios:
    2  06:DD8C  90 DD             .word se_arp_none
    3  06:DD8E  92 DD         .word se_arp_lowerThird
    4                     
    5  06:DD90            se_arp_none:
    6  06:DD90  00                .byte $00
    7  06:DD91  FF                .byte $FF
    8                     
    9  06:DD92            se_arp_lowerThird:
   10  06:DD92  00 00 01          .byte $00, $00, $01, $01
       06:DD95  01        
   11  06:DD96  FF                .byte $FF
   12                     
   13           0000      arp_none = $00
   14           0001      arp_lowerThird = $01
   15                     
   16                     
   17                     
#[2]   External/sound_engine.asm
#[3]   External/song0.i
  644                         .include "External/song0.i"  ;holds the data for song 0 (header and data streams)
    1                     ;silence song.  disables all streams
    2                     
    3  06:DD97            song0_header:
    4  06:DD97  06            .byte 6          ;6 streams
    5                         
    6  06:DD98  00            .byte MUSIC_SQ1
    7  06:DD99  00            .byte $00
    8                             
    9  06:DD9A  01                .byte MUSIC_SQ2
   10  06:DD9B  00                .byte $00
   11                             
   12  06:DD9C  02                .byte MUSIC_TRI
   13  06:DD9D  00                .byte $00
   14                             
   15  06:DD9E  03                .byte MUSIC_NOI
   16  06:DD9F  00                .byte $00
   17                             
   18  06:DDA0  04                .byte SFX_1
   19  06:DDA1  00                .byte $00
   20                             
   21  06:DDA2  05                .byte SFX_2
   22  06:DDA3  00                .byte $00
#[2]   External/sound_engine.asm
#[3]   Music/Menu.i
  645                             .include "Music/Menu.i"  ;holds the data for song 1
    1  06:DDA4            menu_header:
    2  06:DDA4  01            .byte $01           ;4 streams
    3                         
    4  06:DDA5  00            .byte MUSIC_SQ1     ;which stream
    5  06:DDA6  00            .byte $00           ;status byte (stream enabled)
#[2]   External/sound_engine.asm
#[3]   Music/puzzleSolvedDrawImage.i
  646                         .include "Music/puzzleSolvedDrawImage.i"  ;holds the data for song 1
    1  06:DDA7            drawImg_header:
    2  06:DDA7  01            .byte $01         ;1 streams
    3                         
    4  06:DDA8  00            .byte MUSIC_SQ1     ;which stream
    5  06:DDA9  00            .byte $00           ;status byte (stream enabled)
#[2]   External/sound_engine.asm
#[3]   Music/EndScreen.i
  647                             .include "Music/EndScreen.i"
    1  06:DDAA            endScreen_header:
    2  06:DDAA  04            .byte $04           ;4 streams
    3                         
    4  06:DDAB  00            .byte MUSIC_SQ1     ;which stream
    5  06:DDAC  01            .byte $01           ;status byte (stream enabled)
    6  06:DDAD  00            .byte SQUARE_1      ;which channel
    7  06:DDAE  70            .byte $70           ;initial duty (01)
    8  06:DDAF  02            .byte ve_blip_echo  ;volume envelope
    9  06:DDB0  CB DD         .word endScreen_square1 ;pointer to stream
   10  06:DDB2  3A            .byte $3A           ;tempo
   11                         
   12  06:DDB3  01            .byte MUSIC_SQ2     ;which stream
   13  06:DDB4  01            .byte $01           ;status byte (stream enabled)
   14  06:DDB5  01            .byte SQUARE_2      ;which channel
   15  06:DDB6  B0            .byte $B0           ;initial duty (10)
   16  06:DDB7  02            .byte ve_blip_echo  ;volume envelope
   17  06:DDB8  EC DD         .word endScreen_square2 ;pointer to stream
   18  06:DDBA  3A            .byte $3A           ;tempo
   19                         
   20  06:DDBB  02            .byte MUSIC_TRI     ;which stream
   21  06:DDBC  01            .byte $01           ;status byte (stream enabled)
   22  06:DDBD  02            .byte TRIANGLE      ;which channel
   23  06:DDBE  80            .byte $80           ;initial volume (on)
   24  06:DDBF  03            .byte ve_tgl_1      ;volume envelope
   25  06:DDC0  0D DE         .word endScreen_tri     ;pointer to stream
   26  06:DDC2  3A            .byte $3A           ;tempo
   27                         
   28  06:DDC3  03            .byte MUSIC_NOI     ;which stream
   29  06:DDC4  01            .byte $01           ;enabled
   30  06:DDC5  03            .byte NOISE     
   31  06:DDC6  30            .byte $30           ;initial duty_vol
   32  06:DDC7  0A            .byte ve_hiHat_decay ;volume envelope
   33  06:DDC8  34 DE         .word endScreen_noise   ;pointer to stream
   34  06:DDCA  3A            .byte $3A           ;tempo
   35                     
   36                         
   37  06:DDCB            endScreen_square1:
   38                     
   39  06:DDCB  83            .byte quarter
   40  06:DDCC  23                .byte Gs4
   41  06:DDCD  82                .byte eighth
   42  06:DDCE  23 21             .byte Gs4, Fs4
   43  06:DDD0  84 5E             .byte half, rest
   44  06:DDD2  83                .byte quarter
   45  06:DDD3  1F                .byte E4
   46  06:DDD4  82                .byte eighth
   47  06:DDD5  1F 21             .byte E4, Fs4
   48  06:DDD7  84 5E             .byte half, rest
   49                             
   50  06:DDD9  83                .byte quarter
   51  06:DDDA  25                .byte As4
   52  06:DDDB  82                .byte eighth
   53  06:DDDC  25 23             .byte As4, Gs4
   54  06:DDDE  84 5E             .byte half, rest
   55  06:DDE0  82                .byte eighth
   56  06:DDE1  21 23 21          .byte Fs4, Gs4, Fs4, F4
       06:DDE4  20        
   57  06:DDE5  10 17 20          .byte Cs3, Gs3, F4, Gs4
       06:DDE8  23        
   58                             
   59                         
   60  06:DDE9  A1            .byte loop                              ;infinite loop
   61  06:DDEA  CB DD         .word endScreen_square1
   62                     
   63                         
   64  06:DDEC            endScreen_square2:
   65                     
   66  06:DDEC  82            .byte eighth
   67  06:DDED  20 17 20          .byte F4, Gs3, F4, Ds4
       06:DDF0  1E        
   68  06:DDF1  84 5E             .byte half, rest
   69  06:DDF3  82                .byte eighth
   70  06:DDF4  1C 15 1C          .byte Cs4, Fs3, Cs4, Ds4
       06:DDF7  1E        
   71  06:DDF8  84 5E             .byte half, rest
   72                     
   73  06:DDFA  82                .byte eighth
   74  06:DDFB  28 21 28          .byte Cs5, Fs4, Cs5, B4
       06:DDFE  26        
   75  06:DDFF  84 5E             .byte half, rest
   76  06:DE01  82                .byte eighth
   77  06:DE02  24 26 24          .byte A4, B4, A4, Gs4
       06:DE05  23        
   78  06:DE06  17 1E 23          .byte Gs3, Ds4, Gs4, C5
       06:DE09  27        
   79  06:DE0A  A1            .byte loop
   80  06:DE0B  EC DD         .word endScreen_square2
   81                         
   82  06:DE0D            endScreen_tri:
   83                     
   84  06:DE0D  83                .byte quarter
   85  06:DE0E  1C                .byte Cs4
   86  06:DE0F  82                .byte eighth
   87  06:DE10  1C 1A 5E          .byte Cs4, B3, rest
   88  06:DE13  0E 1A 0E          .byte B2, B3, B2
   89  06:DE16  83                .byte quarter
   90  06:DE17  18                .byte A3
   91  06:DE18  82                .byte eighth
   92  06:DE19  18 1A 5E          .byte A3, B3, rest
   93  06:DE1C  0E 1A 0E          .byte B2, B3, B2
   94                             
   95  06:DE1F  83                .byte quarter
   96  06:DE20  1E                .byte Ds4
   97  06:DE21  82                .byte eighth
   98  06:DE22  1E 1C 5E          .byte Ds4, Cs4, rest
   99  06:DE25  10 1C 10          .byte Cs3, Cs4, Cs3
  100  06:DE28  83                .byte quarter
  101  06:DE29  1A                .byte B3
  102  06:DE2A  82                .byte eighth
  103  06:DE2B  1A 1C 5E          .byte B3, Cs4, rest
  104  06:DE2E  10 1C 10          .byte Cs3, Cs4, Cs3
  105                             
  106  06:DE31  A1                .byte loop
  107  06:DE32  0D DE         .word endScreen_tri
  108                         
  109  06:DE34            endScreen_noise:
  110                     
  111  06:DE34  82 04 04      .byte eighth, $04, $04
  112  06:DE37  A2 09             .byte volume_envelope, ve_drum_decay 
  113  06:DE39  82 04         .byte eighth, $04
  114  06:DE3B  A2 0A             .byte volume_envelope, ve_hiHat_decay
  115  06:DE3D  82 04             .byte eighth, $04
  116                     
  117  06:DE3F  A1            .byte loop
  118  06:DE40  34 DE         .word endScreen_noise
#[2]   External/sound_engine.asm
#[3]   SFX/menuCursor.i
  648                             .include "SFX/menuCursor.i"  ;holds the data for song 1
    1  06:DE42            menuCursor_header:
    2  06:DE42  01            .byte $01           ;1 stream
    3                         
    4  06:DE43  04            .byte SFX_1         ;which stream
    5  06:DE44  01            .byte $01           ;status byte (stream enabled)
    6  06:DE45  01            .byte SQUARE_2      ;which channel
    7  06:DE46  70            .byte $70           ;duty (01)
    8  06:DE47  0A            .byte ve_hiHat_decay  ;volume envelope
    9  06:DE48  4B DE         .word menuCursor_square2 ;pointer to stream
   10  06:DE4A  80            .byte $80           ;tempo
   11                         
   12                         
   13  06:DE4B            menuCursor_square2:
   14  06:DE4B  81 33         .byte sixteenth, C6
   15  06:DE4D  A0            .byte endsound
#[2]   External/sound_engine.asm
#[3]   SFX/puzzleCursor.i
  649                             .include "SFX/puzzleCursor.i"  ;holds the data for song 1
    1  06:DE4E            puzzleCursor_header:
    2  06:DE4E  01            .byte $01           ;1 stream
    3                         
    4  06:DE4F  05            .byte SFX_2         ;which stream
    5  06:DE50  01            .byte $01           ;status byte (stream enabled)
    6  06:DE51  02            .byte TRIANGLE      ;which channel
    7  06:DE52  80            .byte $80           ;on
    8  06:DE53  0A            .byte ve_hiHat_decay  ;volume envelope
    9  06:DE54  57 DE         .word puzzleCursor_square2 ;pointer to stream
   10  06:DE56  80            .byte $80           ;tempo
   11                         
   12                         
   13  06:DE57            puzzleCursor_square2:
   14  06:DE57  81 33         .byte sixteenth, C6
   15  06:DE59  A0            .byte endsound
#[2]   External/sound_engine.asm
#[3]   SFX/noiseBlip.i
  650                             .include "SFX/noiseBlip.i" 
    1  06:DE5A            noiseBlip_header:
    2  06:DE5A  01            .byte $01           ;1 stream
    3                         
    4  06:DE5B  05                .byte SFX_2     ;which stream
    5  06:DE5C  01            .byte $01           ;enabled
    6  06:DE5D  03            .byte NOISE     
    7  06:DE5E  30            .byte $30           ;initial duty_vol
    8  06:DE5F  0C            .byte ve_tinyDecy ;volume envelope
    9  06:DE60  63 DE         .word noiseBlip_noise   ;pointer to stream
   10  06:DE62  80            .byte $80           ;tempo
   11                         
   12  06:DE63            noiseBlip_noise:
   13  06:DE63  81 04         .byte sixteenth, $04
   14  06:DE65  A0            .byte endsound
#[2]   External/sound_engine.asm
#[1]   Picross.asm
  111                     ;;**************************;;
  112                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  113                     ;;       PRG ROM DATA       ;;
  114                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  115                     ;;**************************;; 
  116                       
  117           0007        .bank 7
  118           E000        .org $E000
  119                     
#[2]   NameTables/Tables.asm
  120                       .include "NameTables/Tables.asm"
    1  07:E000            Palettes:
    2                     
    3  07:E000  1C E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E002  3C E0     
       07:E004  5C E0     
    4                     
    5  07:E006            NameTables:
    6                     
    7  07:E006  12 E0       .word Title_Screens, Game_Screens, GameOver_Screens
       07:E008  14 E0     
       07:E00A  1A E0     
    8                       
    9  07:E00C            NameTables2:
   10                     
   11  07:E00C  7C E4       .word Title_Second, Blank_Screen, Blank_Screen
       07:E00E  7C F8     
       07:E010  7C F8     
   12                       
   13  07:E012            Title_Screens:
   14                     
   15  07:E012  7C E0       .word Title_Screen
   16                       
   17  07:E014            Game_Screens:
   18                     
   19  07:E014  7C E8       .word Game_5, Game_10, Game_15
       07:E016  7C EC     
       07:E018  7C F0     
   20                       
   21  07:E01A            GameOver_Screens:
   22                     
   23  07:E01A  7C F4       .word GameOver_Screen
   24                     
   25  07:E01C            Title_Palette:
   26                     
   27  07:E01C              .incbin "NameTables/Title_PAL.pal"
   28  07:E02C              .incbin "NameTables/Title_PAL.pal"
   29                       
   30  07:E03C            Game_Palette:
   31                     
   32  07:E03C              .incbin "NameTables/Game_PAL.pal"
   33  07:E04C              .incbin "NameTables/Game_PAL.pal"
   34                       
   35  07:E05C            GameOver_Palette:
   36                     
   37  07:E05C              .incbin "NameTables/GameOver_PAL.pal"
   38  07:E06C              .incbin "NameTables/GameOver_PAL.pal"
   39                       
   40  07:E07C            Title_Screen:
   41                     
   42  07:E07C              .incbin "NameTables/Title_NT.nam"
   43                       
   44  07:E47C            Title_Second:
   45                     
   46  07:E47C              .incbin "NameTables/Title_PuzzMen_NT.nam"
   47                       
   48  07:E87C            Game_5: 
   49                     
   50  07:E87C              .incbin "NameTables/Game_NT_5.nam"
   51                       
   52  07:EC7C            Game_10:
   53  07:EC7C              .incbin "NameTables/Game_NT_10.nam"
   54                       
   55  07:F07C            Game_15:
   56  07:F07C              .incbin "NameTables/Game_NT.nam"
   57                       
   58  07:F47C            GameOver_Screen:
   59                     
   60  07:F47C              .incbin "NameTables/GameOver_NT.nam"
   61                       
   62  07:F87C            Blank_Screen:
   63                     
   64  07:F87C              .incbin "NameTables/Blank_NT.nam"
   65                     
   66  07:FC7C            Pause_Menu:
   67  07:FC7C  28 2A 2A    .db $28,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$29
       07:FC7F  2A 2A 2A  
       07:FC82  2A 2A 2A  
       07:FC85  2A 2A 2A  
       07:FC88  29        
   68  07:FC89  2B 24 1C    .db $2b,$24,$1c,$0a,$1f,$0e,$62,$0e,$21,$12,$1d,$24,$3b
       07:FC8C  0A 1F 0E  
       07:FC8F  62 0E 21  
       07:FC92  12 1D 24  
       07:FC95  3B        
   69  07:FC96  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FC99  24 24 24  
       07:FC9C  24 24 24  
       07:FC9F  24 24 24  
       07:FCA2  3B        
   70  07:FCA3  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FCA6  24 24 24  
       07:FCA9  24 24 24  
       07:FCAC  24 24 24  
       07:FCAF  3B        
   71  07:FCB0  2B 24 24    .db $2b,$24,$24,$22,$0e,$1c,$24,$24,$17,$18,$24,$24,$3b
       07:FCB3  22 0E 1C  
       07:FCB6  24 24 17  
       07:FCB9  18 24 24  
       07:FCBC  3B        
   72  07:FCBD  38 3A 3A    .db $38,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$39
       07:FCC0  3A 3A 3A  
       07:FCC3  3A 3A 3A  
       07:FCC6  3A 3A 3A  
       07:FCC9  39        
   73                     
   74  07:FCCA            EndScreens:
   75                     
   76  07:FCCA  CE FC       .word PuzzleClearLines, PuzzleSavedLines
       07:FCCC  FD FC     
   77                       
   78  07:FCCE            PuzzleClearLines:
   79                     
   80  07:FCCE  EA 20       .db $EA, $20
   81  07:FCD0  0D 19 1E    .db $0D, $19,$1e,$23,$23,$15,$0e,$24,$0c,$15,$0e,$0a,$1b,$64
       07:FCD3  23 23 15  
       07:FCD6  0E 24 0C  
       07:FCD9  15 0E 0A  
       07:FCDC  1B 64     
   82  07:FCDE  07 1D 12    .db $07, $1d,$12,$16,$0e,$61,$24,$24 ;print the time here as a separate call, similar to how it's printed in update game at 2131
       07:FCE1  16 0E 61  
       07:FCE4  24 24     
   83  07:FCE6  0C 17 0E    .db $0C, $17,$0e,$21,$1d,$24,$19,$1e,$23,$23,$15,$0e,$63
       07:FCE9  21 1D 24  
       07:FCEC  19 1E 23  
       07:FCEF  23 15 0E  
       07:FCF2  63        
   84  07:FCF3  09 24 24    .db $09, $24,$24,$22,$0e,$1c,$24,$24,$17,$18
       07:FCF6  22 0E 1C  
       07:FCF9  24 24 17  
       07:FCFC  18        
   85                     
   86  07:FCFD            PuzzleSavedLines:
   87                       
   88  07:FCFD  2A 21       .db $2A, $21 
   89  07:FCFF  0D 19 1E    .db $0D, $19,$1e,$23,$23,$15,$0e,$24,$1c,$0a,$1f,$0e,$0d,$64
       07:FD02  23 23 15  
       07:FD05  0E 24 1C  
       07:FD08  0A 1F 0E  
       07:FD0B  0D 64     
   90                       
   91  07:FD0D            SelectDefaultName:
   92                      
   93  07:FD0D  47 26       .db $47, $26 
   94  07:FD0F  10 63 63    .db $10, $63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63
       07:FD12  63 63 63  
       07:FD15  63 63 63  
       07:FD18  63 63 63  
       07:FD1B  63 63 63  
       07:FD1E  63 63     
   95                     
   96  07:FD20            SelectDefaultTime:
   97                     
   98  07:FD20  8F 26       .db $8F, $26 
   99  07:FD22            DefaultTimeString:
  100  07:FD22  05 60 60    .db $05, $60,$60,$61,$60,$60
       07:FD25  61 60 60  
  101                     
  102                     
  103                      
  104                             
#[1]   Picross.asm
#[2]   Sprites/Sprites.asm
  121                       .include "Sprites/Sprites.asm"
    1                     
    2                     ;;Byte0
    3                     ;;Y position of top of sprite
    4                     ;;Sprite data is delayed by one scanline; 
    5                     ;;you must subtract 1 from the sprite's 
    6                     ;;Y coordinate before writing it here. 
    7                     ;;Hide a sprite by moving it down offscreen, 
    8                     ;;by writing any values between #$EF-#$FF here. 
    9                     ;;Sprites are never displayed on the first line of the picture, 
   10                     ;;and it is impossible to place a sprite partially off the top of the screen.
   11                     
   12                     ;;Byte 1
   13                     ;;Tile index number
   14                     ;;For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of PPUCTRL ($2000).
   15                     ;;For 8x16 sprites (bit 5 of PPUCTRL set), the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
   16                     ;;76543210
   17                     ;;||||||||
   18                     ;;|||||||+- Bank ($0000 or $1000) of tiles
   19                     ;;+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
   20                     
   21                     ;;Byte 2
   22                     ;;Attributes
   23                     ;;76543210
   24                     ;;||||||||
   25                     ;;||||||++- Palette (4 to 7) of sprite
   26                     ;;|||+++--- Unimplemented (read 0)
   27                     ;;||+------ Priority (0: in front of background; 1: behind background)
   28                     ;;|+------- Flip sprite horizontally
   29                     ;;+-------- Flip sprite vertically
   30                     
   31                     ;;Byte 3
   32                     ;;X position of left side of sprite.
   33                     ;;X-scroll values of $F9-FF results in parts of the 
   34                     ;;sprite to be past the right edge of the screen, thus invisible.
   35                     ;;It is not possible to have a sprite partially visible on the left edge. 
   36                     ;;Instead, left-clipping through PPUMASK ($2001) can be used to simulate this effect.
   37  07:FD28            Sprites:
   38  07:FD28  2E FD             .word Title_Sprites, Game_Sprites, GameOver_Sprites
       07:FD2A  37 FD     
       07:FD2C  40 FD     
   39                     
   40  07:FD2E            Title_Sprites:
   41  07:FD2E  02            .db $02
   42  07:FD2F  85 00 00          .db $85,$00,$00,$E8
       07:FD32  E8        
   43  07:FD33  A0 01 00          .db $A0,$01,$00,$60
       07:FD36  60        
   44  07:FD37            Game_Sprites:
   45  07:FD37  02            .db $02
   46  07:FD38  62 02 03          .db $62,$02,$03,$72
       07:FD3B  72        
   47  07:FD3C  5F FF 00          .db $5F,$FF,$00,$60
       07:FD3F  60        
   48  07:FD40            GameOver_Sprites:
   49  07:FD40  01                .db $01
   50  07:FD41  67 FF 00          .db $67,$FF,$00,$58
       07:FD44  58        
#[1]   Picross.asm
  122                     
  123           FFFA        .org $FFFA     ;first of the three vectors starts here
  124  07:FFFA  7E D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  125                                        ;processor will jump to the label NMI:
  126  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  127                                        ;to the label RESET:
  128  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  129                       
  130                     ;;**************************;;
  131                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  132                     ;;      CHR ROM DATA        ;;
  133                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  134                     ;;**************************;; 
  135                       
  136           0008        .bank 8
  137           0000        .org $0000
  138  08:0000              .incbin "CHRROM/Bank0.chr"   ;includes 8KB graphics file from SMB1
  139                       
  140           0009        .bank 9
  141           0000        .org $0000
  142  09:0000              .incbin "CHRROM/Bank1.chr"
  143                       
  144           000A        .bank 10
  145           0000        .org $0000
  146  0A:0000              .incbin "CHRROM/Bank2.chr"
  147                       
  148           000B        .bank 11
  149           0000        .org $0000
  150  0B:0000              .incbin "CHRROM/Bank3.chr"
