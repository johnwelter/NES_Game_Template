#[1]   Picross.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/Defines.asm
   14                       .include "Defines/Defines.asm"
    1                     ;; define 0 page stuff here, and SRAM stuff if we have it
    2                     
    3           0000        .rsset $0000
#[3]   Defines/GeneralVars.asm
    4                       .include "Defines/GeneralVars.asm"
    1           0000      temp1                   .rs 1
    2           0001      temp2                   .rs 1
    3           0002      temp3                   .rs 1
    4           0003      temp4                   .rs 1
    5           0004      temp5                   .rs 1
    6           0005      temp6                   .rs 1
    7           0006      temp7                   .rs 1
    8           0007      temp8                   .rs 1
    9           0008      tempx                   .rs 1
   10           0009      tempy                   .rs 1
   11           000A      time                    .rs 1
   12           000B      scaledTime              .rs 1
   13           000C      sleeping                .rs 1
   14           000D      mode_loadFlags  .rs 1
   15           000E      game_mode               .rs 1
   16           000F      mode_state              .rs 1
   17           0010      NMI_locks               .rs 1
   18           0011      game_locks              .rs 1
   19           0012      pointer_address .rs 2
   20           0014      table_address   .rs 2
   21           0016      jump_address    .rs 2
   22                     
   23                     ;game modes
   24           0000      TITLE_IDX = $00
   25           0001      GAME_IDX = $01
   26           0002      GAMEOVER_IDX = $02
   27                     
   28                     ;locks for input and rendering
   29           0001      BGLOAD_NMI_LOCK = %00000001
   30           0001      EFFECT_GAME_LOCK = %00000001
   31                     
   32                     
   33                     
#[2]   Defines/Defines.asm
#[3]   Defines/ControllerVars.asm
    5                       .include "Defines/ControllerVars.asm"
    1           0010      GAMEPAD_UP = $10
    2           0020      GAMEPAD_DOWN = $20
    3           0040      GAMEPAD_LEFT = $40
    4           0080      GAMEPAD_RIGHT = $80
    5           0001      GAMEPAD_A = $01
    6           0002      GAMEPAD_B = $02
    7           0004      GAMEPAD_SELECT = $04
    8           0008      GAMEPAD_START = $08
    9                     
   10           00C0      GAMEPAD_HORI = $C0
   11           0030      GAMEPAD_VERT = $30
   12           00F0      GAMEPAD_MOVE = $F0
   13                     
   14           0003      GAMEPAD_AB = $03
   15                     
   16           0009      GAMEPAD_CONFIRM = $09
   17                     
   18           0018      gamepad                 .rs 1
   19           0019      gamepadLast     .rs 1
   20           001A      gamepadPressed  .rs 1
#[2]   Defines/Defines.asm
#[3]   Defines/PPUVariables.asm
    6                       .include "Defines/PPUVariables.asm"
    1           001B      PPU_Control                     .rs 1
    2           001C      PPU_Mask                        .rs 1
    3           001D      PPU_ScrollX                     .rs 1
    4           001E      PPU_ScrollY                     .rs 1
    5           001F      PPU_ScrollNT            .rs 1   ;first two bits
    6           0020      PPU_NT                          .rs 1
    7                     
    8           0021      PPU_PendingWrite        .rs 1
    9           0022      PPU_StringIdx           .rs 1
   10           0023      PPU_String                      .rs 128
   11                     
   12           004F      PPU_STRINGMAX = $4F ;up to size of a full nametable, I think
   13                     
   14           0000      SPRITE_YPOS = $00
   15           0001      SPRITE_ID   = $01
   16           0003      SPRITE_XPOS = $03
   17           0200      SPRITE_DATA = $0200
   18                     
   19           2000      PPU_CTRL = $2000
   20           2001      PPU_MASK = $2001
   21           2002      PPU_STATUS = $2002
   22           2003      OAM_LO = $2003
   23           2004      OAM_DATA = $2004
   24           2005      PPU_SCROLL = $2005
   25           2006      PPU_ADDR = $2006
   26           2007      PPU_DATA = $2007
   27           4014      OAM_HI = $4014
   28                     
   29           0080      DRAW_VERTICAL = $80
   30           0000      DRAW_HORIZONTAL = $00
   31                     
   32           0040      SPRITE_0_MASK = %01000000
#[2]   Defines/Defines.asm
#[3]   Defines/MapperVars.asm
    7                       .include "Defines/MapperVars.asm"
    1           00A3      mapper_address  .rs 2
    2           00A5      currentCHRBankA .rs 1
    3           00A6      currentCHRBankB .rs 1
    4           00A7      currentPRGBank  .rs 1
    5           00A8      mapperDebugVar  .rs 1
    6                     
    7                     
#[2]   Defines/Defines.asm
#[3]   Defines/TitleVariables.asm
    8                       .include "Defines/TitleVariables.asm"
    1                     
#[2]   Defines/Defines.asm
#[3]   Defines/GameVariables.asm
    9                       .include "Defines/GameVariables.asm"
    1           A000      PUZZLE_TABLE = $A000
    2           A01B      NAMES_TABLE = $A01B
    3           A036      SPRITES_TABLE = $A036
    4                     
    5           00A9      puzzle_address          .rs 2
    6           00AB      clues_address           .rs 2
    7           00AD      pause_address           .rs 2
    8           00AF      copy_address        .rs 2
    9           00B1      pause_draw_address  .rs 2
   10           00B3      clue_start_address      .rs 2
   11           00B5      clue_draw_address       .rs 2
   12           00B7      clueTableIndex          .rs 1
   13           00B8      clueLineIndex           .rs 1
   14           00B9      clueOffsetShift         .rs 1
   15           00BA      clueDrawAdd                     .rs 1
   16           00BB      clueDrawOffset          .rs 2
   17           00BD      clueDrawDecSize         .rs 1
   18           00BE      clueParity                      .rs 1
   19           00BF      mouse_location          .rs 2
   20           00C1      mouse_index                     .rs 2
   21           00C3      currentPaintTile        .rs 1
   22           00C4      solutionCount           .rs 1
   23           00C5      nonSolutionCount        .rs 1
   24           00C6      pauseState                      .rs 1
   25           00C7      holdTimer                       .rs 1
   26           00C8      GameTime                        .rs 4   ;in order - second, ten second, minute, 10 minute - max out at 99 minutes
   27           00CC      targetGameMode          .rs 1
#[2]   Defines/Defines.asm
   10                     ;; 0100 is the stack
   11                     ;; 0200 is sprite ram
   12           0300        .rsset $0300
   13           0400        .rsset $0400
   14           0500        .rsset $0500
   15           0600        .rsset $0600
   16           0700        .rsset $0700
   17           6000        .rsset $6000
#[3]   Defines/ScreenStateVariables.asm
   18                       .include "Defines/ScreenStateVariables.asm"
    1           6000      Screen_Copy             .rs 1024
    2           6400      ScreenB_Copy    .rs 1024
    3           6800      Palette_Copy    .rs 32
#[2]   Defines/Defines.asm
   19           7000        .rsset $7000
#[3]   Defines/SaveVariables.asm
   20                       .include "Defines/SaveVariables.asm"
    1           7000      bank_index      .rs 1
    2           7001      puzzle_index .rs 1
    3                     ;we can save these for the continue
    4                     ;we'll save out data for the puzzles- just need to know if it's 1) complete and 2) the time
    5                     ;we can do that in 4 bytes each, so 324 bytes
    6           7002      puzzle_clear_data .rs 324
    7                     
#[2]   Defines/Defines.asm
   21                     
#[1]   Picross.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/PPUMacros.asm
    3                             .include "Macros/PPUMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetPPUControl .macro
    6                     
    7                       LDA #\1  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    8                       STA PPU_CTRL
    9                       LDA #\2   ; enable sprites, enable background, no clipping on left side
   10                       STA PPU_MASK
   11                             
   12                       .endm
   13                       
   14                     MACROSetPPUAddress .macro
   15                     
   16                       LDA PPU_STATUS             ; read PPU status to reset the high/low latch
   17                       LDA #HIGH(\1)
   18                       STA PPU_ADDR            ; write the high byte of $2000 address
   19                       LDA #LOW(\1)
   20                       STA PPU_ADDR           ; write the low byte of $2000 address
   21                       
   22                       .endm
   23                         
   24                     
   25                     MACROAddPPUStringEntryRawData .macro
   26                     
   27                       LDA #$01
   28                       STA PPU_PendingWrite
   29                       LDA \1
   30                       JSR WriteToPPUString
   31                       LDA \2
   32                       JSR WriteToPPUString
   33                       LDA \3
   34                       JSR WriteToPPUString
   35                       LDA \4 
   36                       JSR WriteToPPUString
   37                       
   38                       .endm
   39                     
   40                     MACROAddPPUStringEntryRepeat .macro
   41                     
   42                       LDA #$01
   43                       STA PPU_PendingWrite
   44                       LDA \1
   45                       JSR WriteToPPUString
   46                       LDA \2
   47                       JSR WriteToPPUString
   48                       LDA #$40
   49                       ORA \3
   50                       ORA \4
   51                       JSR WriteToPPUString
   52                       LDA \5
   53                       JSR WriteToPPUString
   54                       
   55                       .endm
   56                       
   57                     MACROAddPPUStringEntryTable .macro
   58                      
   59                       LDA #$01
   60                       STA PPU_PendingWrite
   61                       LDA \1
   62                       JSR WriteToPPUString
   63                       LDA \2
   64                       JSR WriteToPPUString
   65                       LDA #$20
   66                       ORA \3
   67                       JSR WriteToPPUString
   68                       LDA #LOW(\4)
   69                       JSR WriteToPPUString
   70                       LDA #HIGH(\4)
   71                       JSR WriteToPPUString
   72                      
   73                       .endm
   74                     
   75                     
#[2]   Macros/Macros.asm
#[3]   Macros/CallDynamicJump.asm
    4                             .include "Macros/CallDynamicJump.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROCallDynamicJump .macro
    6                     
    7                       LDA \1
    8                       JSR Dynamic_Jump
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetDoubleIndex.asm
    5                             .include "Macros/GetDoubleIndex.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = index to double
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROGetDoubleIndex .macro
    5                     
    6                             LDA \1
    7                             ASL A
    8                             TAY
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetLabelPointer.asm
    6                             .include "Macros/GetLabelPointer.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label we want address of
    3                     ;; \2 = address to store address to
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROGetLabelPointer .macro
    6                     
    7                             LDA #HIGH(\1)
    8                             LDX #LOW(\1)
    9                             
   10                             STX \2
   11                             STA \2+1
   12                             
   13                       .endm
   14                       
   15                     MACROGetPointer .macro
   16                     
   17                             LDA \1
   18                             STA \2
   19                             LDA \1+1
   20                             STA \2+1
   21                     
   22                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/FlagMacros.asm
    7                             .include "Macros/FlagMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetFlags .macro
    6                     
    7                       LDA \1
    8                       ORA #\2
    9                       STA \1
   10                             
   11                       .endm
   12                       
   13                     MACROClearFlags .macro
   14                     
   15                       LDA #\2
   16                       EOR #$FF
   17                       AND \1  
   18                       STA \1
   19                     
   20                       .endm
#[2]   Macros/Macros.asm
#[1]   Picross.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1                     
    2                     
    3           0000        .bank 0
    4           8000        .org $8000
    5                       
#[3]   Puzzles/house.asm
    6                       .include "Puzzles/house.asm" 
    1  00:8000            house:
    2  00:8000  02 82 00    .db $02, $82, $00, $21
       00:8003  21        
    3  00:8004  01 E0 0F    .db $01, $E0, $0F, $00, $78, $36, $C1, $08, $03, $80, $E7, $CE, $ED, $EE, $47, $44, $47, $44, $FF, $FE, $FF, $FE, $FF, $FE, $AB, $AA, $03, $80, $FF, $FE
       00:8007  00 78 36  
       00:800A  C1 08 03  
       00:800D  80 E7 CE  
       00:8010  ED EE 47  
       00:8013  44 47 44  
       00:8016  FF FE FF  
       00:8019  FE FF FE  
       00:801C  AB AA 03  
       00:801F  80 FF FE  
    4  00:8022  14 21 FF    .db $14, $21, $FF, $17, $20, $FF, $14, $21, $FF, $13, $10, $FF, $14, $12, $FF, $17, $10, $FF, $82, $10, $FF, $C2, $FF, $63, $10, $FF, $17, $10, $FF, $14, $11, $10, $FF, $13, $10, $FF, $14, $21, $FF, $17, $10, $FF, $14, $21, $FF
       00:8025  17 20 FF  
       00:8028  14 21 FF  
       00:802B  13 10 FF  
       00:802E  14 12 FF  
       00:8031  17 10 FF  
       00:8034  82 10 FF  
       00:8037  C2 FF 63  
       00:803A  10 FF 17  
       00:803D  10 FF 14  
       00:8040  11 10 FF  
       00:8043  13 10 FF  
       00:8046  14 21 FF  
       00:8049  17 10 FF  
       00:804C  14 21 FF  
    5  00:804F  40 FF 40    .db $40, $FF, $40, $FF, $22, $40, $FF, $11, $20, $FF, $30, $FF, $35, $30, $FF, $34, $23, $FF, $11, $31, $FF, $11, $31, $FF, $F0, $FF, $F0, $FF, $F0, $FF, $11, $13, $11, $10, $FF, $30, $FF, $F0, $FF
       00:8052  FF 22 40  
       00:8055  FF 11 20  
       00:8058  FF 30 FF  
       00:805B  35 30 FF  
       00:805E  34 23 FF  
       00:8061  11 31 FF  
       00:8064  11 31 FF  
       00:8067  F0 FF F0  
       00:806A  FF F0 FF  
       00:806D  11 13 11  
       00:8070  10 FF 30  
       00:8073  FF F0 FF  
    6  00:8076            houseImage:
    7  00:8076  AA AB FE   .db $AA, $AB, $FE, $AA, $AB, $FE, $AA, $AB, $FE, $AA, $FB, $FE, $AA, $2A, $BA, $AA, $A3, $2A, $A9, $5A, $3F, $29, $54, $63, $3F, $24, $62, $AF, $CE, $A2, $8A, $BF, $3A, $89, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $77, $75, $77, $77, $FF, $D5, $FF, $F5, $55, $55, $55, $40, $FF
       00:8079  AA AB FE  
       00:807C  AA AB FE  
       00:807F  AA FB FE  
       00:8082  AA 2A BA  
       00:8085  AA A3 2A  
       00:8088  A9 5A 3F  
       00:808B  29 54 63  
       00:808E  3F 24 62  
       00:8091  AF CE A2  
       00:8094  8A BF 3A  
       00:8097  89 55 55  
       00:809A  55 55 55  
       00:809D  55 55 55  
       00:80A0  55 55 55  
       00:80A3  77 75 77  
       00:80A6  77 FF D5  
       00:80A9  FF F5 55  
       00:80AC  55 55 40  
       00:80AF  FF        
    8  00:80B0            houseName:
    9  00:80B0  05 11 18    .db $05, $11, $18, $1E, $1C, $0E, $FF
       00:80B3  1E 1C 0E  
       00:80B6  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test.asm
    7                       .include "Puzzles/test.asm"
    1  00:80B7            test:
    2  00:80B7  02 01 00    .db $02, $01, $00, $00
       00:80BA  00        
    3  00:80BB  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:80BE  00 00 00  
       00:80C1  00 00 00  
       00:80C4  00 00 00  
       00:80C7  00 00 00  
       00:80CA  00 00 00  
       00:80CD  00 00 00  
       00:80D0  00 00 00  
       00:80D3  00 00 00  
       00:80D6  00 00 00  
    4  00:80D9  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80DC  FF 00 FF  
       00:80DF  00 FF 00  
       00:80E2  FF 00 FF  
       00:80E5  00 FF 00  
       00:80E8  FF 00 FF  
       00:80EB  00 FF 00  
       00:80EE  FF 00 FF  
       00:80F1  00 FF 00  
       00:80F4  FF 00 FF  
    5  00:80F7  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80FA  FF 00 FF  
       00:80FD  00 FF 00  
       00:8100  FF 00 FF  
       00:8103  00 FF 00  
       00:8106  FF 00 FF  
       00:8109  00 FF 00  
       00:810C  FF 00 FF  
       00:810F  00 FF 00  
       00:8112  FF 00 FF  
    6  00:8115            testImage:
    7  00:8115  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8118  1B 1B 1B  
       00:811B  1B 1B 1B  
       00:811E  1B 1B 1B  
       00:8121  1B 1B 1B  
       00:8124  1B 1B 1B  
       00:8127  1B 1B 1B  
       00:812A  1B 1B 1B  
       00:812D  1B 1B 1B  
       00:8130  1B 1B 1B  
       00:8133  1B 1B 1B  
       00:8136  1B 1B 1B  
       00:8139  1B 1B 1B  
       00:813C  1B 1B 1B  
       00:813F  1B 1B 1B  
       00:8142  1B 1B 1B  
       00:8145  1B 1B 1B  
       00:8148  1B 1B 1B  
       00:814B  1B 1B 00  
       00:814E  FF        
    8  00:814F            testName:
    9  00:814F  04 1D 0E    .db $04, $1D, $0E, $1C, $1D, $FF
       00:8152  1C 1D FF  
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test5.asm
    8                       .include "Puzzles/test5.asm"
    1  00:8155            test5:
    2  00:8155  00 01 00    .db $00, $01, $00, $32
       00:8158  32        
    3  00:8159  80 00 00    .db $80, $00, $00, $00, $00
       00:815C  00 00     
    4  00:815E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:8161  FF 00 FF  
       00:8164  00 FF 00  
       00:8167  FF        
    5  00:8168  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:816B  FF 00 FF  
       00:816E  00 FF 00  
       00:8171  FF        
    6  00:8172            test5Image:
    7  00:8172  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8175  1B 1B 1B  
       00:8178  00 FF     
    8  00:817A            test5Name:
    9  00:817A  05 1D 0E    .db $05, $1D, $0E, $1C, $1D, $05, $FF
       00:817D  1C 1D 05  
       00:8180  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test10.asm
    9                       .include "Puzzles/test10.asm"
    1  00:8181            test10:
    2  00:8181  01 01 00    .db $01, $01, $00, $16
       00:8184  16        
    3  00:8185  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:8188  00 00 00  
       00:818B  00 00 00  
       00:818E  00 00 00  
       00:8191  00 00 00  
       00:8194  00 00 00  
       00:8197  00 00     
    4  00:8199  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:819C  FF 00 FF  
       00:819F  00 FF 00  
       00:81A2  FF 00 FF  
       00:81A5  00 FF 00  
       00:81A8  FF 00 FF  
       00:81AB  00 FF     
    5  00:81AD  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:81B0  FF 00 FF  
       00:81B3  00 FF 00  
       00:81B6  FF 00 FF  
       00:81B9  00 FF 00  
       00:81BC  FF 00 FF  
       00:81BF  00 FF     
    6  00:81C1            test10Image:
    7  00:81C1  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $FF
       00:81C4  1B 1B 1B  
       00:81C7  1B 1B 1B  
       00:81CA  1B 1B 1B  
       00:81CD  1B 1B 1B  
       00:81D0  1B 1B 1B  
       00:81D3  1B 1B 1B  
       00:81D6  1B 1B 1B  
       00:81D9  1B FF     
    8  00:81DB            test10Name:
    9  00:81DB  06 1D 0E    .db $06, $1D, $0E, $1C, $1D, $01, $00, $FF
       00:81DE  1C 1D 01  
       00:81E1  00 FF     
#[2]   Banks/Bank0.asm
   10                     
   11           0001        .bank 1
   12           A000        .org $A000
   13                     ;puzzles
   14  01:A000  55 81       .word test5, test10, test, test, test, test, test, test, test
       01:A002  81 81     
       01:A004  B7 80     
       01:A006  B7 80     
       01:A008  B7 80     
       01:A00A  B7 80     
       01:A00C  B7 80     
       01:A00E  B7 80     
       01:A010  B7 80     
   15  01:A012  00 80       .word house, test, test, test, test, test, test, test, test
       01:A014  B7 80     
       01:A016  B7 80     
       01:A018  B7 80     
       01:A01A  B7 80     
       01:A01C  B7 80     
       01:A01E  B7 80     
       01:A020  B7 80     
       01:A022  B7 80     
   16  01:A024  00 80       .word house, test, test, test, test, test, test, test, test
       01:A026  B7 80     
       01:A028  B7 80     
       01:A02A  B7 80     
       01:A02C  B7 80     
       01:A02E  B7 80     
       01:A030  B7 80     
       01:A032  B7 80     
       01:A034  B7 80     
   17                     ;puzzle names
   18  01:A036  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A038  4F 81     
       01:A03A  4F 81     
       01:A03C  4F 81     
       01:A03E  4F 81     
       01:A040  4F 81     
       01:A042  4F 81     
       01:A044  4F 81     
       01:A046  4F 81     
   19  01:A048  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A04A  4F 81     
       01:A04C  4F 81     
       01:A04E  4F 81     
       01:A050  4F 81     
       01:A052  4F 81     
       01:A054  4F 81     
       01:A056  4F 81     
       01:A058  4F 81     
   20  01:A05A  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A05C  4F 81     
       01:A05E  4F 81     
       01:A060  4F 81     
       01:A062  4F 81     
       01:A064  4F 81     
       01:A066  4F 81     
       01:A068  4F 81     
       01:A06A  4F 81     
   21                     ;puzzle sprites
   22  01:A06C  00 00 00    .db $00, $00, $00, $00
       01:A06F  00        
   23  01:A070  00 00 00    .db $00, $00, $00, $00
       01:A073  00        
   24  01:A074  00 00 00    .db $00, $00, $00, $00
       01:A077  00        
   25  01:A078  00 00 00    .db $00, $00, $00, $00
       01:A07B  00        
   26  01:A07C  00 00 00    .db $00, $00, $00, $00
       01:A07F  00        
   27  01:A080  00 00 00    .db $00, $00, $00, $00
       01:A083  00        
   28  01:A084  00 00 00    .db $00, $00, $00, $00
       01:A087  00        
   29  01:A088  00 00 00    .db $00, $00, $00, $00
       01:A08B  00        
   30  01:A08C  00 00 00    .db $00, $00, $00, $00
       01:A08F  00        
   31  01:A090  00 00 00    .db $00, $00, $00, $00
       01:A093  00        
   32  01:A094  00 00 00    .db $00, $00, $00, $00
       01:A097  00        
   33  01:A098  00 00 00    .db $00, $00, $00, $00
       01:A09B  00        
   34  01:A09C  00 00 00    .db $00, $00, $00, $00
       01:A09F  00        
   35  01:A0A0  00 00 00    .db $00, $00, $00, $00
       01:A0A3  00        
   36  01:A0A4  00 00 00    .db $00, $00, $00, $00
       01:A0A7  00        
   37  01:A0A8  00 00 00    .db $00, $00, $00, $00
       01:A0AB  00        
   38  01:A0AC  00 00 00    .db $00, $00, $00, $00
       01:A0AF  00        
   39  01:A0B0  00 00 00    .db $00, $00, $00, $00
       01:A0B3  00        
   40  01:A0B4  00 00 00    .db $00, $00, $00, $00
       01:A0B7  00        
   41  01:A0B8  00 00 00    .db $00, $00, $00, $00
       01:A0BB  00        
   42  01:A0BC  00 00 00    .db $00, $00, $00, $00
       01:A0BF  00        
   43  01:A0C0  00 00 00    .db $00, $00, $00, $00
       01:A0C3  00        
   44  01:A0C4  00 00 00    .db $00, $00, $00, $00
       01:A0C7  00        
   45  01:A0C8  00 00 00    .db $00, $00, $00, $00
       01:A0CB  00        
   46  01:A0CC  00 00 00    .db $00, $00, $00, $00
       01:A0CF  00        
   47  01:A0D0  00 00 00    .db $00, $00, $00, $00
       01:A0D3  00        
   48  01:A0D4  00 00 00    .db $00, $00, $00, $00
       01:A0D7  00        
   49                       
   50                       
   51           BFFA        .org $BFFA     ;first of the three vectors starts here
   52  01:BFFA  C6 CF       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   53                                        ;processor will jump to the label NMI:
   54  01:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   55                                        ;to the label RESET:
   56  01:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
#[3]   Puzzles/frog.asm
    4                       .include "Puzzles/frog.asm"
    1  02:8000            frog:
    2  02:8000  02 62 00    .db $02, $62, $00, $19
       02:8003  19        
    3  02:8004  00 00 00    .db $00, $00, $00, $00, $18, $30, $24, $48, $2C, $68, $1F, $F0, $3F, $F8, $7F, $FC, $7F, $FC, $60, $0C, $33, $98, $18, $30, $0F, $E0, $3C, $78, $78, $3C
       02:8007  00 18 30  
       02:800A  24 48 2C  
       02:800D  68 1F F0  
       02:8010  3F F8 7F  
       02:8013  FC 7F FC  
       02:8016  60 0C 33  
       02:8019  98 18 30  
       02:801C  0F E0 3C  
       02:801F  78 78 3C  
    4  02:8022  00 FF 13    .db $00, $FF, $13, $FF, $25, $20, $FF, $22, $41, $FF, $45, $10, $FF, $26, $FF, $11, $40, $FF, $11, $40, $FF, $11, $40, $FF, $26, $FF, $45, $10, $FF, $22, $41, $FF, $25, $20, $FF, $13, $FF, $00, $FF
       02:8025  FF 25 20  
       02:8028  FF 22 41  
       02:802B  FF 45 10  
       02:802E  FF 26 FF  
       02:8031  11 40 FF  
       02:8034  11 40 FF  
       02:8037  11 40 FF  
       02:803A  26 FF 45  
       02:803D  10 FF 22  
       02:8040  41 FF 25  
       02:8043  20 FF 13  
       02:8046  FF 00 FF  
    5  02:8049  00 FF 00    .db $00, $FF, $00, $FF, $22, $FF, $11, $11, $FF, $12, $21, $FF, $90, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $22, $FF, $23, $20, $FF, $22, $FF, $70, $FF, $44, $FF, $44, $FF
       02:804C  FF 22 FF  
       02:804F  11 11 FF  
       02:8052  12 21 FF  
       02:8055  90 FF B0  
       02:8058  FF D0 FF  
       02:805B  D0 FF 22  
       02:805E  FF 23 20  
       02:8061  FF 22 FF  
       02:8064  70 FF 44  
       02:8067  FF 44 FF  
    6  02:806A            frogImage:
    7  02:806A  55 55 55   .db $55, $55, $55, $55, $55, $55, $55, $55, $69, $55, $A5, $56, $F9, $5B, $E5, $5B, $25, $63, $95, $5A, $AA, $A9, $55, $AA, $22, $A9, $5A, $AA, $AA, $A9, $6A, $AA, $AA, $A5, $A0, $00, $02, $95, $A0, $54, $29, $55, $A0, $02, $95, $55, $AA, $A9, $55, $6A, $BF, $AA, $56, $AB, $FF, $AA, $40, $FF
       02:806D  55 55 55  
       02:8070  55 55 69  
       02:8073  55 A5 56  
       02:8076  F9 5B E5  
       02:8079  5B 25 63  
       02:807C  95 5A AA  
       02:807F  A9 55 AA  
       02:8082  22 A9 5A  
       02:8085  AA AA A9  
       02:8088  6A AA AA  
       02:808B  A5 A0 00  
       02:808E  02 95 A0  
       02:8091  54 29 55  
       02:8094  A0 02 95  
       02:8097  55 AA A9  
       02:809A  55 6A BF  
       02:809D  AA 56 AB  
       02:80A0  FF AA 40  
       02:80A3  FF        
    8  02:80A4            frogName:
    9  02:80A4  04 0F 1B    .db $04, $0F, $1B, $18, $10, $FF
       02:80A7  18 10 FF  
#[2]   Banks/Bank1.asm
    5                     
    6           0003        .bank 3
    7           A000        .org $A000
    8                      
    9                     ;puzzles
   10  03:A000  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A002  00 80     
       03:A004  00 80     
       03:A006  00 80     
       03:A008  00 80     
       03:A00A  00 80     
       03:A00C  00 80     
       03:A00E  00 80     
       03:A010  00 80     
   11  03:A012  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A014  00 80     
       03:A016  00 80     
       03:A018  00 80     
       03:A01A  00 80     
       03:A01C  00 80     
       03:A01E  00 80     
       03:A020  00 80     
       03:A022  00 80     
   12  03:A024  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A026  00 80     
       03:A028  00 80     
       03:A02A  00 80     
       03:A02C  00 80     
       03:A02E  00 80     
       03:A030  00 80     
       03:A032  00 80     
       03:A034  00 80     
   13                     ;puzzle names
   14  03:A036  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A038  A4 80     
       03:A03A  A4 80     
       03:A03C  A4 80     
       03:A03E  A4 80     
       03:A040  A4 80     
       03:A042  A4 80     
       03:A044  A4 80     
       03:A046  A4 80     
   15  03:A048  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A04A  A4 80     
       03:A04C  A4 80     
       03:A04E  A4 80     
       03:A050  A4 80     
       03:A052  A4 80     
       03:A054  A4 80     
       03:A056  A4 80     
       03:A058  A4 80     
   16  03:A05A  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A05C  A4 80     
       03:A05E  A4 80     
       03:A060  A4 80     
       03:A062  A4 80     
       03:A064  A4 80     
       03:A066  A4 80     
       03:A068  A4 80     
       03:A06A  A4 80     
   17                     ;puzzle sprites
   18  03:A06C  00 00 00    .db $00, $00, $00, $00
       03:A06F  00        
   19  03:A070  00 00 00    .db $00, $00, $00, $00
       03:A073  00        
   20  03:A074  00 00 00    .db $00, $00, $00, $00
       03:A077  00        
   21  03:A078  00 00 00    .db $00, $00, $00, $00
       03:A07B  00        
   22  03:A07C  00 00 00    .db $00, $00, $00, $00
       03:A07F  00        
   23  03:A080  00 00 00    .db $00, $00, $00, $00
       03:A083  00        
   24  03:A084  00 00 00    .db $00, $00, $00, $00
       03:A087  00        
   25  03:A088  00 00 00    .db $00, $00, $00, $00
       03:A08B  00        
   26  03:A08C  00 00 00    .db $00, $00, $00, $00
       03:A08F  00        
   27  03:A090  00 00 00    .db $00, $00, $00, $00
       03:A093  00        
   28  03:A094  00 00 00    .db $00, $00, $00, $00
       03:A097  00        
   29  03:A098  00 00 00    .db $00, $00, $00, $00
       03:A09B  00        
   30  03:A09C  00 00 00    .db $00, $00, $00, $00
       03:A09F  00        
   31  03:A0A0  00 00 00    .db $00, $00, $00, $00
       03:A0A3  00        
   32  03:A0A4  00 00 00    .db $00, $00, $00, $00
       03:A0A7  00        
   33  03:A0A8  00 00 00    .db $00, $00, $00, $00
       03:A0AB  00        
   34  03:A0AC  00 00 00    .db $00, $00, $00, $00
       03:A0AF  00        
   35  03:A0B0  00 00 00    .db $00, $00, $00, $00
       03:A0B3  00        
   36  03:A0B4  00 00 00    .db $00, $00, $00, $00
       03:A0B7  00        
   37  03:A0B8  00 00 00    .db $00, $00, $00, $00
       03:A0BB  00        
   38  03:A0BC  00 00 00    .db $00, $00, $00, $00
       03:A0BF  00        
   39  03:A0C0  00 00 00    .db $00, $00, $00, $00
       03:A0C3  00        
   40  03:A0C4  00 00 00    .db $00, $00, $00, $00
       03:A0C7  00        
   41  03:A0C8  00 00 00    .db $00, $00, $00, $00
       03:A0CB  00        
   42  03:A0CC  00 00 00    .db $00, $00, $00, $00
       03:A0CF  00        
   43  03:A0D0  00 00 00    .db $00, $00, $00, $00
       03:A0D3  00        
   44  03:A0D4  00 00 00    .db $00, $00, $00, $00
       03:A0D7  00        
   45                       
   46                       
   47           BFFA        .org $BFFA     ;first of the three vectors starts here
   48  03:BFFA  C6 CF       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   49                                        ;processor will jump to the label NMI:
   50  03:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   51                                        ;to the label RESET:
   52  03:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
#[3]   Puzzles/cat.asm
    4                       .include "Puzzles/cat.asm"
    1  04:8000            cat:
    2  04:8000  02 7E 00    .db $02, $7E, $00, $2B
       04:8003  2B        
    3  04:8004  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $47, $C4, $7B, $BC, $7F, $FC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       04:8007  60 1E F0  
       04:800A  3E F8 3F  
       04:800D  F8 7F FC  
       04:8010  7F FC 47  
       04:8013  C4 7B BC  
       04:8016  7F FC 7C  
       04:8019  7C 76 DC  
       04:801C  39 38 1F  
       04:801F  F0 00 00  
    4  04:8022  00 FF 70    .db $00, $FF, $70, $FF, $54, $FF, $65, $FF, $23, $60, $FF, $13, $70, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $70, $FF, $23, $60, $FF, $65, $FF, $54, $FF, $70, $FF, $00, $FF
       04:8025  FF 54 FF  
       04:8028  65 FF 23  
       04:802B  60 FF 13  
       04:802E  70 FF 11  
       04:8031  80 FF 26  
       04:8034  FF 11 80  
       04:8037  FF 13 70  
       04:803A  FF 23 60  
       04:803D  FF 65 FF  
       04:8040  54 FF 70  
       04:8043  FF 00 FF  
    5  04:8046  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $15, $10, $FF, $43, $40, $FF, $D0, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       04:8049  FF 44 FF  
       04:804C  55 FF B0  
       04:804F  FF D0 FF  
       04:8052  D0 FF 15  
       04:8055  10 FF 43  
       04:8058  40 FF D0  
       04:805B  FF 55 FF  
       04:805E  32 23 FF  
       04:8061  31 30 FF  
       04:8064  90 FF 00  
       04:8067  FF        
    6  04:8068            catImage:
    7  04:8068  55 55 55   .db $55, $55, $55, $55, $56, $95, $A5, $55, $6A, $9A, $A5, $56, $AA, $6A, $A5, $5A, $AA, $AA, $95, $AA, $66, $6A, $96, $AA, $9A, $AA, $58, $0A, $E8, $09, $6A, $8F, $CA, $A5, $9A, $FF, $E9, $96, $AF, $57, $EA, $59, $CF, $7C, $D9, $5F, $C3, $0F, $D5, $5F, $FF, $FD, $55, $55, $55, $55, $40, $FF
       04:806B  55 56 95  
       04:806E  A5 55 6A  
       04:8071  9A A5 56  
       04:8074  AA 6A A5  
       04:8077  5A AA AA  
       04:807A  95 AA 66  
       04:807D  6A 96 AA  
       04:8080  9A AA 58  
       04:8083  0A E8 09  
       04:8086  6A 8F CA  
       04:8089  A5 9A FF  
       04:808C  E9 96 AF  
       04:808F  57 EA 59  
       04:8092  CF 7C D9  
       04:8095  5F C3 0F  
       04:8098  D5 5F FF  
       04:809B  FD 55 55  
       04:809E  55 55 40  
       04:80A1  FF        
    8  04:80A2            catName:
    9  04:80A2  03 0C 0A    .db $03, $0C, $0A, $1D, $FF
       04:80A5  1D FF     
#[2]   Banks/Bank2.asm
    5                     
    6           0005        .bank 5
    7           A000        .org $A000
    8                       
    9                     ;puzzles
   10  05:A000  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A002  00 80     
       05:A004  00 80     
       05:A006  00 80     
       05:A008  00 80     
       05:A00A  00 80     
       05:A00C  00 80     
       05:A00E  00 80     
       05:A010  00 80     
   11  05:A012  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A014  00 80     
       05:A016  00 80     
       05:A018  00 80     
       05:A01A  00 80     
       05:A01C  00 80     
       05:A01E  00 80     
       05:A020  00 80     
       05:A022  00 80     
   12  05:A024  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat
       05:A026  00 80     
       05:A028  00 80     
       05:A02A  00 80     
       05:A02C  00 80     
       05:A02E  00 80     
       05:A030  00 80     
       05:A032  00 80     
       05:A034  00 80     
   13                     ;puzzle names
   14  05:A036  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A038  A2 80     
       05:A03A  A2 80     
       05:A03C  A2 80     
       05:A03E  A2 80     
       05:A040  A2 80     
       05:A042  A2 80     
       05:A044  A2 80     
       05:A046  A2 80     
   15  05:A048  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A04A  A2 80     
       05:A04C  A2 80     
       05:A04E  A2 80     
       05:A050  A2 80     
       05:A052  A2 80     
       05:A054  A2 80     
       05:A056  A2 80     
       05:A058  A2 80     
   16  05:A05A  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName
       05:A05C  A2 80     
       05:A05E  A2 80     
       05:A060  A2 80     
       05:A062  A2 80     
       05:A064  A2 80     
       05:A066  A2 80     
       05:A068  A2 80     
       05:A06A  A2 80     
   17                     ;puzzle sprites
   18  05:A06C  00 00 00    .db $00, $00, $00, $00
       05:A06F  00        
   19  05:A070  00 00 00    .db $00, $00, $00, $00
       05:A073  00        
   20  05:A074  00 00 00    .db $00, $00, $00, $00
       05:A077  00        
   21  05:A078  00 00 00    .db $00, $00, $00, $00
       05:A07B  00        
   22  05:A07C  00 00 00    .db $00, $00, $00, $00
       05:A07F  00        
   23  05:A080  00 00 00    .db $00, $00, $00, $00
       05:A083  00        
   24  05:A084  00 00 00    .db $00, $00, $00, $00
       05:A087  00        
   25  05:A088  00 00 00    .db $00, $00, $00, $00
       05:A08B  00        
   26  05:A08C  00 00 00    .db $00, $00, $00, $00
       05:A08F  00        
   27  05:A090  00 00 00    .db $00, $00, $00, $00
       05:A093  00        
   28  05:A094  00 00 00    .db $00, $00, $00, $00
       05:A097  00        
   29  05:A098  00 00 00    .db $00, $00, $00, $00
       05:A09B  00        
   30  05:A09C  00 00 00    .db $00, $00, $00, $00
       05:A09F  00        
   31  05:A0A0  00 00 00    .db $00, $00, $00, $00
       05:A0A3  00        
   32  05:A0A4  00 00 00    .db $00, $00, $00, $00
       05:A0A7  00        
   33  05:A0A8  00 00 00    .db $00, $00, $00, $00
       05:A0AB  00        
   34  05:A0AC  00 00 00    .db $00, $00, $00, $00
       05:A0AF  00        
   35  05:A0B0  00 00 00    .db $00, $00, $00, $00
       05:A0B3  00        
   36  05:A0B4  00 00 00    .db $00, $00, $00, $00
       05:A0B7  00        
   37  05:A0B8  00 00 00    .db $00, $00, $00, $00
       05:A0BB  00        
   38  05:A0BC  00 00 00    .db $00, $00, $00, $00
       05:A0BF  00        
   39  05:A0C0  00 00 00    .db $00, $00, $00, $00
       05:A0C3  00        
   40  05:A0C4  00 00 00    .db $00, $00, $00, $00
       05:A0C7  00        
   41  05:A0C8  00 00 00    .db $00, $00, $00, $00
       05:A0CB  00        
   42  05:A0CC  00 00 00    .db $00, $00, $00, $00
       05:A0CF  00        
   43  05:A0D0  00 00 00    .db $00, $00, $00, $00
       05:A0D3  00        
   44  05:A0D4  00 00 00    .db $00, $00, $00, $00
       05:A0D7  00        
   45                     
   46           BFFA        .org $BFFA     ;first of the three vectors starts here
   47  05:BFFA  C6 CF       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   48                                        ;processor will jump to the label NMI:
   49  05:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   50                                        ;to the label RESET:
   51  05:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Common/Init.asm
   34                       .include "Routines/Common/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 03 CC    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 07 CC    JSR SetMapperControls
   34                       
   35  06:C040  20 44 CC    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   Picross.asm
   35                     
   36  06:C048  A9 00       LDA #TITLE_IDX
   37  06:C04A  A2 00       LDX #$00
   38  06:C04C  20 FE C8    JSR ChangeGameMode
   39  06:C04F  20 88 CB    JSR InitPPUControl
   40                       
   41                     
   42                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   43                     ;;     Main Program         ;;
   44                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   45                     
   46  06:C052            Forever:
   47                     
   48  06:C052  EE 0C 00    INC sleeping
   49                     
   50  06:C055            .loop
   51  06:C055  AD 0C 00    LDA sleeping
   52  06:C058  D0 FB       BNE .loop
   53                     
   54  06:C05A  EE 0A 00    INC time  
   55  06:C05D  AD C6 00    LDA pauseState
   56  06:C060  D0 03       BNE .skipScaleUpdate
   57  06:C062  EE 0B 00    INC scaledTime
   58  06:C065            .skipScaleUpdate:
   59  06:C065  20 6B C0    JSR GameLoop
   60                     
   61                     
   62  06:C068  4C 52 C0    JMP Forever     ;jump back to Forever, infinite loop
   63                       
   64                     ;; dynamic jump table
   65                     
   66  06:C06B            GameLoop:
   67                     
   68                       MACROCallDynamicJump game_mode
                          
       06:C06B  AD 0E 00    LDA game_mode
       06:C06E  20 BB C9    JSR Dynamic_Jump
                                  
   69                       ;; we'll pop the return address here as the table index, so 
   70                       ;; the routine we pick will return us to whatever called Game Loop
   71                       ;; when it returns
   72                     
   73  06:C071            GameLoopJumpTable:
   74                     
   75  06:C071  77 C0       .word UpdateTitle
   76  06:C073  8F C2       .word UpdateGame
   77  06:C075  AD C8       .word UpdateGameOver
   78                       
   79                     
   80                       ;;RTS is called in the subroutine
   81                     
   82                       
#[2]   Routines/Game_States/UpdateTitle.asm
   83                       .include "Routines/Game_States/UpdateTitle.asm"
    1  06:C077            UpdateTitle:
    2                     
    3  06:C077  AD 10 00    LDA NMI_locks
    4  06:C07A  F0 01       BEQ .unlocked
    5                       
    6  06:C07C  60          RTS
    7                       
    8  06:C07D            .unlocked:
    9                     
   10  06:C07D  20 81 C0    JSR DoUpdateTitle  
   11  06:C080  60          RTS
   12                       
   13  06:C081            DoUpdateTitle:
   14                     
   15  06:C081  AD 0F 00    LDA mode_state
   16  06:C084  20 BB C9    JSR Dynamic_Jump
   17                         
   18  06:C087            UpdateTitleJumpTable:
   19                     
   20  06:C087  93 C0       .word UpdateTitleInit
   21  06:C089  A4 C0       .word UpdateBankSelection
   22  06:C08B  C9 C0       .word UpdateScroll
   23  06:C08D  EB C0       .word UpdatePuzzleSelection
   24  06:C08F  2C C1       .word UpdateScrollBack
   25  06:C091  49 C1       .word UpdateTitleExit
   26                     
   27                       
   28                     ;;title should have two steps- the bank selection and the puzzle selection
   29                     ;;top half of screen can be used as the title screen, and the bottom half will have the selectable options
   30                     ;;
   31                     ;;starting options list: BANK 0, BANK 1, BANK 2
   32                     ;;select one, then scroll over to the right, with numbers for puzzles 
   33                     
   34  06:C093            UpdateTitleInit:
   35                     
   36  06:C093  20 64 CB    JSR TurnOnSprites
   37                       
   38  06:C096  A9 00       LDA #$00
   39  06:C098  8D C1 00    STA mouse_index
   40  06:C09B  A9 00       LDA #$00
   41  06:C09D  8D C2 00    STA mouse_index+1
   42                     
   43  06:C0A0            .changeModeState:
   44                     
   45  06:C0A0  EE 0F 00    INC mode_state
   46  06:C0A3            .leave:
   47  06:C0A3  60          RTS
   48                       
   49  06:C0A4            UpdateBankSelection:
   50                     
   51  06:C0A4  20 E7 C1    JSR UpdateBankPointer
   52                       
   53  06:C0A7  AD 1A 00    LDA gamepadPressed
   54  06:C0AA  29 01       AND #GAMEPAD_A
   55  06:C0AC  F0 1A       BEQ .leave
   56                       
   57  06:C0AE            .changeModeState:
   58                     
   59                       ;;load bank
   60                       
   61  06:C0AE  AD C1 00    LDA mouse_index
   62  06:C0B1  8D 00 70    STA bank_index
   63  06:C0B4  A9 FF       LDA #$FF
   64  06:C0B6  20 CF C1    JSR SetPointerSprite
   65                        
   66                       ;;load bank
   67  06:C0B9  20 03 CC    JSR ResetMapper
   68  06:C0BC  AD 00 70    LDA bank_index
   69  06:C0BF  8D A7 00    STA currentPRGBank
   70  06:C0C2  20 12 CC    JSR LoadPRGBank
   71                     
   72  06:C0C5  EE 0F 00    INC mode_state
   73  06:C0C8            .leave:
   74  06:C0C8  60          RTS
   75                       
   76  06:C0C9            UpdateScroll:
   77  06:C0C9  EE 1D 00    INC PPU_ScrollX
   78  06:C0CC  EE 1D 00    INC PPU_ScrollX
   79  06:C0CF  EE 1D 00    INC PPU_ScrollX
   80  06:C0D2  EE 1D 00    INC PPU_ScrollX
   81  06:C0D5  D0 13       BNE .leave
   82  06:C0D7  AD 1F 00    LDA PPU_ScrollNT
   83  06:C0DA  49 01       EOR #%00000001
   84  06:C0DC  8D 1F 00    STA PPU_ScrollNT
   85                       
   86  06:C0DF            .changeModeState:
   87  06:C0DF  A9 01       LDA #$01
   88  06:C0E1  20 CF C1    JSR SetPointerSprite
   89  06:C0E4  20 95 C1    JSR InitPuzzlePointer
   90  06:C0E7  EE 0F 00    INC mode_state
   91  06:C0EA            .leave:
   92  06:C0EA  60          RTS
   93                       
   94  06:C0EB            UpdatePuzzleSelection:
   95                     
   96  06:C0EB  20 24 C2    JSR UpdatePuzzlePointer
   97                       
   98  06:C0EE  AD 1A 00    LDA gamepadPressed
   99  06:C0F1  29 02       AND #GAMEPAD_B
  100  06:C0F3  D0 10       BNE .changeToScrollBack
  101  06:C0F5  AD 1A 00    LDA gamepadPressed
  102  06:C0F8  29 09       AND #GAMEPAD_CONFIRM
  103  06:C0FA  F0 2F       BEQ .leave
  104                       
  105  06:C0FC  EE 0F 00    INC mode_state
  106  06:C0FF  EE 0F 00    INC mode_state
  107  06:C102  4C 2B C1    JMP .leave
  108                       
  109  06:C105            .changeToScrollBack:
  110                      
  111  06:C105  A9 FF       LDA #$FF
  112  06:C107  20 CF C1    JSR SetPointerSprite
  113  06:C10A  20 8D C1    JSR InitBankPointer
  114  06:C10D  AD 00 70    LDA bank_index
  115  06:C110  8D C1 00    STA mouse_index
  116  06:C113  20 19 C2    JSR SetBankPointerFromIndex
  117                       
  118  06:C116  A9 00       LDA #$00
  119  06:C118  8D 1E 00    STA PPU_ScrollY
  120  06:C11B  A9 FC       LDA #$FC
  121  06:C11D  8D 1D 00    STA PPU_ScrollX
  122  06:C120  AD 1F 00    LDA PPU_ScrollNT
  123  06:C123  29 FE       AND #$FE
  124  06:C125  8D 1F 00    STA PPU_ScrollNT
  125                       
  126  06:C128  EE 0F 00    INC mode_state
  127  06:C12B            .leave:
  128  06:C12B  60          RTS
  129                       
  130  06:C12C            UpdateScrollBack:
  131                     
  132  06:C12C  CE 1D 00    DEC PPU_ScrollX
  133  06:C12F  CE 1D 00    DEC PPU_ScrollX
  134  06:C132  CE 1D 00    DEC PPU_ScrollX
  135  06:C135  CE 1D 00    DEC PPU_ScrollX
  136  06:C138  D0 0E       BNE .leave
  137                       
  138  06:C13A            .changeModeState:
  139                     
  140  06:C13A  A9 01       LDA #$01
  141  06:C13C  20 CF C1    JSR SetPointerSprite
  142  06:C13F  CE 0F 00    DEC mode_state
  143  06:C142  CE 0F 00    DEC mode_state
  144  06:C145  CE 0F 00    DEC mode_state
  145                       
  146  06:C148            .leave:
  147  06:C148  60          RTS
  148                       
  149  06:C149            UpdateTitleExit:
  150                     
  151                       ;;reset screen scroll
  152  06:C149  A9 00       LDA #$00
  153  06:C14B  8D 1D 00    STA PPU_ScrollX
  154  06:C14E  8D 1F 00    STA PPU_ScrollNT
  155                      
  156                       ;; we can also pick out the puzzle index
  157                       ;; we have the mouse indexes - one vert, one hori
  158                       ;; take vert, mult by 9- alternatively, mult by 8, add index 
  159                       ;; IE - ind = 1, mult 8 = 8, add 1 = 9
  160                       ;; add X index
  161  06:C151  AD C1 00    LDA mouse_index
  162  06:C154  0A          ASL A
  163  06:C155  0A          ASL A
  164  06:C156  0A          ASL A
  165  06:C157  18          CLC
  166  06:C158  6D C1 00    ADC mouse_index
  167  06:C15B  6D C2 00    ADC mouse_index+1
  168  06:C15E  8D 01 70    STA puzzle_index
  169                     
  170  06:C161  20 6D CB    JSR TurnOffSprites
  171                       
  172                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C164  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C166  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C168  8E 14 00          STX table_address
       06:C16B  8D 15 00          STA table_address+1
                                  
  173                       MACROGetDoubleIndex puzzle_index
                          
       06:C16E  AD 01 70          LDA puzzle_index
       06:C171  0A                ASL A
       06:C172  A8                TAY
                                  
  174  06:C173  20 E1 C9    JSR GetTableAtIndex
  175                       MACROGetPointer table_address, puzzle_address
                          
       06:C176  AD 14 00          LDA table_address
       06:C179  8D A9 00          STA puzzle_address
       06:C17C  AD 15 00          LDA table_address+1
       06:C17F  8D AA 00          STA puzzle_address+1
                          
  176                     
  177  06:C182  A0 00       LDY #$00
  178  06:C184  B1 A9       LDA [puzzle_address], y
  179  06:C186  AA          TAX
  180                     
  181  06:C187  A9 01       LDA #GAME_IDX
  182  06:C189  20 FE C8    JSR ChangeGameMode
  183                       
  184  06:C18C            .leave
  185  06:C18C  60          RTS
  186                       
  187  06:C18D            InitBankPointer:
  188                     
  189  06:C18D  A2 A0       LDX #$A0
  190  06:C18F  A9 60       LDA #$60
  191  06:C191  20 A8 C1    JSR InitPointer
  192                       
  193  06:C194  60          RTS  
  194                       
  195  06:C195            InitPuzzlePointer:
  196                       
  197  06:C195  A2 AE       LDX #$AE
  198  06:C197  A9 10       LDA #$10
  199  06:C199  20 A8 C1    JSR InitPointer
  200                       
  201  06:C19C  60          RTS
  202                     
  203  06:C19D            ResetMouseIndex:
  204                     
  205  06:C19D  A9 00       LDA #$00
  206  06:C19F  8D C1 00    STA mouse_index
  207  06:C1A2  A9 00       LDA #$00
  208  06:C1A4  8D C2 00    STA mouse_index+1
  209  06:C1A7  60          RTS
  210                     
  211  06:C1A8            InitPointer:
  212                     
  213  06:C1A8  20 AF C1    JSR SetPointerPosition
  214  06:C1AB  20 9D C1    JSR ResetMouseIndex
  215  06:C1AE  60          RTS  
  216                       
  217  06:C1AF            SetPointerPosition:
  218                     
  219  06:C1AF  48          PHA
  220  06:C1B0  8A          TXA
  221  06:C1B1  20 B9 C1    JSR SetPointerYPosition
  222  06:C1B4  68          PLA
  223  06:C1B5  20 C4 C1    JSR SetPointerXPosition
  224                      
  225  06:C1B8  60          RTS
  226                       
  227  06:C1B9            SetPointerYPosition:
  228                       
  229  06:C1B9  48          PHA
  230  06:C1BA  A9 00       LDA #SPRITE_YPOS
  231  06:C1BC  20 DA C1    JSR GetPointerDataIndexInX
  232  06:C1BF  68          PLA
  233  06:C1C0  9D 00 02    STA SPRITE_DATA, x
  234  06:C1C3  60          RTS
  235                       
  236  06:C1C4            SetPointerXPosition:  
  237                       
  238  06:C1C4  48          PHA
  239  06:C1C5  A9 03       LDA #SPRITE_XPOS
  240  06:C1C7  20 DA C1    JSR GetPointerDataIndexInX
  241  06:C1CA  68          PLA
  242  06:C1CB  9D 00 02    STA SPRITE_DATA, x 
  243  06:C1CE  60          RTS
  244                     
  245  06:C1CF            SetPointerSprite:
  246                     
  247                     ;; A has aprite we want
  248  06:C1CF  48          PHA
  249  06:C1D0  A9 01       LDA #SPRITE_ID
  250  06:C1D2  20 DA C1    JSR GetPointerDataIndexInX
  251  06:C1D5  68          PLA
  252  06:C1D6  9D 00 02    STA SPRITE_DATA, x
  253  06:C1D9  60          RTS
  254                       
  255  06:C1DA            GetPointerDataIndexInX:
  256                     
  257  06:C1DA  8D 02 00    STA temp3
  258  06:C1DD  A9 01       LDA #$01
  259  06:C1DF  0A          ASL A
  260  06:C1E0  0A          ASL A
  261  06:C1E1  18          CLC
  262  06:C1E2  6D 02 00    ADC temp3
  263  06:C1E5  AA          TAX
  264                       
  265  06:C1E6  60          RTS
  266                       
  267                       
  268  06:C1E7            UpdateBankPointer:
  269                      
  270                       ;;bank pointer is 1D, will loop between 0->3
  271  06:C1E7  AD 1A 00    LDA gamepadPressed
  272  06:C1EA  D0 01       BNE .continue
  273  06:C1EC            .leaveEarly:
  274  06:C1EC  60          RTS
  275                       
  276  06:C1ED            .continue:
  277  06:C1ED  A9 00       LDA #$00
  278  06:C1EF  8D 00 00    STA temp1
  279                       
  280  06:C1F2            .parseInputs:
  281  06:C1F2  AD 1A 00    LDA gamepadPressed
  282  06:C1F5  29 30       AND #GAMEPAD_VERT
  283  06:C1F7  F0 F3       BEQ .leaveEarly
  284  06:C1F9  0A          ASL A
  285  06:C1FA  0A          ASL A
  286  06:C1FB            .checkDown:
  287  06:C1FB  0A          ASL A
  288  06:C1FC  90 03       BCC .checkUp
  289  06:C1FE  EE 00 00    INC temp1
  290  06:C201            .checkUp:
  291  06:C201  0A          ASL A
  292  06:C202  90 03       BCC .move
  293  06:C204  CE 00 00    DEC temp1
  294  06:C207            .move:
  295                       
  296  06:C207  AD C1 00    LDA mouse_index
  297  06:C20A  18          CLC
  298  06:C20B  6D 00 00    ADC temp1
  299  06:C20E  C9 02       CMP #$02
  300  06:C210  F0 04       BEQ .skipMod
  301  06:C212  90 02       BCC .skipMod
  302  06:C214  A9 00       LDA #$00
  303  06:C216            .skipMod:
  304  06:C216  8D C1 00    STA mouse_index
  305                       ;; mult mouse_index by 16
  306  06:C219            SetBankPointerFromIndex:
  307                     
  308  06:C219  0A          ASL A
  309  06:C21A  0A          ASL A
  310  06:C21B  0A          ASL A
  311  06:C21C  0A          ASL A
  312  06:C21D  18          CLC
  313  06:C21E  69 A0       ADC #$A0
  314  06:C220  20 B9 C1    JSR SetPointerYPosition
  315                     
  316  06:C223            .leave:
  317                       
  318  06:C223  60          RTS
  319                       
  320  06:C224            UpdatePuzzlePointer:
  321                     
  322                       ;;puzzle pointer is 2D, will loop between 0-9 and 0-2
  323  06:C224  AD 1A 00    LDA gamepadPressed
  324  06:C227  F0 65       BEQ .leave 
  325                       
  326  06:C229  A9 00       LDA #$00
  327  06:C22B  8D 00 00    STA temp1
  328  06:C22E  8D 01 00    STA temp2
  329                       
  330  06:C231            .parseInputs:
  331  06:C231  AD 1A 00    LDA gamepadPressed
  332  06:C234  29 F0       AND #GAMEPAD_MOVE
  333  06:C236  F0 56       BEQ .leave
  334  06:C238  0A          ASL A
  335  06:C239  90 03       BCC .checkLeft
  336  06:C23B  EE 00 00    INC temp1
  337  06:C23E            .checkLeft:
  338  06:C23E  0A          ASL A
  339  06:C23F  90 03       BCC .checkDown
  340  06:C241  CE 00 00    DEC temp1
  341  06:C244            .checkDown:
  342  06:C244  0A          ASL A
  343  06:C245  90 03       BCC .checkUp
  344  06:C247  EE 01 00    INC temp2
  345  06:C24A            .checkUp:
  346  06:C24A  0A          ASL A
  347  06:C24B  90 03       BCC .move
  348  06:C24D  CE 01 00    DEC temp2
  349                       
  350  06:C250            .move:
  351                     
  352  06:C250  AD C1 00    LDA mouse_index
  353  06:C253  18          CLC
  354  06:C254  6D 01 00    ADC temp2
  355  06:C257  C9 02       CMP #$02
  356  06:C259  F0 04       BEQ .skipYMod
  357  06:C25B  90 02       BCC .skipYMod
  358  06:C25D  A9 00       LDA #$00
  359  06:C25F            .skipYMod:
  360  06:C25F  8D C1 00    STA mouse_index
  361                       ;; mult mouse_index by 16
  362  06:C262  0A          ASL A
  363  06:C263  0A          ASL A
  364  06:C264  0A          ASL A
  365  06:C265  0A          ASL A
  366  06:C266  18          CLC
  367  06:C267  69 AE       ADC #$AE
  368  06:C269  20 B9 C1    JSR SetPointerYPosition
  369                       
  370  06:C26C  AD C2 00    LDA mouse_index+1
  371  06:C26F  18          CLC
  372  06:C270  6D 00 00    ADC temp1
  373  06:C273  C9 08       CMP #$08
  374  06:C275  F0 04       BEQ .skipXMod
  375  06:C277  90 02       BCC .skipXMod
  376  06:C279  A9 00       LDA #$00
  377  06:C27B            .skipXMod:
  378  06:C27B  8D C2 00    STA mouse_index+1
  379                       ;; we need to move 3 tiles each- so index * 3 * 8,
  380  06:C27E  18          CLC
  381  06:C27F  6D C2 00    ADC mouse_index+1
  382  06:C282  6D C2 00    ADC mouse_index+1
  383  06:C285  0A          ASL A
  384  06:C286  0A          ASL A
  385  06:C287  0A          ASL A
  386  06:C288  18          CLC
  387  06:C289  69 10       ADC #$10
  388  06:C28B  20 C4 C1    JSR SetPointerXPosition
  389                       
  390  06:C28E            .leave:
  391                       
  392  06:C28E  60          RTS
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGame.asm
   84                       .include "Routines/Game_States/UpdateGame.asm"
    1                     ;;VERT_CLUES = $206E
    2                     ;;HORI_CLUES = $2145
    3                     
    4           214E      VERT_CLUES = $214E
    5           218C      HORI_CLUES = $218C
    6           20A8      BANK_LEVEL = $20A8
    7           20E5      TIMER_LOC = $20E5
    8                     
    9           618E      MOUSE_START = $618E
   10                     
   11           0010      HOLD_TIME = $10
   12           0004      HOLD_FREQ = $04
   13                     
   14  06:C28F            UpdateGame:
   15                     
   16  06:C28F  AD 10 00    LDA NMI_locks
   17  06:C292  F0 01       BEQ .unlocked
   18                       
   19  06:C294  60          RTS
   20                       
   21  06:C295            .unlocked:
   22                     
   23  06:C295  20 99 C2    JSR DoUpdateGame
   24  06:C298  60          RTS
   25                       
   26  06:C299            DoUpdateGame:
   27                     
   28  06:C299  AD 0F 00    LDA mode_state
   29  06:C29C  20 BB C9    JSR Dynamic_Jump
   30                       
   31  06:C29F            UpdateGameJumpTable:
   32                     
   33  06:C29F  B3 C2       .word UpdateGameInit
   34  06:C2A1  5F C3       .word UpdateDrawVertClues
   35  06:C2A3  87 C3       .word UpdateDrawHoriClues
   36  06:C2A5  CD C3       .word UpdateGamePlay
   37  06:C2A7  93 C5       .word UpdateClearPuzzle
   38  06:C2A9  A6 C5       .word UpdateMoveScreen
   39  06:C2AB  1F C6       .word UpdateDrawImage
   40  06:C2AD  A5 C6       .word UpdateWaitInput
   41  06:C2AF  BB C6       .word UpdateGameFadeOut
   42  06:C2B1  D0 C6       .word UpdateGameExit
   43                     
   44  06:C2B3            UpdateGameInit:
   45                     
   46                       ;; get the puzzle table in the puzzle address
   47                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C2B3  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C2B5  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C2B7  8E 14 00          STX table_address
       06:C2BA  8D 15 00          STA table_address+1
                                  
   48                       MACROGetDoubleIndex puzzle_index
                          
       06:C2BD  AD 01 70          LDA puzzle_index
       06:C2C0  0A                ASL A
       06:C2C1  A8                TAY
                                  
   49  06:C2C2  20 E1 C9    JSR GetTableAtIndex
   50                       MACROGetPointer table_address, puzzle_address
                          
       06:C2C5  AD 14 00          LDA table_address
       06:C2C8  8D A9 00          STA puzzle_address
       06:C2CB  AD 15 00          LDA table_address+1
       06:C2CE  8D AA 00          STA puzzle_address+1
                          
   51                       MACROGetLabelPointer MOUSE_START, mouse_location
                          
       06:C2D1  A9 61             LDA #HIGH(MOUSE_START)
       06:C2D3  A2 8E             LDX #LOW(MOUSE_START)
                                  
       06:C2D5  8E BF 00          STX mouse_location
       06:C2D8  8D C0 00          STA mouse_location+1
                                  
   52                       
   53                       ;;for clues, we need to get past the header- for a 15x15 puzzle, that's 34 bytes ahead
   54  06:C2DB  A0 00       LDY #$00
   55  06:C2DD  B1 A9       LDA [puzzle_address], y
   56  06:C2DF  AA          TAX
   57  06:C2E0  BD AA C8    LDA PuzzleHeaderSkips, x
   58  06:C2E3  8D 00 00    STA temp1
   59                       
   60  06:C2E6  AD A9 00    LDA puzzle_address
   61  06:C2E9  18          CLC
   62  06:C2EA  6D 00 00    ADC temp1
   63  06:C2ED  8D AB 00    STA clues_address
   64  06:C2F0  A9 00       LDA #$00
   65  06:C2F2  6D AA 00    ADC puzzle_address+1
   66  06:C2F5  8D AC 00    STA clues_address+1
   67                     
   68  06:C2F8  A9 00       LDA #$00
   69  06:C2FA  8D B7 00    STA clueTableIndex
   70  06:C2FD  8D B8 00    STA clueLineIndex
   71  06:C300  8D BE 00    STA clueParity
   72  06:C303  8D B9 00    STA clueOffsetShift
   73  06:C306  8D C1 00    STA mouse_index
   74  06:C309  8D C2 00    STA mouse_index+1
   75  06:C30C  8D C4 00    STA solutionCount
   76  06:C30F  8D C5 00    STA nonSolutionCount
   77  06:C312  8D C8 00    STA GameTime
   78  06:C315  8D C9 00    STA GameTime+1
   79  06:C318  8D CA 00    STA GameTime+2
   80  06:C31B  8D CB 00    STA GameTime+3
   81                             
   82  06:C31E  A9 20       LDA #$20
   83  06:C320  8D BA 00    STA clueDrawAdd
   84                        
   85                       MACROGetLabelPointer VERT_CLUES, clue_start_address
                          
       06:C323  A9 21             LDA #HIGH(VERT_CLUES)
       06:C325  A2 4E             LDX #LOW(VERT_CLUES)
                                  
       06:C327  8E B3 00          STX clue_start_address
       06:C32A  8D B4 00          STA clue_start_address+1
                                  
   86  06:C32D  20 F5 CC    JSR ResetClueDrawAddress
   87                       
   88                       MACROAddPPUStringEntryRawData #HIGH(BANK_LEVEL), #LOW(BANK_LEVEL), #DRAW_HORIZONTAL, #$03
                          
       06:C330  A9 01       LDA #$01
       06:C332  8D 21 00    STA PPU_PendingWrite
       06:C335  A9 20       LDA #HIGH(BANK_LEVEL)
       06:C337  20 1C CB    JSR WriteToPPUString
       06:C33A  A9 A8       LDA #LOW(BANK_LEVEL)
       06:C33C  20 1C CB    JSR WriteToPPUString
       06:C33F  A9 00       LDA #DRAW_HORIZONTAL
       06:C341  20 1C CB    JSR WriteToPPUString
       06:C344  A9 03       LDA #$03 
       06:C346  20 1C CB    JSR WriteToPPUString
                            
   89  06:C349  AD 00 70    LDA bank_index
   90  06:C34C  20 1C CB    JSR WriteToPPUString
   91  06:C34F  A9 60       LDA #$60
   92  06:C351  20 1C CB    JSR WriteToPPUString
   93  06:C354  AE 01 70    LDX puzzle_index
   94  06:C357  E8          INX
   95  06:C358  8A          TXA 
   96  06:C359  20 1C CB    JSR WriteToPPUString
   97                       
   98  06:C35C  EE 0F 00    INC mode_state
   99                     
  100  06:C35F            UpdateDrawVertClues:
  101                       
  102  06:C35F  20 5A CC    JSR PopulateClues
  103  06:C362  90 22       BCC .leave
  104                       
  105  06:C364            .changeModeState:
  106                     
  107  06:C364  A9 00       LDA #$00
  108  06:C366  8D B8 00    STA clueLineIndex
  109  06:C369  8D BE 00    STA clueParity
  110                       
  111  06:C36C  A9 05       LDA #$05
  112  06:C36E  8D B9 00    STA clueOffsetShift
  113                       
  114  06:C371  A9 01       LDA #$01
  115  06:C373  8D BA 00    STA clueDrawAdd
  116                        
  117                       MACROGetLabelPointer HORI_CLUES, clue_start_address
                          
       06:C376  A9 21             LDA #HIGH(HORI_CLUES)
       06:C378  A2 8C             LDX #LOW(HORI_CLUES)
                                  
       06:C37A  8E B3 00          STX clue_start_address
       06:C37D  8D B4 00          STA clue_start_address+1
                                  
  118  06:C380  20 F5 CC    JSR ResetClueDrawAddress
  119                     
  120  06:C383  EE 0F 00    INC mode_state
  121  06:C386            .leave:
  122  06:C386  60          RTS
  123                       
  124  06:C387            UpdateDrawHoriClues:
  125                     
  126  06:C387  20 5A CC    JSR PopulateClues
  127  06:C38A  90 40       BCC .leave
  128                     
  129  06:C38C            .changeModeState:
  130  06:C38C  20 64 CB    JSR TurnOnSprites
  131                       
  132                       ;;set the timer to 00
  133                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C38F  A9 01       LDA #$01
       06:C391  8D 21 00    STA PPU_PendingWrite
       06:C394  A9 20       LDA #HIGH(TIMER_LOC)
       06:C396  20 1C CB    JSR WriteToPPUString
       06:C399  A9 E5       LDA #LOW(TIMER_LOC)
       06:C39B  20 1C CB    JSR WriteToPPUString
       06:C39E  A9 00       LDA #DRAW_HORIZONTAL
       06:C3A0  20 1C CB    JSR WriteToPPUString
       06:C3A3  A9 05       LDA #$05 
       06:C3A5  20 1C CB    JSR WriteToPPUString
                            
  134  06:C3A8  A9 00       LDA #$00
  135  06:C3AA  20 1C CB    JSR WriteToPPUString
  136  06:C3AD  A9 00       LDA #$00
  137  06:C3AF  20 1C CB    JSR WriteToPPUString
  138  06:C3B2  A9 61       LDA #$61
  139  06:C3B4  20 1C CB    JSR WriteToPPUString
  140  06:C3B7  A9 00       LDA #$00
  141  06:C3B9  20 1C CB    JSR WriteToPPUString
  142  06:C3BC  A9 00       LDA #$00
  143  06:C3BE  20 1C CB    JSR WriteToPPUString
  144                       
  145                       ;;reset time
  146  06:C3C1  A9 00       LDA #$00
  147  06:C3C3  8D 0A 00    STA time
  148  06:C3C6  8D 0B 00    STA scaledTime
  149                       
  150  06:C3C9  EE 0F 00    INC mode_state
  151  06:C3CC            .leave:
  152  06:C3CC  60          RTS
  153                       
  154  06:C3CD            UpdateGamePlay:
  155                         
  156  06:C3CD  AD C6 00    LDA pauseState
  157  06:C3D0  F0 04       BEQ .checkPause
  158  06:C3D2  20 26 C8    JSR UpdatePause
  159  06:C3D5  60          RTS
  160                       
  161  06:C3D6            .checkPause:
  162                       
  163  06:C3D6  AD 1A 00    LDA gamepadPressed
  164  06:C3D9  29 08       AND #GAMEPAD_START
  165  06:C3DB  F0 22       BEQ .updatePlay
  166  06:C3DD  A9 01       LDA #$01
  167  06:C3DF  8D C6 00    STA pauseState
  168  06:C3E2  A9 00       LDA #$00
  169  06:C3E4  8D B8 00    STA clueLineIndex 
  170  06:C3E7  8D B9 00    STA clueOffsetShift            
  171                     
  172                       ;;we need the pause screen table loaded
  173                       MACROGetLabelPointer Pause_Menu, pause_address
                          
       06:C3EA  A9 FC             LDA #HIGH(Pause_Menu)
       06:C3EC  A2 7C             LDX #LOW(Pause_Menu)
                                  
       06:C3EE  8E AD 00          STX pause_address
       06:C3F1  8D AE 00          STA pause_address+1
                                  
  174                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:C3F4  A9 21             LDA #HIGH($210A)
       06:C3F6  A2 0A             LDX #LOW($210A)
                                  
       06:C3F8  8E B1 00          STX pause_draw_address
       06:C3FB  8D B2 00          STA pause_draw_address+1
                                  
  175                       
  176                       
  177  06:C3FE  60          RTS
  178                     
  179  06:C3FF            .updatePlay:
  180                     
  181  06:C3FF  20 A7 C7    JSR UpdateTimeDisplay
  182                             
  183  06:C402  A9 00       LDA #$00
  184  06:C404  8D 00 00    STA temp1
  185  06:C407  8D 01 00    STA temp2
  186  06:C40A  8D 02 00    STA temp3
  187                       
  188  06:C40D            .checkPressed:  
  189                     
  190  06:C40D  AD 1A 00    LDA gamepadPressed
  191  06:C410  29 F0       AND #GAMEPAD_MOVE
  192  06:C412  F0 0B       BEQ .checkHeld
  193                       
  194  06:C414  A9 10       LDA #HOLD_TIME
  195  06:C416  8D C7 00    STA holdTimer 
  196  06:C419  AD 1A 00    LDA gamepadPressed
  197  06:C41C  4C 33 C4    JMP .parseInputs
  198                       
  199  06:C41F            .checkHeld:
  200                       
  201  06:C41F  AD 18 00    LDA gamepad
  202  06:C422  29 F0       AND #GAMEPAD_MOVE
  203  06:C424  F0 2F       BEQ .checkPaintPress
  204                       
  205                       ;;decrement the hold timer
  206  06:C426  CE C7 00    DEC holdTimer
  207  06:C429  D0 2A       BNE .checkPaintPress
  208  06:C42B  A9 04       LDA #HOLD_FREQ
  209  06:C42D  8D C7 00    STA holdTimer
  210  06:C430  AD 18 00    LDA gamepad
  211                     
  212  06:C433            .parseInputs:
  213                     
  214  06:C433  29 F0       AND #GAMEPAD_MOVE
  215  06:C435  F0 1E       BEQ .checkPaintPress
  216  06:C437  0A          ASL A
  217  06:C438  90 03       BCC .checkLeft
  218  06:C43A  EE 00 00    INC temp1
  219  06:C43D            .checkLeft:
  220  06:C43D  0A          ASL A
  221  06:C43E  90 03       BCC .checkDown
  222  06:C440  CE 00 00    DEC temp1
  223  06:C443            .checkDown:
  224  06:C443  0A          ASL A
  225  06:C444  90 03       BCC .checkUp
  226  06:C446  EE 01 00    INC temp2
  227  06:C449            .checkUp:
  228  06:C449  0A          ASL A
  229  06:C44A  90 03       BCC .move
  230  06:C44C  CE 01 00    DEC temp2
  231                       
  232  06:C44F            .move:
  233                      
  234  06:C44F  20 EB C6    JSR MoveMouse
  235  06:C452  20 53 C7    JSR UpdateMouseScreenPos
  236                       
  237  06:C455            .checkPaintPress:
  238                     
  239  06:C455  AD 1A 00    LDA gamepadPressed
  240  06:C458  29 03       AND #GAMEPAD_AB
  241  06:C45A  F0 41       BEQ .updatePaint
  242                       ;;A or B pressed, get current tile
  243                       
  244  06:C45C  8D 00 00    STA temp1
  245                       
  246  06:C45F  A0 00       LDY #$00
  247  06:C461  B1 BF       LDA [mouse_location], y
  248  06:C463  8D 01 00    STA temp2
  249                       
  250                         ;;A treats X and Clear as clear
  251                             ;;B treats mark and clear as clear
  252                             ;;clear->mark->x
  253                             
  254                     
  255  06:C466  C9 7C       CMP #$7C      ;check if this is a marked tile
  256  06:C468  B0 0F       BCS .getClearTile
  257                       ;;cleared tile- store off marked tile to paint with instead
  258                       ;;not a clear tile- a mark or an x - check A or B  
  259  06:C46A  4E 00 00    LSR temp1
  260  06:C46D  B0 05       BCS .getMarkTile
  261                       
  262  06:C46F            .getXTile:
  263  06:C46F  A9 80       LDA #$80
  264  06:C471  4C 97 C4    JMP .finishGetTile
  265                       
  266  06:C474            .getMarkTile:
  267  06:C474  A9 70       LDA #$70
  268  06:C476  4C 97 C4    JMP .finishGetTile
  269                     
  270  06:C479            .getClearTile:
  271                       
  272  06:C479  4E 00 00    LSR temp1
  273  06:C47C  90 0A       BCC .checkB
  274  06:C47E  AD 01 00    LDA temp2
  275  06:C481  C9 8C       CMP #$8C                      ;; check if in X tiles - will be if >=
  276  06:C483  90 0D       BCC .clearTile
  277  06:C485  4C 74 C4    JMP .getMarkTile
  278                       
  279  06:C488            .checkB:
  280                       
  281  06:C488  AD 01 00   LDA temp2
  282  06:C48B  C9 8C      CMP #$8C
  283  06:C48D  B0 03      BCS .clearTile
  284  06:C48F  4C 6F C4   JMP .getXTile
  285                       
  286  06:C492            .clearTile:
  287  06:C492  A9 60       LDA #$60
  288  06:C494  4C 97 C4    JMP .finishGetTile
  289                       
  290  06:C497            .finishGetTile:
  291  06:C497  8D C3 00    STA currentPaintTile
  292  06:C49A  4C A5 C4    JMP .setTile
  293                     
  294                     ;;we'll keep a copy of the puzzle tiles in memory, since we can't easily access tiles in the PPU
  295                     ;;might be best to just keep an entire copy of the nametable instead of trying to index it and deal with 16 bit math
  296                     ;;we can load the nametable into memory as we draw it
  297                     
  298  06:C49D            .updatePaint:
  299                     
  300  06:C49D  AD 18 00    LDA gamepad
  301  06:C4A0  29 03       AND #GAMEPAD_AB
  302  06:C4A2  D0 01       BNE .setTile
  303  06:C4A4  60          RTS  
  304                       
  305  06:C4A5            .setTile:
  306                     
  307                       ;;take Y position, mult by 2 to get starting index in puzzle solution
  308  06:C4A5  AD C2 00    LDA mouse_index+1
  309                     ;;if the puzzle is a 5x5, we only have one byte per row, so no need to double this
  310  06:C4A8  8D 00 00    STA temp1
  311  06:C4AB  A0 00       LDY #$00
  312  06:C4AD  B1 A9       LDA [puzzle_address], y
  313  06:C4AF  F0 03       BEQ .skipDouble
  314  06:C4B1  0E 00 00    ASL temp1
  315  06:C4B4            .skipDouble:
  316  06:C4B4  AD 00 00    LDA temp1
  317  06:C4B7  18          CLC
  318  06:C4B8  69 04       ADC #$04 ;; add to get past header
  319  06:C4BA  8D 00 00    STA temp1
  320                       
  321                       ;;div X position by 8 to get the byte index
  322  06:C4BD  AD C1 00    LDA mouse_index
  323  06:C4C0  4A          LSR A
  324  06:C4C1  4A          LSR A
  325  06:C4C2  4A          LSR A
  326  06:C4C3  F0 03       BEQ .getMask
  327                       
  328  06:C4C5  EE 00 00    INC temp1
  329                       
  330  06:C4C8            .getMask:
  331                       
  332  06:C4C8  AD C1 00    LDA mouse_index
  333  06:C4CB  29 07       AND #$07
  334  06:C4CD  AA          TAX
  335  06:C4CE  A9 80       LDA #$80
  336  06:C4D0  E0 00       CPX #$00
  337  06:C4D2  F0 04       BEQ .storeMask
  338                     
  339  06:C4D4            .maskLoop:
  340  06:C4D4  4A          LSR A
  341  06:C4D5  CA          DEX
  342  06:C4D6  D0 FC       BNE .maskLoop
  343  06:C4D8            .storeMask:
  344  06:C4D8  8D 01 00    STA temp2
  345                     
  346  06:C4DB  AC 00 00    LDY temp1
  347  06:C4DE  B1 A9       LDA [puzzle_address], y
  348  06:C4E0  2D 01 00    AND temp2
  349  06:C4E3  8D 00 00    STA temp1     ;get the 0/non zero solution flag 
  350                     
  351  06:C4E6  A0 00       LDY #$00
  352  06:C4E8  B1 BF       LDA [mouse_location], y
  353  06:C4EA  8D 02 00    STA temp3
  354  06:C4ED  29 F0       AND #$F0
  355  06:C4EF  CD C3 00    CMP currentPaintTile
  356  06:C4F2  D0 01       BNE .diffTiles
  357  06:C4F4  60          RTS
  358                       
  359  06:C4F5            .diffTiles:
  360                       ;;tiles are different- check if the current tile is marked as a solution tile
  361  06:C4F5  C9 70       CMP #$70
  362  06:C4F7  D0 0B       BNE .checkNewMark
  363                       ;;if erasing a mark, check if the tile was part of the solution
  364  06:C4F9  AD 00 00    LDA temp1
  365  06:C4FC  D0 18       BNE .antiMark
  366  06:C4FE  CE C5 00    DEC nonSolutionCount
  367  06:C501  4C 1F C5    JMP .overwriteTile
  368                       
  369  06:C504            .checkNewMark:
  370                     
  371  06:C504  AD C3 00    LDA currentPaintTile
  372  06:C507  C9 70       CMP #$70
  373  06:C509  D0 14       BNE .overwriteTile
  374                       
  375  06:C50B  AD 00 00    LDA temp1
  376  06:C50E  D0 0C       BNE .proMark
  377  06:C510  EE C5 00    INC nonSolutionCount 
  378  06:C513  4C 1F C5    JMP .overwriteTile  
  379                       
  380  06:C516            .antiMark:
  381  06:C516  CE C4 00    DEC solutionCount
  382  06:C519  4C 1F C5    JMP .overwriteTile
  383  06:C51C            .proMark:   
  384                       
  385  06:C51C  EE C4 00    INC solutionCount
  386                       
  387  06:C51F            .overwriteTile:
  388                       ;;overwrite tile
  389  06:C51F  AD 02 00    LDA temp3
  390  06:C522  29 0F       AND #$0F
  391  06:C524  0D C3 00    ORA currentPaintTile
  392  06:C527  A0 00       LDY #$00
  393  06:C529  91 BF       STA [mouse_location], y
  394  06:C52B  8D 00 00    STA temp1
  395                       
  396  06:C52E  AD C0 00    LDA mouse_location+1
  397  06:C531  29 3F       AND #$3F
  398  06:C533  8D 01 00    STA temp2
  399                         
  400                       MACROAddPPUStringEntryRawData temp2, mouse_location, #DRAW_HORIZONTAL, #$01
                          
       06:C536  A9 01       LDA #$01
       06:C538  8D 21 00    STA PPU_PendingWrite
       06:C53B  AD 01 00    LDA temp2
       06:C53E  20 1C CB    JSR WriteToPPUString
       06:C541  AD BF 00    LDA mouse_location
       06:C544  20 1C CB    JSR WriteToPPUString
       06:C547  A9 00       LDA #DRAW_HORIZONTAL
       06:C549  20 1C CB    JSR WriteToPPUString
       06:C54C  A9 01       LDA #$01 
       06:C54E  20 1C CB    JSR WriteToPPUString
                            
  401  06:C551  AD 00 00    LDA temp1
  402  06:C554  20 1C CB    JSR WriteToPPUString
  403                       
  404                       ;;also copy to ... copy
  405  06:C557  AD B5 00    LDA clue_draw_address
  406  06:C55A  8D AF 00    STA copy_address
  407  06:C55D  AD B6 00    LDA clue_draw_address+1
  408  06:C560  29 0F       AND #$0F
  409  06:C562  09 60       ORA #$60
  410  06:C564  8D B0 00    STA copy_address+1
  411  06:C567  AD 00 00    LDA temp1
  412  06:C56A  A0 00       LDY #$00
  413  06:C56C  91 AF       STA [copy_address],y
  414                       
  415  06:C56E            .checkSolution: 
  416                     
  417  06:C56E  A0 01       LDY #$01
  418  06:C570  B1 A9       LDA [puzzle_address], y
  419  06:C572  CD C4 00    CMP solutionCount
  420  06:C575  D0 1B       BNE .leave
  421  06:C577  AD C5 00    LDA nonSolutionCount
  422  06:C57A  F0 03       BEQ .changeModeState
  423                       
  424  06:C57C  4C 92 C5    JMP .leave
  425                       
  426                       ;;update the painting
  427  06:C57F            .changeModeState:
  428                      
  429  06:C57F  20 6D CB    JSR TurnOffSprites
  430                        
  431  06:C582  A9 00       LDA #$00
  432  06:C584  8D B5 00    STA clue_draw_address
  433  06:C587  8D B8 00    STA clueLineIndex
  434  06:C58A  A9 20       LDA #$20
  435  06:C58C  8D B6 00    STA clue_draw_address+1
  436                       
  437  06:C58F  EE 0F 00    INC mode_state
  438                     
  439  06:C592            .leave:
  440                      
  441  06:C592  60          RTS
  442                       
  443  06:C593            UpdateClearPuzzle:
  444                     
  445  06:C593  20 69 CD    JSR ClearPuzzle
  446  06:C596  AD B8 00    LDA clueLineIndex
  447  06:C599  C9 1E       CMP #30
  448  06:C59B  D0 08       BNE .leave
  449                       
  450  06:C59D            .changeModeState:
  451                     
  452  06:C59D  A9 00       LDA #$00
  453  06:C59F  8D B8 00    STA clueLineIndex ;using this as a scroller
  454  06:C5A2  EE 0F 00    INC mode_state
  455                     
  456  06:C5A5            .leave:
  457                      
  458  06:C5A5  60          RTS
  459  06:C5A6            UpdateMoveScreen:
  460                       
  461                       ;for 15x15, move 5 tiles left and 5 tiles up- let's do 1 at a time
  462                       ;we'll take the lower nibble of the clue line index as our scroll counter, and the higher nibble as the x/y flag
  463                       
  464  06:C5A6  A0 00       LDY #$00
  465  06:C5A8  B1 A9       LDA [puzzle_address], y
  466  06:C5AA  AA          TAX
  467  06:C5AB  BD A4 C8    LDA PuzzleScrollHori, x
  468  06:C5AE  8D 00 00    STA temp1
  469  06:C5B1  BD A7 C8    LDA PuzzleScrollVert, x
  470  06:C5B4  8D 01 00    STA temp2
  471                       
  472  06:C5B7  AD B8 00    LDA clueLineIndex
  473  06:C5BA  29 10       AND #$10
  474  06:C5BC  D0 1E       BNE .scrollY
  475                       
  476                       ;;scroll X over
  477  06:C5BE  AD B8 00    LDA clueLineIndex
  478  06:C5C1  29 0F       AND #$0F
  479  06:C5C3  0A          ASL A
  480  06:C5C4  0A          ASL A
  481  06:C5C5  0A          ASL A ;mult by 8
  482  06:C5C6  8D 1D 00    STA PPU_ScrollX
  483                       
  484  06:C5C9  EE B8 00    INC clueLineIndex
  485  06:C5CC  AD B8 00    LDA clueLineIndex
  486  06:C5CF  CD 00 00    CMP temp1
  487  06:C5D2  D0 4A       BNE .leave
  488  06:C5D4  A9 10       LDA #$10
  489  06:C5D6  8D B8 00    STA clueLineIndex
  490  06:C5D9  4C 1E C6    JMP .leave
  491                       
  492  06:C5DC            .scrollY:
  493                     
  494  06:C5DC  AD B8 00    LDA clueLineIndex
  495  06:C5DF  29 0F       AND #$0F
  496  06:C5E1  0A          ASL A
  497  06:C5E2  0A          ASL A
  498  06:C5E3  0A          ASL A ;mult by 8
  499  06:C5E4  8D 1E 00    STA PPU_ScrollY
  500                     
  501  06:C5E7  EE B8 00    INC clueLineIndex
  502  06:C5EA  AD B8 00    LDA clueLineIndex
  503  06:C5ED  29 0F       AND #$0F
  504  06:C5EF  CD 01 00    CMP temp2
  505  06:C5F2  D0 2A       BNE .leave
  506                       
  507  06:C5F4            .changeModeState:
  508                     
  509  06:C5F4  A9 8E       LDA #$8E
  510  06:C5F6  8D B5 00    STA clue_draw_address
  511  06:C5F9  A9 21       LDA #$21
  512  06:C5FB  8D B6 00    STA clue_draw_address+1
  513                       
  514  06:C5FE  AD AB 00    LDA clues_address
  515  06:C601  18          CLC
  516  06:C602  6D B7 00    ADC clueTableIndex
  517  06:C605  8D AB 00    STA clues_address
  518  06:C608  AD AC 00    LDA clues_address+1
  519  06:C60B  69 00       ADC #$00
  520  06:C60D  8D AC 00    STA clues_address+1
  521                       
  522  06:C610  A9 00       LDA #$00
  523  06:C612  8D B7 00    STA clueTableIndex
  524  06:C615  8D B8 00    STA clueLineIndex
  525  06:C618  8D B9 00    STA clueOffsetShift
  526                     
  527  06:C61B  EE 0F 00    INC mode_state
  528                     
  529  06:C61E            .leave:
  530                      
  531  06:C61E  60          RTS
  532  06:C61F            UpdateDrawImage:
  533                     
  534                       ;run it twice for a faster draw
  535  06:C61F  20 4B CE    JSR DrawImage
  536  06:C622  AD B7 00    LDA clueTableIndex
  537  06:C625  CD 09 00    CMP tempy
  538                       ;BEQ .changeModeState
  539                       
  540                       ;JSR DrawImage
  541                       ;LDA clueTableIndex
  542                       ;CMP tempy
  543  06:C628  D0 7A       BNE .leave
  544                       
  545  06:C62A            .changeModeState:
  546                     
  547                       ;;do a palette draw
  548                       ;;puzzle address + 03 has the desired palette offset
  549                     
  550  06:C62A  A0 03       LDY #$03
  551  06:C62C  B1 A9       LDA [puzzle_address],y
  552  06:C62E  29 0F       AND #$0F
  553  06:C630  AA          TAX
  554                       
  555  06:C631  B1 A9       LDA [puzzle_address],y
  556  06:C633  29 10       AND #$10
  557  06:C635  F0 15       BEQ .storeBottomVals
  558                       
  559  06:C637  8A          TXA
  560  06:C638  09 10       ORA #$10
  561  06:C63A  8D 01 00    STA temp2
  562  06:C63D  8A          TXA
  563  06:C63E  09 20       ORA #$20
  564  06:C640  8D 02 00    STA temp3
  565  06:C643  8A          TXA
  566  06:C644  09 30       ORA #$30
  567  06:C646  8D 03 00    STA temp4
  568                     
  569  06:C649  4C 5E C6    JMP .checkKeepWhite
  570                       
  571  06:C64C            .storeBottomVals:
  572                     
  573  06:C64C  8A          TXA
  574  06:C64D  09 00       ORA #$00
  575  06:C64F  8D 01 00    STA temp2
  576  06:C652  8A          TXA
  577  06:C653  09 10       ORA #$10
  578  06:C655  8D 02 00    STA temp3
  579  06:C658  8A          TXA
  580  06:C659  09 20       ORA #$20
  581  06:C65B  8D 03 00    STA temp4
  582                       
  583  06:C65E            .checkKeepWhite:
  584                       
  585  06:C65E  B1 A9       LDA [puzzle_address],y
  586  06:C660  29 20       AND #$20
  587  06:C662  F0 05       BEQ .loadPalToPPUStr
  588                       
  589  06:C664  A9 30       LDA #$30
  590  06:C666  8D 03 00    STA temp4
  591                       
  592                       
  593  06:C669            .loadPalToPPUStr:
  594                       
  595                       MACROAddPPUStringEntryRawData #$3F, #$01, #DRAW_HORIZONTAL, #03
                          
       06:C669  A9 01       LDA #$01
       06:C66B  8D 21 00    STA PPU_PendingWrite
       06:C66E  A9 3F       LDA #$3F
       06:C670  20 1C CB    JSR WriteToPPUString
       06:C673  A9 01       LDA #$01
       06:C675  20 1C CB    JSR WriteToPPUString
       06:C678  A9 00       LDA #DRAW_HORIZONTAL
       06:C67A  20 1C CB    JSR WriteToPPUString
       06:C67D  A9 03       LDA #03 
       06:C67F  20 1C CB    JSR WriteToPPUString
                            
  596  06:C682  AD 01 00    LDA temp2
  597  06:C685  20 1C CB    JSR WriteToPPUString
  598  06:C688  AD 02 00    LDA temp3
  599  06:C68B  20 1C CB    JSR WriteToPPUString
  600  06:C68E  AD 03 00    LDA temp4
  601  06:C691  20 1C CB    JSR WriteToPPUString
  602                       
  603  06:C694  A2 01       LDX #$01
  604  06:C696            .copyLoop:
  605                       ;;also store in the copy 
  606  06:C696  BD 00 00    LDA temp1, x
  607  06:C699  9D 00 68    STA Palette_Copy, x
  608  06:C69C  E8          INX
  609  06:C69D  E0 04       CPX #$04
  610  06:C69F  D0 F5       BNE .copyLoop
  611                       
  612                       
  613  06:C6A1  EE 0F 00    INC mode_state
  614                     
  615  06:C6A4            .leave:
  616                      
  617  06:C6A4  60          RTS
  618                       
  619  06:C6A5            UpdateWaitInput:
  620                     
  621  06:C6A5  AD 1A 00    LDA gamepadPressed
  622  06:C6A8  F0 10       BEQ .leave
  623                       
  624  06:C6AA            .changeModeState:
  625  06:C6AA  A9 00       LDA #$00
  626  06:C6AC  8D 0A 00    STA time
  627  06:C6AF  8D 0B 00    STA scaledTime
  628  06:C6B2  A9 02       LDA #GAMEOVER_IDX
  629  06:C6B4  8D CC 00    STA targetGameMode
  630  06:C6B7  EE 0F 00    INC mode_state
  631                     
  632  06:C6BA            .leave:
  633                      
  634  06:C6BA  60          RTS
  635                       
  636  06:C6BB            UpdateGameFadeOut:
  637                     
  638  06:C6BB  AD 0A 00    LDA time
  639  06:C6BE  29 07       AND #$07
  640  06:C6C0  D0 0D       BNE .leave
  641                       ;;every 8 frames, decrement the palettes
  642  06:C6C2  20 99 CB    JSR FadeOutPalettes
  643  06:C6C5  B0 08       BCS .leave
  644                     
  645  06:C6C7            .changeModeState:
  646  06:C6C7  A9 00       LDA #$00
  647  06:C6C9  8D 0A 00    STA time
  648  06:C6CC  EE 0F 00    INC mode_state
  649  06:C6CF            .leave:
  650  06:C6CF  60          RTS  
  651                     
  652  06:C6D0            UpdateGameExit:
  653                     
  654  06:C6D0  AD 0A 00    LDA time
  655  06:C6D3  29 0F       AND #$0F
  656  06:C6D5  D0 13       BNE .leave
  657                     
  658  06:C6D7  A9 00       LDA #$00
  659  06:C6D9  8D 1D 00    STA PPU_ScrollX
  660  06:C6DC  8D 1E 00    STA PPU_ScrollY
  661  06:C6DF  8D 1F 00    STA PPU_ScrollNT
  662                       
  663  06:C6E2  AD CC 00    LDA targetGameMode
  664  06:C6E5  A2 00       LDX #$00
  665  06:C6E7  20 FE C8    JSR ChangeGameMode
  666  06:C6EA            .leave:
  667  06:C6EA  60          RTS
  668                       
  669  06:C6EB            MoveMouse:
  670                     
  671  06:C6EB  AD 00 00    LDA temp1
  672  06:C6EE  0E 00 00    ASL temp1
  673  06:C6F1  0E 00 00    ASL temp1
  674  06:C6F4  0E 00 00    ASL temp1
  675                       
  676  06:C6F7  AD 01 00    LDA temp2
  677  06:C6FA  0E 01 00    ASL temp2 
  678  06:C6FD  0E 01 00    ASL temp2
  679  06:C700  0E 01 00    ASL temp2
  680                       
  681  06:C703  A0 00       LDY #$00
  682  06:C705  B1 A9       LDA [puzzle_address], y ;puzzle size 0 = 5, 1 = 10, 2 = 15  
  683  06:C707  0A          ASL A
  684  06:C708  AA          TAX
  685  06:C709  BD 98 C8    LDA MouseMinimums, x
  686  06:C70C  8D 02 00    STA temp3
  687  06:C70F  BD 9E C8    LDA MouseMaximums, x
  688  06:C712  8D 03 00    STA temp4
  689  06:C715  8A          TXA
  690  06:C716  48          PHA
  691                       
  692  06:C717  A2 03       LDX #SPRITE_XPOS
  693  06:C719  BD 00 02    LDA SPRITE_DATA, x
  694  06:C71C  18          CLC
  695  06:C71D  6D 00 00    ADC temp1
  696                       ;;check against borders
  697  06:C720  CD 02 00    CMP temp3
  698  06:C723  F0 08       BEQ .moveVert 
  699  06:C725  CD 03 00    CMP temp4
  700  06:C728  F0 03       BEQ .moveVert
  701  06:C72A  9D 00 02    STA SPRITE_DATA, x
  702                     
  703  06:C72D            .moveVert:
  704                     
  705  06:C72D  68          PLA
  706  06:C72E  AA          TAX
  707  06:C72F  E8          INX
  708  06:C730  BD 98 C8    LDA MouseMinimums, x
  709  06:C733  8D 02 00    STA temp3
  710  06:C736  BD 9E C8    LDA MouseMaximums, x
  711  06:C739  8D 03 00    STA temp4
  712                     
  713  06:C73C  A2 00       LDX #SPRITE_YPOS
  714  06:C73E  BD 00 02    LDA SPRITE_DATA, x
  715  06:C741  18          CLC
  716  06:C742  6D 01 00    ADC temp2
  717                       ;;check against borders
  718  06:C745  CD 02 00    CMP temp3
  719  06:C748  F0 08       BEQ .leave
  720  06:C74A  CD 03 00    CMP temp4
  721  06:C74D  F0 03       BEQ .leave
  722  06:C74F  9D 00 02    STA SPRITE_DATA, x
  723                     
  724  06:C752            .leave:
  725  06:C752  60          RTS
  726                             
  727  06:C753            UpdateMouseScreenPos:
  728                     
  729  06:C753  A2 00       LDX #$00
  730  06:C755  BD 00 02    LDA SPRITE_DATA, x;ypos       ;yyyy y...
  731  06:C758  4A          LSR A                                         ;0yyy yy..
  732  06:C759  4A          LSR A                                         ;00yy yyy.
  733  06:C75A  4A          LSR A                                         ;000y yyyy
  734  06:C75B  8D 00 00    STA temp1
  735  06:C75E  8D C2 00    STA mouse_index+1
  736  06:C761  E8          INX
  737  06:C762  E8          INX
  738  06:C763  E8          INX   
  739  06:C764  BD 00 02    LDA SPRITE_DATA, x ;xpos  ;  xxxx x...
  740  06:C767  29 F8       AND #$F8                       ;              ;  xxxx x000
  741  06:C769  8D 01 00    STA temp2                      ;      ;  
  742  06:C76C  4E 00 00    LSR temp1                      ;              ;  0000 yyyy y
  743  06:C76F  6E 01 00    ROR temp2                      ;      ;  yxxx xx00
  744  06:C772  4E 00 00    LSR temp1                      ;              ;  0000 0yyy y
  745  06:C775  6E 01 00    ROR temp2                      ;              ;  yyxx xxx0
  746  06:C778  4E 00 00    LSR temp1              ;              ;  0000 00yy y
  747  06:C77B  6E 01 00    ROR temp2                      ;              ;  yyyx xxxx
  748  06:C77E  AD 01 00    LDA temp2
  749  06:C781  29 1F       AND #$1F
  750  06:C783  8D C1 00    STA mouse_index
  751                       
  752  06:C786  AD C1 00    LDA mouse_index
  753  06:C789  38          SEC 
  754  06:C78A  E9 0E       SBC #$0E
  755  06:C78C  8D C1 00    STA mouse_index
  756                       
  757  06:C78F  AD C2 00    LDA mouse_index+1
  758  06:C792  38          SEC 
  759  06:C793  E9 0C       SBC #$0C
  760  06:C795  8D C2 00    STA mouse_index+1
  761                       
  762                       ;subtract starting offsets for mouse index
  763                       
  764  06:C798  AD 00 00    LDA temp1                      ;              ;  0000 00yy
  765  06:C79B  09 60       ORA #$60                       ;              ;  0110 00yy
  766                       
  767  06:C79D  8D C0 00    STA mouse_location+1
  768  06:C7A0  AD 01 00    LDA temp2
  769  06:C7A3  8D BF 00    STA mouse_location
  770                       
  771  06:C7A6            .leave:
  772  06:C7A6  60          RTS
  773                       
  774  06:C7A7            UpdateTimeDisplay:
  775                     
  776  06:C7A7  AD 0B 00    LDA scaledTime
  777  06:C7AA  C9 3C       CMP #60
  778  06:C7AC  D0 77       BNE .leave
  779                       
  780  06:C7AE  A9 00       LDA #$00
  781  06:C7B0  8D 0B 00    STA scaledTime
  782                       
  783  06:C7B3  EE C8 00    INC GameTime
  784  06:C7B6  AD C8 00    LDA GameTime
  785  06:C7B9  C9 0A       CMP #10
  786  06:C7BB  D0 32       BNE .printTime
  787                       
  788  06:C7BD  A9 00       LDA #$00
  789  06:C7BF  8D C8 00    STA GameTime
  790  06:C7C2  EE C9 00    INC GameTime+1
  791  06:C7C5  AD C9 00    LDA GameTime+1
  792  06:C7C8  C9 06       CMP #6
  793  06:C7CA  D0 23       BNE .printTime
  794                       
  795  06:C7CC  A9 00       LDA #$00
  796  06:C7CE  8D C9 00    STA GameTime+1
  797  06:C7D1  EE CA 00    INC GameTime+2
  798  06:C7D4  AD CA 00    LDA GameTime+2
  799  06:C7D7  C9 0A       CMP #10
  800  06:C7D9  D0 14       BNE .printTime
  801                       
  802  06:C7DB  A9 00       LDA #$00
  803  06:C7DD  8D CA 00    STA GameTime+2
  804  06:C7E0  EE CB 00    INC GameTime+3
  805  06:C7E3  AD CB 00    LDA GameTime+3
  806  06:C7E6  C9 0A       CMP #10
  807  06:C7E8  D0 05       BNE .printTime
  808                       
  809  06:C7EA  A9 00       LDA #$00
  810  06:C7EC  8D CB 00    STA GameTime+3
  811                       
  812  06:C7EF            .printTime:
  813                     
  814                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C7EF  A9 01       LDA #$01
       06:C7F1  8D 21 00    STA PPU_PendingWrite
       06:C7F4  A9 20       LDA #HIGH(TIMER_LOC)
       06:C7F6  20 1C CB    JSR WriteToPPUString
       06:C7F9  A9 E5       LDA #LOW(TIMER_LOC)
       06:C7FB  20 1C CB    JSR WriteToPPUString
       06:C7FE  A9 00       LDA #DRAW_HORIZONTAL
       06:C800  20 1C CB    JSR WriteToPPUString
       06:C803  A9 05       LDA #$05 
       06:C805  20 1C CB    JSR WriteToPPUString
                            
  815  06:C808  AD CB 00    LDA GameTime+3
  816  06:C80B  20 1C CB    JSR WriteToPPUString
  817  06:C80E  AD CA 00    LDA GameTime+2
  818  06:C811  20 1C CB    JSR WriteToPPUString
  819  06:C814  A9 61       LDA #$61
  820  06:C816  20 1C CB    JSR WriteToPPUString
  821  06:C819  AD C9 00    LDA GameTime+1
  822  06:C81C  20 1C CB    JSR WriteToPPUString
  823  06:C81F  AD C8 00    LDA GameTime
  824  06:C822  20 1C CB    JSR WriteToPPUString
  825                       
  826                       
  827                       
  828  06:C825            .leave: 
  829  06:C825  60          RTS  
  830                       
  831  06:C826            UpdatePause:
  832                     
  833                     ;;load screen
  834                     ;;update selection
  835                     ;; close - remove screen, then upause
  836                     ;; quit - jump to fade out
  837  06:C826  AD C6 00    LDA pauseState
  838  06:C829  20 BB C9    JSR Dynamic_Jump
  839                     
  840  06:C82C            UpdatePauseJumpTable:  
  841                     
  842  06:C82C  97 C8       .word ExitPause                       ;fail safe
  843  06:C82E  34 C8       .word UpdateLoadPauseScreen
  844  06:C830  42 C8       .word UpdatePauseScreen
  845  06:C832  87 C8       .word UpdateUnloadPauseScreen
  846                       
  847  06:C834            UpdateLoadPauseScreen:
  848                       
  849  06:C834  20 B0 CD    JSR LoadPauseScreen
  850  06:C837  AD B9 00    LDA clueOffsetShift
  851  06:C83A  C9 06       CMP #$06
  852  06:C83C  D0 03       BNE .leave
  853                       
  854  06:C83E            .changePauseState:
  855  06:C83E  EE C6 00    INC pauseState
  856  06:C841            .leave:
  857  06:C841  60          RTS
  858                       
  859  06:C842            UpdatePauseScreen:
  860                       
  861  06:C842  AD 1A 00    LDA gamepadPressed
  862  06:C845  C9 08       CMP #GAMEPAD_START
  863  06:C847  F0 07       BEQ .unPause
  864  06:C849  C9 01       CMP #GAMEPAD_A
  865  06:C84B  F0 25       BEQ .quit
  866  06:C84D  4C 86 C8    JMP .leave 
  867                     
  868  06:C850            .unPause:
  869                     
  870  06:C850  A9 00       LDA #$00
  871  06:C852  8D B8 00    STA clueLineIndex
  872  06:C855  8D B9 00    STA clueOffsetShift
  873                     
  874                       MACROGetLabelPointer $610A, pause_address
                          
       06:C858  A9 61             LDA #HIGH($610A)
       06:C85A  A2 0A             LDX #LOW($610A)
                                  
       06:C85C  8E AD 00          STX pause_address
       06:C85F  8D AE 00          STA pause_address+1
                                  
  875                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:C862  A9 21             LDA #HIGH($210A)
       06:C864  A2 0A             LDX #LOW($210A)
                                  
       06:C866  8E B1 00          STX pause_draw_address
       06:C869  8D B2 00          STA pause_draw_address+1
                                  
  876  06:C86C  EE C6 00    INC pauseState
  877  06:C86F  4C 86 C8    JMP .leave
  878                       
  879  06:C872            .quit:
  880                     
  881  06:C872  A9 00       LDA #$00
  882  06:C874  8D C6 00    STA pauseState
  883  06:C877  A9 00       LDA #$00
  884  06:C879  8D 0A 00    STA time
  885  06:C87C  A9 00       LDA #TITLE_IDX
  886  06:C87E  8D CC 00    STA targetGameMode
  887  06:C881  A9 08       LDA #$08
  888  06:C883  8D 0F 00    STA mode_state
  889                       
  890  06:C886            .leave:
  891  06:C886  60          RTS
  892                       
  893  06:C887            UpdateUnloadPauseScreen:
  894                       
  895  06:C887  20 F7 CD    JSR ClearPauseScreen
  896  06:C88A  AD B9 00    LDA clueOffsetShift
  897  06:C88D  C9 06       CMP #$06
  898  06:C88F  D0 05       BNE .leave
  899  06:C891            .changePauseState:
  900  06:C891  A9 00       LDA #$00
  901  06:C893  8D C6 00    STA pauseState
  902  06:C896            .leave:
  903  06:C896  60          RTS
  904                       
  905  06:C897            ExitPause:
  906  06:C897  60          RTS
  907                       
  908                     ;hori, vert
  909  06:C898            MouseMinimums:
  910  06:C898  6A 5A       .db $6A, $5A
  911  06:C89A  6A 5A       .db $6A, $5A
  912  06:C89C  6A 5A       .db $6A, $5A
  913  06:C89E            MouseMaximums:
  914  06:C89E  9A 8A       .db $9A, $8A
  915  06:C8A0  C2 B2       .db $C2, $B2
  916  06:C8A2  EA DA       .db $EA, $DA
  917                       
  918  06:C8A4            PuzzleScrollHori:
  919  06:C8A4  01 04 06    .db $01, $04, $06
  920  06:C8A7            PuzzleScrollVert:
  921  06:C8A7  01 03 05    .db $01, $03, $05
  922                       
  923  06:C8AA            PuzzleHeaderSkips:
  924                     
  925  06:C8AA  09 18 22    .db $09, $18, $22
  926                       
  927                     
  928                       
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGameOver.asm
   85                       .include "Routines/Game_States/UpdateGameOver.asm"
    1  06:C8AD            UpdateGameOver:
    2                     
    3  06:C8AD  AD 10 00    LDA NMI_locks
    4  06:C8B0  F0 01       BEQ .unlocked
    5                       
    6  06:C8B2  60          RTS
    7                       
    8  06:C8B3            .unlocked:
    9                     
   10  06:C8B3  20 B7 C8    JSR DoUpdateGameOver 
   11  06:C8B6  60          RTS
   12                       
   13  06:C8B7            DoUpdateGameOver:
   14                     
   15  06:C8B7  AD 0F 00    LDA mode_state
   16  06:C8BA  20 BB C9    JSR Dynamic_Jump
   17                         
   18  06:C8BD            UpdateGameOverJumpTable:
   19                     
   20  06:C8BD  C5 C8       .word UpdateGameOverInit
   21  06:C8BF  CC C8       .word UpdateGameOverWaitInput
   22  06:C8C1  DA C8       .word UpdateGameOverFadeOut
   23  06:C8C3  EF C8       .word UpdateGameOverExit
   24                       
   25  06:C8C5            UpdateGameOverInit:
   26                     
   27  06:C8C5  20 64 CB    JSR TurnOnSprites
   28  06:C8C8  EE 0F 00    INC mode_state
   29  06:C8CB  60          RTS
   30                     
   31  06:C8CC            UpdateGameOverWaitInput:
   32                     
   33  06:C8CC  AD 1A 00    LDA gamepadPressed
   34  06:C8CF  F0 08       BEQ .leave
   35                     
   36  06:C8D1            .changeModeState:
   37                     
   38  06:C8D1  A9 00       LDA #$00
   39  06:C8D3  8D 0A 00    STA time
   40  06:C8D6  EE 0F 00    INC mode_state
   41  06:C8D9            .leave:
   42  06:C8D9  60          RTS
   43                     
   44  06:C8DA            UpdateGameOverFadeOut:
   45                     
   46  06:C8DA  AD 0A 00    LDA time
   47  06:C8DD  29 07       AND #$07
   48  06:C8DF  D0 0D       BNE .leave
   49                       ;;every 8 frames, decrement the palettes
   50  06:C8E1  20 99 CB    JSR FadeOutPalettes
   51  06:C8E4  B0 08       BCS .leave
   52                     
   53  06:C8E6            .changeModeState:
   54  06:C8E6  A9 00       LDA #$00
   55  06:C8E8  8D 0A 00    STA time
   56  06:C8EB  EE 0F 00    INC mode_state
   57  06:C8EE            .leave:
   58  06:C8EE  60          RTS
   59                     
   60  06:C8EF            UpdateGameOverExit:
   61                     
   62  06:C8EF  AD 0A 00    LDA time
   63  06:C8F2  29 0F       AND #$0F
   64  06:C8F4  D0 07       BNE .leave
   65                     
   66  06:C8F6  A9 00       LDA #TITLE_IDX
   67  06:C8F8  A2 00       LDX #$00
   68  06:C8FA  20 FE C8    JSR ChangeGameMode
   69                       
   70  06:C8FD            .leave:
   71  06:C8FD  60          RTS
#[1]   Picross.asm
   86                       
   87                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   88                     ;;     Routines             ;;
   89                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   90                     
   91                     
#[2]   Routines/Common/GameModeRoutines.asm
   92                       .include "Routines/Common/GameModeRoutines.asm"
    1  06:C8FE            ChangeGameMode:
    2                       ;A - game mode index
    3                       ;X - high nibble: palette start flag, low nibble: screen index
    4  06:C8FE  8D 0E 00    STA game_mode
    5  06:C901  8E 0D 00    STX mode_loadFlags
    6  06:C904  A9 00       LDA #$00
    7  06:C906  8D 0F 00    STA mode_state
    8  06:C909  20 30 CB    JSR ClearPPUString
    9  06:C90C  20 10 C9    JSR LoadGameModeScreen
   10  06:C90F  60          RTS
   11                       
   12  06:C910            LoadGameModeScreen:
   13                     
   14                       MACROSetFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:C910  AD 10 00    LDA NMI_locks
       06:C913  09 01       ORA #BGLOAD_NMI_LOCK
       06:C915  8D 10 00    STA NMI_locks
                                  
   15                       
   16  06:C918  A9 00       LDA #$00
   17  06:C91A  8D 01 20    STA PPU_MASK    ; disable rendering- reenable on NMI when not updating
   18                     
   19  06:C91D  20 4B C9    JSR LoadGameModeBackground
   20  06:C920  20 98 C9    JSR LoadGameModeSprites
   21                     
   22                       MACROClearFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:C923  A9 01       LDA #BGLOAD_NMI_LOCK
       06:C925  49 FF       EOR #$FF
       06:C927  2D 10 00    AND NMI_locks  
       06:C92A  8D 10 00    STA NMI_locks
                          
   23                     
   24                       
   25                       ;; load the CHR bank for this mode
   26  06:C92D  20 03 CC    JSR ResetMapper
   27                       ;;remember, we're loading the SECOND set in each chr bank
   28                       ;;so we'll take the index from the game mode chr table and add one mult 2
   29  06:C930  AE 0E 00    LDX game_mode
   30  06:C933  BD B5 C9    LDA gameModeInitCHRROMB, x
   31  06:C936  0A          ASL A
   32  06:C937  18          CLC 
   33  06:C938  69 01       ADC #$01
   34  06:C93A  20 28 CC    JSR LoadCHRBankB
   35                       
   36  06:C93D  20 03 CC    JSR ResetMapper
   37  06:C940  AE 0E 00    LDX game_mode
   38  06:C943  BD B8 C9    LDA gameModeInitCHRROMA, x
   39  06:C946  0A          ASL A
   40  06:C947  20 1D CC    JSR LoadCHRBankA
   41                       
   42                       
   43                       
   44  06:C94A  60          RTS
   45                       
   46  06:C94B            LoadGameModeBackground:
   47                             
   48                       MACROGetDoubleIndex game_mode
                          
       06:C94B  AD 0E 00          LDA game_mode
       06:C94E  0A                ASL A
       06:C94F  A8                TAY
                                  
   49  06:C950  8C 00 00    STY temp1
   50                             
   51                       MACROGetLabelPointer Palettes, table_address
                          
       06:C953  A9 E0             LDA #HIGH(Palettes)
       06:C955  A2 00             LDX #LOW(Palettes)
                                  
       06:C957  8E 14 00          STX table_address
       06:C95A  8D 15 00          STA table_address+1
                                  
   52  06:C95D  20 E1 C9    JSR GetTableAtIndex
   53                     
   54  06:C960  20 EE C9    JSR LoadFullPaletteFromTable
   55                             
   56  06:C963  AC 00 00    LDY temp1
   57                       MACROGetLabelPointer NameTables, table_address
                          
       06:C966  A9 E0             LDA #HIGH(NameTables)
       06:C968  A2 06             LDX #LOW(NameTables)
                                  
       06:C96A  8E 14 00          STX table_address
       06:C96D  8D 15 00          STA table_address+1
                                  
   58  06:C970  20 E1 C9    JSR GetTableAtIndex
   59  06:C973  AD 0D 00    LDA mode_loadFlags
   60  06:C976  29 0F       AND #$0F
   61  06:C978  0A          ASL A
   62  06:C979  A8          TAY
   63  06:C97A  20 E1 C9    JSR GetTableAtIndex
   64                             
   65  06:C97D  A9 00       LDA #$00
   66  06:C97F  20 1D CA    JSR LoadFullBackgroundFromTable
   67                       
   68  06:C982  AC 00 00    LDY temp1
   69                       MACROGetLabelPointer NameTables2, table_address
                          
       06:C985  A9 E0             LDA #HIGH(NameTables2)
       06:C987  A2 0C             LDX #LOW(NameTables2)
                                  
       06:C989  8E 14 00          STX table_address
       06:C98C  8D 15 00          STA table_address+1
                                  
   70  06:C98F  20 E1 C9    JSR GetTableAtIndex
   71                       
   72  06:C992  A9 01       LDA #$01
   73  06:C994  20 1D CA    JSR LoadFullBackgroundFromTable
   74                       
   75  06:C997  60          RTS
   76                       
   77  06:C998            LoadGameModeSprites:
   78                     
   79                       MACROGetDoubleIndex game_mode  
                          
       06:C998  AD 0E 00          LDA game_mode
       06:C99B  0A                ASL A
       06:C99C  A8                TAY
                                  
   80                       MACROGetLabelPointer Sprites, table_address
                          
       06:C99D  A9 FC             LDA #HIGH(Sprites)
       06:C99F  A2 CA             LDX #LOW(Sprites)
                                  
       06:C9A1  8E 14 00          STX table_address
       06:C9A4  8D 15 00          STA table_address+1
                                  
   81  06:C9A7  20 E1 C9    JSR GetTableAtIndex
   82  06:C9AA  A0 00       LDY #$00
   83  06:C9AC  B1 14       LDA [table_address],y
   84  06:C9AE  EE 14 00    INC table_address
   85  06:C9B1  20 05 CB    JSR LoadSprites_impl
   86                       
   87  06:C9B4  60          RTS
   88                       
   89  06:C9B5            gameModeInitCHRROMB:
   90  06:C9B5  00 02 02          .db $00, $02, $02
   91  06:C9B8            gameModeInitCHRROMA:
   92  06:C9B8  00 02 02          .db $00, $02, $02
   93                             
#[1]   Picross.asm
#[2]   Routines/Utils/PointerUtils.asm
   93                       .include "Routines/Utils/PointerUtils.asm"
    1  06:C9BB            Dynamic_Jump:
    2                     
    3  06:C9BB  0A          ASL A                                 ;; double the index passed into A
    4  06:C9BC  8E 08 00    STX tempx
    5  06:C9BF  8C 09 00    STY tempy
    6  06:C9C2  A8          TAY
    7  06:C9C3  C8          INY  
    8  06:C9C4  68          PLA
    9  06:C9C5  8D 16 00    STA jump_address
   10  06:C9C8  68          PLA 
   11  06:C9C9  8D 17 00    STA jump_address+1            
   12  06:C9CC  B1 16       LDA [jump_address], y
   13  06:C9CE  AA          TAX
   14  06:C9CF  C8          INY
   15  06:C9D0  B1 16       LDA [jump_address], y
   16  06:C9D2  8E 16 00    STX jump_address
   17  06:C9D5  8D 17 00    STA jump_address+1
   18  06:C9D8  AE 08 00    LDX tempx
   19  06:C9DB  AC 09 00    LDY tempy
   20  06:C9DE  6C 16 00    JMP [jump_address]
   21                       
   22  06:C9E1            GetTableAtIndex:
   23                     
   24  06:C9E1  B1 14             LDA [table_address], y
   25  06:C9E3  AA                TAX
   26  06:C9E4  C8                INY
   27  06:C9E5  B1 14             LDA [table_address], y
   28                             
   29  06:C9E7            SetTableAddress:
   30                             
   31                             ;;A is hi, X is lo
   32  06:C9E7  8E 14 00          STX table_address
   33  06:C9EA  8D 15 00          STA table_address+1
   34  06:C9ED  60                RTS
#[1]   Picross.asm
#[2]   Routines/Utils/PPUUtils.asm
   94                       .include "Routines/Utils/PPUUtils.asm"
    1  06:C9EE            LoadFullPaletteFromTable:
    2                     
    3                       MACROSetPPUAddress $3F00
                          
       06:C9EE  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:C9F1  A9 3F       LDA #HIGH($3F00)
       06:C9F3  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:C9F6  A9 00       LDA #LOW($3F00)
       06:C9F8  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
    4  06:C9FB  A0 00       LDY #$00              ; start out at 0
    5  06:C9FD  A2 00       LDX #$00
    6  06:C9FF            .loop:
    7  06:C9FF  B1 14       LDA [table_address], y        ; load data from address (palette + the value in x)
    8  06:CA01  9D 00 68    STA Palette_Copy, x
    9  06:CA04  48          PHA 
   10  06:CA05  AD 0D 00    LDA mode_loadFlags
   11  06:CA08  29 10       AND #$10
   12  06:CA0A  D0 04       BNE .setBlack
   13  06:CA0C  68          PLA 
   14  06:CA0D  4C 13 CA    JMP .setPPUData
   15  06:CA10            .setBlack:
   16                     
   17  06:CA10  68          PLA 
   18  06:CA11  A9 0F       LDA #$0F
   19                       
   20  06:CA13            .setPPUData:
   21  06:CA13  8D 07 20    STA PPU_DATA            ; write to PPU
   22  06:CA16  C8          INY                   ; X = X + 1
   23  06:CA17  E8          INX
   24  06:CA18  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   25  06:CA1A  D0 E3       BNE .loop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   26  06:CA1C  60          RTS
   27                     
   28  06:CA1D            LoadFullBackgroundFromTable:
   29                     
   30                         ;;use A as an index for which nametable to write to
   31  06:CA1D  20 50 CB          JSR SetNametableFromIndex
   32  06:CA20  8A                TXA
   33  06:CA21  4A                LSR A
   34  06:CA22  29 01             AND #$01
   35  06:CA24  D0 0D             BNE .copyScreenB
   36                             MACROGetLabelPointer Screen_Copy, pointer_address
                          
       06:CA26  A9 60             LDA #HIGH(Screen_Copy)
       06:CA28  A2 00             LDX #LOW(Screen_Copy)
                                  
       06:CA2A  8E 12 00          STX pointer_address
       06:CA2D  8D 13 00          STA pointer_address+1
                                  
   37  06:CA30  4C 3D CA          JMP .setCounters
   38                             
   39  06:CA33            .copyScreenB:
   40                             MACROGetLabelPointer ScreenB_Copy, pointer_address
                          
       06:CA33  A9 64             LDA #HIGH(ScreenB_Copy)
       06:CA35  A2 00             LDX #LOW(ScreenB_Copy)
                                  
       06:CA37  8E 12 00          STX pointer_address
       06:CA3A  8D 13 00          STA pointer_address+1
                                  
   41                             
   42                             ;;set pointer
   43                             ;; set counters
   44  06:CA3D            .setCounters:
   45  06:CA3D  A0 00             LDY #$00
   46  06:CA3F  A2 00             LDX #$00
   47                             
   48                             ;;start loop
   49                     
   50  06:CA41            .outerloop:
   51                     
   52  06:CA41            .innerloop:
   53                     
   54  06:CA41  B1 14             LDA [table_address], y
   55  06:CA43  8D 07 20          STA PPU_DATA
   56  06:CA46  91 12             STA [pointer_address],y
   57  06:CA48  C8                INY
   58  06:CA49  C0 00             CPY #$00
   59  06:CA4B  D0 F4             BNE .innerloop
   60                     
   61  06:CA4D  EE 13 00          INC pointer_address+1
   62  06:CA50  EE 15 00          INC table_address+1
   63                             
   64  06:CA53  E8                INX
   65  06:CA54  E0 04             CPX #$04
   66  06:CA56  D0 E9             BNE .outerloop
   67  06:CA58  60                RTS
   68                             
   69                     
   70           0000      DATA_LEN = temp1
   71           0001      WRITE_SETTINGS = temp2
   72                             
   73  06:CA59            ProcessPPUString:
   74                     
   75  06:CA59  AD 21 00          LDA PPU_PendingWrite
   76  06:CA5C  D0 01             BNE .continueProcess
   77  06:CA5E  60                RTS
   78                             
   79  06:CA5F            .continueProcess:
   80  06:CA5F  A0 00             LDY #$00
   81                             
   82  06:CA61  A9 23             LDA #LOW(PPU_String)
   83  06:CA63  8D 12 00          STA pointer_address
   84  06:CA66  A9 00             LDA #HIGH(PPU_String)
   85  06:CA68  8D 13 00          STA pointer_address + 1
   86                     
   87  06:CA6B            .outerloop:
   88  06:CA6B  AD 02 20          LDA PPU_STATUS
   89  06:CA6E  B1 12             LDA [pointer_address], y
   90  06:CA70  F0 79             BEQ .finish
   91  06:CA72  8D 06 20          STA PPU_ADDR
   92  06:CA75  C8                INY
   93  06:CA76  B1 12             LDA [pointer_address], y
   94  06:CA78  8D 06 20          STA PPU_ADDR
   95  06:CA7B  C8            INY 
   96  06:CA7C  B1 12             LDA [pointer_address], y
   97  06:CA7E  8D 01 00          STA WRITE_SETTINGS
   98  06:CA81  C8                INY
   99                             
  100  06:CA82  AD 00 20          LDA PPU_CTRL
  101  06:CA85  29 FB             AND #$FB
  102  06:CA87  8D 00 20          STA PPU_CTRL
  103                             
  104  06:CA8A  AD 01 00          LDA WRITE_SETTINGS      ;check horizontal or vertical write
  105  06:CA8D  29 80             AND #%10000000
  106  06:CA8F  F0 06             BEQ .checkRepeat
  107  06:CA91  0D 00 20          ORA PPU_CTRL 
  108  06:CA94  8D 00 20          STA PPU_CTRL 
  109                             
  110                             
  111  06:CA97            .checkRepeat:
  112  06:CA97  AD 01 00    LDA WRITE_SETTINGS
  113  06:CA9A  29 40       AND #%01000000
  114  06:CA9C  F0 19       BEQ .checkTable
  115                       
  116  06:CA9E  AD 01 00    LDA WRITE_SETTINGS
  117  06:CAA1  29 3F       AND #$3F
  118  06:CAA3  8D 00 00    STA DATA_LEN
  119                       ;;the usual data length byte is now the repeatable byte
  120  06:CAA6  A2 00       LDX #$00
  121                       
  122  06:CAA8            .repeatLoop:
  123  06:CAA8  B1 12       LDA [pointer_address], y
  124  06:CAAA  8D 07 20    STA PPU_DATA
  125  06:CAAD  E8          INX 
  126  06:CAAE  EC 00 00    CPX DATA_LEN
  127  06:CAB1  D0 F5       BNE .repeatLoop
  128  06:CAB3  C8          INY
  129  06:CAB4  4C 6B CA    JMP .outerloop
  130                             
  131  06:CAB7            .checkTable:
  132  06:CAB7  AD 01 00          LDA WRITE_SETTINGS
  133  06:CABA  29 20             AND #%00100000
  134  06:CABC  F0 16             BEQ .rawData
  135                             
  136  06:CABE  B1 12             LDA [pointer_address], y
  137  06:CAC0  8D 14 00          STA table_address
  138  06:CAC3  C8                INY 
  139  06:CAC4  B1 12             LDA [pointer_address], y
  140  06:CAC6  8D 15 00          STA table_address + 1
  141  06:CAC9  C8                INY
  142  06:CACA  98                TYA 
  143  06:CACB  48                PHA
  144  06:CACC  20 EF CA          JSR WriteToPPUFromTable
  145  06:CACF  68                PLA
  146  06:CAD0  A8                TAY
  147  06:CAD1  4C 6B CA          JMP .outerloop
  148                             
  149  06:CAD4            .rawData:
  150                     
  151  06:CAD4  B1 12             LDA [pointer_address], y
  152  06:CAD6  C8                INY
  153  06:CAD7  8D 00 00          STA DATA_LEN
  154                     
  155  06:CADA  A2 00             LDX #$00
  156                     
  157  06:CADC            .innerloop:
  158                             
  159  06:CADC  B1 12             LDA [pointer_address], y
  160  06:CADE  8D 07 20          STA PPU_DATA
  161  06:CAE1  C8                INY
  162  06:CAE2  E8                INX
  163  06:CAE3  EC 00 00          CPX DATA_LEN
  164  06:CAE6  D0 F4             BNE .innerloop
  165  06:CAE8  4C 6B CA          JMP .outerloop
  166                             
  167  06:CAEB            .finish:
  168  06:CAEB  20 30 CB          JSR ClearPPUString
  169  06:CAEE            .leave:
  170  06:CAEE  60                RTS
  171                             
  172  06:CAEF            WriteToPPUFromTable:
  173  06:CAEF  A0 00             LDY #$00
  174  06:CAF1  B1 14             LDA [table_address], y
  175  06:CAF3  C8                INY
  176  06:CAF4  8D 00 00          STA DATA_LEN
  177  06:CAF7            .innerloop:
  178  06:CAF7  B1 14             LDA [table_address], y
  179  06:CAF9  8D 07 20          STA PPU_DATA
  180  06:CAFC  C8                INY
  181  06:CAFD  CC 00 00          CPY DATA_LEN
  182  06:CB00  90 F5             BCC .innerloop ;table should have the size in it, but since we count the byte count, we'll want to wait till we go over it
  183  06:CB02  F0 F3             BEQ .innerloop
  184  06:CB04  60                RTS
  185                       
  186  06:CB05            LoadSprites_impl:
  187                       ;;A will be the amount of sprites to load
  188  06:CB05  8D 00 00    STA DATA_LEN
  189  06:CB08  0E 00 00    ASL DATA_LEN
  190  06:CB0B  0E 00 00    ASL DATA_LEN
  191                       
  192  06:CB0E  A0 00       LDY #$00              ; start at 0
  193                       
  194  06:CB10            .loop:
  195  06:CB10  B1 14       LDA [table_address], y; load data from address (sprites +  x)
  196  06:CB12  99 00 02    STA SPRITE_DATA, y    ; store into RAM address ($0200 + x)
  197  06:CB15  C8          INY                   ; X = X + 1
  198  06:CB16  CC 00 00    CPY DATA_LEN             ; Compare X to hex $10, decimal 16
  199  06:CB19  D0 F5       BNE .loop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
  200                                             ; if compare was equal to 16, keep going down   
  201  06:CB1B  60          RTS
  202                     
  203                     
  204  06:CB1C            WriteToPPUString:
  205                     
  206  06:CB1C  AE 22 00          LDX PPU_StringIdx
  207  06:CB1F  E0 4F             CPX #PPU_STRINGMAX
  208  06:CB21  F0 0C             BEQ .finish
  209                             
  210  06:CB23  9D 23 00          STA PPU_String, x
  211  06:CB26  EE 22 00          INC PPU_StringIdx
  212  06:CB29  E8                INX
  213  06:CB2A  A9 00             LDA #$00
  214  06:CB2C  9D 23 00          STA PPU_String, x
  215                                     
  216  06:CB2F            .finish:
  217  06:CB2F  60                RTS
  218                     
  219  06:CB30            ClearPPUString:
  220                             
  221  06:CB30  A9 00             LDA #$00
  222  06:CB32  8D 22 00          STA PPU_StringIdx
  223  06:CB35  8D 23 00          STA PPU_String
  224  06:CB38  8D 21 00          STA PPU_PendingWrite
  225  06:CB3B  60                RTS
  226                     
  227  06:CB3C            DetectSprite0:
  228  06:CB3C            WaitNotSprite0:
  229  06:CB3C  AD 02 20    lda PPU_STATUS
  230  06:CB3F  29 40       and #SPRITE_0_MASK
  231  06:CB41  D0 F9       bne WaitNotSprite0   ; wait until sprite 0 not hit
  232                     
  233  06:CB43            WaitSprite0:
  234  06:CB43  AD 02 20    lda $2002
  235  06:CB46  29 40       and #SPRITE_0_MASK
  236  06:CB48  F0 F9       beq WaitSprite0      ; wait until sprite 0 is hit
  237                     
  238  06:CB4A  A2 05       ldx #$05                              ;do a scanline wait
  239  06:CB4C            WaitScanline:
  240  06:CB4C  CA          dex
  241  06:CB4D  D0 FD       bne WaitScanline
  242  06:CB4F  60          RTS
  243                     
  244                     
  245  06:CB50            SetNametableFromIndex:
  246                     
  247  06:CB50  48          PHA
  248  06:CB51  AD 02 20    LDA PPU_STATUS
  249  06:CB54  68          PLA
  250  06:CB55  0A          ASL A
  251  06:CB56  AA          TAX
  252  06:CB57  BD EC CB    LDA NameTableMemList+1, x
  253  06:CB5A  8D 06 20    STA PPU_ADDR
  254  06:CB5D  BD EB CB    LDA NameTableMemList, x
  255  06:CB60  8D 06 20    STA PPU_ADDR
  256  06:CB63  60          RTS
  257                       
  258  06:CB64            TurnOnSprites:
  259                      
  260  06:CB64  AD 1C 00    LDA PPU_Mask
  261  06:CB67  09 10       ORA #%00010000
  262  06:CB69  8D 1C 00    STA PPU_Mask
  263  06:CB6C  60          RTS
  264                       
  265  06:CB6D            TurnOffSprites:
  266                       
  267  06:CB6D  AD 1C 00    LDA PPU_Mask
  268  06:CB70  29 EF       AND #%11101111
  269  06:CB72  8D 1C 00    STA PPU_Mask
  270  06:CB75  60          RTS
  271                     
  272  06:CB76            UpdatePPUControl:
  273                     
  274  06:CB76  AD 1B 00    LDA PPU_Control
  275  06:CB79  29 FC       AND #$FC
  276  06:CB7B  0D 20 00    ORA PPU_NT
  277  06:CB7E  8D 00 20    STA PPU_CTRL
  278  06:CB81  AD 1C 00    LDA PPU_Mask
  279  06:CB84  8D 01 20    STA PPU_MASK
  280  06:CB87  60          RTS
  281                       
  282  06:CB88            InitPPUControl:
  283                       
  284                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
  285                       ; enable sprites, enable background, no clipping on left side
  286  06:CB88  A9 90       LDA #%10010000
  287  06:CB8A  8D 00 20    STA PPU_CTRL
  288  06:CB8D  8D 1B 00    STA PPU_Control
  289  06:CB90  A9 1E       LDA #%00011110
  290  06:CB92  8D 01 20    STA PPU_MASK
  291  06:CB95  8D 1C 00    STA PPU_Mask
  292  06:CB98  60          RTS
  293                       
  294  06:CB99            FadeOutPalettes:
  295                     
  296                     ;;take the current values, and decrement the lower nibbles
  297                     ;;we can access from the palette copy 
  298                     ;;we'll make this fade out one level per call
  299                     ;;once all the palettes are blacked out we'll return true, so we'll keep the carry flag as a return result
  300                     
  301                     ;;go through the palette copy, decrement, make a raw data PPU string and add all the bytes into it
  302                     ;;for any palette color already in the 0x range, change it to 0f to get black
  303                     
  304                       MACROGetLabelPointer Palette_Copy, table_address
                          
       06:CB99  A9 68             LDA #HIGH(Palette_Copy)
       06:CB9B  A2 00             LDX #LOW(Palette_Copy)
                                  
       06:CB9D  8E 14 00          STX table_address
       06:CBA0  8D 15 00          STA table_address+1
                                  
  305                     ;;palette copy address is now X accessable
  306                     
  307  06:CBA3  A0 00       LDY #$00
  308                       MACROAddPPUStringEntryRawData #$3F, #$00, #DRAW_HORIZONTAL, #$20  
                          
       06:CBA5  A9 01       LDA #$01
       06:CBA7  8D 21 00    STA PPU_PendingWrite
       06:CBAA  A9 3F       LDA #$3F
       06:CBAC  20 1C CB    JSR WriteToPPUString
       06:CBAF  A9 00       LDA #$00
       06:CBB1  20 1C CB    JSR WriteToPPUString
       06:CBB4  A9 00       LDA #DRAW_HORIZONTAL
       06:CBB6  20 1C CB    JSR WriteToPPUString
       06:CBB9  A9 20       LDA #$20 
       06:CBBB  20 1C CB    JSR WriteToPPUString
                            
  309                     
  310  06:CBBE  A9 00       LDA #$00
  311  06:CBC0  8D 00 00    STA temp1
  312                       
  313  06:CBC3            .loop:
  314                     
  315  06:CBC3  B1 14       LDA [table_address], y
  316  06:CBC5  C9 0F       CMP #$0F
  317  06:CBC7  F0 15       BEQ .addToString
  318  06:CBC9  C9 10       CMP #$10
  319  06:CBCB  90 0D       BCC .setBlack
  320                       
  321  06:CBCD  A9 80       LDA #$80
  322  06:CBCF  8D 00 00    STA temp1
  323                       
  324  06:CBD2  B1 14       LDA [table_address], y
  325  06:CBD4  38          SEC
  326  06:CBD5  E9 10       SBC #$10
  327  06:CBD7  4C DC CB    JMP .setColor
  328                     
  329  06:CBDA            .setBlack:
  330                     
  331  06:CBDA  A9 0F       LDA #$0F
  332                     
  333  06:CBDC            .setColor:
  334  06:CBDC  91 14       STA [table_address], y
  335                     
  336  06:CBDE            .addToString:
  337                     
  338  06:CBDE  20 1C CB    JSR WriteToPPUString
  339                     
  340  06:CBE1            .incY:
  341                       
  342  06:CBE1  C8          INY
  343  06:CBE2  C0 20       CPY #$20
  344  06:CBE4  D0 DD       BNE .loop
  345                     
  346  06:CBE6  0E 00 00    ASL temp1     ;get carry out, if we have one
  347                     
  348  06:CBE9  60          RTS
  349                       
  350  06:CBEA            FadeInPalettes:
  351                     
  352                     ;;need to be able to store off a target palette first
  353                     ;;we can use the palette copy we make during the game mode change as the target
  354  06:CBEA  60          RTS
  355                     
  356  06:CBEB            NameTableMemList:
  357  06:CBEB  00 20       .word $2000, $2400, $2800, $2C00
       06:CBED  00 24     
       06:CBEF  00 28     
       06:CBF1  00 2C     
  358  06:CBF3            PalettesMemList:
  359  06:CBF3  00 3F       .word $3F00, $3F04, $3F08, $3F0C
       06:CBF5  04 3F     
       06:CBF7  08 3F     
       06:CBF9  0C 3F     
  360  06:CBFB  10 3F       .word $3F10, $3F14, $3F18, $3F1C  
       06:CBFD  14 3F     
       06:CBFF  18 3F     
       06:CC01  1C 3F     
  361                       
  362           0024      BLANK_TILE = $24
#[1]   Picross.asm
#[2]   Routines/Utils/MapperUtils.asm
   95                       .include "Routines/Utils/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:CC03            ResetMapper:
    7  06:CC03  EE 03 CC    inc ResetMapper
    8  06:CC06  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:CC07            SetMapperControls:
   23                       ;;A = controls
   24  06:CC07  AA          TAX
   25  06:CC08  A9 80       LDA #MAPPERCONTROL
   26  06:CC0A  8D A4 00    STA mapper_address+1
   27  06:CC0D  8A          TXA
   28  06:CC0E  20 33 CC    JSR SendMapperCommand
   29  06:CC11  60          RTS
   30                     
   31  06:CC12            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:CC12  AA                TAX
   35  06:CC13  A9 E0             LDA #PRGBANK
   36  06:CC15  8D A4 00          STA mapper_address+1
   37  06:CC18  8A                TXA
   38  06:CC19  20 33 CC          JSR SendMapperCommand
   39  06:CC1C  60                RTS
   40                             
   41  06:CC1D            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:CC1D  AA                TAX
   44  06:CC1E  A9 A0             LDA #CHRBANK1
   45  06:CC20  8D A4 00          STA mapper_address+1
   46  06:CC23  8A                TXA
   47  06:CC24  20 33 CC          JSR SendMapperCommand
   48  06:CC27  60                RTS
   49                             
   50  06:CC28            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:CC28  AA                TAX
   53  06:CC29  A9 C0             LDA #CHRBANK2
   54  06:CC2B  8D A4 00          STA mapper_address+1
   55  06:CC2E  8A                TXA
   56  06:CC2F  20 33 CC          JSR SendMapperCommand
   57  06:CC32  60                RTS
   58                             
   59  06:CC33            SendMapperCommand:
   60                     
   61  06:CC33  A0 00             LDY #$00
   62                             
   63  06:CC35  91 A3             STA [mapper_address], y
   64  06:CC37  4A                LSR A
   65  06:CC38  91 A3             STA [mapper_address], y
   66  06:CC3A  4A                LSR A
   67  06:CC3B  91 A3             STA [mapper_address], y
   68  06:CC3D  4A                LSR A 
   69  06:CC3E  91 A3             STA [mapper_address], y
   70  06:CC40  4A                LSR A
   71  06:CC41  91 A3             STA [mapper_address], y
   72                             
   73  06:CC43  60                RTS
   74                             
   75  06:CC44            ResetBanks:
   76                     
   77  06:CC44  20 03 CC          JSR ResetMapper
   78  06:CC47  A9 00             LDA #$00
   79  06:CC49  20 12 CC          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:CC4C  20 03 CC          JSR ResetMapper
   83  06:CC4F  A9 00             LDA #$00
   84  06:CC51  20 1D CC          JSR LoadCHRBankA
   85  06:CC54  A9 01             LDA #$01
   86  06:CC56  20 28 CC          JSR LoadCHRBankB
   87  06:CC59  60                RTS
   88                             
   89                       
#[1]   Picross.asm
#[2]   Routines/Game_Routines/ScreenEffects.asm
   96                       .include "Routines/Game_Routines/ScreenEffects.asm"
    1  06:CC5A            PopulateClues:
    2                       
    3  06:CC5A  A0 00       LDY #$00
    4  06:CC5C  B1 A9       LDA [puzzle_address], y
    5  06:CC5E  AA          TAX
    6  06:CC5F  BD BD CF    LDA PuzzleSizes, x
    7  06:CC62  8D 00 00    STA temp1
    8                       
    9  06:CC65            .getByte:
   10  06:CC65  AC B7 00    LDY clueTableIndex
   11  06:CC68  B1 AB       LDA [clues_address], y
   12  06:CC6A  D0 07       BNE .checkNewLine
   13  06:CC6C  EE B7 00    INC clueTableIndex
   14  06:CC6F  A9 00       LDA #$00
   15  06:CC71  F0 39       BEQ .drawClue
   16                       ;was 0, set up a draw
   17  06:CC73            .checkNewLine
   18  06:CC73  C9 FF       CMP #$FF
   19  06:CC75  D0 18       BNE .getClue
   20                       
   21                       ;;was FF- need to inc stuff
   22  06:CC77  EE B7 00    INC clueTableIndex
   23  06:CC7A  A9 00       LDA #$00
   24  06:CC7C  8D BE 00    STA clueParity
   25                       
   26  06:CC7F  EE B8 00    INC clueLineIndex
   27  06:CC82  AD B8 00    LDA clueLineIndex
   28  06:CC85  CD 00 00    CMP temp1
   29                       ;CMP #$01
   30  06:CC88  F0 28       BEQ .leave    ;carry will be set
   31                       
   32  06:CC8A  20 3B CD    JSR CreateOffsetFromIndex
   33                      
   34  06:CC8D  D0 D6       BNE .getByte
   35                       
   36  06:CC8F            .getClue:
   37                       ;;clues go from high nibble to low nibble
   38  06:CC8F  48          PHA 
   39  06:CC90  AD BE 00    LDA clueParity
   40  06:CC93  D0 0A       BNE .getSecondClue
   41  06:CC95  EE BE 00    INC clueParity
   42  06:CC98  68          PLA
   43  06:CC99  4A          LSR A
   44  06:CC9A  4A          LSR A
   45  06:CC9B  4A          LSR A
   46  06:CC9C  4A          LSR A         ;move clue over to lower nibble
   47  06:CC9D  D0 0D       BNE .drawClue
   48                       
   49  06:CC9F            .getSecondClue:
   50                     
   51  06:CC9F  CE BE 00    DEC clueParity
   52  06:CCA2  EE B7 00    INC clueTableIndex
   53  06:CCA5  68          PLA 
   54  06:CCA6  29 0F       AND #$0F
   55  06:CCA8  D0 02       BNE .drawClue
   56                       ;;if 0, skip
   57  06:CCAA  F0 B9       BEQ .getByte
   58                      
   59  06:CCAC            .drawClue:
   60                       
   61  06:CCAC  09 40       ORA #$40
   62  06:CCAE  20 B3 CC    JSR WriteClueByteToPPUString
   63  06:CCB1  18          CLC
   64                       
   65  06:CCB2            .leave:
   66  06:CCB2  60          RTS
   67                       
   68  06:CCB3            WriteClueByteToPPUString:
   69                     
   70  06:CCB3  8D 00 00    STA temp1 ;store off the tile value
   71                     
   72                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:CCB6  A9 01       LDA #$01
       06:CCB8  8D 21 00    STA PPU_PendingWrite
       06:CCBB  AD B6 00    LDA clue_draw_address+1
       06:CCBE  20 1C CB    JSR WriteToPPUString
       06:CCC1  AD B5 00    LDA clue_draw_address
       06:CCC4  20 1C CB    JSR WriteToPPUString
       06:CCC7  A9 00       LDA #DRAW_HORIZONTAL
       06:CCC9  20 1C CB    JSR WriteToPPUString
       06:CCCC  A9 01       LDA #$01 
       06:CCCE  20 1C CB    JSR WriteToPPUString
                            
   73  06:CCD1  AD 00 00    LDA temp1
   74  06:CCD4  20 1C CB    JSR WriteToPPUString
   75                       
   76                       ;;also copy to ... copy
   77  06:CCD7  AD B5 00    LDA clue_draw_address
   78  06:CCDA  8D AF 00    STA copy_address
   79  06:CCDD  AD B6 00    LDA clue_draw_address+1
   80  06:CCE0  29 0F       AND #$0F
   81  06:CCE2  09 60       ORA #$60
   82  06:CCE4  8D B0 00    STA copy_address+1
   83  06:CCE7  AD 00 00    LDA temp1
   84  06:CCEA  A0 00       LDY #$00
   85  06:CCEC  91 AF       STA [copy_address],y
   86                       
   87  06:CCEE  AD BA 00    LDA clueDrawAdd
   88  06:CCF1  20 18 CD    JSR SubFromClueDrawAddress
   89                         
   90  06:CCF4  60          RTS
   91                       
   92  06:CCF5            ResetClueDrawAddress:
   93                     
   94                       MACROGetPointer clue_start_address, clue_draw_address
                          
       06:CCF5  AD B3 00          LDA clue_start_address
       06:CCF8  8D B5 00          STA clue_draw_address
       06:CCFB  AD B4 00          LDA clue_start_address+1
       06:CCFE  8D B6 00          STA clue_draw_address+1
                          
   95                       
   96  06:CD01  60          RTS
   97                       
   98  06:CD02            AddToClueDrawAddress:
   99                     
  100  06:CD02  8D 00 00    STA temp1
  101                       
  102  06:CD05  AD B5 00    LDA clue_draw_address
  103  06:CD08  18          CLC
  104  06:CD09  6D 00 00    ADC temp1
  105  06:CD0C  8D B5 00    STA clue_draw_address
  106  06:CD0F  AD B6 00    LDA clue_draw_address+1
  107  06:CD12  69 00       ADC #$00
  108  06:CD14  8D B6 00    STA clue_draw_address+1
  109                       
  110  06:CD17  60          RTS
  111                         
  112  06:CD18            SubFromClueDrawAddress:
  113                     
  114  06:CD18  8D 00 00    STA temp1
  115                       
  116  06:CD1B  AD B5 00    LDA clue_draw_address
  117  06:CD1E  38          SEC
  118  06:CD1F  ED 00 00    SBC temp1
  119  06:CD22  8D B5 00    STA clue_draw_address
  120  06:CD25  AD B6 00    LDA clue_draw_address+1
  121  06:CD28  E9 00       SBC #$00
  122  06:CD2A  8D B6 00    STA clue_draw_address+1
  123                       
  124  06:CD2D  60          RTS
  125                       
  126  06:CD2E            AddToClueDrawAddressHi:
  127                     
  128  06:CD2E  8D 00 00    STA temp1
  129                       
  130  06:CD31  AD B6 00    LDA clue_draw_address+1
  131  06:CD34  6D 00 00    ADC temp1
  132  06:CD37  8D B6 00    STA clue_draw_address+1
  133                       
  134  06:CD3A  60          RTS
  135                       
  136  06:CD3B            CreateOffsetFromIndex:
  137                     
  138                       ;;would be this, but we need to be able to go further- so we'll make a doulbe offset
  139  06:CD3B  AD B8 00    LDA clueLineIndex
  140  06:CD3E  8D BB 00    STA clueDrawOffset
  141  06:CD41  A9 00       LDA #$00
  142  06:CD43  8D BC 00    STA clueDrawOffset+1
  143                       
  144  06:CD46  AD B9 00    LDA clueOffsetShift   
  145  06:CD49  F0 0E       BEQ .addOffset
  146                       
  147  06:CD4B  A2 00       LDX #$00
  148                       
  149  06:CD4D            .loopShift:
  150  06:CD4D  0E BB 00    ASL clueDrawOffset
  151  06:CD50  2E BC 00    ROL clueDrawOffset+1
  152  06:CD53  E8          INX
  153  06:CD54  EC B9 00    CPX clueOffsetShift
  154  06:CD57  D0 F4       BNE .loopShift
  155                       
  156  06:CD59            .addOffset:
  157                       
  158  06:CD59  20 F5 CC    JSR ResetClueDrawAddress
  159  06:CD5C  AD BB 00    LDA clueDrawOffset
  160  06:CD5F  20 02 CD    JSR AddToClueDrawAddress 
  161  06:CD62  AD BC 00    LDA clueDrawOffset+1
  162  06:CD65  20 2E CD    JSR AddToClueDrawAddressHi
  163                       
  164  06:CD68  60          RTS  
  165                       
  166  06:CD69            ClearPuzzle:
  167                     
  168                       ;we'll assume clue draw address has been set to the top of the 1st nametable
  169                      
  170                       MACROGetLabelPointer ClearLineDefs, table_address
                          
       06:CD69  A9 CF             LDA #HIGH(ClearLineDefs)
       06:CD6B  A2 9F             LDX #LOW(ClearLineDefs)
                                  
       06:CD6D  8E 14 00          STX table_address
       06:CD70  8D 15 00          STA table_address+1
                                  
  171                     
  172  06:CD73  AC B8 00    LDY clueLineIndex
  173  06:CD76  B1 14       LDA [table_address], y
  174  06:CD78  8D 00 00    STA temp1
  175                       MACROAddPPUStringEntryRepeat clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp1, #$24
                          
       06:CD7B  A9 01       LDA #$01
       06:CD7D  8D 21 00    STA PPU_PendingWrite
       06:CD80  AD B6 00    LDA clue_draw_address+1
       06:CD83  20 1C CB    JSR WriteToPPUString
       06:CD86  AD B5 00    LDA clue_draw_address
       06:CD89  20 1C CB    JSR WriteToPPUString
       06:CD8C  A9 40       LDA #$40
       06:CD8E  09 00       ORA #DRAW_HORIZONTAL
       06:CD90  0D 00 00    ORA temp1
       06:CD93  20 1C CB    JSR WriteToPPUString
       06:CD96  A9 24       LDA #$24
       06:CD98  20 1C CB    JSR WriteToPPUString
                            
  176                       ;;no need to load anything else
  177                       
  178  06:CD9B  AD B5 00    LDA clue_draw_address
  179  06:CD9E  18          CLC
  180  06:CD9F  69 20       ADC #32
  181  06:CDA1  8D B5 00    STA clue_draw_address
  182  06:CDA4  AD B6 00    LDA clue_draw_address+1
  183  06:CDA7  69 00       ADC #$00
  184  06:CDA9  8D B6 00    STA clue_draw_address+1
  185                       
  186  06:CDAC  EE B8 00    INC clueLineIndex
  187  06:CDAF  60          RTS
  188                       
  189  06:CDB0            LoadPauseScreen:
  190                     
  191                     ;;use clue indexes again
  192                     ;;we want to draw one line at a time
  193                     ;;we have control codes, but those don't matter since we have to build ou the strings before hand
  194                     
  195                     ;load pause table
  196                     ;there are 6 lines of 13 tiles
  197                     ;one byte for the 6 lines, one byte to keep track of our index
  198                       ;STA clueLineIndex 
  199                       ;STA clueOffsetShift
  200                     
  201                     ;;pause_address has the table we want
  202                     ;;pause_draw_address will be the draw location
  203                     
  204                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:CDB0  A9 01       LDA #$01
       06:CDB2  8D 21 00    STA PPU_PendingWrite
       06:CDB5  AD B2 00    LDA pause_draw_address+1
       06:CDB8  20 1C CB    JSR WriteToPPUString
       06:CDBB  AD B1 00    LDA pause_draw_address
       06:CDBE  20 1C CB    JSR WriteToPPUString
       06:CDC1  A9 00       LDA #DRAW_HORIZONTAL
       06:CDC3  20 1C CB    JSR WriteToPPUString
       06:CDC6  A9 0D       LDA #13 
       06:CDC8  20 1C CB    JSR WriteToPPUString
                            
  205                     
  206  06:CDCB  A2 00       LDX #$00
  207  06:CDCD  AC B8 00    LDY clueLineIndex
  208  06:CDD0            .loop:
  209                      
  210  06:CDD0  8A          TXA
  211  06:CDD1  48          PHA
  212  06:CDD2  B1 AD       LDA [pause_address],y
  213  06:CDD4  20 1C CB    JSR WriteToPPUString
  214  06:CDD7  68          PLA
  215  06:CDD8  AA          TAX
  216  06:CDD9  C8          INY
  217  06:CDDA  E8          INX 
  218  06:CDDB  E0 0D       CPX #13
  219  06:CDDD  D0 F1       BNE .loop
  220                       
  221  06:CDDF  8C B8 00    STY clueLineIndex
  222                       
  223  06:CDE2  AD B1 00    LDA pause_draw_address
  224  06:CDE5  18          CLC
  225  06:CDE6  69 20       ADC #$20
  226  06:CDE8  8D B1 00    STA pause_draw_address
  227  06:CDEB  AD B2 00    LDA pause_draw_address+1
  228  06:CDEE  69 00       ADC #$00
  229  06:CDF0  8D B2 00    STA pause_draw_address+1
  230                       
  231  06:CDF3  EE B9 00    INC clueOffsetShift
  232  06:CDF6  60          RTS
  233                       
  234                       
  235                     
  236                     
  237  06:CDF7            ClearPauseScreen:  
  238                     
  239                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:CDF7  A9 01       LDA #$01
       06:CDF9  8D 21 00    STA PPU_PendingWrite
       06:CDFC  AD B2 00    LDA pause_draw_address+1
       06:CDFF  20 1C CB    JSR WriteToPPUString
       06:CE02  AD B1 00    LDA pause_draw_address
       06:CE05  20 1C CB    JSR WriteToPPUString
       06:CE08  A9 00       LDA #DRAW_HORIZONTAL
       06:CE0A  20 1C CB    JSR WriteToPPUString
       06:CE0D  A9 0D       LDA #13 
       06:CE0F  20 1C CB    JSR WriteToPPUString
                            
  240                     
  241  06:CE12  A2 00       LDX #$00
  242  06:CE14  A0 00       LDY #$00
  243  06:CE16            .loop:
  244                      
  245  06:CE16  8A          TXA
  246  06:CE17  48          PHA
  247  06:CE18  B1 AD       LDA [pause_address],y
  248  06:CE1A  20 1C CB    JSR WriteToPPUString
  249  06:CE1D  68          PLA
  250  06:CE1E  AA          TAX
  251  06:CE1F  C8          INY
  252  06:CE20  E8          INX 
  253  06:CE21  E0 0D       CPX #13
  254  06:CE23  D0 F1       BNE .loop
  255                       
  256                       
  257  06:CE25  AD B1 00    LDA pause_draw_address
  258  06:CE28  18          CLC
  259  06:CE29  69 20       ADC #$20
  260  06:CE2B  8D B1 00    STA pause_draw_address
  261  06:CE2E  AD B2 00    LDA pause_draw_address+1
  262  06:CE31  69 00       ADC #$00
  263  06:CE33  8D B2 00    STA pause_draw_address+1
  264                       
  265  06:CE36  AD AD 00    LDA pause_address
  266  06:CE39  18          CLC
  267  06:CE3A  69 20       ADC #$20
  268  06:CE3C  8D AD 00    STA pause_address
  269  06:CE3F  AD AE 00    LDA pause_address+1
  270  06:CE42  69 00       ADC #$00
  271  06:CE44  8D AE 00    STA pause_address+1
  272                       
  273  06:CE47  EE B9 00    INC clueOffsetShift
  274  06:CE4A  60         RTS
  275  06:CE4B            DrawImage:
  276                     
  277                       ;;we have clueTableIndex, which should be at the image bytes now
  278                       ;;clue line index will keep track of our place in a byte
  279                        
  280  06:CE4B  A9 00       LDA #$00
  281  06:CE4D  8D 00 00    STA temp1
  282  06:CE50  8D 01 00    STA temp2
  283  06:CE53  8D 02 00    STA temp3
  284  06:CE56  8D 03 00    STA temp4
  285  06:CE59  8D 05 00    STA temp6
  286                       
  287  06:CE5C  A9 04       LDA #$04
  288  06:CE5E  8D 04 00    STA temp5
  289                       
  290  06:CE61  A0 00       LDY #$00
  291  06:CE63  B1 A9       LDA [puzzle_address], y
  292  06:CE65  AA          TAX
  293  06:CE66  BD BD CF    LDA PuzzleSizes, x
  294  06:CE69  8D 06 00    STA temp7
  295  06:CE6C  BD C0 CF    LDA PuzzleImageSizes, x
  296  06:CE6F  8D 07 00    STA temp8
  297  06:CE72  4A          LSR A
  298  06:CE73  4A          LSR A
  299  06:CE74  8D 09 00    STA tempy
  300  06:CE77  AD 07 00    LDA temp8
  301  06:CE7A  29 03       AND #$03
  302  06:CE7C  F0 03       BEQ .skipAdd1
  303  06:CE7E  EE 09 00    INC tempy  
  304  06:CE81            .skipAdd1:
  305  06:CE81  BD C3 CF    LDA ImageDrawWrapOffsets, x
  306  06:CE84  8D 08 00    STA tempx
  307                       
  308  06:CE87  AC B7 00    LDY clueTableIndex
  309  06:CE8A  B1 AB       LDA [clues_address], y
  310                     
  311  06:CE8C  0A          ASL A
  312  06:CE8D  2E 00 00    ROL temp1
  313  06:CE90  0A          ASL A
  314  06:CE91  2E 00 00    ROL temp1
  315  06:CE94  0A          ASL A
  316  06:CE95  2E 01 00    ROL temp2
  317  06:CE98  0A          ASL A
  318  06:CE99  2E 01 00    ROL temp2
  319  06:CE9C  0A          ASL A
  320  06:CE9D  2E 02 00    ROL temp3
  321  06:CEA0  0A          ASL A
  322  06:CEA1  2E 02 00    ROL temp3
  323  06:CEA4  0A          ASL A
  324  06:CEA5  2E 03 00    ROL temp4
  325  06:CEA8  0A          ASL A
  326  06:CEA9  2E 03 00    ROL temp4
  327                       
  328                     
  329  06:CEAC  A2 00       LDX #$00
  330  06:CEAE            .moveUpTiles:
  331  06:CEAE  BD 00 00    LDA temp1, x
  332  06:CEB1  09 24       ORA #$24
  333  06:CEB3  9D 00 00    STA temp1, x
  334  06:CEB6  E8          INX
  335  06:CEB7  E0 04       CPX #$04
  336  06:CEB9  D0 F3       BNE .moveUpTiles
  337                       
  338                       
  339  06:CEBB  AD B9 00    LDA clueOffsetShift
  340  06:CEBE  18          CLC
  341  06:CEBF  69 04       ADC #$04
  342                     
  343  06:CEC1  8D B9 00    STA clueOffsetShift
  344                       ;;clue offset shift + 4, check if we went over puzle row length
  345  06:CEC4  38          SEC
  346  06:CEC5  ED 06 00    SBC temp7 ;;subtract 15
  347  06:CEC8  90 12       BCC .makeStrings
  348  06:CECA  F0 10       BEQ .makeStrings
  349                       
  350  06:CECC  8D B9 00    STA clueOffsetShift ;loop offset over
  351  06:CECF  8D 05 00    STA temp6 ; length of second string
  352  06:CED2  AD 04 00    LDA temp5
  353  06:CED5  38          SEC
  354  06:CED6  ED 05 00    SBC temp6 
  355  06:CED9  8D 04 00    STA temp5 ;length of first string 
  356                       
  357  06:CEDC            .makeStrings:
  358                       
  359  06:CEDC  A2 00       LDX #$00
  360                       
  361  06:CEDE  AD 04 00    LDA temp5
  362  06:CEE1  F0 51       BEQ .makeSecondString
  363  06:CEE3  8A          TXA
  364  06:CEE4  48          PHA
  365                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp5
                          
       06:CEE5  A9 01       LDA #$01
       06:CEE7  8D 21 00    STA PPU_PendingWrite
       06:CEEA  AD B6 00    LDA clue_draw_address+1
       06:CEED  20 1C CB    JSR WriteToPPUString
       06:CEF0  AD B5 00    LDA clue_draw_address
       06:CEF3  20 1C CB    JSR WriteToPPUString
       06:CEF6  A9 00       LDA #DRAW_HORIZONTAL
       06:CEF8  20 1C CB    JSR WriteToPPUString
       06:CEFB  AD 04 00    LDA temp5 
       06:CEFE  20 1C CB    JSR WriteToPPUString
                            
  366  06:CF01  68          PLA
  367  06:CF02  AA          TAX
  368                       
  369  06:CF03            .firstStringLoop:
  370                       
  371  06:CF03  8A          TXA 
  372  06:CF04  48          PHA
  373  06:CF05  BD 00 00    LDA temp1, x
  374  06:CF08  20 1C CB    JSR WriteToPPUString
  375                       
  376  06:CF0B  EE B8 00    INC clueLineIndex
  377  06:CF0E  AD B8 00    LDA clueLineIndex
  378  06:CF11  CD 07 00    CMP temp8
  379  06:CF14  D0 04       BNE .continueLoop
  380  06:CF16  68          PLA 
  381  06:CF17  4C 9B CF    JMP .leave
  382                       
  383  06:CF1A            .continueLoop:
  384  06:CF1A  68          PLA
  385  06:CF1B  AA          TAX
  386  06:CF1C  E8          INX
  387  06:CF1D  EC 04 00    CPX temp5
  388  06:CF20  D0 E1       BNE .firstStringLoop
  389                       
  390  06:CF22  AD B5 00    LDA clue_draw_address
  391  06:CF25  18          CLC
  392  06:CF26  6D 04 00    ADC temp5
  393  06:CF29  8D B5 00    STA clue_draw_address
  394  06:CF2C  AD B6 00    LDA clue_draw_address+1
  395  06:CF2F  69 00       ADC #$00
  396  06:CF31  8D B6 00    STA clue_draw_address+1
  397                       
  398  06:CF34            .makeSecondString:
  399                     
  400  06:CF34  AD 05 00    LDA temp6
  401  06:CF37  F0 62       BEQ .leave
  402                       
  403                       ;;loop draw address to next line
  404  06:CF39  AD B5 00    LDA clue_draw_address
  405  06:CF3C  18          CLC
  406  06:CF3D  6D 08 00    ADC tempx
  407  06:CF40  8D B5 00    STA clue_draw_address
  408  06:CF43  AD B6 00    LDA clue_draw_address+1
  409  06:CF46  69 00       ADC #$00
  410  06:CF48  8D B6 00    STA clue_draw_address+1
  411  06:CF4B  8A          TXA
  412  06:CF4C  48          PHA
  413                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp6
                          
       06:CF4D  A9 01       LDA #$01
       06:CF4F  8D 21 00    STA PPU_PendingWrite
       06:CF52  AD B6 00    LDA clue_draw_address+1
       06:CF55  20 1C CB    JSR WriteToPPUString
       06:CF58  AD B5 00    LDA clue_draw_address
       06:CF5B  20 1C CB    JSR WriteToPPUString
       06:CF5E  A9 00       LDA #DRAW_HORIZONTAL
       06:CF60  20 1C CB    JSR WriteToPPUString
       06:CF63  AD 05 00    LDA temp6 
       06:CF66  20 1C CB    JSR WriteToPPUString
                            
  414  06:CF69  68          PLA 
  415  06:CF6A  AA          TAX
  416                       
  417  06:CF6B            .secondStringLoop:
  418                     
  419  06:CF6B  8A          TXA
  420  06:CF6C  48          PHA 
  421  06:CF6D  BD 00 00    LDA temp1, x
  422  06:CF70  20 1C CB    JSR WriteToPPUString
  423                       
  424  06:CF73  EE B8 00    INC clueLineIndex
  425  06:CF76  AD B8 00    LDA clueLineIndex
  426  06:CF79  CD 07 00    CMP temp8
  427  06:CF7C  D0 04       BNE .continueSecondLoop
  428                       
  429  06:CF7E  68          PLA 
  430  06:CF7F  4C 9B CF    JMP .leave
  431                       
  432  06:CF82            .continueSecondLoop:
  433  06:CF82  68          PLA
  434  06:CF83  AA          TAX
  435  06:CF84  E8          INX
  436  06:CF85  E0 04       CPX #$04
  437  06:CF87  D0 E2       BNE .secondStringLoop
  438                       
  439  06:CF89  AD B5 00    LDA clue_draw_address
  440  06:CF8C  18          CLC
  441  06:CF8D  6D 05 00    ADC temp6
  442  06:CF90  8D B5 00    STA clue_draw_address
  443  06:CF93  AD B6 00    LDA clue_draw_address+1
  444  06:CF96  69 00       ADC #$00
  445  06:CF98  8D B6 00    STA clue_draw_address+1
  446                       
  447  06:CF9B            .leave:
  448  06:CF9B  EE B7 00    INC clueTableIndex
  449  06:CF9E  60          RTS
  450                     
  451  06:CF9F            ClearLineDefs:
  452                     
  453  06:CF9F  20 20 20    .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
       06:CFA2  20 20 20  
       06:CFA5  20 20 20  
       06:CFA8  20 20     
  454  06:CFAA  0D 0D 0D    .db $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D
       06:CFAD  0D 0D 0D  
       06:CFB0  0D 0D 0D  
       06:CFB3  0D 0D 0D  
       06:CFB6  0D 0D 0D  
       06:CFB9  0D 0D     
  455  06:CFBB  20 20       .db $20, $20
  456                       
  457  06:CFBD            PuzzleSizes:
  458                       
  459  06:CFBD  05 0A 0F    .db $05, $0A, $0F
  460                       
  461  06:CFC0            PuzzleImageSizes:
  462                     
  463                       ;.db $05, $0A, $0F
  464  06:CFC0  19 64 E1    .db $19, $64, $E1
  465                       
  466  06:CFC3            ImageDrawWrapOffsets:
  467                     
  468  06:CFC3  1B 16 11   .db $1B, $16, $11
#[1]   Picross.asm
   97                       
   98                       
   99                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  100                     ;;     NMI                  ;;
  101                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  102                     
#[2]   Routines/Common/NMI.asm
  103                       .include "Routines/Common/NMI.asm"
    1                      
    2  06:CFC6            NMI:
    3                     
    4  06:CFC6  48          PHA                              ;protect the registers
    5  06:CFC7  8A          TXA
    6  06:CFC8  48          PHA
    7  06:CFC9  98          TYA
    8  06:CFCA  48          PHA
    9                       
   10  06:CFCB            nmi_started:
   11  06:CFCB  A9 00       LDA #$00
   12  06:CFCD  8D 03 20    STA OAM_LO      ; set the low byte (00) of the RAM address
   13  06:CFD0  A9 02       LDA #$02
   14  06:CFD2  8D 14 40    STA OAM_HI       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:CFD5  AD 10 00    LDA NMI_locks
   17  06:CFD8  F0 03       BEQ update_controllers
   18  06:CFDA  4C 49 D0    JMP WakeUp
   19                     
   20  06:CFDD            update_controllers:
   21                     
#[3]   Routines/Common/ReadControllers.asm
   22                       .include "Routines/Common/ReadControllers.asm"
    1                     
    2  06:CFDD  8A            TXA
    3  06:CFDE  48                PHA
    4  06:CFDF  98                TYA
    5  06:CFE0  48                PHA
    6                     
    7  06:CFE1  A2 00             LDX #$00
    8                     
    9  06:CFE3            GamePadCheck:
   10  06:CFE3  A9 01             LDA #$01        ;load 1
   11  06:CFE5  8D 16 40          STA $4016       ; turn latch on
   12                             ;STA gamepad2
   13  06:CFE8  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   14  06:CFE9  8D 16 40          STA $4016       ;turn latch off
   15                             
   16                             ;do a ring counter technique- load %10000000 into both
   17  06:CFEC  A9 80             LDA #$80
   18  06:CFEE  8D 18 00          STA gamepad
   19                     
   20  06:CFF1            ReadControllerABytesLoop:
   21  06:CFF1  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   22  06:CFF4  29 03             AND #%00000011  ;acc: %00000001 c: 0
   23  06:CFF6  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   24                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   25  06:CFF8  6E 18 00          ROR gamepad             ;gamepad: %11000000
   26                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   27  06:CFFB  90 F4             BCC ReadControllerABytesLoop
   28                             
   29                             ;;comapre last to current, find the pressed buttons this frame
   30  06:CFFD  AD 19 00          LDA gamepadLast
   31  06:D000  49 FF             EOR #$FF
   32  06:D002  2D 18 00          AND gamepad
   33  06:D005  8D 1A 00          STA gamepadPressed
   34                             
   35                             
   36  06:D008  AD 18 00          LDA gamepad
   37  06:D00B  8D 19 00          STA gamepadLast
   38                             
   39                             ;return x and y... before resetting them all over again- always good to make sure we're clean
   40  06:D00E  68                PLA
   41  06:D00F  A8                TAY
   42  06:D010  68                PLA
   43  06:D011  AA                TAX     
#[2]   Routines/Common/NMI.asm
   23                       
   24  06:D012  20 59 CA    JSR ProcessPPUString
   25                       
   26                       
   27  06:D015  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   28  06:D017  8D 05 20    STA PPU_SCROLL
   29  06:D01A  8D 05 20    STA PPU_SCROLL
   30                       
   31                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   32                       ; enable sprites, enable background, no clipping on left side 
   33  06:D01D  20 76 CB    JSR UpdatePPUControl
   34                     
   35  06:D020            NMIUpdate:
   36                     
   37  06:D020  20 3D D0    JSR StateNMIUpdate
   38                       
   39  06:D023  AD 1B 00    LDA PPU_Control
   40  06:D026  29 FC       AND #$FC
   41  06:D028  0D 1F 00    ORA PPU_ScrollNT
   42  06:D02B  8D 00 20    STA PPU_CTRL
   43                       
   44  06:D02E  AD 1D 00    LDA PPU_ScrollX     ;;tell the ppu there is no background scrolling
   45  06:D031  8D 05 20    STA PPU_SCROLL
   46  06:D034  AD 1E 00    LDA PPU_ScrollY
   47  06:D037  8D 05 20    STA PPU_SCROLL
   48                     
   49  06:D03A  4C 49 D0    JMP WakeUp
   50                     
   51  06:D03D            StateNMIUpdate:
   52                     
   53                       MACROCallDynamicJump game_mode
                          
       06:D03D  AD 0E 00    LDA game_mode
       06:D040  20 BB C9    JSR Dynamic_Jump
                                  
   54                     
   55  06:D043            NMIJumpTable:
   56                     
   57  06:D043  54 D0       .word UpdateTitleNMI
   58  06:D045  58 D0       .word UpdateGameNMI
   59  06:D047  59 D0       .word UpdateGameOverNMI
   60                     
   61  06:D049            WakeUp:
   62  06:D049  A9 00       LDA #$00
   63  06:D04B  8D 0C 00    STA sleeping
   64                       
   65  06:D04E  68          PLA             ;restore the registers
   66  06:D04F  A8          TAY 
   67  06:D050  68          PLA
   68  06:D051  AA          TAX
   69  06:D052  68          PLA
   70                     
   71  06:D053  40          RTI             ; return from interrupt
   72                       
#[3]   Routines/NMI_States/UpdateTitleNMI.asm
   73                       .include "Routines/NMI_States/UpdateTitleNMI.asm"
    1  06:D054            UpdateTitleNMI:
    2                     
    3                       ;;load bank 0 for BG tiles, so we start with the right tile set
    4                       ;JSR ResetMapper
    5                       ;LDA #$01
    6                       ;JSR LoadCHRBankB
    7                     
    8                     
    9  06:D054  20 3C CB    JSR DetectSprite0
   10                     
   11                       ;JSR ResetMapper
   12                       ;LDA #$03
   13                       ;JSR LoadCHRBankB
   14                       
   15                     
   16                        
   17  06:D057  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameNMI.asm
   74                       .include "Routines/NMI_States/UpdateGameNMI.asm"
    1  06:D058            UpdateGameNMI:
    2  06:D058  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameOverNMI.asm
   75                       .include "Routines/NMI_States/UpdateGameOverNMI.asm"
    1  06:D059            UpdateGameOverNMI:
    2  06:D059  60          RTS
#[2]   Routines/Common/NMI.asm
#[1]   Picross.asm
  104                       
  105                     ;;**************************;;
  106                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  107                     ;;       PRG ROM DATA       ;;
  108                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  109                     ;;**************************;; 
  110                       
  111           0007        .bank 7
  112           E000        .org $E000
  113                     
#[2]   NameTables/Tables.asm
  114                       .include "NameTables/Tables.asm"
    1  07:E000            Palettes:
    2                     
    3  07:E000  1C E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E002  3C E0     
       07:E004  5C E0     
    4                     
    5  07:E006            NameTables:
    6                     
    7  07:E006  12 E0       .word Title_Screens, Game_Screens, GameOver_Screens
       07:E008  14 E0     
       07:E00A  1A E0     
    8                       
    9  07:E00C            NameTables2:
   10                     
   11  07:E00C  7C E4       .word Title_Second, Blank_Screen, Blank_Screen
       07:E00E  7C F8     
       07:E010  7C F8     
   12                       
   13  07:E012            Title_Screens:
   14                     
   15  07:E012  7C E0       .word Title_Screen
   16                       
   17  07:E014            Game_Screens:
   18                     
   19  07:E014  7C E8       .word Game_5, Game_10, Game_15
       07:E016  7C EC     
       07:E018  7C F0     
   20                       
   21  07:E01A            GameOver_Screens:
   22                     
   23  07:E01A  7C F4       .word GameOver_Screen
   24                     
   25  07:E01C            Title_Palette:
   26                     
   27  07:E01C              .incbin "NameTables/Title_PAL.pal"
   28  07:E02C              .incbin "NameTables/Title_PAL.pal"
   29                       
   30  07:E03C            Game_Palette:
   31                     
   32  07:E03C              .incbin "NameTables/Game_PAL.pal"
   33  07:E04C              .incbin "NameTables/Game_PAL.pal"
   34                       
   35  07:E05C            GameOver_Palette:
   36                     
   37  07:E05C              .incbin "NameTables/GameOver_PAL.pal"
   38  07:E06C              .incbin "NameTables/GameOver_PAL.pal"
   39                       
   40  07:E07C            Title_Screen:
   41                     
   42  07:E07C              .incbin "NameTables/Title_NT.nam"
   43                       
   44  07:E47C            Title_Second:
   45                     
   46  07:E47C              .incbin "NameTables/Title_PuzzMen_NT.nam"
   47                       
   48  07:E87C            Game_5: 
   49                     
   50  07:E87C              .incbin "NameTables/Game_NT_5.nam"
   51                       
   52  07:EC7C            Game_10:
   53  07:EC7C              .incbin "NameTables/Game_NT_10.nam"
   54                       
   55  07:F07C            Game_15:
   56  07:F07C              .incbin "NameTables/Game_NT.nam"
   57                       
   58  07:F47C            GameOver_Screen:
   59                     
   60  07:F47C              .incbin "NameTables/GameOver_NT.nam"
   61                       
   62  07:F87C            Blank_Screen:
   63                     
   64  07:F87C              .incbin "NameTables/Blank_NT.nam"
   65                     
   66  07:FC7C            Pause_Menu:
   67  07:FC7C  28 2A 2A    .db $28,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$29
       07:FC7F  2A 2A 2A  
       07:FC82  2A 2A 2A  
       07:FC85  2A 2A 2A  
       07:FC88  29        
   68  07:FC89  2B 24 1C    .db $2b,$24,$1c,$0a,$1f,$0e,$62,$0e,$21,$12,$1d,$24,$3b
       07:FC8C  0A 1F 0E  
       07:FC8F  62 0E 21  
       07:FC92  12 1D 24  
       07:FC95  3B        
   69  07:FC96  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FC99  24 24 24  
       07:FC9C  24 24 24  
       07:FC9F  24 24 24  
       07:FCA2  3B        
   70  07:FCA3  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FCA6  24 24 24  
       07:FCA9  24 24 24  
       07:FCAC  24 24 24  
       07:FCAF  3B        
   71  07:FCB0  2B 24 24    .db $2b,$24,$24,$22,$0e,$1c,$24,$24,$17,$18,$24,$24,$3b
       07:FCB3  22 0E 1C  
       07:FCB6  24 24 17  
       07:FCB9  18 24 24  
       07:FCBC  3B        
   72  07:FCBD  38 3A 3A    .db $38,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$39
       07:FCC0  3A 3A 3A  
       07:FCC3  3A 3A 3A  
       07:FCC6  3A 3A 3A  
       07:FCC9  39        
   73                     
   74                       
   75                     
   76                       
   77                      
   78                             
#[1]   Picross.asm
#[2]   Sprites/Sprites.asm
  115                       .include "Sprites/Sprites.asm"
    1                     
    2                     ;;Byte0
    3                     ;;Y position of top of sprite
    4                     ;;Sprite data is delayed by one scanline; 
    5                     ;;you must subtract 1 from the sprite's 
    6                     ;;Y coordinate before writing it here. 
    7                     ;;Hide a sprite by moving it down offscreen, 
    8                     ;;by writing any values between #$EF-#$FF here. 
    9                     ;;Sprites are never displayed on the first line of the picture, 
   10                     ;;and it is impossible to place a sprite partially off the top of the screen.
   11                     
   12                     ;;Byte 1
   13                     ;;Tile index number
   14                     ;;For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of PPUCTRL ($2000).
   15                     ;;For 8x16 sprites (bit 5 of PPUCTRL set), the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
   16                     ;;76543210
   17                     ;;||||||||
   18                     ;;|||||||+- Bank ($0000 or $1000) of tiles
   19                     ;;+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
   20                     
   21                     ;;Byte 2
   22                     ;;Attributes
   23                     ;;76543210
   24                     ;;||||||||
   25                     ;;||||||++- Palette (4 to 7) of sprite
   26                     ;;|||+++--- Unimplemented (read 0)
   27                     ;;||+------ Priority (0: in front of background; 1: behind background)
   28                     ;;|+------- Flip sprite horizontally
   29                     ;;+-------- Flip sprite vertically
   30                     
   31                     ;;Byte 3
   32                     ;;X position of left side of sprite.
   33                     ;;X-scroll values of $F9-FF results in parts of the 
   34                     ;;sprite to be past the right edge of the screen, thus invisible.
   35                     ;;It is not possible to have a sprite partially visible on the left edge. 
   36                     ;;Instead, left-clipping through PPUMASK ($2001) can be used to simulate this effect.
   37  07:FCCA            Sprites:
   38  07:FCCA  D0 FC             .word Title_Sprites, Game_Sprites, GameOver_Sprites
       07:FCCC  D9 FC     
       07:FCCE  DE FC     
   39                     
   40  07:FCD0            Title_Sprites:
   41  07:FCD0  02            .db $02
   42  07:FCD1  85 00 00          .db $85,$00,$00,$E8
       07:FCD4  E8        
   43  07:FCD5  A0 01 00          .db $A0,$01,$00,$60
       07:FCD8  60        
   44  07:FCD9            Game_Sprites:
   45  07:FCD9  01            .db $01
   46  07:FCDA  62 00 03          .db $62,$00,$03,$72
       07:FCDD  72        
   47  07:FCDE            GameOver_Sprites:
   48  07:FCDE  01                .db $01
   49  07:FCDF  00 00 00          .db $00,$00,$00,$00
       07:FCE2  00        
#[1]   Picross.asm
  116                     
  117           FFFA        .org $FFFA     ;first of the three vectors starts here
  118  07:FFFA  C6 CF       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  119                                        ;processor will jump to the label NMI:
  120  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  121                                        ;to the label RESET:
  122  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  123                       
  124                     ;;**************************;;
  125                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  126                     ;;      CHR ROM DATA        ;;
  127                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  128                     ;;**************************;; 
  129                       
  130           0008        .bank 8
  131           0000        .org $0000
  132  08:0000              .incbin "CHRROM/Bank0.chr"   ;includes 8KB graphics file from SMB1
  133                       
  134           0009        .bank 9
  135           0000        .org $0000
  136  09:0000              .incbin "CHRROM/Bank1.chr"
  137                       
  138           000A        .bank 10
  139           0000        .org $0000
  140  0A:0000              .incbin "CHRROM/Bank2.chr"
  141                       
  142           000B        .bank 11
  143           0000        .org $0000
  144  0B:0000              .incbin "CHRROM/Bank3.chr"
