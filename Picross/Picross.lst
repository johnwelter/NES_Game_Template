#[1]   Picross.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/Defines.asm
   14                       .include "Defines/Defines.asm"
    1                     ;; define 0 page stuff here, and SRAM stuff if we have it
    2                     
    3           0000        .rsset $0000
#[3]   Defines/GeneralVars.asm
    4                       .include "Defines/GeneralVars.asm"
    1           0000      temp1                   .rs 1
    2           0001      temp2                   .rs 1
    3           0002      temp3                   .rs 1
    4           0003      temp4                   .rs 1
    5           0004      temp5                   .rs 1
    6           0005      temp6                   .rs 1
    7           0006      temp7                   .rs 1
    8           0007      temp8                   .rs 1
    9           0008      tempx                   .rs 1
   10           0009      tempy                   .rs 1
   11           000A      time                    .rs 1
   12           000B      scaledTime              .rs 1
   13           000C      sleeping                .rs 1
   14           000D      mode_loadFlags  .rs 1
   15                     ;;0rcb xxxx
   16                     ;;r = read from save copy 
   17                     ;;c = write to save copy
   18           000E      game_mode               .rs 1
   19           000F      mode_state              .rs 1
   20           0010      NMI_locks               .rs 1
   21           0011      game_locks              .rs 1
   22           0012      pointer_address .rs 2
   23           0014      pointerB_address .rs 2
   24           0016      table_address   .rs 2
   25           0018      jump_address    .rs 2
   26                     
   27                     ;game modes
   28           0000      TITLE_IDX = $00
   29           0001      GAME_IDX = $01
   30           0002      GAMEOVER_IDX = $02
   31                     
   32                     ;locks for input and rendering
   33           0001      BGLOAD_NMI_LOCK = %00000001
   34           0001      EFFECT_GAME_LOCK = %00000001
   35                     
   36                     
   37                     
#[2]   Defines/Defines.asm
#[3]   Defines/ControllerVars.asm
    5                       .include "Defines/ControllerVars.asm"
    1           0010      GAMEPAD_UP = $10
    2           0020      GAMEPAD_DOWN = $20
    3           0040      GAMEPAD_LEFT = $40
    4           0080      GAMEPAD_RIGHT = $80
    5           0001      GAMEPAD_A = $01
    6           0002      GAMEPAD_B = $02
    7           0004      GAMEPAD_SELECT = $04
    8           0008      GAMEPAD_START = $08
    9                     
   10           00C0      GAMEPAD_HORI = $C0
   11           0030      GAMEPAD_VERT = $30
   12           00F0      GAMEPAD_MOVE = $F0
   13                     
   14           0003      GAMEPAD_AB = $03
   15                     
   16           0009      GAMEPAD_CONFIRM = $09
   17                     
   18           001A      gamepad                 .rs 1
   19           001B      gamepadLast     .rs 1
   20           001C      gamepadPressed  .rs 1
#[2]   Defines/Defines.asm
#[3]   Defines/PPUVariables.asm
    6                       .include "Defines/PPUVariables.asm"
    1           001D      PPU_Control                     .rs 1
    2           001E      PPU_Mask                        .rs 1
    3           001F      PPU_ScrollX                     .rs 1
    4           0020      PPU_ScrollY                     .rs 1
    5           0021      PPU_ScrollNT            .rs 1   ;first two bits
    6           0022      PPU_NT                          .rs 1
    7                     
    8           0023      PPU_PendingWrite        .rs 1
    9           0024      PPU_StringIdx           .rs 1
   10           0025      PPU_String                      .rs 128
   11                     
   12           004F      PPU_STRINGMAX = $4F ;up to size of a full nametable, I think
   13                     
   14           0000      SPRITE_YPOS = $00
   15           0001      SPRITE_ID   = $01
   16           0003      SPRITE_XPOS = $03
   17           0200      SPRITE_DATA = $0200
   18                     
   19           2000      PPU_CTRL = $2000
   20           2001      PPU_MASK = $2001
   21           2002      PPU_STATUS = $2002
   22           2003      OAM_LO = $2003
   23           2004      OAM_DATA = $2004
   24           2005      PPU_SCROLL = $2005
   25           2006      PPU_ADDR = $2006
   26           2007      PPU_DATA = $2007
   27           4014      OAM_HI = $4014
   28                     
   29           0080      DRAW_VERTICAL = $80
   30           0000      DRAW_HORIZONTAL = $00
   31                     
   32           0040      SPRITE_0_MASK = %01000000
#[2]   Defines/Defines.asm
#[3]   Defines/MapperVars.asm
    7                       .include "Defines/MapperVars.asm"
    1           00A5      mapper_address  .rs 2
    2           00A7      currentCHRBankA .rs 1
    3           00A8      currentCHRBankB .rs 1
    4           00A9      currentPRGBank  .rs 1
    5           00AA      mapperDebugVar  .rs 1
    6                     
    7                     
#[2]   Defines/Defines.asm
#[3]   Defines/TitleVariables.asm
    8                       .include "Defines/TitleVariables.asm"
    1                     
#[2]   Defines/Defines.asm
#[3]   Defines/GameVariables.asm
    9                       .include "Defines/GameVariables.asm"
    1           A000      PUZZLE_TABLE = $A000
    2           A036      NAMES_TABLE = $A036
    3           A06C      SPRITES_TABLE = $A06C
    4                     
    5           00AB      tempBank                        .rs 1
    6           00AC      tempPuzz                        .rs 1
    7           00AD      puzzle_address          .rs 2
    8           00AF      clues_address           .rs 2
    9           00B1      title_address           .rs 2
   10           00B3      pause_address           .rs 2
   11           00B5      copy_address        .rs 2
   12           00B7      pause_draw_address  .rs 2
   13           00B9      title_draw_address      .rs 2
   14           00BB      clue_start_address      .rs 2
   15           00BD      clue_draw_address       .rs 2
   16           00BF      clueTableIndex          .rs 1
   17           00C0      clueLineIndex           .rs 1
   18           00C1      clueOffsetShift         .rs 1
   19           00C2      clueDrawAdd                     .rs 1
   20           00C3      clueDrawOffset          .rs 2
   21           00C5      clueDrawDecSize         .rs 1
   22           00C6      clueParity                      .rs 1
   23           00C7      mouse_location          .rs 2
   24           00C9      mouse_index                     .rs 2
   25           00CB      currentPaintTile        .rs 1
   26           00CC      pauseState                      .rs 1
   27           00CD      pauseInputLock          .rs 1
   28           00CE      holdTimer                       .rs 1
   29           00CF      targetGameMode          .rs 1
   30           00D0      targetScreenLoad        .rs 1
   31           00D1      recordSet                       .rs 1
#[2]   Defines/Defines.asm
   10           00D2      sound_ptr .rs 2
   11           00D4      sound_ptr2 .rs 2
   12           00D6      current_song .rs 1
   13                     ;; 0100 is the stack
   14                     ;; 0200 is sprite ram
   15           0300        .rsset $0300
   16           0400        .rsset $0400
   17           0500        .rsset $0500
   18           0600        .rsset $0600
   19           0700        .rsset $0700
   20           6000        .rsset $6000
#[3]   Defines/ScreenStateVariables.asm
   21                       .include "Defines/ScreenStateVariables.asm"
    1           6000      Screen_Copy             .rs 1024
    2           6400      ScreenB_Copy    .rs 1024
    3           6800      SaveScreen_Copy .rs 1024
    4           6C00      Palette_Copy    .rs 32
#[2]   Defines/Defines.asm
   22           7000        .rsset $7000
#[3]   Defines/SaveVariables.asm
   23                       .include "Defines/SaveVariables.asm"
    1           7000      hasContinue .rs 1
    2           7001      solutionCount           .rs 1
    3           7002      nonSolutionCount        .rs 1
    4           7003      GameTime                        .rs 4   ;in order - second, ten second, minute, 10 minute - max out at 99 minutes
    5           7007      bank_index      .rs 1
    6           7008      puzzle_index .rs 1
    7           7009      image_table_offset .rs 1
    8                     ;we can save these for the continue
    9                     ;on a continue- we just need to load the back ground as it was
   10                     ;we'll save out data for the puzzles- just need to know if it's 1) complete and 2) the time
   11                     ;we can do that in 4 bytes each, so 324 bytes
   12           700A      puzzle_clear_bank0 .rs 108
   13           7076      puzzle_clear_bank1 .rs 108
   14           70E2      puzzle_clear_bank2 .rs 108
   15                     
#[2]   Defines/Defines.asm
   24                     
#[1]   Picross.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/PPUMacros.asm
    3                             .include "Macros/PPUMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetPPUControl .macro
    6                     
    7                       LDA #\1  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    8                       STA PPU_CTRL
    9                       LDA #\2   ; enable sprites, enable background, no clipping on left side
   10                       STA PPU_MASK
   11                             
   12                       .endm
   13                       
   14                     MACROSetPPUAddress .macro
   15                     
   16                       LDA PPU_STATUS             ; read PPU status to reset the high/low latch
   17                       LDA #HIGH(\1)
   18                       STA PPU_ADDR            ; write the high byte of $2000 address
   19                       LDA #LOW(\1)
   20                       STA PPU_ADDR           ; write the low byte of $2000 address
   21                       
   22                       .endm
   23                         
   24                     
   25                     MACROAddPPUStringEntryRawData .macro
   26                     
   27                       LDA #$01
   28                       STA PPU_PendingWrite
   29                       LDA \1
   30                       JSR WriteToPPUString
   31                       LDA \2
   32                       JSR WriteToPPUString
   33                       LDA \3
   34                       JSR WriteToPPUString
   35                       LDA \4 
   36                       JSR WriteToPPUString
   37                       
   38                       .endm
   39                     
   40                     MACROAddPPUStringEntryRepeat .macro
   41                     
   42                       LDA #$01
   43                       STA PPU_PendingWrite
   44                       LDA \1
   45                       JSR WriteToPPUString
   46                       LDA \2
   47                       JSR WriteToPPUString
   48                       LDA #$40
   49                       ORA \3
   50                       ORA \4
   51                       JSR WriteToPPUString
   52                       LDA \5
   53                       JSR WriteToPPUString
   54                       
   55                       .endm
   56                       
   57                     MACROAddPPUStringEntryTable .macro
   58                      
   59                       LDA #$01
   60                       STA PPU_PendingWrite
   61                       LDA \1
   62                       JSR WriteToPPUString
   63                       LDA \2
   64                       JSR WriteToPPUString
   65                       LDA #$20
   66                       ORA \3
   67                       JSR WriteToPPUString
   68                       LDA #LOW(\4)
   69                       JSR WriteToPPUString
   70                       LDA #HIGH(\4)
   71                       JSR WriteToPPUString
   72                      
   73                       .endm
   74                     
   75                     MACROAddPPUStringEntryTablePtr .macro
   76                      
   77                       LDA #$01
   78                       STA PPU_PendingWrite
   79                       LDA \1
   80                       JSR WriteToPPUString
   81                       LDA \2
   82                       JSR WriteToPPUString
   83                       LDA #$20
   84                       ORA \3
   85                       JSR WriteToPPUString
   86                       LDA \4
   87                       JSR WriteToPPUString
   88                       LDA \4+1
   89                       JSR WriteToPPUString
   90                      
   91                       .endm
   92                     
#[2]   Macros/Macros.asm
#[3]   Macros/CallDynamicJump.asm
    4                             .include "Macros/CallDynamicJump.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROCallDynamicJump .macro
    6                     
    7                       LDA \1
    8                       JSR Dynamic_Jump
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetDoubleIndex.asm
    5                             .include "Macros/GetDoubleIndex.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = index to double
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROGetDoubleIndex .macro
    5                     
    6                             LDA \1
    7                             ASL A
    8                             TAY
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetLabelPointer.asm
    6                             .include "Macros/GetLabelPointer.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label we want address of
    3                     ;; \2 = address to store address to
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROGetLabelPointer .macro
    6                     
    7                             LDA #HIGH(\1)
    8                             LDX #LOW(\1)
    9                             
   10                             STX \2
   11                             STA \2+1
   12                             
   13                       .endm
   14                       
   15                     MACROGetPointer .macro
   16                     
   17                             LDA \1
   18                             STA \2
   19                             LDA \1+1
   20                             STA \2+1
   21                     
   22                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/FlagMacros.asm
    7                             .include "Macros/FlagMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetFlags .macro
    6                     
    7                       LDA \1
    8                       ORA #\2
    9                       STA \1
   10                             
   11                       .endm
   12                       
   13                     MACROClearFlags .macro
   14                     
   15                       LDA #\2
   16                       EOR #$FF
   17                       AND \1  
   18                       STA \1
   19                     
   20                       .endm
#[2]   Macros/Macros.asm
#[1]   Picross.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1                     
    2                     
    3           0000        .bank 0
    4           8000        .org $8000
    5                       
#[3]   Puzzles/house.asm
    6                       .include "Puzzles/house.asm" 
    1  00:8000            house:
    2  00:8000  02 82 00    .db $02, $82, $00, $21
       00:8003  21        
    3  00:8004  01 E0 0F    .db $01, $E0, $0F, $00, $78, $36, $C1, $08, $03, $80, $E7, $CE, $ED, $EE, $47, $44, $47, $44, $FF, $FE, $FF, $FE, $FF, $FE, $AB, $AA, $03, $80, $FF, $FE
       00:8007  00 78 36  
       00:800A  C1 08 03  
       00:800D  80 E7 CE  
       00:8010  ED EE 47  
       00:8013  44 47 44  
       00:8016  FF FE FF  
       00:8019  FE FF FE  
       00:801C  AB AA 03  
       00:801F  80 FF FE  
    4  00:8022  14 21 FF    .db $14, $21, $FF, $17, $20, $FF, $14, $21, $FF, $13, $10, $FF, $14, $12, $FF, $17, $10, $FF, $82, $10, $FF, $C2, $FF, $63, $10, $FF, $17, $10, $FF, $14, $11, $10, $FF, $13, $10, $FF, $14, $21, $FF, $17, $10, $FF, $14, $21, $FF
       00:8025  17 20 FF  
       00:8028  14 21 FF  
       00:802B  13 10 FF  
       00:802E  14 12 FF  
       00:8031  17 10 FF  
       00:8034  82 10 FF  
       00:8037  C2 FF 63  
       00:803A  10 FF 17  
       00:803D  10 FF 14  
       00:8040  11 10 FF  
       00:8043  13 10 FF  
       00:8046  14 21 FF  
       00:8049  17 10 FF  
       00:804C  14 21 FF  
    5  00:804F  40 FF 40    .db $40, $FF, $40, $FF, $22, $40, $FF, $11, $20, $FF, $30, $FF, $35, $30, $FF, $34, $23, $FF, $11, $31, $FF, $11, $31, $FF, $F0, $FF, $F0, $FF, $F0, $FF, $11, $13, $11, $10, $FF, $30, $FF, $F0, $FF
       00:8052  FF 22 40  
       00:8055  FF 11 20  
       00:8058  FF 30 FF  
       00:805B  35 30 FF  
       00:805E  34 23 FF  
       00:8061  11 31 FF  
       00:8064  11 31 FF  
       00:8067  F0 FF F0  
       00:806A  FF F0 FF  
       00:806D  11 13 11  
       00:8070  10 FF 30  
       00:8073  FF F0 FF  
    6  00:8076            houseImage:
    7  00:8076  AA AB FE   .db $AA, $AB, $FE, $AA, $AB, $FE, $AA, $AB, $FE, $AA, $FB, $FE, $AA, $2A, $BA, $AA, $A3, $2A, $A9, $5A, $3F, $29, $54, $63, $3F, $24, $62, $AF, $CE, $A2, $8A, $BF, $3A, $89, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $77, $75, $77, $77, $FF, $D5, $FF, $F5, $55, $55, $55, $40, $FF
       00:8079  AA AB FE  
       00:807C  AA AB FE  
       00:807F  AA FB FE  
       00:8082  AA 2A BA  
       00:8085  AA A3 2A  
       00:8088  A9 5A 3F  
       00:808B  29 54 63  
       00:808E  3F 24 62  
       00:8091  AF CE A2  
       00:8094  8A BF 3A  
       00:8097  89 55 55  
       00:809A  55 55 55  
       00:809D  55 55 55  
       00:80A0  55 55 55  
       00:80A3  77 75 77  
       00:80A6  77 FF D5  
       00:80A9  FF F5 55  
       00:80AC  55 55 40  
       00:80AF  FF        
    8  00:80B0            houseName:
    9  00:80B0  05 11 18    .db $05, $11, $18, $1E, $1C, $0E, $FF
       00:80B3  1E 1C 0E  
       00:80B6  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test.asm
    7                       .include "Puzzles/test.asm"
    1  00:80B7            test:
    2  00:80B7  02 01 00    .db $02, $01, $00, $00
       00:80BA  00        
    3  00:80BB  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:80BE  00 00 00  
       00:80C1  00 00 00  
       00:80C4  00 00 00  
       00:80C7  00 00 00  
       00:80CA  00 00 00  
       00:80CD  00 00 00  
       00:80D0  00 00 00  
       00:80D3  00 00 00  
       00:80D6  00 00 00  
    4  00:80D9  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80DC  FF 00 FF  
       00:80DF  00 FF 00  
       00:80E2  FF 00 FF  
       00:80E5  00 FF 00  
       00:80E8  FF 00 FF  
       00:80EB  00 FF 00  
       00:80EE  FF 00 FF  
       00:80F1  00 FF 00  
       00:80F4  FF 00 FF  
    5  00:80F7  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80FA  FF 00 FF  
       00:80FD  00 FF 00  
       00:8100  FF 00 FF  
       00:8103  00 FF 00  
       00:8106  FF 00 FF  
       00:8109  00 FF 00  
       00:810C  FF 00 FF  
       00:810F  00 FF 00  
       00:8112  FF 00 FF  
    6  00:8115            testImage:
    7  00:8115  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8118  1B 1B 1B  
       00:811B  1B 1B 1B  
       00:811E  1B 1B 1B  
       00:8121  1B 1B 1B  
       00:8124  1B 1B 1B  
       00:8127  1B 1B 1B  
       00:812A  1B 1B 1B  
       00:812D  1B 1B 1B  
       00:8130  1B 1B 1B  
       00:8133  1B 1B 1B  
       00:8136  1B 1B 1B  
       00:8139  1B 1B 1B  
       00:813C  1B 1B 1B  
       00:813F  1B 1B 1B  
       00:8142  1B 1B 1B  
       00:8145  1B 1B 1B  
       00:8148  1B 1B 1B  
       00:814B  1B 1B 00  
       00:814E  FF        
    8  00:814F            testName:
    9  00:814F  04 1D 0E    .db $04, $1D, $0E, $1C, $1D, $FF
       00:8152  1C 1D FF  
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test5.asm
    8                       .include "Puzzles/test5.asm"
    1  00:8155            test5:
    2  00:8155  00 01 00    .db $00, $01, $00, $32
       00:8158  32        
    3  00:8159  80 00 00    .db $80, $00, $00, $00, $00
       00:815C  00 00     
    4  00:815E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:8161  FF 00 FF  
       00:8164  00 FF 00  
       00:8167  FF        
    5  00:8168  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:816B  FF 00 FF  
       00:816E  00 FF 00  
       00:8171  FF        
    6  00:8172            test5Image:
    7  00:8172  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8175  1B 1B 1B  
       00:8178  00 FF     
    8  00:817A            test5Name:
    9  00:817A  05 1D 0E    .db $05, $1D, $0E, $1C, $1D, $05, $FF
       00:817D  1C 1D 05  
       00:8180  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test10.asm
    9                       .include "Puzzles/test10.asm"
    1  00:8181            test10:
    2  00:8181  01 01 00    .db $01, $01, $00, $16
       00:8184  16        
    3  00:8185  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:8188  00 00 00  
       00:818B  00 00 00  
       00:818E  00 00 00  
       00:8191  00 00 00  
       00:8194  00 00 00  
       00:8197  00 00     
    4  00:8199  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:819C  FF 00 FF  
       00:819F  00 FF 00  
       00:81A2  FF 00 FF  
       00:81A5  00 FF 00  
       00:81A8  FF 00 FF  
       00:81AB  00 FF     
    5  00:81AD  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:81B0  FF 00 FF  
       00:81B3  00 FF 00  
       00:81B6  FF 00 FF  
       00:81B9  00 FF 00  
       00:81BC  FF 00 FF  
       00:81BF  00 FF     
    6  00:81C1            test10Image:
    7  00:81C1  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $FF
       00:81C4  1B 1B 1B  
       00:81C7  1B 1B 1B  
       00:81CA  1B 1B 1B  
       00:81CD  1B 1B 1B  
       00:81D0  1B 1B 1B  
       00:81D3  1B 1B 1B  
       00:81D6  1B 1B 1B  
       00:81D9  1B FF     
    8  00:81DB            test10Name:
    9  00:81DB  06 1D 0E    .db $06, $1D, $0E, $1C, $1D, $01, $00, $FF
       00:81DE  1C 1D 01  
       00:81E1  00 FF     
#[2]   Banks/Bank0.asm
#[3]   Puzzles/myGlyph.asm
   10                       .include "Puzzles/myGlyph.asm"
    1  00:81E3            myGlyph:
    2  00:81E3  02 0F 00    .db $02, $0F, $00, $00
       00:81E6  00        
    3  00:81E7  AA AA 00    .db $AA, $AA, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00, $00, $00, $80, $00
       00:81EA  00 80 00  
       00:81ED  00 00 80  
       00:81F0  00 00 00  
       00:81F3  80 00 00  
       00:81F6  00 80 00  
       00:81F9  00 00 80  
       00:81FC  00 00 00  
       00:81FF  80 00 00  
       00:8202  00 80 00  
    4  00:8205  11 11 11    .db $11, $11, $11, $11, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF
       00:8208  11 FF 00  
       00:820B  FF 10 FF  
       00:820E  00 FF 10  
       00:8211  FF 00 FF  
       00:8214  10 FF 00  
       00:8217  FF 10 FF  
       00:821A  00 FF 10  
       00:821D  FF 00 FF  
       00:8220  10 FF 00  
       00:8223  FF 10 FF  
    5  00:8226  11 11 11    .db $11, $11, $11, $11, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF, $00, $FF, $10, $FF
       00:8229  11 FF 00  
       00:822C  FF 10 FF  
       00:822F  00 FF 10  
       00:8232  FF 00 FF  
       00:8235  10 FF 00  
       00:8238  FF 10 FF  
       00:823B  00 FF 10  
       00:823E  FF 00 FF  
       00:8241  10 FF 00  
       00:8244  FF 10 FF  
    6  00:8247            myGlyphImage:
    7  00:8247  D4 1F F0   .db $D4, $1F, $F0, $F3, $40, $F7, $57, $0D, $80, $AE, $8D, $16, $FA, $F0, $F5, $55, $5F, $AF, $C5, $AE, $F9, $7E, $8C, $EB, $E5, $55, $71, $B7, $DC, $A9, $7B, $EB, $4A, $21, $F2, $BD, $60, $99, $FA, $EA, $A1, $69, $3C, $02, $55, $25, $BF, $FA, $30, $06, $AF, $E0, $A0, $80, $3F, $C0, $00, $FF
       00:824A  F3 40 F7  
       00:824D  57 0D 80  
       00:8250  AE 8D 16  
       00:8253  FA F0 F5  
       00:8256  55 5F AF  
       00:8259  C5 AE F9  
       00:825C  7E 8C EB  
       00:825F  E5 55 71  
       00:8262  B7 DC A9  
       00:8265  7B EB 4A  
       00:8268  21 F2 BD  
       00:826B  60 99 FA  
       00:826E  EA A1 69  
       00:8271  3C 02 55  
       00:8274  25 BF FA  
       00:8277  30 06 AF  
       00:827A  E0 A0 80  
       00:827D  3F C0 00  
       00:8280  FF        
    8  00:8281            myGlyphName:
    9  00:8281  07 16 22    .db $07, $16, $22, $10, $15, $22, $19, $11, $FF
       00:8284  10 15 22  
       00:8287  19 11 FF  
#[2]   Banks/Bank0.asm
   11                     
   12           0001        .bank 1
   13           A000        .org $A000
   14                     ;puzzles
   15  01:A000  55 81       .word test5, test10, myGlyph, test, test, test, test, test, test
       01:A002  81 81     
       01:A004  E3 81     
       01:A006  B7 80     
       01:A008  B7 80     
       01:A00A  B7 80     
       01:A00C  B7 80     
       01:A00E  B7 80     
       01:A010  B7 80     
   16  01:A012  00 80       .word house, test, test, test, test, test, test, test, test
       01:A014  B7 80     
       01:A016  B7 80     
       01:A018  B7 80     
       01:A01A  B7 80     
       01:A01C  B7 80     
       01:A01E  B7 80     
       01:A020  B7 80     
       01:A022  B7 80     
   17  01:A024  00 80       .word house, test, test, test, test, test, test, test, test
       01:A026  B7 80     
       01:A028  B7 80     
       01:A02A  B7 80     
       01:A02C  B7 80     
       01:A02E  B7 80     
       01:A030  B7 80     
       01:A032  B7 80     
       01:A034  B7 80     
   18                     ;puzzle names
   19  01:A036  7A 81       .word test5Name, test10Name, myGlyphName, testName, testName, testName, testName, testName, testName
       01:A038  DB 81     
       01:A03A  81 82     
       01:A03C  4F 81     
       01:A03E  4F 81     
       01:A040  4F 81     
       01:A042  4F 81     
       01:A044  4F 81     
       01:A046  4F 81     
   20  01:A048  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A04A  4F 81     
       01:A04C  4F 81     
       01:A04E  4F 81     
       01:A050  4F 81     
       01:A052  4F 81     
       01:A054  4F 81     
       01:A056  4F 81     
       01:A058  4F 81     
   21  01:A05A  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A05C  4F 81     
       01:A05E  4F 81     
       01:A060  4F 81     
       01:A062  4F 81     
       01:A064  4F 81     
       01:A066  4F 81     
       01:A068  4F 81     
       01:A06A  4F 81     
   22                     ;puzzle sprites
   23  01:A06C  00 00 00    .db $00, $00, $00, $00
       01:A06F  00        
   24  01:A070  00 00 00    .db $00, $00, $00, $00
       01:A073  00        
   25  01:A074  00 00 00    .db $00, $00, $00, $00
       01:A077  00        
   26  01:A078  00 00 00    .db $00, $00, $00, $00
       01:A07B  00        
   27  01:A07C  00 00 00    .db $00, $00, $00, $00
       01:A07F  00        
   28  01:A080  00 00 00    .db $00, $00, $00, $00
       01:A083  00        
   29  01:A084  00 00 00    .db $00, $00, $00, $00
       01:A087  00        
   30  01:A088  00 00 00    .db $00, $00, $00, $00
       01:A08B  00        
   31  01:A08C  00 00 00    .db $00, $00, $00, $00
       01:A08F  00        
   32  01:A090  00 00 00    .db $00, $00, $00, $00
       01:A093  00        
   33  01:A094  00 00 00    .db $00, $00, $00, $00
       01:A097  00        
   34  01:A098  00 00 00    .db $00, $00, $00, $00
       01:A09B  00        
   35  01:A09C  00 00 00    .db $00, $00, $00, $00
       01:A09F  00        
   36  01:A0A0  00 00 00    .db $00, $00, $00, $00
       01:A0A3  00        
   37  01:A0A4  00 00 00    .db $00, $00, $00, $00
       01:A0A7  00        
   38  01:A0A8  00 00 00    .db $00, $00, $00, $00
       01:A0AB  00        
   39  01:A0AC  00 00 00    .db $00, $00, $00, $00
       01:A0AF  00        
   40  01:A0B0  00 00 00    .db $00, $00, $00, $00
       01:A0B3  00        
   41  01:A0B4  00 00 00    .db $00, $00, $00, $00
       01:A0B7  00        
   42  01:A0B8  00 00 00    .db $00, $00, $00, $00
       01:A0BB  00        
   43  01:A0BC  00 00 00    .db $00, $00, $00, $00
       01:A0BF  00        
   44  01:A0C0  00 00 00    .db $00, $00, $00, $00
       01:A0C3  00        
   45  01:A0C4  00 00 00    .db $00, $00, $00, $00
       01:A0C7  00        
   46  01:A0C8  00 00 00    .db $00, $00, $00, $00
       01:A0CB  00        
   47  01:A0CC  00 00 00    .db $00, $00, $00, $00
       01:A0CF  00        
   48  01:A0D0  00 00 00    .db $00, $00, $00, $00
       01:A0D3  00        
   49  01:A0D4  00 00 00    .db $00, $00, $00, $00
       01:A0D7  00        
   50                     
   51           BFFA        .org $BFFA     ;first of the three vectors starts here
   52  01:BFFA  4F D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   53                                        ;processor will jump to the label NMI:
   54  01:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   55                                        ;to the label RESET:
   56  01:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
#[3]   Puzzles/frog.asm
    4                       .include "Puzzles/frog.asm"
    1  02:8000            frog:
    2  02:8000  02 62 00    .db $02, $62, $00, $19
       02:8003  19        
    3  02:8004  00 00 00    .db $00, $00, $00, $00, $18, $30, $24, $48, $2C, $68, $1F, $F0, $3F, $F8, $7F, $FC, $7F, $FC, $60, $0C, $33, $98, $18, $30, $0F, $E0, $3C, $78, $78, $3C
       02:8007  00 18 30  
       02:800A  24 48 2C  
       02:800D  68 1F F0  
       02:8010  3F F8 7F  
       02:8013  FC 7F FC  
       02:8016  60 0C 33  
       02:8019  98 18 30  
       02:801C  0F E0 3C  
       02:801F  78 78 3C  
    4  02:8022  00 FF 13    .db $00, $FF, $13, $FF, $25, $20, $FF, $22, $41, $FF, $45, $10, $FF, $26, $FF, $11, $40, $FF, $11, $40, $FF, $11, $40, $FF, $26, $FF, $45, $10, $FF, $22, $41, $FF, $25, $20, $FF, $13, $FF, $00, $FF
       02:8025  FF 25 20  
       02:8028  FF 22 41  
       02:802B  FF 45 10  
       02:802E  FF 26 FF  
       02:8031  11 40 FF  
       02:8034  11 40 FF  
       02:8037  11 40 FF  
       02:803A  26 FF 45  
       02:803D  10 FF 22  
       02:8040  41 FF 25  
       02:8043  20 FF 13  
       02:8046  FF 00 FF  
    5  02:8049  00 FF 00    .db $00, $FF, $00, $FF, $22, $FF, $11, $11, $FF, $12, $21, $FF, $90, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $22, $FF, $23, $20, $FF, $22, $FF, $70, $FF, $44, $FF, $44, $FF
       02:804C  FF 22 FF  
       02:804F  11 11 FF  
       02:8052  12 21 FF  
       02:8055  90 FF B0  
       02:8058  FF D0 FF  
       02:805B  D0 FF 22  
       02:805E  FF 23 20  
       02:8061  FF 22 FF  
       02:8064  70 FF 44  
       02:8067  FF 44 FF  
    6  02:806A            frogImage:
    7  02:806A  55 55 55   .db $55, $55, $55, $55, $55, $55, $55, $55, $69, $55, $A5, $56, $F9, $5B, $E5, $5B, $25, $63, $95, $5A, $AA, $A9, $55, $AA, $22, $A9, $5A, $AA, $AA, $A9, $6A, $AA, $AA, $A5, $A0, $00, $02, $95, $A0, $54, $29, $55, $A0, $02, $95, $55, $AA, $A9, $55, $6A, $BF, $AA, $56, $AB, $FF, $AA, $40, $FF
       02:806D  55 55 55  
       02:8070  55 55 69  
       02:8073  55 A5 56  
       02:8076  F9 5B E5  
       02:8079  5B 25 63  
       02:807C  95 5A AA  
       02:807F  A9 55 AA  
       02:8082  22 A9 5A  
       02:8085  AA AA A9  
       02:8088  6A AA AA  
       02:808B  A5 A0 00  
       02:808E  02 95 A0  
       02:8091  54 29 55  
       02:8094  A0 02 95  
       02:8097  55 AA A9  
       02:809A  55 6A BF  
       02:809D  AA 56 AB  
       02:80A0  FF AA 40  
       02:80A3  FF        
    8  02:80A4            frogName:
    9  02:80A4  04 0F 1B    .db $04, $0F, $1B, $18, $10, $FF
       02:80A7  18 10 FF  
#[2]   Banks/Bank1.asm
    5                     
    6           0003        .bank 3
    7           A000        .org $A000
    8                      
    9                     ;puzzles
   10  03:A000  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A002  00 80     
       03:A004  00 80     
       03:A006  00 80     
       03:A008  00 80     
       03:A00A  00 80     
       03:A00C  00 80     
       03:A00E  00 80     
       03:A010  00 80     
   11  03:A012  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A014  00 80     
       03:A016  00 80     
       03:A018  00 80     
       03:A01A  00 80     
       03:A01C  00 80     
       03:A01E  00 80     
       03:A020  00 80     
       03:A022  00 80     
   12  03:A024  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A026  00 80     
       03:A028  00 80     
       03:A02A  00 80     
       03:A02C  00 80     
       03:A02E  00 80     
       03:A030  00 80     
       03:A032  00 80     
       03:A034  00 80     
   13                     ;puzzle names
   14  03:A036  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A038  A4 80     
       03:A03A  A4 80     
       03:A03C  A4 80     
       03:A03E  A4 80     
       03:A040  A4 80     
       03:A042  A4 80     
       03:A044  A4 80     
       03:A046  A4 80     
   15  03:A048  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A04A  A4 80     
       03:A04C  A4 80     
       03:A04E  A4 80     
       03:A050  A4 80     
       03:A052  A4 80     
       03:A054  A4 80     
       03:A056  A4 80     
       03:A058  A4 80     
   16  03:A05A  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A05C  A4 80     
       03:A05E  A4 80     
       03:A060  A4 80     
       03:A062  A4 80     
       03:A064  A4 80     
       03:A066  A4 80     
       03:A068  A4 80     
       03:A06A  A4 80     
   17                     ;puzzle sprites
   18  03:A06C  00 00 00    .db $00, $00, $00, $00
       03:A06F  00        
   19  03:A070  00 00 00    .db $00, $00, $00, $00
       03:A073  00        
   20  03:A074  00 00 00    .db $00, $00, $00, $00
       03:A077  00        
   21  03:A078  00 00 00    .db $00, $00, $00, $00
       03:A07B  00        
   22  03:A07C  00 00 00    .db $00, $00, $00, $00
       03:A07F  00        
   23  03:A080  00 00 00    .db $00, $00, $00, $00
       03:A083  00        
   24  03:A084  00 00 00    .db $00, $00, $00, $00
       03:A087  00        
   25  03:A088  00 00 00    .db $00, $00, $00, $00
       03:A08B  00        
   26  03:A08C  00 00 00    .db $00, $00, $00, $00
       03:A08F  00        
   27  03:A090  00 00 00    .db $00, $00, $00, $00
       03:A093  00        
   28  03:A094  00 00 00    .db $00, $00, $00, $00
       03:A097  00        
   29  03:A098  00 00 00    .db $00, $00, $00, $00
       03:A09B  00        
   30  03:A09C  00 00 00    .db $00, $00, $00, $00
       03:A09F  00        
   31  03:A0A0  00 00 00    .db $00, $00, $00, $00
       03:A0A3  00        
   32  03:A0A4  00 00 00    .db $00, $00, $00, $00
       03:A0A7  00        
   33  03:A0A8  00 00 00    .db $00, $00, $00, $00
       03:A0AB  00        
   34  03:A0AC  00 00 00    .db $00, $00, $00, $00
       03:A0AF  00        
   35  03:A0B0  00 00 00    .db $00, $00, $00, $00
       03:A0B3  00        
   36  03:A0B4  00 00 00    .db $00, $00, $00, $00
       03:A0B7  00        
   37  03:A0B8  00 00 00    .db $00, $00, $00, $00
       03:A0BB  00        
   38  03:A0BC  00 00 00    .db $00, $00, $00, $00
       03:A0BF  00        
   39  03:A0C0  00 00 00    .db $00, $00, $00, $00
       03:A0C3  00        
   40  03:A0C4  00 00 00    .db $00, $00, $00, $00
       03:A0C7  00        
   41  03:A0C8  00 00 00    .db $00, $00, $00, $00
       03:A0CB  00        
   42  03:A0CC  00 00 00    .db $00, $00, $00, $00
       03:A0CF  00        
   43  03:A0D0  00 00 00    .db $00, $00, $00, $00
       03:A0D3  00        
   44  03:A0D4  00 00 00    .db $00, $00, $00, $00
       03:A0D7  00        
   45                       
   46                       
   47           BFFA        .org $BFFA     ;first of the three vectors starts here
   48  03:BFFA  4F D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   49                                        ;processor will jump to the label NMI:
   50  03:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   51                                        ;to the label RESET:
   52  03:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
#[3]   Puzzles/cat.asm
    4                       .include "Puzzles/cat.asm"
    1  04:8000            cat:
    2  04:8000  02 7E 00    .db $02, $7E, $00, $2B
       04:8003  2B        
    3  04:8004  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $47, $C4, $7B, $BC, $7F, $FC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       04:8007  60 1E F0  
       04:800A  3E F8 3F  
       04:800D  F8 7F FC  
       04:8010  7F FC 47  
       04:8013  C4 7B BC  
       04:8016  7F FC 7C  
       04:8019  7C 76 DC  
       04:801C  39 38 1F  
       04:801F  F0 00 00  
    4  04:8022  00 FF 70    .db $00, $FF, $70, $FF, $54, $FF, $65, $FF, $23, $60, $FF, $13, $70, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $70, $FF, $23, $60, $FF, $65, $FF, $54, $FF, $70, $FF, $00, $FF
       04:8025  FF 54 FF  
       04:8028  65 FF 23  
       04:802B  60 FF 13  
       04:802E  70 FF 11  
       04:8031  80 FF 26  
       04:8034  FF 11 80  
       04:8037  FF 13 70  
       04:803A  FF 23 60  
       04:803D  FF 65 FF  
       04:8040  54 FF 70  
       04:8043  FF 00 FF  
    5  04:8046  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $15, $10, $FF, $43, $40, $FF, $D0, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       04:8049  FF 44 FF  
       04:804C  55 FF B0  
       04:804F  FF D0 FF  
       04:8052  D0 FF 15  
       04:8055  10 FF 43  
       04:8058  40 FF D0  
       04:805B  FF 55 FF  
       04:805E  32 23 FF  
       04:8061  31 30 FF  
       04:8064  90 FF 00  
       04:8067  FF        
    6  04:8068            catImage:
    7  04:8068  55 55 55   .db $55, $55, $55, $55, $56, $95, $A5, $55, $6A, $9A, $A5, $56, $AA, $6A, $A5, $5A, $AA, $AA, $95, $AA, $66, $6A, $96, $AA, $9A, $AA, $58, $0A, $E8, $09, $6A, $8F, $CA, $A5, $9A, $FF, $E9, $96, $AF, $57, $EA, $59, $CF, $7C, $D9, $5F, $C3, $0F, $D5, $5F, $FF, $FD, $55, $55, $55, $55, $40, $FF
       04:806B  55 56 95  
       04:806E  A5 55 6A  
       04:8071  9A A5 56  
       04:8074  AA 6A A5  
       04:8077  5A AA AA  
       04:807A  95 AA 66  
       04:807D  6A 96 AA  
       04:8080  9A AA 58  
       04:8083  0A E8 09  
       04:8086  6A 8F CA  
       04:8089  A5 9A FF  
       04:808C  E9 96 AF  
       04:808F  57 EA 59  
       04:8092  CF 7C D9  
       04:8095  5F C3 0F  
       04:8098  D5 5F FF  
       04:809B  FD 55 55  
       04:809E  55 55 40  
       04:80A1  FF        
    8  04:80A2            catName:
    9  04:80A2  03 0C 0A    .db $03, $0C, $0A, $1D, $FF
       04:80A5  1D FF     
#[2]   Banks/Bank2.asm
    5                     
    6           0005        .bank 5
    7           A000        .org $A000
    8                       
    9                     ;puzzles
   10  05:A000  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A002  00 80     
       05:A004  00 80     
       05:A006  00 80     
       05:A008  00 80     
       05:A00A  00 80     
       05:A00C  00 80     
       05:A00E  00 80     
       05:A010  00 80     
   11  05:A012  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A014  00 80     
       05:A016  00 80     
       05:A018  00 80     
       05:A01A  00 80     
       05:A01C  00 80     
       05:A01E  00 80     
       05:A020  00 80     
       05:A022  00 80     
   12  05:A024  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat
       05:A026  00 80     
       05:A028  00 80     
       05:A02A  00 80     
       05:A02C  00 80     
       05:A02E  00 80     
       05:A030  00 80     
       05:A032  00 80     
       05:A034  00 80     
   13                     ;puzzle names
   14  05:A036  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A038  A2 80     
       05:A03A  A2 80     
       05:A03C  A2 80     
       05:A03E  A2 80     
       05:A040  A2 80     
       05:A042  A2 80     
       05:A044  A2 80     
       05:A046  A2 80     
   15  05:A048  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A04A  A2 80     
       05:A04C  A2 80     
       05:A04E  A2 80     
       05:A050  A2 80     
       05:A052  A2 80     
       05:A054  A2 80     
       05:A056  A2 80     
       05:A058  A2 80     
   16  05:A05A  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName
       05:A05C  A2 80     
       05:A05E  A2 80     
       05:A060  A2 80     
       05:A062  A2 80     
       05:A064  A2 80     
       05:A066  A2 80     
       05:A068  A2 80     
       05:A06A  A2 80     
   17                     ;puzzle sprites
   18  05:A06C  00 00 00    .db $00, $00, $00, $00
       05:A06F  00        
   19  05:A070  00 00 00    .db $00, $00, $00, $00
       05:A073  00        
   20  05:A074  00 00 00    .db $00, $00, $00, $00
       05:A077  00        
   21  05:A078  00 00 00    .db $00, $00, $00, $00
       05:A07B  00        
   22  05:A07C  00 00 00    .db $00, $00, $00, $00
       05:A07F  00        
   23  05:A080  00 00 00    .db $00, $00, $00, $00
       05:A083  00        
   24  05:A084  00 00 00    .db $00, $00, $00, $00
       05:A087  00        
   25  05:A088  00 00 00    .db $00, $00, $00, $00
       05:A08B  00        
   26  05:A08C  00 00 00    .db $00, $00, $00, $00
       05:A08F  00        
   27  05:A090  00 00 00    .db $00, $00, $00, $00
       05:A093  00        
   28  05:A094  00 00 00    .db $00, $00, $00, $00
       05:A097  00        
   29  05:A098  00 00 00    .db $00, $00, $00, $00
       05:A09B  00        
   30  05:A09C  00 00 00    .db $00, $00, $00, $00
       05:A09F  00        
   31  05:A0A0  00 00 00    .db $00, $00, $00, $00
       05:A0A3  00        
   32  05:A0A4  00 00 00    .db $00, $00, $00, $00
       05:A0A7  00        
   33  05:A0A8  00 00 00    .db $00, $00, $00, $00
       05:A0AB  00        
   34  05:A0AC  00 00 00    .db $00, $00, $00, $00
       05:A0AF  00        
   35  05:A0B0  00 00 00    .db $00, $00, $00, $00
       05:A0B3  00        
   36  05:A0B4  00 00 00    .db $00, $00, $00, $00
       05:A0B7  00        
   37  05:A0B8  00 00 00    .db $00, $00, $00, $00
       05:A0BB  00        
   38  05:A0BC  00 00 00    .db $00, $00, $00, $00
       05:A0BF  00        
   39  05:A0C0  00 00 00    .db $00, $00, $00, $00
       05:A0C3  00        
   40  05:A0C4  00 00 00    .db $00, $00, $00, $00
       05:A0C7  00        
   41  05:A0C8  00 00 00    .db $00, $00, $00, $00
       05:A0CB  00        
   42  05:A0CC  00 00 00    .db $00, $00, $00, $00
       05:A0CF  00        
   43  05:A0D0  00 00 00    .db $00, $00, $00, $00
       05:A0D3  00        
   44  05:A0D4  00 00 00    .db $00, $00, $00, $00
       05:A0D7  00        
   45                     
   46           BFFA        .org $BFFA     ;first of the three vectors starts here
   47  05:BFFA  4F D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   48                                        ;processor will jump to the label NMI:
   49  05:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   50                                        ;to the label RESET:
   51  05:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Common/Init.asm
   34                       .include "Routines/Common/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 FA D1    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 FE D1    JSR SetMapperControls
   34                       
   35  06:C040  20 3B D2    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   Picross.asm
   35                     
   36  06:C048  20 E6 D6    jsr sound_init
   37                         
   38  06:C04B  A9 00       LDA #TITLE_IDX
   39  06:C04D  A2 00       LDX #$00
   40  06:C04F  20 C0 CE    JSR ChangeGameMode
   41  06:C052  20 7F D1    JSR InitPPUControl
   42                       
   43                     
   44                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   45                     ;;     Main Program         ;;
   46                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   47                     
   48  06:C055            Forever:
   49                     
   50  06:C055  EE 0C 00    INC sleeping
   51                     
   52  06:C058            .loop
   53  06:C058  AD 0C 00    LDA sleeping
   54  06:C05B  D0 FB       BNE .loop
   55                     
   56  06:C05D  EE 0A 00    INC time  
   57  06:C060  AD CC 00    LDA pauseState
   58  06:C063  D0 03       BNE .skipScaleUpdate
   59  06:C065  EE 0B 00    INC scaledTime
   60  06:C068            .skipScaleUpdate:
   61  06:C068  20 6E C0    JSR GameLoop
   62                     
   63                     
   64  06:C06B  4C 55 C0    JMP Forever     ;jump back to Forever, infinite loop
   65                       
   66                     ;; dynamic jump table
   67                     
   68  06:C06E            GameLoop:
   69                     
   70                       MACROCallDynamicJump game_mode
                          
       06:C06E  AD 0E 00    LDA game_mode
       06:C071  20 91 CF    JSR Dynamic_Jump
                                  
   71                       ;; we'll pop the return address here as the table index, so 
   72                       ;; the routine we pick will return us to whatever called Game Loop
   73                       ;; when it returns
   74                     
   75  06:C074            GameLoopJumpTable:
   76                     
   77  06:C074  7A C0       .word UpdateTitle
   78  06:C076  7D C4       .word UpdateGame
   79  06:C078  9C CC       .word UpdateGameOver
   80                       
   81                     
   82                       ;;RTS is called in the subroutine
   83                     
   84                       
#[2]   Routines/Game_States/UpdateTitle.asm
   85                       .include "Routines/Game_States/UpdateTitle.asm"
    1  06:C07A            UpdateTitle:
    2                     
    3  06:C07A  AD 10 00    LDA NMI_locks
    4  06:C07D  F0 01       BEQ .unlocked
    5                       
    6  06:C07F  60          RTS
    7                       
    8  06:C080            .unlocked:
    9                     
   10  06:C080  20 84 C0    JSR DoUpdateTitle  
   11  06:C083  60          RTS
   12                       
   13  06:C084            DoUpdateTitle:
   14                     
   15  06:C084  AD 0F 00    LDA mode_state
   16  06:C087  20 91 CF    JSR Dynamic_Jump
   17                         
   18  06:C08A            UpdateTitleJumpTable:
   19                     
   20  06:C08A  96 C0       .word UpdateTitleInit
   21  06:C08C  D7 C0       .word UpdateBankSelection
   22  06:C08E  0B C1       .word UpdateScroll
   23  06:C090  34 C1       .word UpdatePuzzleSelection
   24  06:C092  92 C1       .word UpdateScrollBack
   25  06:C094  B1 C1       .word UpdateTitleExit
   26                     
   27                       
   28                     ;;title should have two steps- the bank selection and the puzzle selection
   29                     ;;top half of screen can be used as the title screen, and the bottom half will have the selectable options
   30                     ;;
   31                     ;;starting options list: BANK 0, BANK 1, BANK 2
   32                     ;;select one, then scroll over to the right, with numbers for puzzles 
   33                     
   34  06:C096            UpdateTitleInit:
   35                     
   36  06:C096  A9 00       lda #$00
   37  06:C098  8D D6 00    sta current_song
   38  06:C09B  AD D6 00    lda current_song
   39  06:C09E  20 14 D7    jsr sound_load
   40                     
   41  06:C0A1  20 5B D1    JSR TurnOnSprites
   42                       
   43  06:C0A4  AD 00 70    LDA hasContinue
   44  06:C0A7  F0 20       BEQ .skipContinueText
   45                       MACROAddPPUStringEntryTable #$2B, #$4D, #DRAW_HORIZONTAL, ContinueText
                           
       06:C0A9  A9 01       LDA #$01
       06:C0AB  8D 23 00    STA PPU_PendingWrite
       06:C0AE  A9 2B       LDA #$2B
       06:C0B0  20 13 D1    JSR WriteToPPUString
       06:C0B3  A9 4D       LDA #$4D
       06:C0B5  20 13 D1    JSR WriteToPPUString
       06:C0B8  A9 20       LDA #$20
       06:C0BA  09 00       ORA #DRAW_HORIZONTAL
       06:C0BC  20 13 D1    JSR WriteToPPUString
       06:C0BF  A9 74       LDA #LOW(ContinueText)
       06:C0C1  20 13 D1    JSR WriteToPPUString
       06:C0C4  A9 C4       LDA #HIGH(ContinueText)
       06:C0C6  20 13 D1    JSR WriteToPPUString
                           
   46                       
   47  06:C0C9            .skipContinueText:
   48                       
   49  06:C0C9  A9 00       LDA #$00
   50  06:C0CB  8D C9 00    STA mouse_index
   51  06:C0CE  A9 00       LDA #$00
   52  06:C0D0  8D CA 00    STA mouse_index+1
   53                     
   54  06:C0D3            .changeModeState:
   55                     
   56  06:C0D3  EE 0F 00    INC mode_state
   57  06:C0D6            .leave:
   58  06:C0D6  60          RTS
   59                       
   60  06:C0D7            UpdateBankSelection:
   61                     
   62  06:C0D7  20 98 C2    JSR UpdateBankPointer
   63                       
   64  06:C0DA  AD 1C 00    LDA gamepadPressed
   65  06:C0DD  29 01       AND #GAMEPAD_A
   66  06:C0DF  F0 29       BEQ .leave
   67                       
   68  06:C0E1  20 62 C4    JSR PlayMenuCursorSound
   69                       
   70  06:C0E4            .changeModeState:
   71                       
   72  06:C0E4  AD C9 00    LDA mouse_index
   73  06:C0E7  C9 03       CMP #$03
   74  06:C0E9  D0 0F       BNE .setBank
   75                       
   76  06:C0EB  EE 0F 00    INC mode_state
   77  06:C0EE  EE 0F 00    INC mode_state
   78  06:C0F1  EE 0F 00    INC mode_state
   79                       
   80                       ;;load bank
   81  06:C0F4  20 5C C3    JSR LoadBank
   82  06:C0F7  4C 04 C1    JMP .goToNext
   83                       
   84  06:C0FA            .setBank:
   85  06:C0FA  8D AB 00    STA tempBank
   86  06:C0FD  A9 FF       LDA #$FF
   87  06:C0FF  A2 01       LDX #$01
   88  06:C101  20 7A C2    JSR SetSpriteImage
   89                     
   90  06:C104            .goToNext:
   91  06:C104  EE 0F 00    INC mode_state
   92  06:C107  4C 0A C1    JMP .leave
   93                     
   94                     
   95  06:C10A            .leave:
   96  06:C10A  60          RTS
   97                       
   98  06:C10B            UpdateScroll:
   99  06:C10B  EE 1F 00    INC PPU_ScrollX
  100  06:C10E  EE 1F 00    INC PPU_ScrollX
  101  06:C111  EE 1F 00    INC PPU_ScrollX
  102  06:C114  EE 1F 00    INC PPU_ScrollX
  103  06:C117  D0 1A       BNE .leave
  104  06:C119  AD 21 00    LDA PPU_ScrollNT
  105  06:C11C  49 01       EOR #%00000001
  106  06:C11E  8D 21 00    STA PPU_ScrollNT
  107                       
  108  06:C121            .changeModeState:
  109  06:C121  A9 01       LDA #$01
  110  06:C123  A2 01       LDX #$01
  111  06:C125  20 7A C2    JSR SetSpriteImage
  112  06:C128  20 3C C2    JSR InitPuzzlePointer
  113  06:C12B  EE 0F 00    INC mode_state
  114  06:C12E  A9 FF       LDA #$FF
  115  06:C130  8D AC 00    STA tempPuzz
  116  06:C133            .leave:
  117  06:C133  60          RTS
  118                       
  119  06:C134            UpdatePuzzleSelection:
  120                     
  121  06:C134  20 EA C2    JSR UpdatePuzzlePointer
  122                       
  123  06:C137  AD C9 00    LDA mouse_index
  124  06:C13A  0A          ASL A
  125  06:C13B  0A          ASL A
  126  06:C13C  0A          ASL A
  127  06:C13D  18          CLC
  128  06:C13E  6D C9 00    ADC mouse_index
  129  06:C141  6D CA 00    ADC mouse_index+1
  130  06:C144  CD AC 00    CMP tempPuzz
  131  06:C147  F0 06       BEQ .checkButtonPresses       ;no change
  132  06:C149  8D AC 00    STA tempPuzz
  133                       
  134  06:C14C  20 69 C3    JSR UpdatePuzzleInfo
  135                       
  136  06:C14F            .checkButtonPresses:
  137                     
  138  06:C14F  AD 1C 00    LDA gamepadPressed
  139  06:C152  29 02       AND #GAMEPAD_B
  140  06:C154  D0 10       BNE .changeToScrollBack
  141  06:C156  AD 1C 00    LDA gamepadPressed
  142  06:C159  29 09       AND #GAMEPAD_CONFIRM
  143  06:C15B  F0 34       BEQ .leave
  144                       
  145  06:C15D  EE 0F 00    INC mode_state
  146  06:C160  EE 0F 00    INC mode_state
  147  06:C163  4C 91 C1    JMP .leave
  148                       
  149  06:C166            .changeToScrollBack:
  150                      
  151  06:C166  A9 FF       LDA #$FF
  152  06:C168  A2 01       LDX #$01
  153  06:C16A  20 7A C2    JSR SetSpriteImage
  154  06:C16D  20 34 C2    JSR InitBankPointer
  155  06:C170  AD 07 70    LDA bank_index
  156  06:C173  8D C9 00    STA mouse_index
  157  06:C176  20 DA C2    JSR SetBankPointerFromIndex
  158                       
  159  06:C179  A9 00       LDA #$00
  160  06:C17B  8D 20 00    STA PPU_ScrollY
  161  06:C17E  A9 FC       LDA #$FC
  162  06:C180  8D 1F 00    STA PPU_ScrollX
  163  06:C183  AD 21 00    LDA PPU_ScrollNT
  164  06:C186  29 FE       AND #$FE
  165  06:C188  8D 21 00    STA PPU_ScrollNT
  166                       
  167  06:C18B  EE 0F 00    INC mode_state
  168                       
  169  06:C18E  20 62 C4    JSR PlayMenuCursorSound
  170  06:C191            .leave:
  171  06:C191  60          RTS
  172                       
  173  06:C192            UpdateScrollBack:
  174                     
  175  06:C192  CE 1F 00    DEC PPU_ScrollX
  176  06:C195  CE 1F 00    DEC PPU_ScrollX
  177  06:C198  CE 1F 00    DEC PPU_ScrollX
  178  06:C19B  CE 1F 00    DEC PPU_ScrollX
  179  06:C19E  D0 10       BNE .leave
  180                       
  181  06:C1A0            .changeModeState:
  182                     
  183  06:C1A0  A9 01       LDA #$01
  184  06:C1A2  A2 01       LDX #$01
  185  06:C1A4  20 7A C2    JSR SetSpriteImage
  186  06:C1A7  CE 0F 00    DEC mode_state
  187  06:C1AA  CE 0F 00    DEC mode_state
  188  06:C1AD  CE 0F 00    DEC mode_state
  189                       
  190  06:C1B0            .leave:
  191  06:C1B0  60          RTS
  192                       
  193  06:C1B1            UpdateTitleExit:
  194                       
  195  06:C1B1  A9 00       lda #$00
  196  06:C1B3  8D D6 00    sta current_song
  197  06:C1B6  AD D6 00    lda current_song
  198  06:C1B9  20 14 D7    jsr sound_load
  199                       
  200                       ;;reset screen scroll
  201  06:C1BC  A9 00       LDA #$00
  202  06:C1BE  8D 1F 00    STA PPU_ScrollX
  203  06:C1C1  8D 21 00    STA PPU_ScrollNT
  204                       
  205  06:C1C4  A9 20       LDA #%00100000
  206  06:C1C6  8D 00 00    STA temp1
  207                       
  208  06:C1C9  AD C9 00    LDA mouse_index
  209  06:C1CC  C9 03       CMP #$03
  210  06:C1CE  D0 06       BNE .loadPuzzle
  211                       
  212  06:C1D0  0E 00 00    ASL temp1
  213  06:C1D3  4C EA C1    JMP .setupPuzzle
  214                       
  215  06:C1D6            .loadPuzzle:
  216                       ;; we can also pick out the puzzle index
  217                       ;; we have the mouse indexes - one vert, one hori
  218                       ;; take vert, mult by 9- alternatively, mult by 8, add index 
  219                       ;; IE - ind = 1, mult 8 = 8, add 1 = 9
  220                       ;; add X index
  221  06:C1D6  AD AB 00    LDA tempBank
  222  06:C1D9  8D 07 70    STA bank_index
  223  06:C1DC  20 5C C3    JSR LoadBank
  224                       
  225  06:C1DF  AD AC 00    LDA tempPuzz
  226  06:C1E2  8D 08 70    STA puzzle_index
  227  06:C1E5  A9 00       LDA #$00
  228  06:C1E7  8D 00 70    STA hasContinue
  229                     
  230                     
  231  06:C1EA            .setupPuzzle:
  232                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C1EA  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C1EC  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C1EE  8E 16 00          STX table_address
       06:C1F1  8D 17 00          STA table_address+1
                                  
  233                       MACROGetDoubleIndex puzzle_index
                          
       06:C1F4  AD 08 70          LDA puzzle_index
       06:C1F7  0A                ASL A
       06:C1F8  A8                TAY
                                  
  234  06:C1F9  20 B7 CF    JSR GetTableAtIndex
  235                       MACROGetPointer table_address, puzzle_address
                          
       06:C1FC  AD 16 00          LDA table_address
       06:C1FF  8D AD 00          STA puzzle_address
       06:C202  AD 17 00          LDA table_address+1
       06:C205  8D AE 00          STA puzzle_address+1
                          
  236                       
  237                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:C208  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:C20A  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:C20C  8E 16 00          STX table_address
       06:C20F  8D 17 00          STA table_address+1
                                  
  238                       MACROGetDoubleIndex puzzle_index
                          
       06:C212  AD 08 70          LDA puzzle_index
       06:C215  0A                ASL A
       06:C216  A8                TAY
                                  
  239  06:C217  20 B7 CF    JSR GetTableAtIndex
  240                       MACROGetPointer table_address, title_address
                          
       06:C21A  AD 16 00          LDA table_address
       06:C21D  8D B1 00          STA title_address
       06:C220  AD 17 00          LDA table_address+1
       06:C223  8D B2 00          STA title_address+1
                          
  241                     
  242  06:C226  A0 00       LDY #$00
  243  06:C228  B1 AD       LDA [puzzle_address], y
  244  06:C22A  0D 00 00    ORA temp1
  245                       
  246  06:C22D  AA          TAX
  247                       
  248                     
  249  06:C22E  A9 01       LDA #GAME_IDX
  250  06:C230  20 C0 CE    JSR ChangeGameMode
  251                       
  252  06:C233            .leave
  253  06:C233  60          RTS
  254                       
  255  06:C234            InitBankPointer:
  256                     
  257  06:C234  A2 A0       LDX #$A0
  258  06:C236  A9 60       LDA #$60
  259  06:C238  20 4F C2    JSR InitPointer
  260                       
  261  06:C23B  60          RTS  
  262                       
  263  06:C23C            InitPuzzlePointer:
  264                       
  265  06:C23C  A2 AE       LDX #$AE
  266  06:C23E  A9 10       LDA #$10
  267  06:C240  20 4F C2    JSR InitPointer
  268                       
  269  06:C243  60          RTS
  270                     
  271  06:C244            ResetMouseIndex:
  272                     
  273  06:C244  A9 00       LDA #$00
  274  06:C246  8D C9 00    STA mouse_index
  275  06:C249  A9 00       LDA #$00
  276  06:C24B  8D CA 00    STA mouse_index+1
  277  06:C24E  60          RTS
  278                     
  279  06:C24F            InitPointer:
  280                     
  281  06:C24F  20 56 C2    JSR SetPointerPosition
  282  06:C252  20 44 C2    JSR ResetMouseIndex
  283  06:C255  60          RTS  
  284                       
  285  06:C256            SetPointerPosition:
  286                     
  287  06:C256  48          PHA
  288  06:C257  8A          TXA
  289  06:C258  A2 01       LDX #$01
  290  06:C25A  20 64 C2    JSR SetSpriteYPosition
  291  06:C25D  68          PLA
  292  06:C25E  A2 01       LDX #$01
  293  06:C260  20 6F C2    JSR SetSpriteXPosition
  294                      
  295  06:C263  60          RTS
  296                       
  297  06:C264            SetSpriteYPosition:
  298                       
  299  06:C264  48          PHA
  300  06:C265  A9 00       LDA #SPRITE_YPOS
  301  06:C267  20 85 C2    JSR GetSpriteDataIndexInX
  302  06:C26A  68          PLA
  303  06:C26B  9D 00 02    STA SPRITE_DATA, x
  304  06:C26E  60          RTS
  305                       
  306  06:C26F            SetSpriteXPosition:  
  307                       
  308  06:C26F  48          PHA
  309  06:C270  A9 03       LDA #SPRITE_XPOS
  310  06:C272  20 85 C2    JSR GetSpriteDataIndexInX
  311  06:C275  68          PLA
  312  06:C276  9D 00 02    STA SPRITE_DATA, x 
  313  06:C279  60          RTS
  314                     
  315  06:C27A            SetSpriteImage:
  316                     
  317                     ;; A has sprite image index we want
  318                     ;; X has the sprite index
  319  06:C27A  48          PHA
  320  06:C27B  A9 01       LDA #SPRITE_ID
  321  06:C27D  20 85 C2    JSR GetSpriteDataIndexInX
  322  06:C280  68          PLA
  323  06:C281  9D 00 02    STA SPRITE_DATA, x
  324  06:C284  60          RTS
  325                       
  326  06:C285            GetSpriteDataIndexInX:
  327                     
  328                       ;; A has data index we want to get
  329                       ;; X has sprite index
  330  06:C285  8D 02 00    STA temp3
  331  06:C288  8A          TXA
  332  06:C289  0A          ASL A
  333  06:C28A  0A          ASL A
  334  06:C28B  18          CLC
  335  06:C28C  6D 02 00    ADC temp3
  336  06:C28F  AA          TAX
  337                       
  338  06:C290  60          RTS  
  339  06:C291            GetSpriteData:
  340                     
  341                       ;;A is data we want
  342                       ;;X is Sprite
  343  06:C291  20 85 C2    JSR GetSpriteDataIndexInX
  344  06:C294  BD 00 02    LDA SPRITE_DATA, x
  345  06:C297  60          RTS
  346                       
  347  06:C298            UpdateBankPointer:
  348                      
  349                       ;;bank pointer is 1D, will loop between 0->3
  350  06:C298  AD 1C 00    LDA gamepadPressed
  351  06:C29B  D0 01       BNE .continue
  352  06:C29D            .leaveEarly:
  353  06:C29D  60          RTS
  354                       
  355  06:C29E            .continue:
  356  06:C29E  A9 00       LDA #$00
  357  06:C2A0  8D 00 00    STA temp1
  358                       
  359  06:C2A3  A9 02       LDA #$02
  360  06:C2A5  8D 01 00    STA temp2
  361                       
  362  06:C2A8  AD 00 70    LDA hasContinue
  363  06:C2AB  F0 05       BEQ .parseInputs
  364  06:C2AD  A9 03       LDA #$03
  365  06:C2AF  8D 01 00    STA temp2
  366                       
  367  06:C2B2            .parseInputs:
  368  06:C2B2  AD 1C 00    LDA gamepadPressed
  369  06:C2B5  29 30       AND #GAMEPAD_VERT
  370  06:C2B7  F0 E4       BEQ .leaveEarly
  371  06:C2B9  0A          ASL A
  372  06:C2BA  0A          ASL A
  373  06:C2BB            .checkDown:
  374  06:C2BB  0A          ASL A
  375  06:C2BC  90 03       BCC .checkUp
  376  06:C2BE  EE 00 00    INC temp1
  377  06:C2C1            .checkUp:
  378  06:C2C1  0A          ASL A
  379  06:C2C2  90 03       BCC .move
  380  06:C2C4  CE 00 00    DEC temp1
  381  06:C2C7            .move:
  382                       
  383  06:C2C7  AD C9 00    LDA mouse_index
  384  06:C2CA  18          CLC
  385  06:C2CB  6D 00 00    ADC temp1
  386  06:C2CE  CD 01 00    CMP temp2
  387  06:C2D1  F0 04       BEQ .skipMod
  388  06:C2D3  90 02       BCC .skipMod
  389  06:C2D5  A9 00       LDA #$00
  390  06:C2D7            .skipMod:
  391  06:C2D7  8D C9 00    STA mouse_index
  392                       ;; mult mouse_index by 16
  393  06:C2DA            SetBankPointerFromIndex:
  394                     
  395  06:C2DA  0A          ASL A
  396  06:C2DB  0A          ASL A
  397  06:C2DC  0A          ASL A
  398  06:C2DD  0A          ASL A
  399  06:C2DE  18          CLC
  400  06:C2DF  69 A0       ADC #$A0
  401  06:C2E1  A2 01       LDX #$01
  402  06:C2E3  20 64 C2    JSR SetSpriteYPosition
  403                       
  404  06:C2E6  20 62 C4    JSR PlayMenuCursorSound
  405                     
  406  06:C2E9            .leave:
  407                       
  408  06:C2E9  60          RTS
  409                       
  410  06:C2EA            UpdatePuzzlePointer:
  411                     
  412                       ;;puzzle pointer is 2D, will loop between 0-9 and 0-2
  413  06:C2EA  AD 1C 00    LDA gamepadPressed
  414  06:C2ED  F0 6C       BEQ .leave 
  415                       
  416  06:C2EF  A9 00       LDA #$00
  417  06:C2F1  8D 00 00    STA temp1
  418  06:C2F4  8D 01 00    STA temp2
  419                       
  420  06:C2F7            .parseInputs:
  421  06:C2F7  AD 1C 00    LDA gamepadPressed
  422  06:C2FA  29 F0       AND #GAMEPAD_MOVE
  423  06:C2FC  F0 5D       BEQ .leave
  424  06:C2FE  0A          ASL A
  425  06:C2FF  90 03       BCC .checkLeft
  426  06:C301  EE 00 00    INC temp1
  427  06:C304            .checkLeft:
  428  06:C304  0A          ASL A
  429  06:C305  90 03       BCC .checkDown
  430  06:C307  CE 00 00    DEC temp1
  431  06:C30A            .checkDown:
  432  06:C30A  0A          ASL A
  433  06:C30B  90 03       BCC .checkUp
  434  06:C30D  EE 01 00    INC temp2
  435  06:C310            .checkUp:
  436  06:C310  0A          ASL A
  437  06:C311  90 03       BCC .move
  438  06:C313  CE 01 00    DEC temp2
  439                       
  440  06:C316            .move:
  441                     
  442  06:C316  AD C9 00    LDA mouse_index
  443  06:C319  18          CLC
  444  06:C31A  6D 01 00    ADC temp2
  445  06:C31D  C9 02       CMP #$02
  446  06:C31F  F0 04       BEQ .skipYMod
  447  06:C321  90 02       BCC .skipYMod
  448  06:C323  A9 00       LDA #$00
  449  06:C325            .skipYMod:
  450  06:C325  8D C9 00    STA mouse_index
  451                       ;; mult mouse_index by 16
  452  06:C328  0A          ASL A
  453  06:C329  0A          ASL A
  454  06:C32A  0A          ASL A
  455  06:C32B  0A          ASL A
  456  06:C32C  18          CLC
  457  06:C32D  69 AE       ADC #$AE
  458  06:C32F  A2 01       LDX #$01
  459  06:C331  20 64 C2    JSR SetSpriteYPosition
  460                       
  461  06:C334  AD CA 00    LDA mouse_index+1
  462  06:C337  18          CLC
  463  06:C338  6D 00 00    ADC temp1
  464  06:C33B  C9 08       CMP #$08
  465  06:C33D  F0 04       BEQ .skipXMod
  466  06:C33F  90 02       BCC .skipXMod
  467  06:C341  A9 00       LDA #$00
  468  06:C343            .skipXMod:
  469  06:C343  8D CA 00    STA mouse_index+1
  470                       ;; we need to move 3 tiles each- so index * 3 * 8,
  471  06:C346  18          CLC
  472  06:C347  6D CA 00    ADC mouse_index+1
  473  06:C34A  6D CA 00    ADC mouse_index+1
  474  06:C34D  0A          ASL A
  475  06:C34E  0A          ASL A
  476  06:C34F  0A          ASL A
  477  06:C350  18          CLC
  478  06:C351  69 10       ADC #$10
  479  06:C353  A2 01       LDX #$01
  480  06:C355  20 6F C2    JSR SetSpriteXPosition
  481  06:C358  20 62 C4    JSR PlayMenuCursorSound
  482                       
  483  06:C35B            .leave:
  484                       
  485  06:C35B  60          RTS
  486                     
  487  06:C35C            LoadBank:
  488                     
  489                       ;;load bank
  490  06:C35C  20 FA D1    JSR ResetMapper
  491  06:C35F  AD 07 70    LDA bank_index
  492  06:C362  8D A9 00    STA currentPRGBank
  493  06:C365  20 09 D2    JSR LoadPRGBank
  494  06:C368  60          RTS
  495                       
  496  06:C369            UpdatePuzzleInfo:
  497                     
  498                     
  499                       MACROGetLabelPointer PuzzleSaveLocations, table_address
                          
       06:C369  A9 CC             LDA #HIGH(PuzzleSaveLocations)
       06:C36B  A2 96             LDX #LOW(PuzzleSaveLocations)
                                  
       06:C36D  8E 16 00          STX table_address
       06:C370  8D 17 00          STA table_address+1
                                  
  500  06:C373  AD AB 00    LDA tempBank
  501  06:C376  0A          ASL A
  502  06:C377  A8          TAY
  503  06:C378  20 B7 CF    JSR GetTableAtIndex
  504                       
  505                       ;;load title/time
  506                       ;;time first, we haven't done titles
  507  06:C37B  A2 00       LDX #$00
  508  06:C37D  BD 20 FD    LDA SelectDefaultTime,x
  509  06:C380  8D 01 00    STA temp2
  510  06:C383  E8          INX
  511  06:C384  BD 20 FD    LDA SelectDefaultTime,x
  512  06:C387  8D 00 00    STA temp1
  513                       
  514  06:C38A  AD AC 00    LDA tempPuzz
  515  06:C38D  0A          ASL A
  516  06:C38E  0A          ASL A
  517  06:C38F  A8          TAY
  518  06:C390  B1 16       LDA [table_address], y
  519  06:C392  10 43       BPL .loadDefaultTime
  520                       
  521                       ;;time exists!
  522  06:C394  29 0F       AND #$0F
  523  06:C396  8D 02 00    STA temp3
  524  06:C399  C8          INY
  525  06:C39A  C8          INY
  526  06:C39B  C8          INY
  527                       MACROAddPPUStringEntryRawData temp1, temp2, #DRAW_HORIZONTAL, #$05
                          
       06:C39C  A9 01       LDA #$01
       06:C39E  8D 23 00    STA PPU_PendingWrite
       06:C3A1  AD 00 00    LDA temp1
       06:C3A4  20 13 D1    JSR WriteToPPUString
       06:C3A7  AD 01 00    LDA temp2
       06:C3AA  20 13 D1    JSR WriteToPPUString
       06:C3AD  A9 00       LDA #DRAW_HORIZONTAL
       06:C3AF  20 13 D1    JSR WriteToPPUString
       06:C3B2  A9 05       LDA #$05 
       06:C3B4  20 13 D1    JSR WriteToPPUString
                            
  528  06:C3B7  B1 16       LDA [table_address], y
  529  06:C3B9  20 13 D1    JSR WriteToPPUString
  530  06:C3BC  88          DEY
  531  06:C3BD  B1 16       LDA [table_address], y
  532  06:C3BF  20 13 D1    JSR WriteToPPUString
  533  06:C3C2  A9 61       LDA #$61
  534  06:C3C4  20 13 D1    JSR WriteToPPUString
  535  06:C3C7  88          DEY
  536  06:C3C8  B1 16       LDA [table_address], y
  537  06:C3CA  20 13 D1    JSR WriteToPPUString
  538  06:C3CD  88          DEY
  539  06:C3CE  AD 02 00    LDA temp3
  540  06:C3D1  20 13 D1    JSR WriteToPPUString  
  541  06:C3D4  4C 19 C4    JMP .drawTitle
  542                     
  543  06:C3D7            .loadDefaultTime:
  544                       
  545                       MACROAddPPUStringEntryRepeat #$26, #$47, #DRAW_HORIZONTAL, #$10, #$63
                          
       06:C3D7  A9 01       LDA #$01
       06:C3D9  8D 23 00    STA PPU_PendingWrite
       06:C3DC  A9 26       LDA #$26
       06:C3DE  20 13 D1    JSR WriteToPPUString
       06:C3E1  A9 47       LDA #$47
       06:C3E3  20 13 D1    JSR WriteToPPUString
       06:C3E6  A9 40       LDA #$40
       06:C3E8  09 00       ORA #DRAW_HORIZONTAL
       06:C3EA  09 10       ORA #$10
       06:C3EC  20 13 D1    JSR WriteToPPUString
       06:C3EF  A9 63       LDA #$63
       06:C3F1  20 13 D1    JSR WriteToPPUString
                            
  546                       MACROAddPPUStringEntryTable temp1, temp2, #DRAW_HORIZONTAL, DefaultTimeString
                           
       06:C3F4  A9 01       LDA #$01
       06:C3F6  8D 23 00    STA PPU_PendingWrite
       06:C3F9  AD 00 00    LDA temp1
       06:C3FC  20 13 D1    JSR WriteToPPUString
       06:C3FF  AD 01 00    LDA temp2
       06:C402  20 13 D1    JSR WriteToPPUString
       06:C405  A9 20       LDA #$20
       06:C407  09 00       ORA #DRAW_HORIZONTAL
       06:C409  20 13 D1    JSR WriteToPPUString
       06:C40C  A9 22       LDA #LOW(DefaultTimeString)
       06:C40E  20 13 D1    JSR WriteToPPUString
       06:C411  A9 FD       LDA #HIGH(DefaultTimeString)
       06:C413  20 13 D1    JSR WriteToPPUString
                           
  547  06:C416  4C 61 C4    JMP .leave
  548                     
  549  06:C419            .drawTitle:
  550                       MACROAddPPUStringEntryRepeat #$26, #$47, #DRAW_HORIZONTAL, #$10, #$24
                          
       06:C419  A9 01       LDA #$01
       06:C41B  8D 23 00    STA PPU_PendingWrite
       06:C41E  A9 26       LDA #$26
       06:C420  20 13 D1    JSR WriteToPPUString
       06:C423  A9 47       LDA #$47
       06:C425  20 13 D1    JSR WriteToPPUString
       06:C428  A9 40       LDA #$40
       06:C42A  09 00       ORA #DRAW_HORIZONTAL
       06:C42C  09 10       ORA #$10
       06:C42E  20 13 D1    JSR WriteToPPUString
       06:C431  A9 24       LDA #$24
       06:C433  20 13 D1    JSR WriteToPPUString
                            
  551                       
  552                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:C436  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:C438  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:C43A  8E 16 00          STX table_address
       06:C43D  8D 17 00          STA table_address+1
                                  
  553                       MACROGetDoubleIndex tempPuzz
                          
       06:C440  AD AC 00          LDA tempPuzz
       06:C443  0A                ASL A
       06:C444  A8                TAY
                                  
  554  06:C445  20 B7 CF    JSR GetTableAtIndex
  555                       MACROGetPointer table_address, title_address
                          
       06:C448  AD 16 00          LDA table_address
       06:C44B  8D B1 00          STA title_address
       06:C44E  AD 17 00          LDA table_address+1
       06:C451  8D B2 00          STA title_address+1
                          
  556                     
  557                       ;draw title at 264F
  558  06:C454  A9 4F       LDA #$4F 
  559  06:C456  8D B9 00    STA title_draw_address
  560  06:C459  A9 26       LDA #$26
  561  06:C45B  8D BA 00    STA title_draw_address+1
  562                       
  563  06:C45E  20 A4 D5    JSR DrawTitle
  564  06:C461            .leave:
  565  06:C461  60          RTS
  566                     
  567  06:C462            PlayMenuCursorSound:
  568                         
  569  06:C462  A9 04       LDA #$04
  570  06:C464  8D D6 00    STA current_song
  571  06:C467  20 14 D7    JSR sound_load
  572  06:C46A  60          RTS 
  573                     
  574  06:C46B            PlayPuzzleCursorSound:
  575  06:C46B  A9 05       LDA #$05
  576  06:C46D  8D D6 00    STA current_song
  577  06:C470  20 14 D7    JSR sound_load
  578  06:C473  60          RTS 
  579  06:C474            ContinueText:
  580                     
  581  06:C474  08 0C 18    .db $08, $0C, $18, $17, $1D, $12, $17, $1E, $0E
       06:C477  17 1D 12  
       06:C47A  17 1E 0E  
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGame.asm
   86                       .include "Routines/Game_States/UpdateGame.asm"
    1                     ;;VERT_CLUES = $206E
    2                     ;;HORI_CLUES = $2145
    3                     
    4           214E      VERT_CLUES = $214E
    5           218C      HORI_CLUES = $218C
    6           20A8      BANK_LEVEL = $20A8
    7           20E5      TIMER_LOC = $20E5
    8                     
    9           618E      MOUSE_START = $618E
   10                     
   11           0010      HOLD_TIME = $10
   12           0004      HOLD_FREQ = $04
   13                     
   14  06:C47D            UpdateGame:
   15                     
   16  06:C47D  AD 10 00    LDA NMI_locks
   17  06:C480  F0 01       BEQ .unlocked
   18                       
   19  06:C482  60          RTS
   20                       
   21  06:C483            .unlocked:
   22                     
   23  06:C483  20 87 C4    JSR DoUpdateGame
   24  06:C486  60          RTS
   25                       
   26  06:C487            DoUpdateGame:
   27                     
   28  06:C487  AD 0F 00    LDA mode_state
   29  06:C48A  20 91 CF    JSR Dynamic_Jump
   30                       
   31  06:C48D            UpdateGameJumpTable:
   32                     
   33  06:C48D  A1 C4       .word UpdateGameInit
   34  06:C48F  64 C5       .word UpdateDrawVertClues
   35  06:C491  91 C5       .word UpdateDrawHoriClues
   36  06:C493  EB C5       .word UpdateGamePlay
   37  06:C495  BE C7       .word UpdateClearPuzzle
   38  06:C497  D1 C7       .word UpdateMoveScreen
   39  06:C499  4A C8       .word UpdateDrawImage
   40  06:C49B  E7 C8       .word UpdateWaitInput
   41  06:C49D  FD C8       .word UpdateGameFadeOut
   42  06:C49F  23 C9       .word UpdateGameExit
   43                     
   44  06:C4A1            UpdateGameInit:
   45                     
   46                       ;;start bank song
   47                       
   48  06:C4A1  A9 01       lda #$01
   49  06:C4A3  8D D6 00    sta current_song
   50  06:C4A6  AD D6 00    lda current_song
   51  06:C4A9  20 14 D7    jsr sound_load
   52                       
   53                       ;; get the puzzle table in the puzzle address
   54                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C4AC  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C4AE  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C4B0  8E 16 00          STX table_address
       06:C4B3  8D 17 00          STA table_address+1
                                  
   55                       MACROGetDoubleIndex puzzle_index
                          
       06:C4B6  AD 08 70          LDA puzzle_index
       06:C4B9  0A                ASL A
       06:C4BA  A8                TAY
                                  
   56  06:C4BB  20 B7 CF    JSR GetTableAtIndex
   57                       MACROGetPointer table_address, puzzle_address
                          
       06:C4BE  AD 16 00          LDA table_address
       06:C4C1  8D AD 00          STA puzzle_address
       06:C4C4  AD 17 00          LDA table_address+1
       06:C4C7  8D AE 00          STA puzzle_address+1
                          
   58                       MACROGetLabelPointer MOUSE_START, mouse_location
                          
       06:C4CA  A9 61             LDA #HIGH(MOUSE_START)
       06:C4CC  A2 8E             LDX #LOW(MOUSE_START)
                                  
       06:C4CE  8E C7 00          STX mouse_location
       06:C4D1  8D C8 00          STA mouse_location+1
                                  
   59                     
   60                       ;;for clues, we need to get past the header- for a 15x15 puzzle, that's 34 bytes ahead
   61  06:C4D4  A0 00       LDY #$00
   62  06:C4D6  B1 AD       LDA [puzzle_address], y
   63  06:C4D8  AA          TAX
   64  06:C4D9  BD 93 CC    LDA PuzzleHeaderSkips, x
   65  06:C4DC  8D 00 00    STA temp1
   66                       
   67  06:C4DF  AD AD 00    LDA puzzle_address
   68  06:C4E2  18          CLC
   69  06:C4E3  6D 00 00    ADC temp1
   70  06:C4E6  8D AF 00    STA clues_address
   71  06:C4E9  A9 00       LDA #$00
   72  06:C4EB  6D AE 00    ADC puzzle_address+1
   73  06:C4EE  8D B0 00    STA clues_address+1
   74                     
   75  06:C4F1  A9 00       LDA #$00
   76  06:C4F3  8D BF 00    STA clueTableIndex
   77  06:C4F6  8D C0 00    STA clueLineIndex
   78  06:C4F9  8D C6 00    STA clueParity
   79  06:C4FC  8D C1 00    STA clueOffsetShift
   80  06:C4FF  8D C9 00    STA mouse_index
   81  06:C502  8D CA 00    STA mouse_index+1
   82                       
   83  06:C505  A9 01       LDA #$01
   84  06:C507  8D CD 00    STA pauseInputLock 
   85                      
   86  06:C50A  AD 00 70    LDA hasContinue
   87  06:C50D  D0 14       BNE .skipSolutionReset
   88                       
   89  06:C50F  A9 00       LDA #$00
   90  06:C511  8D 01 70    STA solutionCount
   91  06:C514  8D 02 70    STA nonSolutionCount
   92  06:C517  8D 03 70    STA GameTime
   93  06:C51A  8D 04 70    STA GameTime+1
   94  06:C51D  8D 05 70    STA GameTime+2
   95  06:C520  8D 06 70    STA GameTime+3
   96                       
   97  06:C523            .skipSolutionReset:     
   98                       
   99  06:C523  A9 20       LDA #$20
  100  06:C525  8D C2 00    STA clueDrawAdd
  101                      
  102                       MACROGetLabelPointer VERT_CLUES, clue_start_address
                          
       06:C528  A9 21             LDA #HIGH(VERT_CLUES)
       06:C52A  A2 4E             LDX #LOW(VERT_CLUES)
                                  
       06:C52C  8E BB 00          STX clue_start_address
       06:C52F  8D BC 00          STA clue_start_address+1
                                  
  103  06:C532  20 FA D2    JSR ResetClueDrawAddress
  104                       
  105                       MACROAddPPUStringEntryRawData #HIGH(BANK_LEVEL), #LOW(BANK_LEVEL), #DRAW_HORIZONTAL, #$03
                          
       06:C535  A9 01       LDA #$01
       06:C537  8D 23 00    STA PPU_PendingWrite
       06:C53A  A9 20       LDA #HIGH(BANK_LEVEL)
       06:C53C  20 13 D1    JSR WriteToPPUString
       06:C53F  A9 A8       LDA #LOW(BANK_LEVEL)
       06:C541  20 13 D1    JSR WriteToPPUString
       06:C544  A9 00       LDA #DRAW_HORIZONTAL
       06:C546  20 13 D1    JSR WriteToPPUString
       06:C549  A9 03       LDA #$03 
       06:C54B  20 13 D1    JSR WriteToPPUString
                            
  106  06:C54E  AD 07 70    LDA bank_index
  107  06:C551  20 13 D1    JSR WriteToPPUString
  108  06:C554  A9 60       LDA #$60
  109  06:C556  20 13 D1    JSR WriteToPPUString
  110  06:C559  AE 08 70    LDX puzzle_index
  111  06:C55C  E8          INX
  112  06:C55D  8A          TXA 
  113  06:C55E  20 13 D1    JSR WriteToPPUString
  114                       
  115  06:C561  EE 0F 00    INC mode_state
  116                     
  117  06:C564            UpdateDrawVertClues:
  118                       
  119  06:C564  AD 00 70    LDA hasContinue
  120  06:C567  D0 05       BNE .changeModeState
  121  06:C569  20 51 D2    JSR PopulateClues
  122                       
  123  06:C56C  90 22       BCC .leave
  124                       
  125  06:C56E            .changeModeState:
  126                     
  127  06:C56E  A9 00       LDA #$00
  128  06:C570  8D C0 00    STA clueLineIndex
  129  06:C573  8D C6 00    STA clueParity
  130                       
  131  06:C576  A9 05       LDA #$05
  132  06:C578  8D C1 00    STA clueOffsetShift
  133                       
  134  06:C57B  A9 01       LDA #$01
  135  06:C57D  8D C2 00    STA clueDrawAdd
  136                        
  137                       MACROGetLabelPointer HORI_CLUES, clue_start_address
                          
       06:C580  A9 21             LDA #HIGH(HORI_CLUES)
       06:C582  A2 8C             LDX #LOW(HORI_CLUES)
                                  
       06:C584  8E BB 00          STX clue_start_address
       06:C587  8D BC 00          STA clue_start_address+1
                                  
  138  06:C58A  20 FA D2    JSR ResetClueDrawAddress
  139                     
  140  06:C58D  EE 0F 00    INC mode_state
  141  06:C590            .leave:
  142  06:C590  60          RTS
  143                       
  144  06:C591            UpdateDrawHoriClues:
  145                     
  146  06:C591  AD 00 70    LDA hasContinue
  147  06:C594  D0 0B       BNE .changeModeState
  148  06:C596  20 51 D2    JSR PopulateClues
  149  06:C599  AD BF 00    LDA clueTableIndex
  150  06:C59C  8D 09 70    STA image_table_offset
  151  06:C59F  90 49       BCC .leave
  152                     
  153  06:C5A1            .changeModeState:
  154  06:C5A1  20 5B D1    JSR TurnOnSprites
  155                       
  156                       ;;set the timer to 00
  157                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C5A4  A9 01       LDA #$01
       06:C5A6  8D 23 00    STA PPU_PendingWrite
       06:C5A9  A9 20       LDA #HIGH(TIMER_LOC)
       06:C5AB  20 13 D1    JSR WriteToPPUString
       06:C5AE  A9 E5       LDA #LOW(TIMER_LOC)
       06:C5B0  20 13 D1    JSR WriteToPPUString
       06:C5B3  A9 00       LDA #DRAW_HORIZONTAL
       06:C5B5  20 13 D1    JSR WriteToPPUString
       06:C5B8  A9 05       LDA #$05 
       06:C5BA  20 13 D1    JSR WriteToPPUString
                            
  158  06:C5BD  AD 06 70    LDA GameTime+3
  159  06:C5C0  20 13 D1    JSR WriteToPPUString
  160  06:C5C3  AD 05 70    LDA GameTime+2
  161  06:C5C6  20 13 D1    JSR WriteToPPUString
  162  06:C5C9  A9 61       LDA #$61
  163  06:C5CB  20 13 D1    JSR WriteToPPUString
  164  06:C5CE  AD 04 70    LDA GameTime+1
  165  06:C5D1  20 13 D1    JSR WriteToPPUString
  166  06:C5D4  AD 03 70    LDA GameTime
  167  06:C5D7  20 13 D1    JSR WriteToPPUString
  168                       
  169                       ;;reset time
  170  06:C5DA  A9 00       LDA #$00
  171  06:C5DC  8D 0A 00    STA time
  172  06:C5DF  8D 0B 00    STA scaledTime
  173                       
  174                       ;;clear has continue
  175  06:C5E2  A9 00       LDA #$00
  176  06:C5E4  8D 00 70    STA hasContinue 
  177                       
  178                       
  179  06:C5E7  EE 0F 00    INC mode_state
  180  06:C5EA            .leave:
  181  06:C5EA  60          RTS
  182                       
  183  06:C5EB            UpdateGamePlay:
  184                         
  185  06:C5EB  AD CC 00    LDA pauseState
  186  06:C5EE  F0 04       BEQ .checkPause
  187  06:C5F0  20 FC CA    JSR UpdatePause
  188  06:C5F3  60          RTS
  189                       
  190  06:C5F4            .checkPause:
  191                       
  192  06:C5F4  AD 1C 00    LDA gamepadPressed
  193  06:C5F7  29 08       AND #GAMEPAD_START
  194  06:C5F9  F0 29       BEQ .updatePlay
  195  06:C5FB  A9 01       LDA #$01
  196  06:C5FD  8D CC 00    STA pauseState
  197  06:C600  A9 00       LDA #$00
  198  06:C602  8D C0 00    STA clueLineIndex 
  199  06:C605  8D C1 00    STA clueOffsetShift   
  200                     
  201  06:C608  A9 FF       LDA #$FF
  202  06:C60A  A2 00       LDX #$00
  203  06:C60C  20 7A C2    JSR SetSpriteImage
  204                     
  205                       ;;we need the pause screen table loaded
  206                       MACROGetLabelPointer Pause_Menu, pause_address
                          
       06:C60F  A9 FC             LDA #HIGH(Pause_Menu)
       06:C611  A2 7C             LDX #LOW(Pause_Menu)
                                  
       06:C613  8E B3 00          STX pause_address
       06:C616  8D B4 00          STA pause_address+1
                                  
  207                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:C619  A9 21             LDA #HIGH($210A)
       06:C61B  A2 0A             LDX #LOW($210A)
                                  
       06:C61D  8E B7 00          STX pause_draw_address
       06:C620  8D B8 00          STA pause_draw_address+1
                                  
  208                       
  209                       
  210  06:C623  60          RTS
  211                     
  212  06:C624            .updatePlay:
  213                     
  214  06:C624  20 AC CA    JSR UpdateTimeDisplay
  215                             
  216  06:C627  A9 00       LDA #$00
  217  06:C629  8D 00 00    STA temp1
  218  06:C62C  8D 01 00    STA temp2
  219  06:C62F  8D 02 00    STA temp3
  220                       
  221  06:C632            .checkPressed:  
  222                     
  223  06:C632  AD 1C 00    LDA gamepadPressed
  224  06:C635  29 F0       AND #GAMEPAD_MOVE
  225  06:C637  F0 0B       BEQ .checkHeld
  226                       
  227  06:C639  A9 10       LDA #HOLD_TIME
  228  06:C63B  8D CE 00    STA holdTimer 
  229  06:C63E  AD 1C 00    LDA gamepadPressed
  230  06:C641  4C 58 C6    JMP .parseInputs
  231                       
  232  06:C644            .checkHeld:
  233                       
  234  06:C644  AD 1A 00    LDA gamepad
  235  06:C647  29 F0       AND #GAMEPAD_MOVE
  236  06:C649  F0 2F       BEQ .checkPaintPress
  237                       
  238                       ;;decrement the hold timer
  239  06:C64B  CE CE 00    DEC holdTimer
  240  06:C64E  D0 2A       BNE .checkPaintPress
  241  06:C650  A9 04       LDA #HOLD_FREQ
  242  06:C652  8D CE 00    STA holdTimer
  243  06:C655  AD 1A 00    LDA gamepad
  244                     
  245  06:C658            .parseInputs:
  246                     
  247  06:C658  29 F0       AND #GAMEPAD_MOVE
  248  06:C65A  F0 1E       BEQ .checkPaintPress
  249  06:C65C  0A          ASL A
  250  06:C65D  90 03       BCC .checkLeft
  251  06:C65F  EE 00 00    INC temp1
  252  06:C662            .checkLeft:
  253  06:C662  0A          ASL A
  254  06:C663  90 03       BCC .checkDown
  255  06:C665  CE 00 00    DEC temp1
  256  06:C668            .checkDown:
  257  06:C668  0A          ASL A
  258  06:C669  90 03       BCC .checkUp
  259  06:C66B  EE 01 00    INC temp2
  260  06:C66E            .checkUp:
  261  06:C66E  0A          ASL A
  262  06:C66F  90 03       BCC .move
  263  06:C671  CE 01 00    DEC temp2
  264                       
  265  06:C674            .move:
  266                      
  267  06:C674  20 3E C9    JSR MoveMouse
  268  06:C677  20 38 CA    JSR UpdateMouseScreenPos
  269                       
  270  06:C67A            .checkPaintPress:
  271                     
  272  06:C67A  AD 1C 00    LDA gamepadPressed
  273  06:C67D  29 03       AND #GAMEPAD_AB
  274  06:C67F  F0 41       BEQ .updatePaint
  275                       ;;A or B pressed, get current tile
  276                       
  277  06:C681  8D 00 00    STA temp1
  278                       
  279  06:C684  A0 00       LDY #$00
  280  06:C686  B1 C7       LDA [mouse_location], y
  281  06:C688  8D 01 00    STA temp2
  282                       
  283                         ;;A treats X and Clear as clear
  284                             ;;B treats mark and clear as clear
  285                             ;;clear->mark->x
  286                             
  287                     
  288  06:C68B  C9 7C       CMP #$7C      ;check if this is a marked tile
  289  06:C68D  B0 0F       BCS .getClearTile
  290                       ;;cleared tile- store off marked tile to paint with instead
  291                       ;;not a clear tile- a mark or an x - check A or B  
  292  06:C68F  4E 00 00    LSR temp1
  293  06:C692  B0 05       BCS .getMarkTile
  294                       
  295  06:C694            .getXTile:
  296  06:C694  A9 80       LDA #$80
  297  06:C696  4C BC C6    JMP .finishGetTile
  298                       
  299  06:C699            .getMarkTile:
  300  06:C699  A9 70       LDA #$70
  301  06:C69B  4C BC C6    JMP .finishGetTile
  302                     
  303  06:C69E            .getClearTile:
  304                       
  305  06:C69E  4E 00 00    LSR temp1
  306  06:C6A1  90 0A       BCC .checkB
  307  06:C6A3  AD 01 00    LDA temp2
  308  06:C6A6  C9 8C       CMP #$8C                      ;; check if in X tiles - will be if >=
  309  06:C6A8  90 0D       BCC .clearTile
  310  06:C6AA  4C 99 C6    JMP .getMarkTile
  311                       
  312  06:C6AD            .checkB:
  313                       
  314  06:C6AD  AD 01 00   LDA temp2
  315  06:C6B0  C9 8C      CMP #$8C
  316  06:C6B2  B0 03      BCS .clearTile
  317  06:C6B4  4C 94 C6   JMP .getXTile
  318                       
  319  06:C6B7            .clearTile:
  320  06:C6B7  A9 60       LDA #$60
  321  06:C6B9  4C BC C6    JMP .finishGetTile
  322                       
  323  06:C6BC            .finishGetTile:
  324  06:C6BC  8D CB 00    STA currentPaintTile
  325  06:C6BF  4C D4 C6    JMP .setTile
  326                     
  327                     ;;we'll keep a copy of the puzzle tiles in memory, since we can't easily access tiles in the PPU
  328                     ;;might be best to just keep an entire copy of the nametable instead of trying to index it and deal with 16 bit math
  329                     ;;we can load the nametable into memory as we draw it
  330                     
  331  06:C6C2            .updatePaint:
  332                     
  333  06:C6C2  AD 1A 00    LDA gamepad
  334  06:C6C5  29 03       AND #GAMEPAD_AB
  335  06:C6C7  D0 06       BNE .checkInputLock
  336                       
  337  06:C6C9  A9 00       LDA #$00
  338  06:C6CB  8D CD 00    STA pauseInputLock
  339                       
  340  06:C6CE            .leaveEarly:
  341  06:C6CE  60          RTS  
  342                     
  343  06:C6CF            .checkInputLock:
  344                     
  345                       ;;check if the input lock is on
  346  06:C6CF  2D CD 00    AND pauseInputLock
  347  06:C6D2  D0 FA       BNE .leaveEarly
  348                       
  349  06:C6D4            .setTile:
  350                       
  351  06:C6D4  AD C9 00    LDA mouse_index
  352  06:C6D7  0D CA 00    ORA mouse_index+1
  353  06:C6DA  29 10       AND #$10
  354  06:C6DC  F0 22       BEQ .getPuzzleTile
  355                       
  356  06:C6DE  AD 1C 00    LDA gamepadPressed ; only draw on click
  357  06:C6E1  29 03       AND #GAMEPAD_AB
  358  06:C6E3  F0 E9       BEQ .leaveEarly
  359                       
  360  06:C6E5  A0 00       LDY #$00
  361  06:C6E7  B1 C7       LDA [mouse_location], y
  362  06:C6E9  C9 40       CMP #$40
  363  06:C6EB  90 E1       BCC .leaveEarly
  364  06:C6ED  C9 5F       CMP #$5F
  365  06:C6EF  F0 02       BEQ .toggleClue
  366  06:C6F1  B0 DB       BCS .leaveEarly
  367                     
  368  06:C6F3            .toggleClue:
  369  06:C6F3  8D 02 00    STA temp3
  370  06:C6F6  29 F0       AND #$F0
  371  06:C6F8  49 10       EOR #$10
  372  06:C6FA  8D CB 00    STA currentPaintTile
  373  06:C6FD  4C 03 C7    JMP .overwriteTile
  374                       
  375  06:C700            .getPuzzleTile:
  376  06:C700  20 06 CC    JSR CheckAgainstSolution
  377                       
  378  06:C703            .overwriteTile:
  379                       ;;overwrite tile
  380  06:C703  AD 02 00    LDA temp3             ;tile taken from current mouse location
  381  06:C706  29 0F       AND #$0F
  382  06:C708  0D CB 00    ORA currentPaintTile
  383  06:C70B  A0 00       LDY #$00
  384  06:C70D  91 C7       STA [mouse_location], y
  385  06:C70F  8D 00 00    STA temp1
  386                       
  387  06:C712  AD C8 00    LDA mouse_location+1
  388  06:C715  29 3F       AND #$3F
  389  06:C717  8D 01 00    STA temp2
  390                         
  391                       MACROAddPPUStringEntryRawData temp2, mouse_location, #DRAW_HORIZONTAL, #$01
                          
       06:C71A  A9 01       LDA #$01
       06:C71C  8D 23 00    STA PPU_PendingWrite
       06:C71F  AD 01 00    LDA temp2
       06:C722  20 13 D1    JSR WriteToPPUString
       06:C725  AD C7 00    LDA mouse_location
       06:C728  20 13 D1    JSR WriteToPPUString
       06:C72B  A9 00       LDA #DRAW_HORIZONTAL
       06:C72D  20 13 D1    JSR WriteToPPUString
       06:C730  A9 01       LDA #$01 
       06:C732  20 13 D1    JSR WriteToPPUString
                            
  392  06:C735  AD 00 00    LDA temp1
  393  06:C738  20 13 D1    JSR WriteToPPUString
  394                       
  395                       ;;also copy to save copy
  396  06:C73B  AD C7 00    LDA mouse_location
  397  06:C73E  8D B5 00    STA copy_address
  398  06:C741  AD C8 00    LDA mouse_location+1
  399  06:C744  29 0F       AND #$0F
  400  06:C746  09 60       ORA #$60
  401  06:C748  18          CLC
  402  06:C749  69 08       ADC #$08
  403  06:C74B  8D B6 00    STA copy_address+1
  404                       
  405  06:C74E  AD 00 00    LDA temp1
  406  06:C751  A0 00       LDY #$00
  407  06:C753  91 B5       STA [copy_address],y
  408                       
  409  06:C755            .checkSolution: 
  410                     
  411  06:C755  A0 01       LDY #$01
  412  06:C757  B1 AD       LDA [puzzle_address], y
  413  06:C759  CD 01 70    CMP solutionCount
  414  06:C75C  D0 5F       BNE .leave
  415  06:C75E  AD 02 70    LDA nonSolutionCount
  416  06:C761  F0 03       BEQ .changeModeState
  417                       
  418  06:C763  4C BD C7    JMP .leave
  419                       
  420                       ;;update the painting
  421  06:C766            .changeModeState:
  422                      
  423  06:C766  20 64 D1    JSR TurnOffSprites
  424                        
  425  06:C769  A9 00       LDA #$00
  426  06:C76B  8D BD 00    STA clue_draw_address
  427  06:C76E  8D C0 00    STA clueLineIndex
  428  06:C771  A9 20       LDA #$20
  429  06:C773  8D BE 00    STA clue_draw_address+1
  430                       
  431  06:C776  EE 0F 00    INC mode_state
  432                       
  433  06:C779  A9 00       lda #$00
  434  06:C77B  8D D6 00    sta current_song
  435  06:C77E  AD D6 00    lda current_song
  436  06:C781  20 14 D7    jsr sound_load
  437                       
  438                       ;;the puzzle is solved, store the time and solved bit in memory
  439                       ;;if the puzzle was solved before, only update the time
  440                       
  441                       MACROGetLabelPointer PuzzleSaveLocations, table_address
                          
       06:C784  A9 CC             LDA #HIGH(PuzzleSaveLocations)
       06:C786  A2 96             LDX #LOW(PuzzleSaveLocations)
                                  
       06:C788  8E 16 00          STX table_address
       06:C78B  8D 17 00          STA table_address+1
                                  
  442  06:C78E  AD 07 70    LDA bank_index
  443  06:C791  0A          ASL A
  444  06:C792  A8          TAY
  445  06:C793  20 B7 CF    JSR GetTableAtIndex
  446                       
  447  06:C796  20 C4 CB    JSR CheckNewBestTime
  448                       
  449  06:C799  AD D1 00    LDA recordSet
  450  06:C79C  F0 1F       BEQ .leave
  451                       
  452  06:C79E  AD 08 70    LDA puzzle_index
  453  06:C7A1  0A          ASL A
  454  06:C7A2  0A          ASL A
  455  06:C7A3  A8          TAY
  456  06:C7A4  AD 03 70    LDA GameTime
  457  06:C7A7  09 80       ORA #$80
  458  06:C7A9  91 16       STA [table_address], y
  459  06:C7AB  C8          INY
  460  06:C7AC  AD 04 70    LDA GameTime+1
  461  06:C7AF  91 16       STA [table_address], y
  462  06:C7B1  C8          INY
  463  06:C7B2  AD 05 70    LDA GameTime+2
  464  06:C7B5  91 16       STA [table_address], y
  465  06:C7B7  C8          INY
  466  06:C7B8  AD 06 70    LDA GameTime+3
  467  06:C7BB  91 16       STA [table_address],y
  468                     
  469                      
  470                       
  471  06:C7BD            .leave:
  472                     
  473  06:C7BD  60          RTS
  474                       
  475  06:C7BE            UpdateClearPuzzle:
  476                     
  477  06:C7BE  20 6E D3    JSR ClearPuzzle
  478  06:C7C1  AD C0 00    LDA clueLineIndex
  479  06:C7C4  C9 1E       CMP #30
  480  06:C7C6  D0 08       BNE .leave
  481                       
  482  06:C7C8            .changeModeState:
  483                     
  484  06:C7C8  A9 00       LDA #$00
  485  06:C7CA  8D C0 00    STA clueLineIndex ;using this as a scroller
  486  06:C7CD  EE 0F 00    INC mode_state
  487                     
  488  06:C7D0            .leave:
  489                      
  490  06:C7D0  60          RTS
  491  06:C7D1            UpdateMoveScreen:
  492                       
  493                       ;for 15x15, move 5 tiles left and 5 tiles up- let's do 1 at a time
  494                       ;we'll take the lower nibble of the clue line index as our scroll counter, and the higher nibble as the x/y flag
  495                       
  496  06:C7D1  A0 00       LDY #$00
  497  06:C7D3  B1 AD       LDA [puzzle_address], y
  498  06:C7D5  AA          TAX
  499  06:C7D6  BD 8D CC    LDA PuzzleScrollHori, x
  500  06:C7D9  8D 00 00    STA temp1
  501  06:C7DC  BD 90 CC    LDA PuzzleScrollVert, x
  502  06:C7DF  8D 01 00    STA temp2
  503                       
  504  06:C7E2  AD C0 00    LDA clueLineIndex
  505  06:C7E5  29 10       AND #$10
  506  06:C7E7  D0 1E       BNE .scrollY
  507                       
  508                       ;;scroll X over
  509  06:C7E9  AD C0 00    LDA clueLineIndex
  510  06:C7EC  29 0F       AND #$0F
  511  06:C7EE  0A          ASL A
  512  06:C7EF  0A          ASL A
  513  06:C7F0  0A          ASL A ;mult by 8
  514  06:C7F1  8D 1F 00    STA PPU_ScrollX
  515                       
  516  06:C7F4  EE C0 00    INC clueLineIndex
  517  06:C7F7  AD C0 00    LDA clueLineIndex
  518  06:C7FA  CD 00 00    CMP temp1
  519  06:C7FD  D0 4A       BNE .leave
  520  06:C7FF  A9 10       LDA #$10
  521  06:C801  8D C0 00    STA clueLineIndex
  522  06:C804  4C 49 C8    JMP .leave
  523                       
  524  06:C807            .scrollY:
  525                     
  526  06:C807  AD C0 00    LDA clueLineIndex
  527  06:C80A  29 0F       AND #$0F
  528  06:C80C  0A          ASL A
  529  06:C80D  0A          ASL A
  530  06:C80E  0A          ASL A ;mult by 8
  531  06:C80F  8D 20 00    STA PPU_ScrollY
  532                     
  533  06:C812  EE C0 00    INC clueLineIndex
  534  06:C815  AD C0 00    LDA clueLineIndex
  535  06:C818  29 0F       AND #$0F
  536  06:C81A  CD 01 00    CMP temp2
  537  06:C81D  D0 2A       BNE .leave
  538                       
  539  06:C81F            .changeModeState:
  540                     
  541  06:C81F  A9 8E       LDA #$8E
  542  06:C821  8D BD 00    STA clue_draw_address
  543  06:C824  A9 21       LDA #$21
  544  06:C826  8D BE 00    STA clue_draw_address+1
  545                       
  546  06:C829  AD AF 00    LDA clues_address
  547  06:C82C  18          CLC
  548  06:C82D  6D 09 70    ADC image_table_offset
  549  06:C830  8D AF 00    STA clues_address
  550  06:C833  AD B0 00    LDA clues_address+1
  551  06:C836  69 00       ADC #$00
  552  06:C838  8D B0 00    STA clues_address+1
  553                       
  554  06:C83B  A9 00       LDA #$00
  555  06:C83D  8D BF 00    STA clueTableIndex
  556  06:C840  8D C0 00    STA clueLineIndex
  557  06:C843  8D C1 00    STA clueOffsetShift
  558                     
  559  06:C846  EE 0F 00    INC mode_state
  560                     
  561  06:C849            .leave:
  562                      
  563  06:C849  60          RTS
  564  06:C84A            UpdateDrawImage:
  565                     
  566                       ;run it twice for a faster draw
  567  06:C84A  20 50 D4    JSR DrawImage
  568  06:C84D  AD BF 00    LDA clueTableIndex
  569  06:C850  CD 09 00    CMP tempy
  570                     
  571  06:C853  F0 01       BEQ .changeModeState
  572  06:C855  60          RTS
  573                       
  574  06:C856            .changeModeState:
  575                     
  576                       ;;do a palette draw
  577                       ;;puzzle address + 03 has the desired palette offset
  578                     
  579  06:C856  A0 03       LDY #$03
  580  06:C858  B1 AD       LDA [puzzle_address],y
  581  06:C85A  29 0F       AND #$0F
  582  06:C85C  AA          TAX
  583                       
  584  06:C85D  B1 AD       LDA [puzzle_address],y
  585  06:C85F  29 10       AND #$10
  586  06:C861  F0 15       BEQ .storeBottomVals
  587                       
  588  06:C863  8A          TXA
  589  06:C864  09 10       ORA #$10
  590  06:C866  8D 01 00    STA temp2
  591  06:C869  8A          TXA
  592  06:C86A  09 20       ORA #$20
  593  06:C86C  8D 02 00    STA temp3
  594  06:C86F  8A          TXA
  595  06:C870  09 30       ORA #$30
  596  06:C872  8D 03 00    STA temp4
  597                     
  598  06:C875  4C 8A C8    JMP .checkKeepWhite
  599                       
  600  06:C878            .storeBottomVals:
  601                     
  602  06:C878  8A          TXA
  603  06:C879  09 00       ORA #$00
  604  06:C87B  8D 01 00    STA temp2
  605  06:C87E  8A          TXA
  606  06:C87F  09 10       ORA #$10
  607  06:C881  8D 02 00    STA temp3
  608  06:C884  8A          TXA
  609  06:C885  09 20       ORA #$20
  610  06:C887  8D 03 00    STA temp4
  611                       
  612  06:C88A            .checkKeepWhite:
  613                       
  614  06:C88A  B1 AD       LDA [puzzle_address],y
  615  06:C88C  29 20       AND #$20
  616  06:C88E  F0 05       BEQ .loadPalToPPUStr
  617                       
  618  06:C890  A9 30       LDA #$30
  619  06:C892  8D 03 00    STA temp4
  620                       
  621                       
  622  06:C895            .loadPalToPPUStr:
  623                       
  624                       MACROAddPPUStringEntryRawData #$3F, #$01, #DRAW_HORIZONTAL, #03
                          
       06:C895  A9 01       LDA #$01
       06:C897  8D 23 00    STA PPU_PendingWrite
       06:C89A  A9 3F       LDA #$3F
       06:C89C  20 13 D1    JSR WriteToPPUString
       06:C89F  A9 01       LDA #$01
       06:C8A1  20 13 D1    JSR WriteToPPUString
       06:C8A4  A9 00       LDA #DRAW_HORIZONTAL
       06:C8A6  20 13 D1    JSR WriteToPPUString
       06:C8A9  A9 03       LDA #03 
       06:C8AB  20 13 D1    JSR WriteToPPUString
                            
  625  06:C8AE  AD 01 00    LDA temp2
  626  06:C8B1  20 13 D1    JSR WriteToPPUString
  627  06:C8B4  AD 02 00    LDA temp3
  628  06:C8B7  20 13 D1    JSR WriteToPPUString
  629  06:C8BA  AD 03 00    LDA temp4
  630  06:C8BD  20 13 D1    JSR WriteToPPUString
  631                       
  632  06:C8C0  A2 01       LDX #$01
  633  06:C8C2            .copyLoop:
  634                       ;;also store in the copy 
  635  06:C8C2  BD 00 00    LDA temp1, x
  636  06:C8C5  9D 00 6C    STA Palette_Copy, x
  637  06:C8C8  E8          INX
  638  06:C8C9  E0 04       CPX #$04
  639  06:C8CB  D0 F5       BNE .copyLoop
  640                       
  641  06:C8CD  A0 00       LDY #$00
  642  06:C8CF  B1 AD       LDA [puzzle_address], y
  643  06:C8D1  0A          ASL A
  644  06:C8D2  AA          TAX
  645  06:C8D3  BD 49 D6    LDA ImageTitleLowerHalfPos, x
  646  06:C8D6  8D B9 00    STA title_draw_address
  647  06:C8D9  E8          INX
  648  06:C8DA  BD 49 D6    LDA ImageTitleLowerHalfPos, x
  649  06:C8DD  8D BA 00    STA title_draw_address+1
  650                       
  651  06:C8E0  20 A4 D5    JSR DrawTitle
  652                       
  653  06:C8E3  EE 0F 00    INC mode_state
  654                     
  655  06:C8E6            .leave:
  656                      
  657  06:C8E6  60          RTS
  658                       
  659  06:C8E7            UpdateWaitInput:
  660                     
  661  06:C8E7  AD 1C 00    LDA gamepadPressed
  662  06:C8EA  F0 10       BEQ .leave
  663                       
  664  06:C8EC            .changeModeState:
  665  06:C8EC  A9 00       LDA #$00
  666  06:C8EE  8D 0A 00    STA time
  667  06:C8F1  8D 0B 00    STA scaledTime
  668  06:C8F4  A9 02       LDA #GAMEOVER_IDX
  669  06:C8F6  8D CF 00    STA targetGameMode
  670  06:C8F9  EE 0F 00    INC mode_state
  671                     
  672  06:C8FC            .leave:
  673                      
  674  06:C8FC  60          RTS
  675                       
  676  06:C8FD            UpdateGameFadeOut:
  677                     
  678  06:C8FD  AD 0A 00    LDA time
  679  06:C900  29 07       AND #$07
  680  06:C902  D0 1E       BNE .leave
  681                       ;;every 8 frames, decrement the palettes
  682  06:C904  20 90 D1    JSR FadeOutPalettes
  683  06:C907  B0 19       BCS .leave
  684                     
  685  06:C909            .changeModeState:
  686  06:C909  A9 00       LDA #$00
  687  06:C90B  8D 0A 00    STA time
  688  06:C90E  EE 0F 00    INC mode_state
  689                       
  690                       ;;don't need to turn all the sprites off, just need to
  691                       ;;clear them out   
  692  06:C911  A9 FF       LDA #$FF
  693  06:C913  A2 00       LDX #$00
  694  06:C915  20 7A C2    JSR SetSpriteImage
  695                       
  696  06:C918  A9 FF       LDA #$FF
  697  06:C91A  A2 01       LDX #$01
  698  06:C91C  20 7A C2    JSR SetSpriteImage
  699                       
  700  06:C91F  20 5B D1    JSR TurnOnSprites     ;turn sprite rendering back on
  701                       
  702  06:C922            .leave:
  703  06:C922  60          RTS  
  704                     
  705  06:C923            UpdateGameExit:
  706                     
  707                       ;JSR famistudio_music_stop
  708  06:C923  AD 0A 00    LDA time
  709  06:C926  29 0F       AND #$0F
  710  06:C928  D0 13       BNE .leave
  711                     
  712  06:C92A  A9 00       LDA #$00
  713  06:C92C  8D 1F 00    STA PPU_ScrollX
  714  06:C92F  8D 20 00    STA PPU_ScrollY
  715  06:C932  8D 21 00    STA PPU_ScrollNT
  716                       
  717  06:C935  AD CF 00    LDA targetGameMode
  718  06:C938  A2 00       LDX #$00
  719  06:C93A  20 C0 CE    JSR ChangeGameMode
  720  06:C93D            .leave:
  721  06:C93D  60          RTS
  722                       
  723  06:C93E            MoveMouse:
  724                     
  725  06:C93E  20 6B C4    JSR PlayPuzzleCursorSound
  726                     
  727  06:C941  AD 00 00    LDA temp1                             ;horizontal move 
  728  06:C944  0E 00 00    ASL temp1
  729  06:C947  0E 00 00    ASL temp1
  730  06:C94A  0E 00 00    ASL temp1
  731                       
  732  06:C94D  AD 01 00    LDA temp2                             ;vertical move
  733  06:C950  0E 01 00    ASL temp2 
  734  06:C953  0E 01 00    ASL temp2
  735  06:C956  0E 01 00    ASL temp2
  736                       
  737                       
  738  06:C959  A0 00       LDY #$00
  739  06:C95B  B1 AD       LDA [puzzle_address], y ;puzzle size 0 = 5, 1 = 10, 2 = 15  
  740  06:C95D  0A          ASL A
  741  06:C95E  AA          TAX
  742                     
  743  06:C95F  AD CA 00    LDA mouse_index+1             ;horizontal index
  744  06:C962  29 10       AND #$10                              ;check clue flag
  745  06:C964  8D 09 00    STA tempy                             ;store clue flag
  746  06:C967  AD C9 00    LDA mouse_index               ;horizontal index
  747  06:C96A  29 10       AND #$10                              ;check clue flag
  748  06:C96C  8D 08 00    STA tempx                             ;store clue flag
  749                       
  750  06:C96F  F0 0D       BEQ .puzzleHoriMin
  751  06:C971  A9 22       LDA #HORI_CLUE_MIN
  752  06:C973  8D 02 00    STA temp3 
  753  06:C976  A9 6A       LDA #HORI_CLUE_MAX
  754  06:C978  8D 03 00    STA temp4
  755  06:C97B  4C 8A C9    JMP .checkHoriBorder
  756                       
  757  06:C97E            .puzzleHoriMin:
  758  06:C97E  BD 81 CC    LDA MouseMinimums, x
  759  06:C981  8D 02 00    STA temp3 
  760  06:C984  BD 87 CC    LDA MouseMaximums, x
  761  06:C987  8D 03 00    STA temp4
  762                       
  763  06:C98A            .checkHoriBorder:
  764  06:C98A  8A          TXA
  765  06:C98B  48          PHA
  766                       
  767  06:C98C  A9 00       LDA #$00
  768  06:C98E  8D 06 00    STA temp7
  769                       
  770  06:C991  A2 03       LDX #SPRITE_XPOS
  771  06:C993  BD 00 02    LDA SPRITE_DATA, x
  772  06:C996  18          CLC
  773  06:C997  6D 00 00    ADC temp1
  774                       ;;check against borders
  775  06:C99A  CD 02 00    CMP temp3
  776  06:C99D  D0 18       BNE .checkHoriMax
  777                       ;;equal - check if mouse index is in clue area
  778  06:C99F  8D 05 00    STA temp6
  779  06:C9A2  AD 08 00    LDA tempx
  780  06:C9A5  0D 09 00    ORA tempy
  781  06:C9A8  D0 27       BNE .moveVert
  782  06:C9AA  EE 06 00    INC temp7
  783  06:C9AD  AD 05 00    LDA temp6
  784  06:C9B0  18          CLC
  785  06:C9B1  6D 00 00    ADC temp1
  786  06:C9B4  4C CE C9    JMP .moveSpriteHori
  787                       
  788  06:C9B7            .checkHoriMax:
  789  06:C9B7  CD 03 00    CMP temp4
  790  06:C9BA  D0 12       BNE .moveSpriteHori
  791                       
  792  06:C9BC  8D 05 00    STA temp6
  793  06:C9BF  AD 08 00    LDA tempx
  794  06:C9C2  F0 0D       BEQ .moveVert
  795  06:C9C4  EE 06 00    INC temp7
  796  06:C9C7  AD 05 00    LDA temp6
  797  06:C9CA  18          CLC
  798  06:C9CB  6D 00 00    ADC temp1
  799                       
  800  06:C9CE            .moveSpriteHori:
  801  06:C9CE  9D 00 02    STA SPRITE_DATA, x
  802                     
  803  06:C9D1            .moveVert:
  804                     
  805  06:C9D1  68          PLA
  806  06:C9D2  AA          TAX
  807  06:C9D3  E8          INX
  808                       
  809  06:C9D4  AD 09 00    LDA tempy
  810  06:C9D7  F0 0D       BEQ .puzzleVertMin
  811  06:C9D9  A9 12       LDA #VERT_CLUE_MIN
  812  06:C9DB  8D 02 00    STA temp3 
  813  06:C9DE  A9 5A       LDA #VERT_CLUE_MAX
  814  06:C9E0  8D 03 00    STA temp4
  815  06:C9E3  4C F2 C9    JMP .checkVertBorder
  816                       
  817  06:C9E6            .puzzleVertMin:
  818  06:C9E6  BD 81 CC    LDA MouseMinimums, x
  819  06:C9E9  8D 02 00    STA temp3
  820  06:C9EC  BD 87 CC    LDA MouseMaximums, x
  821  06:C9EF  8D 03 00    STA temp4
  822                     
  823                     
  824  06:C9F2            .checkVertBorder:
  825                     
  826  06:C9F2  A9 00       LDA #$00
  827  06:C9F4  8D 07 00    STA temp8
  828                     
  829  06:C9F7  A2 00       LDX #SPRITE_YPOS
  830  06:C9F9  BD 00 02    LDA SPRITE_DATA, x
  831  06:C9FC  18          CLC
  832  06:C9FD  6D 01 00    ADC temp2
  833                       ;;check against borders
  834  06:CA00  CD 02 00    CMP temp3
  835  06:CA03  D0 18       BNE .checkVertMax
  836                       ;;equal - check if mouse index is in clue area
  837  06:CA05  8D 05 00    STA temp6
  838  06:CA08  AD 09 00    LDA tempy
  839  06:CA0B  0D 08 00    ORA tempx
  840  06:CA0E  D0 27       BNE .leave
  841  06:CA10  EE 07 00    INC temp8
  842  06:CA13  AD 05 00    LDA temp6
  843  06:CA16  18          CLC
  844  06:CA17  6D 01 00    ADC temp2
  845  06:CA1A  4C 34 CA    JMP .moveSpriteVert
  846                       
  847  06:CA1D            .checkVertMax:
  848  06:CA1D  CD 03 00    CMP temp4
  849  06:CA20  D0 12       BNE .moveSpriteVert
  850  06:CA22  8D 05 00    STA temp6
  851  06:CA25  AD 09 00    LDA tempy
  852  06:CA28  F0 0D       BEQ .leave
  853  06:CA2A  EE 07 00    INC temp8
  854  06:CA2D  AD 05 00    LDA temp6
  855  06:CA30  18          CLC
  856  06:CA31  6D 01 00    ADC temp2
  857                       
  858  06:CA34            .moveSpriteVert:
  859  06:CA34  9D 00 02    STA SPRITE_DATA, x
  860                     
  861  06:CA37            .leave:
  862  06:CA37  60          RTS
  863                             
  864  06:CA38            UpdateMouseScreenPos:
  865                     
  866  06:CA38  AD 06 00    LDA temp7
  867  06:CA3B  F0 08       BEQ .skipHoriFlip
  868                       
  869  06:CA3D  AD 08 00    LDA tempx
  870  06:CA40  49 10       EOR #$10
  871  06:CA42  8D 08 00    STA tempx
  872                       
  873  06:CA45            .skipHoriFlip:
  874                     
  875  06:CA45  AD 07 00    LDA temp8
  876  06:CA48  F0 08       BEQ .skipVertFlip
  877                     
  878  06:CA4A  AD 09 00    LDA tempy
  879  06:CA4D  49 10       EOR #$10
  880  06:CA4F  8D 09 00    STA tempy
  881                     
  882  06:CA52            .skipVertFlip:
  883                     
  884                     
  885  06:CA52  A2 00       LDX #$00
  886  06:CA54  BD 00 02    LDA SPRITE_DATA, x;ypos       ;yyyy y...
  887  06:CA57  4A          LSR A                                         ;0yyy yy..
  888  06:CA58  4A          LSR A                                         ;00yy yyy.
  889  06:CA59  4A          LSR A                                         ;000y yyyy
  890  06:CA5A  8D 00 00    STA temp1
  891  06:CA5D  8D CA 00    STA mouse_index+1                     ;vertical
  892  06:CA60  E8          INX
  893  06:CA61  E8          INX
  894  06:CA62  E8          INX   
  895  06:CA63  BD 00 02    LDA SPRITE_DATA, x ;xpos  ;  xxxx x...
  896  06:CA66  29 F8       AND #$F8                       ;              ;  xxxx x000
  897  06:CA68  8D 01 00    STA temp2                      ;      ;  
  898  06:CA6B  4E 00 00    LSR temp1                      ;              ;  0000 yyyy y
  899  06:CA6E  6E 01 00    ROR temp2                      ;      ;  yxxx xx00
  900  06:CA71  4E 00 00    LSR temp1                      ;              ;  0000 0yyy y
  901  06:CA74  6E 01 00    ROR temp2                      ;              ;  yyxx xxx0
  902  06:CA77  4E 00 00    LSR temp1              ;              ;  0000 00yy y
  903  06:CA7A  6E 01 00    ROR temp2                      ;              ;  yyyx xxxx
  904  06:CA7D  AD 01 00    LDA temp2
  905  06:CA80  29 1F       AND #$1F
  906  06:CA82  8D C9 00    STA mouse_index                       ;horizontal
  907                       
  908  06:CA85  AD C9 00    LDA mouse_index
  909  06:CA88  38          SEC 
  910  06:CA89  E9 0E       SBC #$0E
  911  06:CA8B  0D 08 00    ORA tempx
  912  06:CA8E  8D C9 00    STA mouse_index
  913                       
  914  06:CA91  AD CA 00    LDA mouse_index+1
  915  06:CA94  38          SEC 
  916  06:CA95  E9 0C       SBC #$0C
  917  06:CA97  0D 09 00    ORA tempy
  918  06:CA9A  8D CA 00    STA mouse_index+1
  919                       
  920                       ;subtract starting offsets for mouse index
  921                       
  922  06:CA9D  AD 00 00    LDA temp1                      ;              ;  0000 00yy
  923  06:CAA0  09 60       ORA #$60                       ;              ;  0110 00yy
  924                       
  925  06:CAA2  8D C8 00    STA mouse_location+1
  926  06:CAA5  AD 01 00    LDA temp2
  927  06:CAA8  8D C7 00    STA mouse_location
  928                       
  929  06:CAAB            .leave:
  930  06:CAAB  60          RTS
  931                       
  932  06:CAAC            UpdateTimeDisplay:
  933                     
  934  06:CAAC  AD 0B 00    LDA scaledTime
  935  06:CAAF  C9 3C       CMP #60
  936  06:CAB1  D0 48       BNE .leave
  937                       
  938  06:CAB3  A9 00       LDA #$00
  939  06:CAB5  8D 0B 00    STA scaledTime
  940                       
  941  06:CAB8  EE 03 70    INC GameTime
  942  06:CABB  AD 03 70    LDA GameTime
  943  06:CABE  C9 0A       CMP #10
  944  06:CAC0  D0 32       BNE .printTime
  945                       
  946  06:CAC2  A9 00       LDA #$00
  947  06:CAC4  8D 03 70    STA GameTime
  948  06:CAC7  EE 04 70    INC GameTime+1
  949  06:CACA  AD 04 70    LDA GameTime+1
  950  06:CACD  C9 06       CMP #6
  951  06:CACF  D0 23       BNE .printTime
  952                       
  953  06:CAD1  A9 00       LDA #$00
  954  06:CAD3  8D 04 70    STA GameTime+1
  955  06:CAD6  EE 05 70    INC GameTime+2
  956  06:CAD9  AD 05 70    LDA GameTime+2
  957  06:CADC  C9 0A       CMP #10
  958  06:CADE  D0 14       BNE .printTime
  959                       
  960  06:CAE0  A9 00       LDA #$00
  961  06:CAE2  8D 05 70    STA GameTime+2
  962  06:CAE5  EE 06 70    INC GameTime+3
  963  06:CAE8  AD 06 70    LDA GameTime+3
  964  06:CAEB  C9 0A       CMP #10
  965  06:CAED  D0 05       BNE .printTime
  966                       
  967  06:CAEF  A9 00       LDA #$00
  968  06:CAF1  8D 06 70    STA GameTime+3
  969                         
  970                       
  971  06:CAF4            .printTime:
  972                     
  973  06:CAF4  A9 20       LDA #HIGH(TIMER_LOC)
  974  06:CAF6  A2 E5       LDX #LOW(TIMER_LOC)
  975                     
  976  06:CAF8  20 E3 D5    JSR ApplyGameTimeToPPUString
  977                       
  978                       
  979  06:CAFB            .leave: 
  980  06:CAFB  60          RTS  
  981                       
  982  06:CAFC            UpdatePause:
  983                     
  984                     ;;load screen
  985                     ;;update selection
  986                     ;; close - remove screen, then upause
  987                     ;; quit - jump to fade out
  988  06:CAFC  AD CC 00    LDA pauseState
  989  06:CAFF  20 91 CF    JSR Dynamic_Jump
  990                     
  991  06:CB02            UpdatePauseJumpTable:  
  992                     
  993  06:CB02  C3 CB       .word ExitPause                       ;fail safe
  994  06:CB04  0A CB       .word UpdateLoadPauseScreen
  995  06:CB06  26 CB       .word UpdatePauseScreen
  996  06:CB08  A7 CB       .word UpdateUnloadPauseScreen
  997                       
  998  06:CB0A            UpdateLoadPauseScreen:
  999                       
 1000  06:CB0A  20 B5 D3    JSR LoadPauseScreen
 1001  06:CB0D  AD C1 00    LDA clueOffsetShift
 1002  06:CB10  C9 06       CMP #$06
 1003  06:CB12  D0 11       BNE .leave
 1004                       
 1005  06:CB14            .changePauseState:
 1006                     
 1007  06:CB14  A9 60       LDA #PAUSE_YES
 1008  06:CB16  A2 01       LDX #$01
 1009  06:CB18  20 6F C2    JSR SetSpriteXPosition  
 1010  06:CB1B  A9 01       LDA #$01
 1011  06:CB1D  A2 01       LDX #$01
 1012  06:CB1F  20 7A C2    JSR SetSpriteImage
 1013                       
 1014  06:CB22  EE CC 00    INC pauseState
 1015  06:CB25            .leave:
 1016  06:CB25  60          RTS
 1017                       
 1018  06:CB26            UpdatePauseScreen:
 1019                       
 1020  06:CB26  AD 1C 00    LDA gamepadPressed
 1021  06:CB29  C9 08       CMP #GAMEPAD_START
 1022  06:CB2B  F0 2C       BEQ .unPause
 1023  06:CB2D  C9 02       CMP #GAMEPAD_B
 1024  06:CB2F  F0 28       BEQ .unPause
 1025  06:CB31  C9 01       CMP #GAMEPAD_A
 1026  06:CB33  F0 4D       BEQ .checkA
 1027                       
 1028                       ;;update pointer
 1029                       
 1030  06:CB35  AD 1C 00    LDA gamepadPressed
 1031  06:CB38  29 C0       AND #GAMEPAD_HORI
 1032                       ;;binary system- left and right don't really matter, we'll just toggle the position
 1033  06:CB3A  F0 6A       BEQ .leave
 1034                       
 1035  06:CB3C  20 62 C4    JSR PlayMenuCursorSound
 1036                       
 1037  06:CB3F  A9 03       LDA #SPRITE_XPOS
 1038  06:CB41  A2 01       LDX #$01
 1039  06:CB43  20 91 C2    JSR GetSpriteData
 1040                       
 1041  06:CB46  C9 60       CMP #PAUSE_YES
 1042  06:CB48  F0 05       BEQ .loadNo
 1043                       
 1044  06:CB4A  A9 60       LDA #PAUSE_YES
 1045  06:CB4C  4C 51 CB    JMP .setPosition
 1046                       
 1047  06:CB4F            .loadNo:
 1048  06:CB4F  A9 88       LDA #PAUSE_NO
 1049                     
 1050  06:CB51            .setPosition:
 1051                       
 1052  06:CB51  A2 01       LDX #$01
 1053  06:CB53  20 6F C2    JSR SetSpriteXPosition  
 1054                     
 1055  06:CB56  4C A6 CB    JMP .leave 
 1056                     
 1057  06:CB59            .unPause:
 1058                     
 1059  06:CB59  A9 00       LDA #$00
 1060  06:CB5B  8D C0 00    STA clueLineIndex
 1061  06:CB5E  8D C1 00    STA clueOffsetShift
 1062                       
 1063  06:CB61  A9 FF       LDA #$FF
 1064  06:CB63  A2 01       LDX #$01
 1065  06:CB65  20 7A C2    JSR SetSpriteImage
 1066                     
 1067                       MACROGetLabelPointer $610A, pause_address
                          
       06:CB68  A9 61             LDA #HIGH($610A)
       06:CB6A  A2 0A             LDX #LOW($610A)
                                  
       06:CB6C  8E B3 00          STX pause_address
       06:CB6F  8D B4 00          STA pause_address+1
                                  
 1068                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:CB72  A9 21             LDA #HIGH($210A)
       06:CB74  A2 0A             LDX #LOW($210A)
                                  
       06:CB76  8E B7 00          STX pause_draw_address
       06:CB79  8D B8 00          STA pause_draw_address+1
                                  
 1069                         
 1070  06:CB7C  EE CC 00    INC pauseState
 1071  06:CB7F  4C A6 CB    JMP .leave
 1072                      
 1073  06:CB82            .checkA:
 1074                       
 1075  06:CB82  A9 03       LDA #SPRITE_XPOS
 1076  06:CB84  A2 01       LDX #$01
 1077  06:CB86  20 91 C2    JSR GetSpriteData
 1078                       
 1079  06:CB89  C9 88       CMP #PAUSE_NO
 1080  06:CB8B  F0 CC       BEQ .unPause
 1081                        
 1082  06:CB8D            .quit:
 1083                             
 1084  06:CB8D  A9 01       LDA #$01
 1085  06:CB8F  8D 00 70    STA hasContinue
 1086  06:CB92  A9 00       LDA #$00
 1087  06:CB94  8D CC 00    STA pauseState
 1088  06:CB97  A9 00       LDA #$00
 1089  06:CB99  8D 0A 00    STA time
 1090  06:CB9C  A9 02       LDA #GAMEOVER_IDX
 1091  06:CB9E  8D CF 00    STA targetGameMode
 1092  06:CBA1  A9 08       LDA #$08
 1093  06:CBA3  8D 0F 00    STA mode_state
 1094                       
 1095  06:CBA6            .leave:
 1096  06:CBA6  60          RTS
 1097                       
 1098  06:CBA7            UpdateUnloadPauseScreen:
 1099                       
 1100  06:CBA7  20 FC D3    JSR ClearPauseScreen
 1101  06:CBAA  AD C1 00    LDA clueOffsetShift
 1102  06:CBAD  C9 06       CMP #$06
 1103  06:CBAF  D0 11       BNE .leave
 1104  06:CBB1            .changePauseState:
 1105                     
 1106  06:CBB1  A9 02       LDA #$02
 1107  06:CBB3  A2 00       LDX #$00
 1108  06:CBB5  20 7A C2    JSR SetSpriteImage
 1109                       
 1110  06:CBB8  A9 03       LDA #GAMEPAD_AB
 1111  06:CBBA  8D CD 00    STA pauseInputLock 
 1112                       
 1113  06:CBBD  A9 00       LDA #$00
 1114  06:CBBF  8D CC 00    STA pauseState
 1115  06:CBC2            .leave:
 1116  06:CBC2  60          RTS
 1117                       
 1118  06:CBC3            ExitPause:
 1119  06:CBC3  60          RTS
 1120                       
 1121  06:CBC4            CheckNewBestTime:
 1122                     
 1123                       ;let's say we already have the save data in the table address
 1124  06:CBC4  A9 00       LDA #$00
 1125  06:CBC6  8D D1 00    STA recordSet
 1126                       
 1127                       
 1128  06:CBC9  AD 08 70    LDA puzzle_index
 1129  06:CBCC  0A          ASL A
 1130  06:CBCD  0A          ASL A
 1131  06:CBCE  A8          TAY
 1132  06:CBCF  B1 16       LDA [table_address], y
 1133  06:CBD1  29 80       AND #$80
 1134  06:CBD3  F0 2D       BEQ .updateTime
 1135                       ;MACROGetLabelPointer PuzzleSaveLocations, table_address
 1136                       ;LDA bank_index
 1137                       ;ASL A
 1138                       ;TAY
 1139                       ;JSR GetTableAtIndex
 1140                     
 1141  06:CBD5  C8          INY 
 1142  06:CBD6  C8          INY
 1143  06:CBD7  C8          INY   ;start at highest time loc
 1144  06:CBD8  AD 06 70    LDA GameTime+3
 1145  06:CBDB  D1 16       CMP [table_address], y
 1146  06:CBDD  90 23       BCC .updateTime
 1147  06:CBDF  88          DEY
 1148  06:CBE0  AD 05 70    LDA GameTime+2
 1149  06:CBE3  D1 16       CMP [table_address], y
 1150  06:CBE5  90 1B       BCC .updateTime
 1151  06:CBE7  88          DEY
 1152  06:CBE8  AD 04 70    LDA GameTime+1
 1153  06:CBEB  D1 16       CMP [table_address], y
 1154  06:CBED  90 13       BCC .updateTime
 1155  06:CBEF  88          DEY
 1156  06:CBF0  B1 16       LDA [table_address], y
 1157  06:CBF2  29 0F       AND #$0F
 1158  06:CBF4  8D 00 00    STA temp1
 1159  06:CBF7  AD 03 70    LDA GameTime
 1160  06:CBFA  CD 00 00    CMP temp1
 1161  06:CBFD  90 03       BCC .updateTime
 1162  06:CBFF  4C 05 CC    JMP .leave
 1163                       
 1164  06:CC02            .updateTime:
 1165                     
 1166  06:CC02  EE D1 00    INC recordSet
 1167                       
 1168  06:CC05            .leave:
 1169  06:CC05  60          RTS
 1170                         
 1171                     
 1172  06:CC06            CheckAgainstSolution:
 1173                       ;;take Y position, mult by 2 to get starting index in puzzle solution
 1174  06:CC06  AD CA 00    LDA mouse_index+1
 1175                     ;;if the puzzle is a 5x5, we only have one byte per row, so no need to double this
 1176  06:CC09  8D 00 00    STA temp1
 1177  06:CC0C  A0 00       LDY #$00
 1178  06:CC0E  B1 AD       LDA [puzzle_address], y
 1179  06:CC10  F0 03       BEQ .skipDouble
 1180  06:CC12  0E 00 00    ASL temp1
 1181  06:CC15            .skipDouble:
 1182  06:CC15  AD 00 00    LDA temp1
 1183  06:CC18  18          CLC
 1184  06:CC19  69 04       ADC #$04 ;; add to get past header
 1185  06:CC1B  8D 00 00    STA temp1
 1186                       
 1187                       ;;div X position by 8 to get the byte index
 1188  06:CC1E  AD C9 00    LDA mouse_index
 1189  06:CC21  4A          LSR A
 1190  06:CC22  4A          LSR A
 1191  06:CC23  4A          LSR A
 1192  06:CC24  F0 03       BEQ .getMask
 1193                       
 1194  06:CC26  EE 00 00    INC temp1
 1195                       
 1196  06:CC29            .getMask:
 1197                       
 1198  06:CC29  AD C9 00    LDA mouse_index
 1199  06:CC2C  29 07       AND #$07
 1200  06:CC2E  AA          TAX
 1201  06:CC2F  A9 80       LDA #$80
 1202  06:CC31  E0 00       CPX #$00
 1203  06:CC33  F0 04       BEQ .storeMask
 1204                     
 1205  06:CC35            .maskLoop:
 1206  06:CC35  4A          LSR A
 1207  06:CC36  CA          DEX
 1208  06:CC37  D0 FC       BNE .maskLoop
 1209  06:CC39            .storeMask:
 1210  06:CC39  8D 01 00    STA temp2
 1211                     
 1212  06:CC3C  AC 00 00    LDY temp1
 1213  06:CC3F  B1 AD       LDA [puzzle_address], y
 1214  06:CC41  2D 01 00    AND temp2
 1215  06:CC44  8D 00 00    STA temp1     ;get the 0/non zero solution flag 
 1216                     
 1217  06:CC47  A0 00       LDY #$00
 1218  06:CC49  B1 C7       LDA [mouse_location], y
 1219  06:CC4B  8D 02 00    STA temp3
 1220  06:CC4E  29 F0       AND #$F0
 1221  06:CC50  CD CB 00    CMP currentPaintTile
 1222  06:CC53  D0 01       BNE .diffTiles
 1223  06:CC55  60          RTS
 1224                       
 1225  06:CC56            .diffTiles:
 1226                       ;;tiles are different- check if the current tile is marked as a solution tile
 1227  06:CC56  C9 70       CMP #$70
 1228  06:CC58  D0 0B       BNE .checkNewMark
 1229                       ;;if erasing a mark, check if the tile was part of the solution
 1230  06:CC5A  AD 00 00    LDA temp1
 1231  06:CC5D  D0 18       BNE .antiMark
 1232  06:CC5F  CE 02 70    DEC nonSolutionCount
 1233  06:CC62  4C 80 CC    JMP .leave
 1234                       
 1235  06:CC65            .checkNewMark:
 1236                     
 1237  06:CC65  AD CB 00    LDA currentPaintTile
 1238  06:CC68  C9 70       CMP #$70
 1239  06:CC6A  D0 14       BNE .leave
 1240                       
 1241  06:CC6C  AD 00 00    LDA temp1
 1242  06:CC6F  D0 0C       BNE .proMark
 1243  06:CC71  EE 02 70    INC nonSolutionCount 
 1244  06:CC74  4C 80 CC    JMP .leave 
 1245                       
 1246  06:CC77            .antiMark:
 1247  06:CC77  CE 01 70    DEC solutionCount
 1248  06:CC7A  4C 80 CC    JMP .leave
 1249  06:CC7D            .proMark:   
 1250                       
 1251  06:CC7D  EE 01 70    INC solutionCount
 1252  06:CC80            .leave:
 1253  06:CC80  60          RTS   
 1254                     
 1255                     ;hori, vert
 1256  06:CC81            MouseMinimums:
 1257  06:CC81  6A 5A       .db $6A, $5A
 1258  06:CC83  6A 5A       .db $6A, $5A
 1259  06:CC85  6A 5A       .db $6A, $5A
 1260  06:CC87            MouseMaximums:
 1261  06:CC87  9A 8A       .db $9A, $8A
 1262  06:CC89  C2 B2       .db $C2, $B2
 1263  06:CC8B  EA DA       .db $EA, $DA
 1264                       
 1265           0012      VERT_CLUE_MIN = $12
 1266           0022      HORI_CLUE_MIN = $22
 1267           006A      HORI_CLUE_MAX = $6A
 1268           005A      VERT_CLUE_MAX = $5A
 1269                       
 1270  06:CC8D            PuzzleScrollHori:
 1271  06:CC8D  01 04 06    .db $01, $04, $06
 1272  06:CC90            PuzzleScrollVert:
 1273  06:CC90  01 03 05    .db $01, $03, $05
 1274                       
 1275  06:CC93            PuzzleHeaderSkips:
 1276                     
 1277  06:CC93  09 18 22    .db $09, $18, $22
 1278                       
 1279  06:CC96            PuzzleSaveLocations:
 1280  06:CC96  0A 70       .word puzzle_clear_bank0, puzzle_clear_bank1, puzzle_clear_bank2
       06:CC98  76 70     
       06:CC9A  E2 70     
 1281                     
 1282                       
 1283           0060      PAUSE_YES = $60
 1284           0088      PAUSE_NO = $88
 1285                     
 1286                       
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGameOver.asm
   87                       .include "Routines/Game_States/UpdateGameOver.asm"
    1  06:CC9C            UpdateGameOver:
    2                     
    3  06:CC9C  AD 10 00    LDA NMI_locks
    4  06:CC9F  F0 01       BEQ .unlocked
    5                       
    6  06:CCA1  60          RTS
    7                       
    8  06:CCA2            .unlocked:
    9                     
   10  06:CCA2  20 A6 CC    JSR DoUpdateGameOver 
   11  06:CCA5  60          RTS
   12                       
   13  06:CCA6            DoUpdateGameOver:
   14                     
   15  06:CCA6  AD 0F 00    LDA mode_state
   16  06:CCA9  20 91 CF    JSR Dynamic_Jump
   17                         
   18  06:CCAC            UpdateGameOverJumpTable:
   19                     
   20  06:CCAC  B6 CC       .word UpdateGameOverInit
   21  06:CCAE  05 CD       .word UpdateDrawMessage
   22  06:CCB0  2A CD       .word UpdateGameOverWaitInput
   23  06:CCB2  DA CD       .word UpdateGameOverFadeOut
   24  06:CCB4  EF CD       .word UpdateGameOverExit
   25                       
   26  06:CCB6            UpdateGameOverInit:
   27                     
   28                       ;load the hasContinue flag
   29                       ;choose the message to print based on the flag
   30  06:CCB6  A9 00       lda #$00
   31  06:CCB8  8D D6 00    sta current_song
   32  06:CCBB  AD D6 00    lda current_song
   33  06:CCBE  20 14 D7    jsr sound_load
   34                       
   35                       MACROGetLabelPointer EndScreens, table_address
                          
       06:CCC1  A9 FC             LDA #HIGH(EndScreens)
       06:CCC3  A2 CA             LDX #LOW(EndScreens)
                                  
       06:CCC5  8E 16 00          STX table_address
       06:CCC8  8D 17 00          STA table_address+1
                                  
   36  06:CCCB  AD 00 70    LDA hasContinue
   37  06:CCCE  0A          ASL A
   38  06:CCCF  A8          TAY
   39  06:CCD0  20 B7 CF    JSR GetTableAtIndex
   40                       MACROGetPointer table_address, clues_address
                          
       06:CCD3  AD 16 00          LDA table_address
       06:CCD6  8D AF 00          STA clues_address
       06:CCD9  AD 17 00          LDA table_address+1
       06:CCDC  8D B0 00          STA clues_address+1
                          
   41                       
   42                       ;this gets us the pointer to the table- now we'll set up the starting draw address
   43  06:CCDF  A0 00       LDY #$00
   44  06:CCE1  B1 AF       LDA [clues_address], y
   45  06:CCE3  8D BD 00    STA clue_draw_address
   46  06:CCE6  C8          INY
   47  06:CCE7  B1 AF       LDA [clues_address], y
   48  06:CCE9  8D BE 00    STA clue_draw_address+1 
   49                     
   50  06:CCEC  AD AF 00    LDA clues_address
   51  06:CCEF  18          CLC
   52  06:CCF0  69 02       ADC #$02
   53  06:CCF2  8D AF 00    STA clues_address
   54  06:CCF5  AD B0 00    LDA clues_address+1
   55  06:CCF8  69 00       ADC #$00
   56  06:CCFA  8D B0 00    STA clues_address+1
   57                       
   58  06:CCFD  A9 00       LDA #$00
   59  06:CCFF  8D C0 00    STA clueLineIndex
   60                       ;;table address is now at the first string to draw
   61                         
   62  06:CD02  EE 0F 00    INC mode_state
   63                     
   64                     ;no RTS, just update a line immediately
   65                     
   66  06:CD05            UpdateDrawMessage:
   67                     
   68  06:CD05  AD 00 70    LDA hasContinue
   69                       
   70  06:CD08  F0 06       BEQ .drawClear
   71                       
   72  06:CD0A  20 69 CE    JSR DrawSaveText
   73                     
   74  06:CD0D  4C 13 CD    JMP .checkLeave
   75                       
   76  06:CD10            .drawClear
   77                     
   78  06:CD10  20 00 CE    JSR DrawClearText 
   79                       
   80  06:CD13            .checkLeave:
   81  06:CD13  90 14       BCC .leave
   82                     
   83  06:CD15            .changeModeState:
   84                     
   85  06:CD15  AD 00 70    LDA hasContinue
   86  06:CD18  D0 07       BNE .skipSpriteSet
   87                       
   88  06:CD1A  A9 01       LDA #$01
   89  06:CD1C  A2 00       LDX #$00
   90  06:CD1E  20 7A C2    JSR SetSpriteImage
   91                       
   92  06:CD21            .skipSpriteSet:
   93  06:CD21  EE 0F 00    INC mode_state
   94  06:CD24  A9 00       LDA #$00
   95  06:CD26  8D 0A 00    STA time
   96  06:CD29            .leave:
   97  06:CD29  60          RTS
   98                       
   99                       
  100  06:CD2A            UpdateGameOverWaitInput:
  101                     
  102                       ;;if there was a record set, flash the time
  103  06:CD2A  AD D1 00    LDA recordSet
  104  06:CD2D  F0 03       BEQ .updateWait
  105  06:CD2F  20 8F CE    JSR FlashTime
  106                     
  107  06:CD32            .updateWait:
  108  06:CD32  AD 00 70    LDA hasContinue
  109  06:CD35  F0 06       BEQ .checkOption
  110                       
  111  06:CD37  AD 1C 00    LDA gamepadPressed
  112  06:CD3A  D0 37       BNE .loadTitle
  113  06:CD3C            .leaveEarly:
  114  06:CD3C  60          RTS
  115                       
  116  06:CD3D            .checkOption:
  117  06:CD3D  AD 1C 00    LDA gamepadPressed
  118  06:CD40  C9 01       CMP #GAMEPAD_A
  119  06:CD42  F0 24       BEQ .checkA
  120                       
  121                       ;;update pointer
  122                       
  123  06:CD44  AD 1C 00    LDA gamepadPressed
  124  06:CD47  29 C0       AND #GAMEPAD_HORI
  125                       ;;binary system- left and right don't really matter, we'll just toggle the position
  126  06:CD49  F0 F1       BEQ .leaveEarly
  127  06:CD4B  20 62 C4    JSR PlayMenuCursorSound
  128  06:CD4E  A9 03       LDA #SPRITE_XPOS
  129  06:CD50  A2 00       LDX #$00
  130  06:CD52  20 91 C2    JSR GetSpriteData
  131                       
  132  06:CD55  C9 58       CMP #GO_YES
  133  06:CD57  F0 05       BEQ .loadNo
  134                       
  135  06:CD59  A9 58       LDA #GO_YES
  136  06:CD5B  4C 60 CD    JMP .setPosition
  137                       
  138  06:CD5E            .loadNo:
  139  06:CD5E  A9 80       LDA #GO_NO
  140                     
  141  06:CD60            .setPosition:
  142                       
  143  06:CD60  A2 00       LDX #$00
  144  06:CD62  20 6F C2    JSR SetSpriteXPosition  
  145                     
  146  06:CD65  4C D9 CD    JMP .leave 
  147                       
  148  06:CD68            .checkA:
  149                       
  150  06:CD68  A9 03       LDA #SPRITE_XPOS
  151  06:CD6A  A2 00       LDX #$00
  152  06:CD6C  20 91 C2    JSR GetSpriteData
  153                       
  154  06:CD6F  C9 80       CMP #GO_NO
  155                       
  156                       ;no? go to main menu
  157                       ;yes? update puzzle index and go to game
  158                       ;if puzzle index is the last of the bank, return to menu anyways- we'll polish with a different message later
  159  06:CD71  D0 0D       BNE .loadNext
  160                       
  161                       ;load the title as the next screen
  162  06:CD73            .loadTitle:
  163  06:CD73  A9 00       LDA #TITLE_IDX
  164  06:CD75  8D CF 00    STA targetGameMode
  165  06:CD78  A9 00       LDA #$00
  166  06:CD7A  8D D0 00    STA targetScreenLoad
  167  06:CD7D  4C D1 CD    JMP .changeModeState
  168                      
  169  06:CD80            .loadNext:  
  170                     
  171  06:CD80  EE 08 70    INC puzzle_index
  172  06:CD83  C9 28       CMP #$28
  173  06:CD85  F0 EC       BEQ .loadTitle
  174                       
  175                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:CD87  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:CD89  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:CD8B  8E 16 00          STX table_address
       06:CD8E  8D 17 00          STA table_address+1
                                  
  176                       MACROGetDoubleIndex puzzle_index
                          
       06:CD91  AD 08 70          LDA puzzle_index
       06:CD94  0A                ASL A
       06:CD95  A8                TAY
                                  
  177  06:CD96  20 B7 CF    JSR GetTableAtIndex
  178                       MACROGetPointer table_address, puzzle_address
                          
       06:CD99  AD 16 00          LDA table_address
       06:CD9C  8D AD 00          STA puzzle_address
       06:CD9F  AD 17 00          LDA table_address+1
       06:CDA2  8D AE 00          STA puzzle_address+1
                          
  179                       
  180                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:CDA5  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:CDA7  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:CDA9  8E 16 00          STX table_address
       06:CDAC  8D 17 00          STA table_address+1
                                  
  181                       MACROGetDoubleIndex puzzle_index
                          
       06:CDAF  AD 08 70          LDA puzzle_index
       06:CDB2  0A                ASL A
       06:CDB3  A8                TAY
                                  
  182  06:CDB4  20 B7 CF    JSR GetTableAtIndex
  183                       MACROGetPointer table_address, title_address
                          
       06:CDB7  AD 16 00          LDA table_address
       06:CDBA  8D B1 00          STA title_address
       06:CDBD  AD 17 00          LDA table_address+1
       06:CDC0  8D B2 00          STA title_address+1
                          
  184                     
  185  06:CDC3  A9 01       LDA #GAME_IDX
  186  06:CDC5  8D CF 00    STA targetGameMode
  187                       
  188  06:CDC8  A0 00       LDY #$00
  189  06:CDCA  B1 AD       LDA [puzzle_address], y
  190  06:CDCC  09 20       ORA #%00100000
  191  06:CDCE  8D D0 00    STA targetScreenLoad
  192                     
  193  06:CDD1            .changeModeState:
  194                     
  195  06:CDD1  A9 00       LDA #$00
  196  06:CDD3  8D 0A 00    STA time
  197  06:CDD6  EE 0F 00    INC mode_state
  198  06:CDD9            .leave:
  199  06:CDD9  60          RTS
  200                     
  201  06:CDDA            UpdateGameOverFadeOut:
  202                     
  203  06:CDDA  AD 0A 00    LDA time
  204  06:CDDD  29 07       AND #$07
  205  06:CDDF  D0 0D       BNE .leave
  206                       ;;every 8 frames, decrement the palettes
  207  06:CDE1  20 90 D1    JSR FadeOutPalettes
  208  06:CDE4  B0 08       BCS .leave
  209                     
  210  06:CDE6            .changeModeState:
  211  06:CDE6  A9 00       LDA #$00
  212  06:CDE8  8D 0A 00    STA time
  213  06:CDEB  EE 0F 00    INC mode_state
  214  06:CDEE            .leave:
  215  06:CDEE  60          RTS
  216                     
  217  06:CDEF            UpdateGameOverExit:
  218                     
  219  06:CDEF  AD 0A 00    LDA time
  220  06:CDF2  29 0F       AND #$0F
  221  06:CDF4  D0 09       BNE .leave
  222                     
  223  06:CDF6  AD CF 00    LDA targetGameMode
  224  06:CDF9  AE D0 00    LDX targetScreenLoad
  225  06:CDFC  20 C0 CE    JSR ChangeGameMode
  226                       
  227  06:CDFF            .leave:
  228  06:CDFF  60          RTS
  229                       
  230  06:CE00            DrawClearText:
  231                     
  232                       ;;for the clear, we draw multiple lines
  233                       ;;table address location is the print loation
  234                       MACROAddPPUStringEntryTablePtr clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, clues_address
                           
       06:CE00  A9 01       LDA #$01
       06:CE02  8D 23 00    STA PPU_PendingWrite
       06:CE05  AD BE 00    LDA clue_draw_address+1
       06:CE08  20 13 D1    JSR WriteToPPUString
       06:CE0B  AD BD 00    LDA clue_draw_address
       06:CE0E  20 13 D1    JSR WriteToPPUString
       06:CE11  A9 20       LDA #$20
       06:CE13  09 00       ORA #DRAW_HORIZONTAL
       06:CE15  20 13 D1    JSR WriteToPPUString
       06:CE18  AD AF 00    LDA clues_address
       06:CE1B  20 13 D1    JSR WriteToPPUString
       06:CE1E  AD B0 00    LDA clues_address+1
       06:CE21  20 13 D1    JSR WriteToPPUString
                           
  235  06:CE24  EE C0 00    INC clueLineIndex
  236  06:CE27  AD C0 00    LDA clueLineIndex
  237  06:CE2A  C9 02       CMP #$02
  238  06:CE2C  F0 07       BEQ .printTime
  239  06:CE2E  C9 04       CMP #$04
  240  06:CE30  F0 35       BEQ .finish
  241  06:CE32  4C 3C CE    JMP .updateClueAddress
  242                       
  243  06:CE35            .printTime:
  244                     
  245  06:CE35  A9 21       LDA #$21
  246  06:CE37  A2 31       LDX #$31  
  247  06:CE39  20 E3 D5    JSR ApplyGameTimeToPPUString
  248                     
  249  06:CE3C            .updateClueAddress:
  250  06:CE3C  AD BD 00    LDA clue_draw_address
  251  06:CE3F  18          CLC
  252  06:CE40  69 40       ADC #$40
  253  06:CE42  8D BD 00    STA clue_draw_address
  254  06:CE45  AD BE 00    LDA clue_draw_address+1
  255  06:CE48  69 00       ADC #$00
  256  06:CE4A  8D BE 00    STA clue_draw_address+1
  257                       
  258  06:CE4D  A0 00       LDY #$00
  259  06:CE4F  B1 AF       LDA [clues_address],y
  260  06:CE51  AA          TAX
  261  06:CE52  E8          INX
  262  06:CE53  8A          TXA
  263  06:CE54  18          CLC
  264  06:CE55  6D AF 00    ADC clues_address
  265  06:CE58  8D AF 00    STA clues_address
  266  06:CE5B  AD B0 00    LDA clues_address+1
  267  06:CE5E  69 00       ADC #$00
  268  06:CE60  8D B0 00    STA clues_address+1
  269                       
  270  06:CE63  18          CLC
  271  06:CE64  4C 68 CE    JMP .leave
  272  06:CE67            .finish:
  273                     
  274  06:CE67  38          SEC
  275  06:CE68            .leave
  276  06:CE68  60          RTS
  277                       
  278  06:CE69            DrawSaveText:
  279                     
  280                       MACROAddPPUStringEntryTablePtr clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, clues_address
                           
       06:CE69  A9 01       LDA #$01
       06:CE6B  8D 23 00    STA PPU_PendingWrite
       06:CE6E  AD BE 00    LDA clue_draw_address+1
       06:CE71  20 13 D1    JSR WriteToPPUString
       06:CE74  AD BD 00    LDA clue_draw_address
       06:CE77  20 13 D1    JSR WriteToPPUString
       06:CE7A  A9 20       LDA #$20
       06:CE7C  09 00       ORA #DRAW_HORIZONTAL
       06:CE7E  20 13 D1    JSR WriteToPPUString
       06:CE81  AD AF 00    LDA clues_address
       06:CE84  20 13 D1    JSR WriteToPPUString
       06:CE87  AD B0 00    LDA clues_address+1
       06:CE8A  20 13 D1    JSR WriteToPPUString
                           
  281  06:CE8D  38          SEC
  282  06:CE8E  60          RTS
  283                      
  284  06:CE8F            FlashTime:
  285                     
  286  06:CE8F  AD 0A 00    LDA time
  287  06:CE92  29 03       AND #$03
  288  06:CE94  D0 27       BNE .leave
  289                       
  290                       MACROAddPPUStringEntryRawData #$3F, #$02, #DRAW_HORIZONTAL, #$01
                          
       06:CE96  A9 01       LDA #$01
       06:CE98  8D 23 00    STA PPU_PendingWrite
       06:CE9B  A9 3F       LDA #$3F
       06:CE9D  20 13 D1    JSR WriteToPPUString
       06:CEA0  A9 02       LDA #$02
       06:CEA2  20 13 D1    JSR WriteToPPUString
       06:CEA5  A9 00       LDA #DRAW_HORIZONTAL
       06:CEA7  20 13 D1    JSR WriteToPPUString
       06:CEAA  A9 01       LDA #$01 
       06:CEAC  20 13 D1    JSR WriteToPPUString
                            
  291  06:CEAF  AD 0A 00    LDA time
  292  06:CEB2  4A          LSR A
  293  06:CEB3  4A          LSR A
  294  06:CEB4  29 01       AND #$01
  295  06:CEB6  AA          TAX
  296  06:CEB7  BD BE CE    LDA FlashColors, x
  297  06:CEBA  20 13 D1    JSR WriteToPPUString
  298                      
  299  06:CEBD            .leave
  300  06:CEBD  60          RTS 
  301                     
  302  06:CEBE            FlashColors:
  303                     
  304  06:CEBE  2C 16       .db $2C, $16
  305                     
  306                        
  307                     
  308           0058      GO_YES = $58
  309           0080      GO_NO = $80
#[1]   Picross.asm
   88                       
   89                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   90                     ;;     Routines             ;;
   91                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   92                     
   93                     
#[2]   Routines/Common/GameModeRoutines.asm
   94                       .include "Routines/Common/GameModeRoutines.asm"
    1  06:CEC0            ChangeGameMode:
    2                       ;A - game mode index
    3                       ;X - high nibble: palette start flag, low nibble: screen index
    4  06:CEC0  8D 0E 00    STA game_mode
    5  06:CEC3  8E 0D 00    STX mode_loadFlags
    6  06:CEC6  A9 00       LDA #$00
    7  06:CEC8  8D 0F 00    STA mode_state
    8  06:CECB  20 27 D1    JSR ClearPPUString
    9  06:CECE  20 D2 CE    JSR LoadGameModeScreen
   10  06:CED1  60          RTS
   11                       
   12  06:CED2            LoadGameModeScreen:
   13                     
   14                       MACROSetFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:CED2  AD 10 00    LDA NMI_locks
       06:CED5  09 01       ORA #BGLOAD_NMI_LOCK
       06:CED7  8D 10 00    STA NMI_locks
                                  
   15                       
   16  06:CEDA  A9 00       LDA #$00
   17  06:CEDC  8D 01 20    STA PPU_MASK    ; disable rendering- reenable on NMI when not updating
   18                     
   19  06:CEDF  20 0D CF    JSR LoadGameModeBackground
   20  06:CEE2  20 6E CF    JSR LoadGameModeSprites
   21                     
   22                       MACROClearFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:CEE5  A9 01       LDA #BGLOAD_NMI_LOCK
       06:CEE7  49 FF       EOR #$FF
       06:CEE9  2D 10 00    AND NMI_locks  
       06:CEEC  8D 10 00    STA NMI_locks
                          
   23                     
   24                       
   25                       ;; load the CHR bank for this mode
   26  06:CEEF  20 FA D1    JSR ResetMapper
   27                       ;;remember, we're loading the SECOND set in each chr bank
   28                       ;;so we'll take the index from the game mode chr table and add one mult 2
   29  06:CEF2  AE 0E 00    LDX game_mode
   30  06:CEF5  BD 8B CF    LDA gameModeInitCHRROMB, x
   31  06:CEF8  0A          ASL A
   32  06:CEF9  18          CLC 
   33  06:CEFA  69 01       ADC #$01
   34  06:CEFC  20 1F D2    JSR LoadCHRBankB
   35                       
   36  06:CEFF  20 FA D1    JSR ResetMapper
   37  06:CF02  AE 0E 00    LDX game_mode
   38  06:CF05  BD 8E CF    LDA gameModeInitCHRROMA, x
   39  06:CF08  0A          ASL A
   40  06:CF09  20 14 D2    JSR LoadCHRBankA
   41                       
   42                       
   43                       
   44  06:CF0C  60          RTS
   45                       
   46  06:CF0D            LoadGameModeBackground:
   47                             
   48                       MACROGetDoubleIndex game_mode
                          
       06:CF0D  AD 0E 00          LDA game_mode
       06:CF10  0A                ASL A
       06:CF11  A8                TAY
                                  
   49  06:CF12  8C 00 00    STY temp1
   50                             
   51                       MACROGetLabelPointer Palettes, table_address
                          
       06:CF15  A9 E0             LDA #HIGH(Palettes)
       06:CF17  A2 00             LDX #LOW(Palettes)
                                  
       06:CF19  8E 16 00          STX table_address
       06:CF1C  8D 17 00          STA table_address+1
                                  
   52  06:CF1F  20 B7 CF    JSR GetTableAtIndex
   53                     
   54  06:CF22  20 C4 CF    JSR LoadFullPaletteFromTable
   55                             
   56  06:CF25  AC 00 00    LDY temp1
   57  06:CF28  AD 0D 00    LDA mode_loadFlags
   58  06:CF2B  29 40       AND #%01000000 ; copy from saved screen
   59  06:CF2D  F0 0D       BEQ .dontUseSaveCopy
   60                       MACROGetLabelPointer SaveScreen_Copy, table_address
                          
       06:CF2F  A9 68             LDA #HIGH(SaveScreen_Copy)
       06:CF31  A2 00             LDX #LOW(SaveScreen_Copy)
                                  
       06:CF33  8E 16 00          STX table_address
       06:CF36  8D 17 00          STA table_address+1
                                  
   61  06:CF39  4C 53 CF    JMP .loadTable
   62                       
   63  06:CF3C            .dontUseSaveCopy:
   64                       MACROGetLabelPointer NameTables, table_address
                          
       06:CF3C  A9 E0             LDA #HIGH(NameTables)
       06:CF3E  A2 06             LDX #LOW(NameTables)
                                  
       06:CF40  8E 16 00          STX table_address
       06:CF43  8D 17 00          STA table_address+1
                                  
   65  06:CF46  20 B7 CF    JSR GetTableAtIndex
   66  06:CF49  AD 0D 00    LDA mode_loadFlags
   67  06:CF4C  29 0F       AND #$0F
   68  06:CF4E  0A          ASL A
   69  06:CF4F  A8          TAY
   70  06:CF50  20 B7 CF    JSR GetTableAtIndex
   71                             
   72  06:CF53            .loadTable:
   73  06:CF53  A9 00       LDA #$00
   74  06:CF55  20 F3 CF    JSR LoadFullBackgroundFromTable
   75                       
   76  06:CF58  AC 00 00    LDY temp1
   77                       MACROGetLabelPointer NameTables2, table_address
                          
       06:CF5B  A9 E0             LDA #HIGH(NameTables2)
       06:CF5D  A2 0C             LDX #LOW(NameTables2)
                                  
       06:CF5F  8E 16 00          STX table_address
       06:CF62  8D 17 00          STA table_address+1
                                  
   78  06:CF65  20 B7 CF    JSR GetTableAtIndex
   79                       
   80  06:CF68  A9 01       LDA #$01
   81  06:CF6A  20 F3 CF    JSR LoadFullBackgroundFromTable
   82                       
   83  06:CF6D  60          RTS
   84                       
   85  06:CF6E            LoadGameModeSprites:
   86                     
   87                       MACROGetDoubleIndex game_mode  
                          
       06:CF6E  AD 0E 00          LDA game_mode
       06:CF71  0A                ASL A
       06:CF72  A8                TAY
                                  
   88                       MACROGetLabelPointer Sprites, table_address
                          
       06:CF73  A9 FD             LDA #HIGH(Sprites)
       06:CF75  A2 28             LDX #LOW(Sprites)
                                  
       06:CF77  8E 16 00          STX table_address
       06:CF7A  8D 17 00          STA table_address+1
                                  
   89  06:CF7D  20 B7 CF    JSR GetTableAtIndex
   90  06:CF80  A0 00       LDY #$00
   91  06:CF82  B1 16       LDA [table_address],y
   92  06:CF84  EE 16 00    INC table_address
   93  06:CF87  20 FC D0    JSR LoadSprites_impl
   94                       
   95  06:CF8A  60          RTS
   96                       
   97  06:CF8B            gameModeInitCHRROMB:
   98  06:CF8B  00 02 02          .db $00, $02, $02
   99  06:CF8E            gameModeInitCHRROMA:
  100  06:CF8E  00 02 02          .db $00, $02, $02
  101                             
#[1]   Picross.asm
#[2]   Routines/Utils/PointerUtils.asm
   95                       .include "Routines/Utils/PointerUtils.asm"
    1  06:CF91            Dynamic_Jump:
    2                     
    3  06:CF91  0A          ASL A                                 ;; double the index passed into A
    4  06:CF92  8E 08 00    STX tempx
    5  06:CF95  8C 09 00    STY tempy
    6  06:CF98  A8          TAY
    7  06:CF99  C8          INY  
    8  06:CF9A  68          PLA
    9  06:CF9B  8D 18 00    STA jump_address
   10  06:CF9E  68          PLA 
   11  06:CF9F  8D 19 00    STA jump_address+1            
   12  06:CFA2  B1 18       LDA [jump_address], y
   13  06:CFA4  AA          TAX
   14  06:CFA5  C8          INY
   15  06:CFA6  B1 18       LDA [jump_address], y
   16  06:CFA8  8E 18 00    STX jump_address
   17  06:CFAB  8D 19 00    STA jump_address+1
   18  06:CFAE  AE 08 00    LDX tempx
   19  06:CFB1  AC 09 00    LDY tempy
   20  06:CFB4  6C 18 00    JMP [jump_address]
   21                       
   22  06:CFB7            GetTableAtIndex:
   23                     
   24  06:CFB7  B1 16             LDA [table_address], y
   25  06:CFB9  AA                TAX
   26  06:CFBA  C8                INY
   27  06:CFBB  B1 16             LDA [table_address], y
   28                             
   29  06:CFBD            SetTableAddress:
   30                             
   31                             ;;A is hi, X is lo
   32  06:CFBD  8E 16 00          STX table_address
   33  06:CFC0  8D 17 00          STA table_address+1
   34  06:CFC3  60                RTS
#[1]   Picross.asm
#[2]   Routines/Utils/PPUUtils.asm
   96                       .include "Routines/Utils/PPUUtils.asm"
    1  06:CFC4            LoadFullPaletteFromTable:
    2                     
    3                       MACROSetPPUAddress $3F00
                          
       06:CFC4  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:CFC7  A9 3F       LDA #HIGH($3F00)
       06:CFC9  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:CFCC  A9 00       LDA #LOW($3F00)
       06:CFCE  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
    4  06:CFD1  A0 00       LDY #$00              ; start out at 0
    5  06:CFD3  A2 00       LDX #$00
    6  06:CFD5            .loop:
    7  06:CFD5  B1 16       LDA [table_address], y        ; load data from address (palette + the value in x)
    8  06:CFD7  9D 00 6C    STA Palette_Copy, x
    9  06:CFDA  48          PHA 
   10  06:CFDB  AD 0D 00    LDA mode_loadFlags
   11  06:CFDE  29 10       AND #$10
   12  06:CFE0  D0 04       BNE .setBlack
   13  06:CFE2  68          PLA 
   14  06:CFE3  4C E9 CF    JMP .setPPUData
   15  06:CFE6            .setBlack:
   16                     
   17  06:CFE6  68          PLA 
   18  06:CFE7  A9 0F       LDA #$0F
   19                       
   20  06:CFE9            .setPPUData:
   21  06:CFE9  8D 07 20    STA PPU_DATA            ; write to PPU
   22  06:CFEC  C8          INY                   ; X = X + 1
   23  06:CFED  E8          INX
   24  06:CFEE  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   25  06:CFF0  D0 E3       BNE .loop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   26  06:CFF2  60          RTS
   27                     
   28  06:CFF3            LoadFullBackgroundFromTable:
   29                     
   30                         ;;use A as an index for which nametable to write to
   31  06:CFF3  20 47 D1          JSR SetNametableFromIndex
   32  06:CFF6  8A                TXA
   33  06:CFF7  4A                LSR A
   34  06:CFF8  29 01             AND #$01
   35  06:CFFA  D0 17             BNE .copyScreenB
   36                             MACROGetLabelPointer Screen_Copy, pointer_address
                          
       06:CFFC  A9 60             LDA #HIGH(Screen_Copy)
       06:CFFE  A2 00             LDX #LOW(Screen_Copy)
                                  
       06:D000  8E 12 00          STX pointer_address
       06:D003  8D 13 00          STA pointer_address+1
                                  
   37                             MACROGetLabelPointer SaveScreen_Copy, pointerB_address
                          
       06:D006  A9 68             LDA #HIGH(SaveScreen_Copy)
       06:D008  A2 00             LDX #LOW(SaveScreen_Copy)
                                  
       06:D00A  8E 14 00          STX pointerB_address
       06:D00D  8D 15 00          STA pointerB_address+1
                                  
   38  06:D010  4C 26 D0          JMP .setCounters
   39                             
   40  06:D013            .copyScreenB:
   41                             MACROGetLabelPointer ScreenB_Copy, pointer_address
                          
       06:D013  A9 64             LDA #HIGH(ScreenB_Copy)
       06:D015  A2 00             LDX #LOW(ScreenB_Copy)
                                  
       06:D017  8E 12 00          STX pointer_address
       06:D01A  8D 13 00          STA pointer_address+1
                                  
   42  06:D01D  AD 0D 00          LDA mode_loadFlags
   43  06:D020  2D 00 00          AND $%11011111
   44  06:D023  8D 0D 00          STA mode_loadFlags ;kill the copy flag, just in case
   45                             
   46                             ;;set pointer
   47                             ;; set counters
   48  06:D026            .setCounters:
   49  06:D026  A0 00             LDY #$00
   50  06:D028  A2 00             LDX #$00
   51                             
   52                             ;;start loop
   53                     
   54  06:D02A            .outerloop:
   55                     
   56  06:D02A            .innerloop:
   57                     
   58  06:D02A  B1 16             LDA [table_address], y
   59  06:D02C  8D 07 20          STA PPU_DATA
   60  06:D02F  91 12             STA [pointer_address],y
   61  06:D031  AD 0D 00      LDA mode_loadFlags
   62  06:D034  29 20         AND #%00100000      ;check copy flag
   63  06:D036  F0 04             BEQ .skipSaveCopy
   64  06:D038  B1 16         LDA [table_address], y
   65  06:D03A  91 14             STA [pointerB_address],y
   66                     
   67  06:D03C            .skipSaveCopy:
   68  06:D03C  C8                INY
   69  06:D03D  C0 00             CPY #$00
   70  06:D03F  D0 E9             BNE .innerloop
   71                     
   72  06:D041  EE 13 00          INC pointer_address+1
   73  06:D044  EE 17 00          INC table_address+1
   74  06:D047  EE 15 00          INC pointerB_address+1
   75                             
   76  06:D04A  E8                INX
   77  06:D04B  E0 04             CPX #$04
   78  06:D04D  D0 DB             BNE .outerloop
   79  06:D04F  60                RTS
   80                             
   81                     
   82           0000      DATA_LEN = temp1
   83           0001      WRITE_SETTINGS = temp2
   84                             
   85  06:D050            ProcessPPUString:
   86                     
   87  06:D050  AD 23 00          LDA PPU_PendingWrite
   88  06:D053  D0 01             BNE .continueProcess
   89  06:D055  60                RTS
   90                             
   91  06:D056            .continueProcess:
   92  06:D056  A0 00             LDY #$00
   93                             
   94  06:D058  A9 25             LDA #LOW(PPU_String)
   95  06:D05A  8D 12 00          STA pointer_address
   96  06:D05D  A9 00             LDA #HIGH(PPU_String)
   97  06:D05F  8D 13 00          STA pointer_address + 1
   98                     
   99  06:D062            .outerloop:
  100  06:D062  AD 02 20          LDA PPU_STATUS
  101  06:D065  B1 12             LDA [pointer_address], y
  102  06:D067  F0 79             BEQ .finish
  103  06:D069  8D 06 20          STA PPU_ADDR
  104  06:D06C  C8                INY
  105  06:D06D  B1 12             LDA [pointer_address], y
  106  06:D06F  8D 06 20          STA PPU_ADDR
  107  06:D072  C8            INY 
  108  06:D073  B1 12             LDA [pointer_address], y
  109  06:D075  8D 01 00          STA WRITE_SETTINGS
  110  06:D078  C8                INY
  111                             
  112  06:D079  AD 00 20          LDA PPU_CTRL
  113  06:D07C  29 FB             AND #$FB
  114  06:D07E  8D 00 20          STA PPU_CTRL
  115                             
  116  06:D081  AD 01 00          LDA WRITE_SETTINGS      ;check horizontal or vertical write
  117  06:D084  29 80             AND #%10000000
  118  06:D086  F0 06             BEQ .checkRepeat
  119  06:D088  0D 00 20          ORA PPU_CTRL 
  120  06:D08B  8D 00 20          STA PPU_CTRL 
  121                             
  122                             
  123  06:D08E            .checkRepeat:
  124  06:D08E  AD 01 00    LDA WRITE_SETTINGS
  125  06:D091  29 40       AND #%01000000
  126  06:D093  F0 19       BEQ .checkTable
  127                       
  128  06:D095  AD 01 00    LDA WRITE_SETTINGS
  129  06:D098  29 3F       AND #$3F
  130  06:D09A  8D 00 00    STA DATA_LEN
  131                       ;;the usual data length byte is now the repeatable byte
  132  06:D09D  A2 00       LDX #$00
  133                       
  134  06:D09F            .repeatLoop:
  135  06:D09F  B1 12       LDA [pointer_address], y
  136  06:D0A1  8D 07 20    STA PPU_DATA
  137  06:D0A4  E8          INX 
  138  06:D0A5  EC 00 00    CPX DATA_LEN
  139  06:D0A8  D0 F5       BNE .repeatLoop
  140  06:D0AA  C8          INY
  141  06:D0AB  4C 62 D0    JMP .outerloop
  142                             
  143  06:D0AE            .checkTable:
  144  06:D0AE  AD 01 00          LDA WRITE_SETTINGS
  145  06:D0B1  29 20             AND #%00100000
  146  06:D0B3  F0 16             BEQ .rawData
  147                             
  148  06:D0B5  B1 12             LDA [pointer_address], y
  149  06:D0B7  8D 16 00          STA table_address
  150  06:D0BA  C8                INY 
  151  06:D0BB  B1 12             LDA [pointer_address], y
  152  06:D0BD  8D 17 00          STA table_address + 1
  153  06:D0C0  C8                INY
  154  06:D0C1  98                TYA 
  155  06:D0C2  48                PHA
  156  06:D0C3  20 E6 D0          JSR WriteToPPUFromTable
  157  06:D0C6  68                PLA
  158  06:D0C7  A8                TAY
  159  06:D0C8  4C 62 D0          JMP .outerloop
  160                             
  161  06:D0CB            .rawData:
  162                     
  163  06:D0CB  B1 12             LDA [pointer_address], y
  164  06:D0CD  C8                INY
  165  06:D0CE  8D 00 00          STA DATA_LEN
  166                     
  167  06:D0D1  A2 00             LDX #$00
  168                     
  169  06:D0D3            .innerloop:
  170                             
  171  06:D0D3  B1 12             LDA [pointer_address], y
  172  06:D0D5  8D 07 20          STA PPU_DATA
  173  06:D0D8  C8                INY
  174  06:D0D9  E8                INX
  175  06:D0DA  EC 00 00          CPX DATA_LEN
  176  06:D0DD  D0 F4             BNE .innerloop
  177  06:D0DF  4C 62 D0          JMP .outerloop
  178                             
  179  06:D0E2            .finish:
  180  06:D0E2  20 27 D1          JSR ClearPPUString
  181  06:D0E5            .leave:
  182  06:D0E5  60                RTS
  183                             
  184  06:D0E6            WriteToPPUFromTable:
  185  06:D0E6  A0 00             LDY #$00
  186  06:D0E8  B1 16             LDA [table_address], y
  187  06:D0EA  C8                INY
  188  06:D0EB  8D 00 00          STA DATA_LEN
  189  06:D0EE            .innerloop:
  190  06:D0EE  B1 16             LDA [table_address], y
  191  06:D0F0  8D 07 20          STA PPU_DATA
  192  06:D0F3  C8                INY
  193  06:D0F4  CC 00 00          CPY DATA_LEN
  194  06:D0F7  90 F5             BCC .innerloop ;table should have the size in it, but since we count the byte count, we'll want to wait till we go over it
  195  06:D0F9  F0 F3             BEQ .innerloop
  196  06:D0FB  60                RTS
  197                       
  198  06:D0FC            LoadSprites_impl:
  199                       ;;A will be the amount of sprites to load
  200  06:D0FC  8D 00 00    STA DATA_LEN
  201  06:D0FF  0E 00 00    ASL DATA_LEN
  202  06:D102  0E 00 00    ASL DATA_LEN
  203                       
  204  06:D105  A0 00       LDY #$00              ; start at 0
  205                       
  206  06:D107            .loop:
  207  06:D107  B1 16       LDA [table_address], y; load data from address (sprites +  x)
  208  06:D109  99 00 02    STA SPRITE_DATA, y    ; store into RAM address ($0200 + x)
  209  06:D10C  C8          INY                   ; X = X + 1
  210  06:D10D  CC 00 00    CPY DATA_LEN             ; Compare X to hex $10, decimal 16
  211  06:D110  D0 F5       BNE .loop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
  212                                             ; if compare was equal to 16, keep going down   
  213  06:D112  60          RTS
  214                     
  215                     
  216  06:D113            WriteToPPUString:
  217                     
  218  06:D113  AE 24 00          LDX PPU_StringIdx
  219  06:D116  E0 4F             CPX #PPU_STRINGMAX
  220  06:D118  F0 0C             BEQ .finish
  221                             
  222  06:D11A  9D 25 00          STA PPU_String, x
  223  06:D11D  EE 24 00          INC PPU_StringIdx
  224  06:D120  E8                INX
  225  06:D121  A9 00             LDA #$00
  226  06:D123  9D 25 00          STA PPU_String, x
  227                                     
  228  06:D126            .finish:
  229  06:D126  60                RTS
  230                     
  231  06:D127            ClearPPUString:
  232                             
  233  06:D127  A9 00             LDA #$00
  234  06:D129  8D 24 00          STA PPU_StringIdx
  235  06:D12C  8D 25 00          STA PPU_String
  236  06:D12F  8D 23 00          STA PPU_PendingWrite
  237  06:D132  60                RTS
  238                     
  239  06:D133            DetectSprite0:
  240  06:D133            WaitNotSprite0:
  241  06:D133  AD 02 20    lda PPU_STATUS
  242  06:D136  29 40       and #SPRITE_0_MASK
  243  06:D138  D0 F9       bne WaitNotSprite0   ; wait until sprite 0 not hit
  244                     
  245  06:D13A            WaitSprite0:
  246  06:D13A  AD 02 20    lda $2002
  247  06:D13D  29 40       and #SPRITE_0_MASK
  248  06:D13F  F0 F9       beq WaitSprite0      ; wait until sprite 0 is hit
  249                     
  250  06:D141  A2 05       ldx #$05                              ;do a scanline wait
  251  06:D143            WaitScanline:
  252  06:D143  CA          dex
  253  06:D144  D0 FD       bne WaitScanline
  254  06:D146  60          RTS
  255                     
  256                     
  257  06:D147            SetNametableFromIndex:
  258                     
  259  06:D147  48          PHA
  260  06:D148  AD 02 20    LDA PPU_STATUS
  261  06:D14B  68          PLA
  262  06:D14C  0A          ASL A
  263  06:D14D  AA          TAX
  264  06:D14E  BD E3 D1    LDA NameTableMemList+1, x
  265  06:D151  8D 06 20    STA PPU_ADDR
  266  06:D154  BD E2 D1    LDA NameTableMemList, x
  267  06:D157  8D 06 20    STA PPU_ADDR
  268  06:D15A  60          RTS
  269                       
  270  06:D15B            TurnOnSprites:
  271                      
  272  06:D15B  AD 1E 00    LDA PPU_Mask
  273  06:D15E  09 10       ORA #%00010000
  274  06:D160  8D 1E 00    STA PPU_Mask
  275  06:D163  60          RTS
  276                       
  277  06:D164            TurnOffSprites:
  278                       
  279  06:D164  AD 1E 00    LDA PPU_Mask
  280  06:D167  29 EF       AND #%11101111
  281  06:D169  8D 1E 00    STA PPU_Mask
  282  06:D16C  60          RTS
  283                     
  284  06:D16D            UpdatePPUControl:
  285                     
  286  06:D16D  AD 1D 00    LDA PPU_Control
  287  06:D170  29 FC       AND #$FC
  288  06:D172  0D 22 00    ORA PPU_NT
  289  06:D175  8D 00 20    STA PPU_CTRL
  290  06:D178  AD 1E 00    LDA PPU_Mask
  291  06:D17B  8D 01 20    STA PPU_MASK
  292  06:D17E  60          RTS
  293                       
  294  06:D17F            InitPPUControl:
  295                       
  296                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
  297                       ; enable sprites, enable background, no clipping on left side
  298  06:D17F  A9 90       LDA #%10010000
  299  06:D181  8D 00 20    STA PPU_CTRL
  300  06:D184  8D 1D 00    STA PPU_Control
  301  06:D187  A9 1E       LDA #%00011110
  302  06:D189  8D 01 20    STA PPU_MASK
  303  06:D18C  8D 1E 00    STA PPU_Mask
  304  06:D18F  60          RTS
  305                       
  306  06:D190            FadeOutPalettes:
  307                     
  308                     ;;take the current values, and decrement the lower nibbles
  309                     ;;we can access from the palette copy 
  310                     ;;we'll make this fade out one level per call
  311                     ;;once all the palettes are blacked out we'll return true, so we'll keep the carry flag as a return result
  312                     
  313                     ;;go through the palette copy, decrement, make a raw data PPU string and add all the bytes into it
  314                     ;;for any palette color already in the 0x range, change it to 0f to get black
  315                     
  316                       MACROGetLabelPointer Palette_Copy, table_address
                          
       06:D190  A9 6C             LDA #HIGH(Palette_Copy)
       06:D192  A2 00             LDX #LOW(Palette_Copy)
                                  
       06:D194  8E 16 00          STX table_address
       06:D197  8D 17 00          STA table_address+1
                                  
  317                     ;;palette copy address is now X accessable
  318                     
  319  06:D19A  A0 00       LDY #$00
  320                       MACROAddPPUStringEntryRawData #$3F, #$00, #DRAW_HORIZONTAL, #$20  
                          
       06:D19C  A9 01       LDA #$01
       06:D19E  8D 23 00    STA PPU_PendingWrite
       06:D1A1  A9 3F       LDA #$3F
       06:D1A3  20 13 D1    JSR WriteToPPUString
       06:D1A6  A9 00       LDA #$00
       06:D1A8  20 13 D1    JSR WriteToPPUString
       06:D1AB  A9 00       LDA #DRAW_HORIZONTAL
       06:D1AD  20 13 D1    JSR WriteToPPUString
       06:D1B0  A9 20       LDA #$20 
       06:D1B2  20 13 D1    JSR WriteToPPUString
                            
  321                     
  322  06:D1B5  A9 00       LDA #$00
  323  06:D1B7  8D 00 00    STA temp1
  324                       
  325  06:D1BA            .loop:
  326                     
  327  06:D1BA  B1 16       LDA [table_address], y
  328  06:D1BC  C9 0F       CMP #$0F
  329  06:D1BE  F0 15       BEQ .addToString
  330  06:D1C0  C9 10       CMP #$10
  331  06:D1C2  90 0D       BCC .setBlack
  332                       
  333  06:D1C4  A9 80       LDA #$80
  334  06:D1C6  8D 00 00    STA temp1
  335                       
  336  06:D1C9  B1 16       LDA [table_address], y
  337  06:D1CB  38          SEC
  338  06:D1CC  E9 10       SBC #$10
  339  06:D1CE  4C D3 D1    JMP .setColor
  340                     
  341  06:D1D1            .setBlack:
  342                     
  343  06:D1D1  A9 0F       LDA #$0F
  344                     
  345  06:D1D3            .setColor:
  346  06:D1D3  91 16       STA [table_address], y
  347                     
  348  06:D1D5            .addToString:
  349                     
  350  06:D1D5  20 13 D1    JSR WriteToPPUString
  351                     
  352  06:D1D8            .incY:
  353                       
  354  06:D1D8  C8          INY
  355  06:D1D9  C0 20       CPY #$20
  356  06:D1DB  D0 DD       BNE .loop
  357                     
  358  06:D1DD  0E 00 00    ASL temp1     ;get carry out, if we have one
  359                     
  360  06:D1E0  60          RTS
  361                       
  362  06:D1E1            FadeInPalettes:
  363                     
  364                     ;;need to be able to store off a target palette first
  365                     ;;we can use the palette copy we make during the game mode change as the target
  366  06:D1E1  60          RTS
  367                     
  368  06:D1E2            NameTableMemList:
  369  06:D1E2  00 20       .word $2000, $2400, $2800, $2C00
       06:D1E4  00 24     
       06:D1E6  00 28     
       06:D1E8  00 2C     
  370  06:D1EA            PalettesMemList:
  371  06:D1EA  00 3F       .word $3F00, $3F04, $3F08, $3F0C
       06:D1EC  04 3F     
       06:D1EE  08 3F     
       06:D1F0  0C 3F     
  372  06:D1F2  10 3F       .word $3F10, $3F14, $3F18, $3F1C  
       06:D1F4  14 3F     
       06:D1F6  18 3F     
       06:D1F8  1C 3F     
  373                       
  374           0024      BLANK_TILE = $24
#[1]   Picross.asm
#[2]   Routines/Utils/MapperUtils.asm
   97                       .include "Routines/Utils/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:D1FA            ResetMapper:
    7  06:D1FA  EE FA D1    inc ResetMapper
    8  06:D1FD  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:D1FE            SetMapperControls:
   23                       ;;A = controls
   24  06:D1FE  AA          TAX
   25  06:D1FF  A9 80       LDA #MAPPERCONTROL
   26  06:D201  8D A6 00    STA mapper_address+1
   27  06:D204  8A          TXA
   28  06:D205  20 2A D2    JSR SendMapperCommand
   29  06:D208  60          RTS
   30                     
   31  06:D209            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:D209  AA                TAX
   35  06:D20A  A9 E0             LDA #PRGBANK
   36  06:D20C  8D A6 00          STA mapper_address+1
   37  06:D20F  8A                TXA
   38  06:D210  20 2A D2          JSR SendMapperCommand
   39  06:D213  60                RTS
   40                             
   41  06:D214            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:D214  AA                TAX
   44  06:D215  A9 A0             LDA #CHRBANK1
   45  06:D217  8D A6 00          STA mapper_address+1
   46  06:D21A  8A                TXA
   47  06:D21B  20 2A D2          JSR SendMapperCommand
   48  06:D21E  60                RTS
   49                             
   50  06:D21F            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:D21F  AA                TAX
   53  06:D220  A9 C0             LDA #CHRBANK2
   54  06:D222  8D A6 00          STA mapper_address+1
   55  06:D225  8A                TXA
   56  06:D226  20 2A D2          JSR SendMapperCommand
   57  06:D229  60                RTS
   58                             
   59  06:D22A            SendMapperCommand:
   60                     
   61  06:D22A  A0 00             LDY #$00
   62                             
   63  06:D22C  91 A5             STA [mapper_address], y
   64  06:D22E  4A                LSR A
   65  06:D22F  91 A5             STA [mapper_address], y
   66  06:D231  4A                LSR A
   67  06:D232  91 A5             STA [mapper_address], y
   68  06:D234  4A                LSR A 
   69  06:D235  91 A5             STA [mapper_address], y
   70  06:D237  4A                LSR A
   71  06:D238  91 A5             STA [mapper_address], y
   72                             
   73  06:D23A  60                RTS
   74                             
   75  06:D23B            ResetBanks:
   76                     
   77  06:D23B  20 FA D1          JSR ResetMapper
   78  06:D23E  A9 00             LDA #$00
   79  06:D240  20 09 D2          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:D243  20 FA D1          JSR ResetMapper
   83  06:D246  A9 00             LDA #$00
   84  06:D248  20 14 D2          JSR LoadCHRBankA
   85  06:D24B  A9 01             LDA #$01
   86  06:D24D  20 1F D2          JSR LoadCHRBankB
   87  06:D250  60                RTS
   88                             
   89                       
#[1]   Picross.asm
#[2]   Routines/Game_Routines/ScreenEffects.asm
   98                       .include "Routines/Game_Routines/ScreenEffects.asm"
    1  06:D251            PopulateClues:
    2                       
    3  06:D251  A0 00       LDY #$00
    4  06:D253  B1 AD       LDA [puzzle_address], y
    5  06:D255  AA          TAX
    6  06:D256  BD 40 D6    LDA PuzzleSizes, x
    7  06:D259  8D 00 00    STA temp1
    8                       
    9  06:D25C            .getByte:
   10  06:D25C  AC BF 00    LDY clueTableIndex
   11  06:D25F  B1 AF       LDA [clues_address], y
   12  06:D261  D0 07       BNE .checkNewLine
   13  06:D263  EE BF 00    INC clueTableIndex
   14  06:D266  A9 00       LDA #$00
   15  06:D268  F0 39       BEQ .drawClue
   16                       ;was 0, set up a draw
   17  06:D26A            .checkNewLine
   18  06:D26A  C9 FF       CMP #$FF
   19  06:D26C  D0 18       BNE .getClue
   20                       
   21                       ;;was FF- need to inc stuff
   22  06:D26E  EE BF 00    INC clueTableIndex
   23  06:D271  A9 00       LDA #$00
   24  06:D273  8D C6 00    STA clueParity
   25                       
   26  06:D276  EE C0 00    INC clueLineIndex
   27  06:D279  AD C0 00    LDA clueLineIndex
   28  06:D27C  CD 00 00    CMP temp1
   29                       ;CMP #$01
   30  06:D27F  F0 28       BEQ .leave    ;carry will be set
   31                       
   32  06:D281  20 40 D3    JSR CreateOffsetFromIndex
   33                      
   34  06:D284  D0 D6       BNE .getByte
   35                       
   36  06:D286            .getClue:
   37                       ;;clues go from high nibble to low nibble
   38  06:D286  48          PHA 
   39  06:D287  AD C6 00    LDA clueParity
   40  06:D28A  D0 0A       BNE .getSecondClue
   41  06:D28C  EE C6 00    INC clueParity
   42  06:D28F  68          PLA
   43  06:D290  4A          LSR A
   44  06:D291  4A          LSR A
   45  06:D292  4A          LSR A
   46  06:D293  4A          LSR A         ;move clue over to lower nibble
   47  06:D294  D0 0D       BNE .drawClue
   48                       
   49  06:D296            .getSecondClue:
   50                     
   51  06:D296  CE C6 00    DEC clueParity
   52  06:D299  EE BF 00    INC clueTableIndex
   53  06:D29C  68          PLA 
   54  06:D29D  29 0F       AND #$0F
   55  06:D29F  D0 02       BNE .drawClue
   56                       ;;if 0, skip
   57  06:D2A1  F0 B9       BEQ .getByte
   58                      
   59  06:D2A3            .drawClue:
   60                       
   61  06:D2A3  09 40       ORA #$40
   62  06:D2A5  20 AA D2    JSR WriteClueByteToPPUString
   63  06:D2A8  18          CLC
   64                       
   65  06:D2A9            .leave:
   66  06:D2A9  60          RTS
   67                       
   68  06:D2AA            WriteClueByteToPPUString:
   69                     
   70  06:D2AA  8D 00 00    STA temp1 ;store off the tile value
   71                     
   72                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:D2AD  A9 01       LDA #$01
       06:D2AF  8D 23 00    STA PPU_PendingWrite
       06:D2B2  AD BE 00    LDA clue_draw_address+1
       06:D2B5  20 13 D1    JSR WriteToPPUString
       06:D2B8  AD BD 00    LDA clue_draw_address
       06:D2BB  20 13 D1    JSR WriteToPPUString
       06:D2BE  A9 00       LDA #DRAW_HORIZONTAL
       06:D2C0  20 13 D1    JSR WriteToPPUString
       06:D2C3  A9 01       LDA #$01 
       06:D2C5  20 13 D1    JSR WriteToPPUString
                            
   73  06:D2C8  AD 00 00    LDA temp1
   74  06:D2CB  20 13 D1    JSR WriteToPPUString
   75                       
   76                       ;;also copy to ... copy
   77  06:D2CE  AD BD 00    LDA clue_draw_address
   78  06:D2D1  8D B5 00    STA copy_address
   79  06:D2D4  AD BE 00    LDA clue_draw_address+1
   80  06:D2D7  29 0F       AND #$0F
   81  06:D2D9  09 60       ORA #$60
   82  06:D2DB  8D B6 00    STA copy_address+1
   83  06:D2DE  AD 00 00    LDA temp1
   84  06:D2E1  A0 00       LDY #$00
   85  06:D2E3  91 B5       STA [copy_address],y
   86  06:D2E5  AD B6 00    LDA copy_address+1
   87  06:D2E8  18          CLC
   88  06:D2E9  69 08       ADC #$08
   89  06:D2EB  8D B6 00    STA copy_address+1
   90  06:D2EE  AD 00 00    LDA temp1
   91  06:D2F1  91 B5       STA [copy_address],y
   92                       
   93  06:D2F3  AD C2 00    LDA clueDrawAdd
   94  06:D2F6  20 1D D3    JSR SubFromClueDrawAddress
   95                         
   96  06:D2F9  60          RTS
   97                       
   98  06:D2FA            ResetClueDrawAddress:
   99                     
  100                       MACROGetPointer clue_start_address, clue_draw_address
                          
       06:D2FA  AD BB 00          LDA clue_start_address
       06:D2FD  8D BD 00          STA clue_draw_address
       06:D300  AD BC 00          LDA clue_start_address+1
       06:D303  8D BE 00          STA clue_draw_address+1
                          
  101                       
  102  06:D306  60          RTS
  103                       
  104  06:D307            AddToClueDrawAddress:
  105                     
  106  06:D307  8D 00 00    STA temp1
  107                       
  108  06:D30A  AD BD 00    LDA clue_draw_address
  109  06:D30D  18          CLC
  110  06:D30E  6D 00 00    ADC temp1
  111  06:D311  8D BD 00    STA clue_draw_address
  112  06:D314  AD BE 00    LDA clue_draw_address+1
  113  06:D317  69 00       ADC #$00
  114  06:D319  8D BE 00    STA clue_draw_address+1
  115                       
  116  06:D31C  60          RTS
  117                         
  118  06:D31D            SubFromClueDrawAddress:
  119                     
  120  06:D31D  8D 00 00    STA temp1
  121                       
  122  06:D320  AD BD 00    LDA clue_draw_address
  123  06:D323  38          SEC
  124  06:D324  ED 00 00    SBC temp1
  125  06:D327  8D BD 00    STA clue_draw_address
  126  06:D32A  AD BE 00    LDA clue_draw_address+1
  127  06:D32D  E9 00       SBC #$00
  128  06:D32F  8D BE 00    STA clue_draw_address+1
  129                       
  130  06:D332  60          RTS
  131                       
  132  06:D333            AddToClueDrawAddressHi:
  133                     
  134  06:D333  8D 00 00    STA temp1
  135                       
  136  06:D336  AD BE 00    LDA clue_draw_address+1
  137  06:D339  6D 00 00    ADC temp1
  138  06:D33C  8D BE 00    STA clue_draw_address+1
  139                       
  140  06:D33F  60          RTS
  141                       
  142  06:D340            CreateOffsetFromIndex:
  143                     
  144                       ;;would be this, but we need to be able to go further- so we'll make a doulbe offset
  145  06:D340  AD C0 00    LDA clueLineIndex
  146  06:D343  8D C3 00    STA clueDrawOffset
  147  06:D346  A9 00       LDA #$00
  148  06:D348  8D C4 00    STA clueDrawOffset+1
  149                       
  150  06:D34B  AD C1 00    LDA clueOffsetShift   
  151  06:D34E  F0 0E       BEQ .addOffset
  152                       
  153  06:D350  A2 00       LDX #$00
  154                       
  155  06:D352            .loopShift:
  156  06:D352  0E C3 00    ASL clueDrawOffset
  157  06:D355  2E C4 00    ROL clueDrawOffset+1
  158  06:D358  E8          INX
  159  06:D359  EC C1 00    CPX clueOffsetShift
  160  06:D35C  D0 F4       BNE .loopShift
  161                       
  162  06:D35E            .addOffset:
  163                       
  164  06:D35E  20 FA D2    JSR ResetClueDrawAddress
  165  06:D361  AD C3 00    LDA clueDrawOffset
  166  06:D364  20 07 D3    JSR AddToClueDrawAddress 
  167  06:D367  AD C4 00    LDA clueDrawOffset+1
  168  06:D36A  20 33 D3    JSR AddToClueDrawAddressHi
  169                       
  170  06:D36D  60          RTS  
  171                       
  172  06:D36E            ClearPuzzle:
  173                     
  174                       ;we'll assume clue draw address has been set to the top of the 1st nametable
  175                      
  176                       MACROGetLabelPointer ClearLineDefs, table_address
                          
       06:D36E  A9 D6             LDA #HIGH(ClearLineDefs)
       06:D370  A2 22             LDX #LOW(ClearLineDefs)
                                  
       06:D372  8E 16 00          STX table_address
       06:D375  8D 17 00          STA table_address+1
                                  
  177                     
  178  06:D378  AC C0 00    LDY clueLineIndex
  179  06:D37B  B1 16       LDA [table_address], y
  180  06:D37D  8D 00 00    STA temp1
  181                       MACROAddPPUStringEntryRepeat clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp1, #$24
                          
       06:D380  A9 01       LDA #$01
       06:D382  8D 23 00    STA PPU_PendingWrite
       06:D385  AD BE 00    LDA clue_draw_address+1
       06:D388  20 13 D1    JSR WriteToPPUString
       06:D38B  AD BD 00    LDA clue_draw_address
       06:D38E  20 13 D1    JSR WriteToPPUString
       06:D391  A9 40       LDA #$40
       06:D393  09 00       ORA #DRAW_HORIZONTAL
       06:D395  0D 00 00    ORA temp1
       06:D398  20 13 D1    JSR WriteToPPUString
       06:D39B  A9 24       LDA #$24
       06:D39D  20 13 D1    JSR WriteToPPUString
                            
  182                       ;;no need to load anything else
  183                       
  184  06:D3A0  AD BD 00    LDA clue_draw_address
  185  06:D3A3  18          CLC
  186  06:D3A4  69 20       ADC #32
  187  06:D3A6  8D BD 00    STA clue_draw_address
  188  06:D3A9  AD BE 00    LDA clue_draw_address+1
  189  06:D3AC  69 00       ADC #$00
  190  06:D3AE  8D BE 00    STA clue_draw_address+1
  191                       
  192  06:D3B1  EE C0 00    INC clueLineIndex
  193  06:D3B4  60          RTS
  194                       
  195  06:D3B5            LoadPauseScreen:
  196                     
  197                     ;;use clue indexes again
  198                     ;;we want to draw one line at a time
  199                     ;;we have control codes, but those don't matter since we have to build ou the strings before hand
  200                     
  201                     ;load pause table
  202                     ;there are 6 lines of 13 tiles
  203                     ;one byte for the 6 lines, one byte to keep track of our index
  204                       ;STA clueLineIndex 
  205                       ;STA clueOffsetShift
  206                     
  207                     ;;pause_address has the table we want
  208                     ;;pause_draw_address will be the draw location
  209                     
  210                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:D3B5  A9 01       LDA #$01
       06:D3B7  8D 23 00    STA PPU_PendingWrite
       06:D3BA  AD B8 00    LDA pause_draw_address+1
       06:D3BD  20 13 D1    JSR WriteToPPUString
       06:D3C0  AD B7 00    LDA pause_draw_address
       06:D3C3  20 13 D1    JSR WriteToPPUString
       06:D3C6  A9 00       LDA #DRAW_HORIZONTAL
       06:D3C8  20 13 D1    JSR WriteToPPUString
       06:D3CB  A9 0D       LDA #13 
       06:D3CD  20 13 D1    JSR WriteToPPUString
                            
  211                     
  212  06:D3D0  A2 00       LDX #$00
  213  06:D3D2  AC C0 00    LDY clueLineIndex
  214  06:D3D5            .loop:
  215                      
  216  06:D3D5  8A          TXA
  217  06:D3D6  48          PHA
  218  06:D3D7  B1 B3       LDA [pause_address],y
  219  06:D3D9  20 13 D1    JSR WriteToPPUString
  220  06:D3DC  68          PLA
  221  06:D3DD  AA          TAX
  222  06:D3DE  C8          INY
  223  06:D3DF  E8          INX 
  224  06:D3E0  E0 0D       CPX #13
  225  06:D3E2  D0 F1       BNE .loop
  226                       
  227  06:D3E4  8C C0 00    STY clueLineIndex
  228                       
  229  06:D3E7  AD B7 00    LDA pause_draw_address
  230  06:D3EA  18          CLC
  231  06:D3EB  69 20       ADC #$20
  232  06:D3ED  8D B7 00    STA pause_draw_address
  233  06:D3F0  AD B8 00    LDA pause_draw_address+1
  234  06:D3F3  69 00       ADC #$00
  235  06:D3F5  8D B8 00    STA pause_draw_address+1
  236                       
  237  06:D3F8  EE C1 00    INC clueOffsetShift
  238  06:D3FB  60          RTS
  239                       
  240                       
  241                     
  242                     
  243  06:D3FC            ClearPauseScreen:  
  244                     
  245                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:D3FC  A9 01       LDA #$01
       06:D3FE  8D 23 00    STA PPU_PendingWrite
       06:D401  AD B8 00    LDA pause_draw_address+1
       06:D404  20 13 D1    JSR WriteToPPUString
       06:D407  AD B7 00    LDA pause_draw_address
       06:D40A  20 13 D1    JSR WriteToPPUString
       06:D40D  A9 00       LDA #DRAW_HORIZONTAL
       06:D40F  20 13 D1    JSR WriteToPPUString
       06:D412  A9 0D       LDA #13 
       06:D414  20 13 D1    JSR WriteToPPUString
                            
  246                     
  247  06:D417  A2 00       LDX #$00
  248  06:D419  A0 00       LDY #$00
  249  06:D41B            .loop:
  250                      
  251  06:D41B  8A          TXA
  252  06:D41C  48          PHA
  253  06:D41D  B1 B3       LDA [pause_address],y
  254  06:D41F  20 13 D1    JSR WriteToPPUString
  255  06:D422  68          PLA
  256  06:D423  AA          TAX
  257  06:D424  C8          INY
  258  06:D425  E8          INX 
  259  06:D426  E0 0D       CPX #13
  260  06:D428  D0 F1       BNE .loop
  261                       
  262                       
  263  06:D42A  AD B7 00    LDA pause_draw_address
  264  06:D42D  18          CLC
  265  06:D42E  69 20       ADC #$20
  266  06:D430  8D B7 00    STA pause_draw_address
  267  06:D433  AD B8 00    LDA pause_draw_address+1
  268  06:D436  69 00       ADC #$00
  269  06:D438  8D B8 00    STA pause_draw_address+1
  270                       
  271  06:D43B  AD B3 00    LDA pause_address
  272  06:D43E  18          CLC
  273  06:D43F  69 20       ADC #$20
  274  06:D441  8D B3 00    STA pause_address
  275  06:D444  AD B4 00    LDA pause_address+1
  276  06:D447  69 00       ADC #$00
  277  06:D449  8D B4 00    STA pause_address+1
  278                       
  279  06:D44C  EE C1 00    INC clueOffsetShift
  280  06:D44F  60         RTS
  281  06:D450            DrawImage:
  282                     
  283                       ;;we have clueTableIndex, which should be at the image bytes now
  284                       ;;clue line index will keep track of our place in a byte
  285                        
  286  06:D450  A9 00       LDA #$00
  287  06:D452  8D 00 00    STA temp1
  288  06:D455  8D 01 00    STA temp2
  289  06:D458  8D 02 00    STA temp3
  290  06:D45B  8D 03 00    STA temp4
  291  06:D45E  8D 05 00    STA temp6
  292                       
  293  06:D461  A9 04       LDA #$04
  294  06:D463  8D 04 00    STA temp5
  295                       
  296  06:D466  A0 00       LDY #$00
  297  06:D468  B1 AD       LDA [puzzle_address], y
  298  06:D46A  AA          TAX
  299  06:D46B  BD 40 D6    LDA PuzzleSizes, x
  300  06:D46E  8D 06 00    STA temp7
  301  06:D471  BD 43 D6    LDA PuzzleImageSizes, x
  302  06:D474  8D 07 00    STA temp8
  303  06:D477  4A          LSR A
  304  06:D478  4A          LSR A
  305  06:D479  8D 09 00    STA tempy
  306  06:D47C  AD 07 00    LDA temp8
  307  06:D47F  29 03       AND #$03
  308  06:D481  F0 03       BEQ .skipAdd1
  309  06:D483  EE 09 00    INC tempy  
  310  06:D486            .skipAdd1:
  311  06:D486  BD 46 D6    LDA ImageDrawWrapOffsets, x
  312  06:D489  8D 08 00    STA tempx
  313                       
  314  06:D48C  AC BF 00    LDY clueTableIndex
  315  06:D48F  B1 AF       LDA [clues_address], y
  316                     
  317  06:D491  0A          ASL A
  318  06:D492  2E 00 00    ROL temp1
  319  06:D495  0A          ASL A
  320  06:D496  2E 00 00    ROL temp1
  321  06:D499  0A          ASL A
  322  06:D49A  2E 01 00    ROL temp2
  323  06:D49D  0A          ASL A
  324  06:D49E  2E 01 00    ROL temp2
  325  06:D4A1  0A          ASL A
  326  06:D4A2  2E 02 00    ROL temp3
  327  06:D4A5  0A          ASL A
  328  06:D4A6  2E 02 00    ROL temp3
  329  06:D4A9  0A          ASL A
  330  06:D4AA  2E 03 00    ROL temp4
  331  06:D4AD  0A          ASL A
  332  06:D4AE  2E 03 00    ROL temp4
  333                       
  334                     
  335  06:D4B1  A2 00       LDX #$00
  336  06:D4B3            .moveUpTiles:
  337  06:D4B3  BD 00 00    LDA temp1, x
  338  06:D4B6  09 24       ORA #$24
  339  06:D4B8  9D 00 00    STA temp1, x
  340  06:D4BB  E8          INX
  341  06:D4BC  E0 04       CPX #$04
  342  06:D4BE  D0 F3       BNE .moveUpTiles
  343                       
  344                       
  345  06:D4C0  AD C1 00    LDA clueOffsetShift
  346  06:D4C3  18          CLC
  347  06:D4C4  69 04       ADC #$04
  348                     
  349  06:D4C6  8D C1 00    STA clueOffsetShift
  350                       ;;clue offset shift + 4, check if we went over puzle row length
  351  06:D4C9  38          SEC
  352  06:D4CA  ED 06 00    SBC temp7 ;;subtract 15
  353  06:D4CD  90 12       BCC .makeStrings
  354  06:D4CF  F0 10       BEQ .makeStrings
  355                       
  356  06:D4D1  8D C1 00    STA clueOffsetShift ;loop offset over
  357  06:D4D4  8D 05 00    STA temp6 ; length of second string
  358  06:D4D7  AD 04 00    LDA temp5
  359  06:D4DA  38          SEC
  360  06:D4DB  ED 05 00    SBC temp6 
  361  06:D4DE  8D 04 00    STA temp5 ;length of first string 
  362                       
  363  06:D4E1            .makeStrings:
  364                       
  365  06:D4E1  A2 00       LDX #$00
  366                       
  367  06:D4E3  AD 04 00    LDA temp5
  368  06:D4E6  F0 51       BEQ .makeSecondString
  369  06:D4E8  8A          TXA
  370  06:D4E9  48          PHA
  371                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp5
                          
       06:D4EA  A9 01       LDA #$01
       06:D4EC  8D 23 00    STA PPU_PendingWrite
       06:D4EF  AD BE 00    LDA clue_draw_address+1
       06:D4F2  20 13 D1    JSR WriteToPPUString
       06:D4F5  AD BD 00    LDA clue_draw_address
       06:D4F8  20 13 D1    JSR WriteToPPUString
       06:D4FB  A9 00       LDA #DRAW_HORIZONTAL
       06:D4FD  20 13 D1    JSR WriteToPPUString
       06:D500  AD 04 00    LDA temp5 
       06:D503  20 13 D1    JSR WriteToPPUString
                            
  372  06:D506  68          PLA
  373  06:D507  AA          TAX
  374                       
  375  06:D508            .firstStringLoop:
  376                       
  377  06:D508  8A          TXA 
  378  06:D509  48          PHA
  379  06:D50A  BD 00 00    LDA temp1, x
  380  06:D50D  20 13 D1    JSR WriteToPPUString
  381                       
  382  06:D510  EE C0 00    INC clueLineIndex
  383  06:D513  AD C0 00    LDA clueLineIndex
  384  06:D516  CD 07 00    CMP temp8
  385  06:D519  D0 04       BNE .continueLoop
  386  06:D51B  68          PLA 
  387  06:D51C  4C A0 D5    JMP .leave
  388                       
  389  06:D51F            .continueLoop:
  390  06:D51F  68          PLA
  391  06:D520  AA          TAX
  392  06:D521  E8          INX
  393  06:D522  EC 04 00    CPX temp5
  394  06:D525  D0 E1       BNE .firstStringLoop
  395                       
  396  06:D527  AD BD 00    LDA clue_draw_address
  397  06:D52A  18          CLC
  398  06:D52B  6D 04 00    ADC temp5
  399  06:D52E  8D BD 00    STA clue_draw_address
  400  06:D531  AD BE 00    LDA clue_draw_address+1
  401  06:D534  69 00       ADC #$00
  402  06:D536  8D BE 00    STA clue_draw_address+1
  403                       
  404  06:D539            .makeSecondString:
  405                     
  406  06:D539  AD 05 00    LDA temp6
  407  06:D53C  F0 62       BEQ .leave
  408                       
  409                       ;;loop draw address to next line
  410  06:D53E  AD BD 00    LDA clue_draw_address
  411  06:D541  18          CLC
  412  06:D542  6D 08 00    ADC tempx
  413  06:D545  8D BD 00    STA clue_draw_address
  414  06:D548  AD BE 00    LDA clue_draw_address+1
  415  06:D54B  69 00       ADC #$00
  416  06:D54D  8D BE 00    STA clue_draw_address+1
  417  06:D550  8A          TXA
  418  06:D551  48          PHA
  419                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp6
                          
       06:D552  A9 01       LDA #$01
       06:D554  8D 23 00    STA PPU_PendingWrite
       06:D557  AD BE 00    LDA clue_draw_address+1
       06:D55A  20 13 D1    JSR WriteToPPUString
       06:D55D  AD BD 00    LDA clue_draw_address
       06:D560  20 13 D1    JSR WriteToPPUString
       06:D563  A9 00       LDA #DRAW_HORIZONTAL
       06:D565  20 13 D1    JSR WriteToPPUString
       06:D568  AD 05 00    LDA temp6 
       06:D56B  20 13 D1    JSR WriteToPPUString
                            
  420  06:D56E  68          PLA 
  421  06:D56F  AA          TAX
  422                       
  423  06:D570            .secondStringLoop:
  424                     
  425  06:D570  8A          TXA
  426  06:D571  48          PHA 
  427  06:D572  BD 00 00    LDA temp1, x
  428  06:D575  20 13 D1    JSR WriteToPPUString
  429                       
  430  06:D578  EE C0 00    INC clueLineIndex
  431  06:D57B  AD C0 00    LDA clueLineIndex
  432  06:D57E  CD 07 00    CMP temp8
  433  06:D581  D0 04       BNE .continueSecondLoop
  434                       
  435  06:D583  68          PLA 
  436  06:D584  4C A0 D5    JMP .leave
  437                       
  438  06:D587            .continueSecondLoop:
  439  06:D587  68          PLA
  440  06:D588  AA          TAX
  441  06:D589  E8          INX
  442  06:D58A  E0 04       CPX #$04
  443  06:D58C  D0 E2       BNE .secondStringLoop
  444                       
  445  06:D58E  AD BD 00    LDA clue_draw_address
  446  06:D591  18          CLC
  447  06:D592  6D 05 00    ADC temp6
  448  06:D595  8D BD 00    STA clue_draw_address
  449  06:D598  AD BE 00    LDA clue_draw_address+1
  450  06:D59B  69 00       ADC #$00
  451  06:D59D  8D BE 00    STA clue_draw_address+1
  452                       
  453  06:D5A0            .leave:
  454  06:D5A0  EE BF 00    INC clueTableIndex
  455  06:D5A3  60          RTS
  456                       
  457  06:D5A4            DrawTitle:
  458                     
  459                       ;; title draw address is stored ahead of time, along with title address
  460                       ;; we can use temp1 - 8 to handle this
  461  06:D5A4  A0 00       LDY #$00
  462  06:D5A6  B1 B1       LDA [title_address],y
  463  06:D5A8  4A          LSR A
  464  06:D5A9  8D 09 00    STA tempy
  465                       
  466  06:D5AC  AD B9 00    LDA title_draw_address
  467  06:D5AF  38          SEC 
  468  06:D5B0  ED 09 00    SBC tempy
  469  06:D5B3  8D B9 00    STA title_draw_address
  470  06:D5B6  AD BA 00    LDA title_draw_address+1
  471  06:D5B9  E9 00       SBC #$00
  472  06:D5BB  8D BA 00    STA title_draw_address+1
  473                       
  474                       MACROAddPPUStringEntryTablePtr title_draw_address+1, title_draw_address, #DRAW_HORIZONTAL, title_address
                           
       06:D5BE  A9 01       LDA #$01
       06:D5C0  8D 23 00    STA PPU_PendingWrite
       06:D5C3  AD BA 00    LDA title_draw_address+1
       06:D5C6  20 13 D1    JSR WriteToPPUString
       06:D5C9  AD B9 00    LDA title_draw_address
       06:D5CC  20 13 D1    JSR WriteToPPUString
       06:D5CF  A9 20       LDA #$20
       06:D5D1  09 00       ORA #DRAW_HORIZONTAL
       06:D5D3  20 13 D1    JSR WriteToPPUString
       06:D5D6  AD B1 00    LDA title_address
       06:D5D9  20 13 D1    JSR WriteToPPUString
       06:D5DC  AD B2 00    LDA title_address+1
       06:D5DF  20 13 D1    JSR WriteToPPUString
                           
  475                       
  476  06:D5E2            .leave:
  477  06:D5E2  60          RTS
  478                       
  479  06:D5E3            ApplyGameTimeToPPUString:
  480                     
  481  06:D5E3  8D 00 00    STA temp1
  482  06:D5E6  8E 01 00    STX temp2
  483                     
  484                       MACROAddPPUStringEntryRawData temp1, temp2, #DRAW_HORIZONTAL, #$05
                          
       06:D5E9  A9 01       LDA #$01
       06:D5EB  8D 23 00    STA PPU_PendingWrite
       06:D5EE  AD 00 00    LDA temp1
       06:D5F1  20 13 D1    JSR WriteToPPUString
       06:D5F4  AD 01 00    LDA temp2
       06:D5F7  20 13 D1    JSR WriteToPPUString
       06:D5FA  A9 00       LDA #DRAW_HORIZONTAL
       06:D5FC  20 13 D1    JSR WriteToPPUString
       06:D5FF  A9 05       LDA #$05 
       06:D601  20 13 D1    JSR WriteToPPUString
                            
  485  06:D604  AD 06 70    LDA GameTime+3
  486  06:D607  20 13 D1    JSR WriteToPPUString
  487  06:D60A  AD 05 70    LDA GameTime+2
  488  06:D60D  20 13 D1    JSR WriteToPPUString
  489  06:D610  A9 61       LDA #$61
  490  06:D612  20 13 D1    JSR WriteToPPUString
  491  06:D615  AD 04 70    LDA GameTime+1
  492  06:D618  20 13 D1    JSR WriteToPPUString
  493  06:D61B  AD 03 70    LDA GameTime
  494  06:D61E  20 13 D1    JSR WriteToPPUString
  495                       
  496  06:D621  60          RTS
  497                     
  498  06:D622            ClearLineDefs:
  499                     
  500  06:D622  20 20 20    .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
       06:D625  20 20 20  
       06:D628  20 20 20  
       06:D62B  20 20     
  501  06:D62D  0D 0D 0D    .db $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D
       06:D630  0D 0D 0D  
       06:D633  0D 0D 0D  
       06:D636  0D 0D 0D  
       06:D639  0D 0D 0D  
       06:D63C  0D 0D     
  502  06:D63E  20 20       .db $20, $20
  503                       
  504  06:D640            PuzzleSizes:
  505                       
  506  06:D640  05 0A 0F    .db $05, $0A, $0F
  507                       
  508  06:D643            PuzzleImageSizes:
  509                     
  510                       ;.db $05, $0A, $0F
  511  06:D643  19 64 E1    .db $19, $64, $E1
  512                       
  513  06:D646            ImageDrawWrapOffsets:
  514                     
  515  06:D646  1B 16 11    .db $1B, $16, $11
  516                      
  517  06:D649            ImageTitleLowerHalfPos:
  518                      
  519  06:D649  70 22       .word $2270, $2313, $23B5
       06:D64B  13 23     
       06:D64D  B5 23     
#[1]   Picross.asm
   99                       
  100                       
  101                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  102                     ;;     NMI                  ;;
  103                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  104                     
#[2]   Routines/Common/NMI.asm
  105                       .include "Routines/Common/NMI.asm"
    1                      
    2  06:D64F            NMI:
    3                     
    4  06:D64F  48          PHA                              ;protect the registers
    5  06:D650  8A          TXA
    6  06:D651  48          PHA
    7  06:D652  98          TYA
    8  06:D653  48          PHA
    9                       
   10  06:D654            nmi_started:
   11  06:D654  A9 00       LDA #$00
   12  06:D656  8D 03 20    STA OAM_LO      ; set the low byte (00) of the RAM address
   13  06:D659  A9 02       LDA #$02
   14  06:D65B  8D 14 40    STA OAM_HI       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:D65E  AD 10 00    LDA NMI_locks
   17  06:D661  F0 03       BEQ update_controllers
   18  06:D663  4C D5 D6    JMP WakeUp
   19                     
   20  06:D666            update_controllers:
   21                     
#[3]   Routines/Common/ReadControllers.asm
   22                       .include "Routines/Common/ReadControllers.asm"
    1                     
    2  06:D666  8A            TXA
    3  06:D667  48                PHA
    4  06:D668  98                TYA
    5  06:D669  48                PHA
    6                     
    7  06:D66A  A2 00             LDX #$00
    8                     
    9  06:D66C            GamePadCheck:
   10  06:D66C  A9 01             LDA #$01        ;load 1
   11  06:D66E  8D 16 40          STA $4016       ; turn latch on
   12                             ;STA gamepad2
   13  06:D671  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   14  06:D672  8D 16 40          STA $4016       ;turn latch off
   15                             
   16                             ;do a ring counter technique- load %10000000 into both
   17  06:D675  A9 80             LDA #$80
   18  06:D677  8D 1A 00          STA gamepad
   19                     
   20  06:D67A            ReadControllerABytesLoop:
   21  06:D67A  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   22  06:D67D  29 03             AND #%00000011  ;acc: %00000001 c: 0
   23  06:D67F  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   24                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   25  06:D681  6E 1A 00          ROR gamepad             ;gamepad: %11000000
   26                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   27  06:D684  90 F4             BCC ReadControllerABytesLoop
   28                             
   29                             ;;comapre last to current, find the pressed buttons this frame
   30  06:D686  AD 1B 00          LDA gamepadLast
   31  06:D689  49 FF             EOR #$FF
   32  06:D68B  2D 1A 00          AND gamepad
   33  06:D68E  8D 1C 00          STA gamepadPressed
   34                             
   35                             
   36  06:D691  AD 1A 00          LDA gamepad
   37  06:D694  8D 1B 00          STA gamepadLast
   38                             
   39                             ;return x and y... before resetting them all over again- always good to make sure we're clean
   40  06:D697  68                PLA
   41  06:D698  A8                TAY
   42  06:D699  68                PLA
   43  06:D69A  AA                TAX     
#[2]   Routines/Common/NMI.asm
   23                       
   24  06:D69B  20 50 D0    JSR ProcessPPUString
   25                       
   26                       
   27  06:D69E  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   28  06:D6A0  8D 05 20    STA PPU_SCROLL
   29  06:D6A3  8D 05 20    STA PPU_SCROLL
   30                       
   31                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   32                       ; enable sprites, enable background, no clipping on left side 
   33  06:D6A6  20 6D D1    JSR UpdatePPUControl
   34                     
   35  06:D6A9            NMIUpdate:
   36                     
   37  06:D6A9  20 C9 D6    JSR StateNMIUpdate
   38                       
   39  06:D6AC  AD 1D 00    LDA PPU_Control
   40  06:D6AF  29 FC       AND #$FC
   41  06:D6B1  0D 21 00    ORA PPU_ScrollNT
   42  06:D6B4  8D 00 20    STA PPU_CTRL
   43                       
   44  06:D6B7  AD 1F 00    LDA PPU_ScrollX     ;;tell the ppu there is no background scrolling
   45  06:D6BA  8D 05 20    STA PPU_SCROLL
   46  06:D6BD  AD 20 00    LDA PPU_ScrollY
   47  06:D6C0  8D 05 20    STA PPU_SCROLL
   48                       
   49  06:D6C3  20 7E D7    jsr sound_play_frame 
   50  06:D6C6  4C D5 D6    JMP WakeUp
   51                     
   52  06:D6C9            StateNMIUpdate:
   53                     
   54                       MACROCallDynamicJump game_mode
                          
       06:D6C9  AD 0E 00    LDA game_mode
       06:D6CC  20 91 CF    JSR Dynamic_Jump
                                  
   55                     
   56  06:D6CF            NMIJumpTable:
   57                     
   58  06:D6CF  E0 D6       .word UpdateTitleNMI
   59  06:D6D1  E4 D6       .word UpdateGameNMI
   60  06:D6D3  E5 D6       .word UpdateGameOverNMI
   61                     
   62  06:D6D5            WakeUp:
   63  06:D6D5  A9 00       LDA #$00
   64  06:D6D7  8D 0C 00    STA sleeping
   65                       
   66  06:D6DA  68          PLA             ;restore the registers
   67  06:D6DB  A8          TAY 
   68  06:D6DC  68          PLA
   69  06:D6DD  AA          TAX
   70  06:D6DE  68          PLA
   71                     
   72  06:D6DF  40          RTI             ; return from interrupt
   73                       
#[3]   Routines/NMI_States/UpdateTitleNMI.asm
   74                       .include "Routines/NMI_States/UpdateTitleNMI.asm"
    1  06:D6E0            UpdateTitleNMI:
    2                     
    3                       ;;load bank 0 for BG tiles, so we start with the right tile set
    4                       ;JSR ResetMapper
    5                       ;LDA #$01
    6                       ;JSR LoadCHRBankB
    7                     
    8                     
    9  06:D6E0  20 33 D1    JSR DetectSprite0
   10                     
   11                       ;JSR ResetMapper
   12                       ;LDA #$03
   13                       ;JSR LoadCHRBankB
   14                       
   15                     
   16                        
   17  06:D6E3  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameNMI.asm
   75                       .include "Routines/NMI_States/UpdateGameNMI.asm"
    1  06:D6E4            UpdateGameNMI:
    2  06:D6E4  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameOverNMI.asm
   76                       .include "Routines/NMI_States/UpdateGameOverNMI.asm"
    1  06:D6E5            UpdateGameOverNMI:
    2  06:D6E5  60          RTS
#[2]   Routines/Common/NMI.asm
#[1]   Picross.asm
  106                       
  107                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  108                     ;;    AUDIO                 ;;
  109                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#[2]   External/sound_engine.asm
  110                         .include "External/sound_engine.asm"
    1           0000      SQUARE_1 = $00 ;these are channel constants
    2           0001      SQUARE_2 = $01
    3           0002      TRIANGLE = $02
    4           0003      NOISE = $03
    5                     
    6           0000      MUSIC_SQ1 = $00 ;these are stream # constants
    7           0001      MUSIC_SQ2 = $01 ;stream # is used to index into variables
    8           0002      MUSIC_TRI = $02
    9           0003      MUSIC_NOI = $03
   10           0004      SFX_1     = $04
   11           0005      SFX_2     = $05
   12                     
   13           0300          .rsset $0300 ;sound engine variables will be on the $0300 page of RAM
   14                         
   15           0300      sound_disable_flag  .rs 1   ;a flag variable that keeps track of whether the sound engine is disabled or not. 
   16           0301      sound_temp1 .rs 1           ;temporary variables
   17           0302      sound_temp2 .rs 1
   18           0303      sound_sq1_old .rs 1  ;the last value written to $4003
   19           0304      sound_sq2_old .rs 1  ;the last value written to $4007
   20           0305      soft_apu_ports .rs 16
   21                     
   22                     ;reserve 6 bytes, one for each stream
   23           0315      stream_curr_sound .rs 6     ;current song/sfx loaded
   24           031B      stream_status .rs 6         ;status byte.   bit0: (1: stream enabled; 0: stream disabled)
   25           0321      stream_channel .rs 6        ;what channel is this stream playing on?
   26           0327      stream_ptr_LO .rs 6         ;low byte of pointer to data stream
   27           032D      stream_ptr_HI .rs 6         ;high byte of pointer to data stream
   28           0333      stream_ve .rs 6             ;current volume envelope
   29           0339      stream_ve_index .rs 6       ;current position within the volume envelope
   30           033F      stream_vol_duty .rs 6       ;stream volume/duty settings
   31           0345      stream_note_LO .rs 6        ;low 8 bits of period for the current note on a stream
   32           034B      stream_note_HI .rs 6        ;high 3 bits of period for the current note on a stream 
   33           0351      stream_tempo .rs 6          ;the value to add to our ticker total each frame
   34           0357      stream_ticker_total .rs 6   ;our running ticker total.
   35           035D      stream_note_length_counter .rs 6
   36           0363      stream_note_length .rs 6
   37           0369      stream_loop1 .rs 6          ;loop counter
   38           036F      stream_note_offset .rs 6
   39                         
   40  06:D6E6            sound_init:
   41  06:D6E6  A9 0F         lda #$0F
   42  06:D6E8  8D 15 40      sta $4015   ;enable Square 1, Square 2, Triangle and Noise channels
   43                         
   44  06:D6EB  A9 00         lda #$00
   45  06:D6ED  8D 00 03      sta sound_disable_flag  ;clear disable flag
   46                         ;later, if we have other variables we want to initialize, we will do that here.
   47  06:D6F0  A9 FF         lda #$FF
   48  06:D6F2  8D 03 03      sta sound_sq1_old   ;initializing these to $FF ensures that the first notes of the first song isn't skipped
   49  06:D6F5  8D 04 03      sta sound_sq2_old
   50  06:D6F8            se_silence:
   51  06:D6F8  A9 30         lda #$30
   52  06:D6FA  8D 05 03      sta soft_apu_ports      ;set Square 1 volume to 0
   53  06:D6FD  8D 09 03      sta soft_apu_ports+4    ;set Square 2 volume to 0
   54  06:D700  8D 11 03      sta soft_apu_ports+12   ;set Noise volume to 0
   55  06:D703  A9 80         lda #$80
   56  06:D705  8D 0D 03      sta soft_apu_ports+8     ;silence Triangle
   57                     
   58  06:D708  60            rts
   59                         
   60  06:D709            sound_disable:
   61  06:D709  A9 00         lda #$00
   62  06:D70B  8D 15 40      sta $4015   ;disable all channels
   63  06:D70E  A9 01         lda #$01
   64  06:D710  8D 00 03      sta sound_disable_flag  ;set disable flag
   65  06:D713  60            rts
   66                         
   67                     ;-------------------------------------
   68                     ; load_sound will prepare the sound engine to play a song or sfx.
   69                     ;   input:
   70                     ;       A: song/sfx number to play
   71  06:D714            sound_load:
   72  06:D714  8D 01 03      sta sound_temp1         ;save song number
   73  06:D717  0A            asl a                   ;multiply by 2.  We are indexing into a table of pointers (words)
   74  06:D718  A8            tay
   75  06:D719  B9 52 D9      lda song_headers, y     ;setup the pointer to our song header
   76  06:D71C  8D D2 00      sta sound_ptr
   77  06:D71F  B9 53 D9      lda song_headers+1, y
   78  06:D722  8D D3 00      sta sound_ptr+1
   79                         
   80  06:D725  A0 00         ldy #$00
   81  06:D727  B1 D2         lda [sound_ptr], y      ;read the first byte: # streams
   82  06:D729  8D 02 03      sta sound_temp2         ;store in a temp variable.  We will use this as a loop counter: how many streams to read stream headers for
   83  06:D72C  C8            iny
   84  06:D72D            .loop:
   85  06:D72D  B1 D2         lda [sound_ptr], y      ;stream number
   86  06:D72F  AA            tax                     ;stream number acts as our variable index
   87  06:D730  C8            iny
   88                         
   89  06:D731  B1 D2         lda [sound_ptr], y      ;status byte.  1= enable, 0=disable
   90  06:D733  9D 1B 03      sta stream_status, x
   91  06:D736  F0 39         beq .next_stream        ;if status byte is 0, stream disabled, so we are done
   92  06:D738  C8            iny
   93                         
   94  06:D739  B1 D2         lda [sound_ptr], y      ;channel number
   95  06:D73B  9D 21 03      sta stream_channel, x
   96  06:D73E  C8            iny
   97                         
   98  06:D73F  B1 D2         lda [sound_ptr], y      ;initial duty and volume settings
   99  06:D741  9D 3F 03      sta stream_vol_duty, x
  100  06:D744  C8            iny
  101                         
  102  06:D745  B1 D2         lda [sound_ptr], y
  103  06:D747  9D 33 03      sta stream_ve, x
  104  06:D74A  C8            iny
  105                         
  106  06:D74B  B1 D2         lda [sound_ptr], y      ;pointer to stream data.  Little endian, so low byte first
  107  06:D74D  9D 27 03      sta stream_ptr_LO, x
  108  06:D750  C8            iny
  109                         
  110  06:D751  B1 D2         lda [sound_ptr], y
  111  06:D753  9D 2D 03      sta stream_ptr_HI, x
  112  06:D756  C8            iny
  113                         
  114  06:D757  B1 D2         lda [sound_ptr], y
  115  06:D759  9D 51 03      sta stream_tempo, x
  116                         
  117  06:D75C  A9 A0         lda #$A0
  118  06:D75E  9D 57 03      sta stream_ticker_total, x
  119                         
  120  06:D761  A9 01         lda #$01
  121  06:D763  9D 5D 03      sta stream_note_length_counter,x
  122                         
  123  06:D766  A9 00         lda #$00
  124  06:D768  9D 39 03      sta stream_ve_index, x
  125  06:D76B  9D 69 03      sta stream_loop1, x
  126  06:D76E  9D 6F 03      sta stream_note_offset, x
  127  06:D771            .next_stream:
  128  06:D771  C8            iny
  129                         
  130  06:D772  AD 01 03      lda sound_temp1         ;song number
  131  06:D775  9D 15 03      sta stream_curr_sound, x
  132                         
  133  06:D778  CE 02 03      dec sound_temp2         ;our loop counter
  134  06:D77B  D0 B0         bne .loop
  135  06:D77D  60            rts
  136                     
  137                     ;--------------------------
  138                     ; sound_play_frame advances the sound engine by one frame
  139  06:D77E            sound_play_frame:
  140  06:D77E  AD 00 03      lda sound_disable_flag
  141  06:D781  D0 31         bne .done   ;if disable flag is set, don't advance a frame
  142                     
  143  06:D783  20 F8 D6      jsr se_silence  ;silence all channels.  se_set_apu will set volume later for all channels that are enabled.
  144                                         ;the purpose of this subroutine call is to silence channels that aren't used by any streams.
  145  06:D786  A2 00         ldx #$00
  146  06:D788            .loop:
  147  06:D788  BD 1B 03      lda stream_status, x
  148  06:D78B  29 01         and #$01    ;check whether the stream is active
  149  06:D78D  F0 1D         beq .endloop  ;if the stream isn't active, skip it
  150                         
  151                         ;add the tempo to the ticker total.  If there is a FF-> 0 transition, there is a tick
  152  06:D78F  BD 57 03      lda stream_ticker_total, x
  153  06:D792  18            clc
  154  06:D793  7D 51 03      adc stream_tempo, x
  155  06:D796  9D 57 03      sta stream_ticker_total, x
  156  06:D799  90 0E         bcc .set_buffer    ;carry clear = no tick.  if no tick, we are done with this stream
  157                         
  158  06:D79B  DE 5D 03      dec stream_note_length_counter, x   ;else there is a tick. decrement the note length counter
  159  06:D79E  D0 09         bne .set_buffer    ;if counter is non-zero, our note isn't finished playing yet
  160  06:D7A0  BD 63 03      lda stream_note_length, x   ;else our note is finished. reload the note length counter
  161  06:D7A3  9D 5D 03      sta stream_note_length_counter, x
  162                         
  163  06:D7A6  20 B5 D7      jsr se_fetch_byte   ;read the next byte from the data stream
  164                         
  165  06:D7A9            .set_buffer:
  166  06:D7A9  20 76 D8      jsr se_set_temp_ports   ;copy the current stream's sound data for the current frame into our temporary APU vars (soft_apu_ports)
  167  06:D7AC            .endloop:
  168  06:D7AC  E8            inx
  169  06:D7AD  E0 06         cpx #$06
  170  06:D7AF  D0 D7         bne .loop
  171  06:D7B1  20 ED D8      jsr se_set_apu      ;copy the temporary APU variables (soft_apu_ports) to the real APU ports ($4000, $4001, etc)
  172  06:D7B4            .done:
  173  06:D7B4  60            rts
  174                     
  175                     ;--------------------------
  176                     ; se_fetch_byte reads one byte from a sound data stream and handles it
  177                     ;   input: 
  178                     ;       X: stream number    
  179  06:D7B5            se_fetch_byte:
  180  06:D7B5  BD 27 03      lda stream_ptr_LO, x
  181  06:D7B8  8D D2 00      sta sound_ptr
  182  06:D7BB  BD 2D 03      lda stream_ptr_HI, x
  183  06:D7BE  8D D3 00      sta sound_ptr+1
  184                         
  185  06:D7C1  A0 00         ldy #$00
  186  06:D7C3            .fetch:
  187  06:D7C3  B1 D2         lda [sound_ptr], y
  188  06:D7C5  10 26         bpl .note                ;if < #$80, it's a Note
  189  06:D7C7  C9 A0         cmp #$A0
  190  06:D7C9  90 0C         bcc .note_length         ;else if < #$A0, it's a Note Length
  191  06:D7CB            .opcode:                     ;else it's an opcode
  192                         ;do Opcode stuff
  193  06:D7CB  20 5B D8      jsr se_opcode_launcher
  194  06:D7CE  C8            iny                      ;next position in the data stream
  195  06:D7CF  BD 1B 03      lda stream_status, x
  196  06:D7D2  29 01         and #%00000001
  197  06:D7D4  D0 ED         bne .fetch               ;after our opcode is done, grab another byte unless the stream is disabled
  198  06:D7D6  60            rts                      ; in which case we quit  (explained below)
  199  06:D7D7            .note_length:
  200                         ;do note length stuff
  201  06:D7D7  29 7F         and #%01111111          ;chop off bit7
  202  06:D7D9  8C 01 03      sty sound_temp1         ;save Y because we are about to destroy it
  203  06:D7DC  A8            tay
  204  06:D7DD  B9 B2 DA      lda note_length_table, y    ;get the note length count value
  205  06:D7E0  9D 63 03      sta stream_note_length, x
  206  06:D7E3  9D 5D 03      sta stream_note_length_counter, x   ;stick it in our note length counter
  207  06:D7E6  AC 01 03      ldy sound_temp1         ;restore Y
  208  06:D7E9  C8            iny                     ;set index to next byte in the stream
  209  06:D7EA  4C C3 D7      jmp .fetch              ;fetch another byte
  210  06:D7ED            .note:
  211                         ;do Note stuff
  212  06:D7ED  8D 02 03      sta sound_temp2
  213  06:D7F0  BD 21 03      lda stream_channel, x
  214  06:D7F3  C9 03         cmp #NOISE
  215  06:D7F5  D0 06         bne .not_noise
  216  06:D7F7  20 2F D8      jsr se_do_noise
  217  06:D7FA  4C 1B D8      jmp .reset_ve
  218  06:D7FD            .not_noise:
  219  06:D7FD  AD 02 03      lda sound_temp2
  220  06:D800  8C 01 03      sty sound_temp1     ;save our index into the data stream
  221  06:D803  18            clc
  222  06:D804  7D 6F 03      adc stream_note_offset, x   ;add note offset
  223  06:D807  0A            asl a
  224  06:D808  A8            tay
  225  06:D809  B9 F4 D9      lda note_table, y
  226  06:D80C  9D 45 03      sta stream_note_LO, x
  227  06:D80F  B9 F5 D9      lda note_table+1, y
  228  06:D812  9D 4B 03      sta stream_note_HI, x
  229  06:D815  AC 01 03      ldy sound_temp1     ;restore data stream index
  230                         
  231                         ;check if it's a rest and modify the status flag appropriately
  232  06:D818  20 45 D8      jsr se_check_rest
  233  06:D81B            .reset_ve:    
  234  06:D81B  A9 00         lda #$00
  235  06:D81D  9D 39 03      sta stream_ve_index, x  
  236  06:D820            .update_pointer:
  237  06:D820  C8            iny
  238  06:D821  98            tya
  239  06:D822  18            clc
  240  06:D823  7D 27 03      adc stream_ptr_LO, x
  241  06:D826  9D 27 03      sta stream_ptr_LO, x
  242  06:D829  90 03         bcc .end
  243  06:D82B  FE 2D 03      inc stream_ptr_HI, x
  244  06:D82E            .end:
  245  06:D82E  60            rts
  246                     
  247  06:D82F            se_do_noise:
  248  06:D82F  AD 02 03      lda sound_temp2
  249  06:D832  29 10         and #%00010000
  250  06:D834  F0 08         beq .mode0
  251  06:D836  AD 02 03      lda sound_temp2
  252  06:D839  09 80         ora #%10000000      ;set bit 7 to set mode1
  253  06:D83B  8D 02 03      sta sound_temp2
  254  06:D83E            .mode0:
  255  06:D83E  AD 02 03      lda sound_temp2
  256  06:D841  9D 45 03      sta stream_note_LO, x
  257  06:D844  60            rts
  258                     ;--------------------------------------------------
  259                     ; se_check_rest will read a byte from the data stream and
  260                     ;       determine if it is a rest or not.  It will set or clear the current
  261                     ;       stream's rest flag accordingly.
  262                     ;       input:
  263                     ;           X: stream number
  264                     ;           Y: data stream index
  265  06:D845            se_check_rest:
  266  06:D845  B1 D2         lda [sound_ptr], y  ;read the note byte again
  267  06:D847  C9 5E         cmp #rest
  268  06:D849  D0 07         bne .not_rest
  269  06:D84B  BD 1B 03      lda stream_status, x
  270  06:D84E  09 02         ora #%00000010  ;set the rest bit in the status byte
  271  06:D850  D0 05         bne .store  ;this will always branch.  bne is cheaper than a jmp.
  272  06:D852            .not_rest:
  273  06:D852  BD 1B 03      lda stream_status, x
  274  06:D855  29 FD         and #%11111101  ;clear the rest bit in the status byte
  275  06:D857            .store:
  276  06:D857  9D 1B 03      sta stream_status, x
  277  06:D85A  60            rts
  278                         
  279                     ;-----------------------------------------
  280                     ; se_opcode_launcher will read an address from the opcode jump table and indirect jump there.
  281                     ;    input: A: opcode byte
  282                     ;               Y: data stream position
  283                     ;               X: stream number
  284  06:D85B            se_opcode_launcher:
  285  06:D85B  8C 01 03      sty sound_temp1         ;save y register, because we are about to destroy it
  286  06:D85E  38            sec
  287  06:D85F  E9 A0         sbc #$A0                ;turn our opcode byte into a table index by subtracting $A0
  288  06:D861  0A            asl a                   ;multiply by 2 because we index into a table of addresses (words)
  289  06:D862  A8            tay
  290  06:D863  B9 5E D9      lda sound_opcodes, y    ;get low byte of subroutine address
  291  06:D866  8D D4 00      sta sound_ptr2
  292  06:D869  B9 5F D9      lda sound_opcodes+1, y  ;get high byte
  293  06:D86C  8D D5 00      sta sound_ptr2+1
  294  06:D86F  AC 01 03      ldy sound_temp1         ;restore our y register
  295  06:D872  C8            iny                     ;set to next position in data stream (assume an argument)
  296  06:D873  6C D4 00      jmp [sound_ptr2]           ;indirect jump to our opcode subroutine    
  297                         
  298                     ;----------------------------------------------------
  299                     ; se_set_temp_ports will copy a stream's sound data to the temporary apu variables
  300                     ;      input:
  301                     ;           X: stream number
  302  06:D876            se_set_temp_ports:
  303  06:D876  BD 21 03      lda stream_channel, x
  304  06:D879  0A            asl a
  305  06:D87A  0A            asl a
  306  06:D87B  A8            tay
  307                         
  308  06:D87C  20 91 D8      jsr se_set_stream_volume
  309                         
  310  06:D87F  A9 08         lda #$08
  311  06:D881  99 06 03      sta soft_apu_ports+1, y     ;sweep
  312                         
  313  06:D884  BD 45 03      lda stream_note_LO, x
  314  06:D887  99 07 03      sta soft_apu_ports+2, y     ;period LO
  315                         
  316  06:D88A  BD 4B 03      lda stream_note_HI, x
  317  06:D88D  99 08 03      sta soft_apu_ports+3, y     ;period HI
  318                     
  319  06:D890  60            rts    
  320                     
  321                     ;----------------------------------
  322                     ;    
  323  06:D891            se_set_stream_volume:
  324  06:D891  8C 01 03      sty sound_temp1             ;save our index into soft_apu_ports (we are about to destroy y)
  325                         
  326  06:D894  BD 33 03      lda stream_ve, x            ;which volume envelope?
  327  06:D897  0A            asl a                       ;multiply by 2 because we are indexing into a table of addresses (words)
  328  06:D898  A8            tay
  329  06:D899  B9 C0 DA      lda volume_envelopes, y     ;get the low byte of the address from the pointer table
  330  06:D89C  8D D2 00      sta sound_ptr               ;put it into our pointer variable
  331  06:D89F  B9 C1 DA      lda volume_envelopes+1, y   ;get the high byte of the address
  332  06:D8A2  8D D3 00      sta sound_ptr+1
  333                         
  334  06:D8A5            .read_ve:
  335  06:D8A5  BC 39 03      ldy stream_ve_index, x      ;our current position within the volume envelope.
  336  06:D8A8  B1 D2         lda [sound_ptr], y          ;grab the value.
  337  06:D8AA  C9 FF         cmp #$FF
  338  06:D8AC  D0 06         bne .set_vol                ;if not FF, set the volume
  339  06:D8AE  DE 39 03      dec stream_ve_index, x      ;else if FF, go back one and read again
  340  06:D8B1  4C A5 D8      jmp .read_ve                ;  FF essentially tells us to repeat the last
  341                                                     ;  volume value for the remainder of the note
  342  06:D8B4            .set_vol:
  343  06:D8B4  8D 02 03      sta sound_temp2             ;save our new volume value (about to destroy A)
  344                         
  345  06:D8B7  E0 02         cpx #TRIANGLE               
  346  06:D8B9  D0 09         bne .squares                ;if not triangle channel, go ahead
  347  06:D8BB  AD 02 03      lda sound_temp2
  348  06:D8BE  D0 04         bne .squares                ;else if volume not zero, go ahead (treat same as squares)
  349  06:D8C0  A9 80         lda #$80
  350  06:D8C2  30 08         bmi .store_vol              ;else silence the channel with #$80
  351  06:D8C4            .squares:
  352  06:D8C4  BD 3F 03      lda stream_vol_duty, x      ;get current vol/duty settings
  353  06:D8C7  29 F0         and #$F0                    ;zero out the old volume
  354  06:D8C9  0D 02 03      ora sound_temp2             ;OR our new volume in.
  355                     
  356  06:D8CC            .store_vol:
  357  06:D8CC  AC 01 03      ldy sound_temp1             ;get our index into soft_apu_ports
  358  06:D8CF  99 05 03      sta soft_apu_ports, y       ;store the volume in our temp port
  359  06:D8D2  FE 39 03      inc stream_ve_index, x      ;set our volume envelop index to the next position
  360                     
  361  06:D8D5            .rest_check:
  362                         ;check the rest flag. if set, overwrite volume with silence value 
  363  06:D8D5  BD 1B 03      lda stream_status, x
  364  06:D8D8  29 02         and #%00000010
  365  06:D8DA  F0 10         beq .done                   ;if clear, no rest, so quit
  366  06:D8DC  BD 21 03      lda stream_channel, x
  367  06:D8DF  C9 02         cmp #TRIANGLE               ;if triangle, silence with #$80
  368  06:D8E1  F0 04         beq .tri                    ;else, silence with #$30
  369  06:D8E3  A9 30         lda #$30        
  370  06:D8E5  D0 02         bne .store                  ;this always branches.  bne is cheaper than a jmp
  371  06:D8E7            .tri:
  372  06:D8E7  A9 80         lda #$80
  373  06:D8E9            .store:    
  374  06:D8E9  99 05 03      sta soft_apu_ports, y
  375  06:D8EC            .done:
  376  06:D8EC  60            rts   
  377                         
  378                     ;--------------------------
  379                     ; se_set_apu copies the temporary RAM ports to the APU ports
  380  06:D8ED            se_set_apu:
  381  06:D8ED            .square1:
  382  06:D8ED  AD 05 03      lda soft_apu_ports+0
  383  06:D8F0  8D 00 40      sta $4000
  384  06:D8F3  AD 06 03      lda soft_apu_ports+1
  385  06:D8F6  8D 01 40      sta $4001
  386  06:D8F9  AD 07 03      lda soft_apu_ports+2
  387  06:D8FC  8D 02 40      sta $4002
  388  06:D8FF  AD 08 03      lda soft_apu_ports+3
  389  06:D902  CD 03 03      cmp sound_sq1_old       ;compare to last write
  390  06:D905  F0 06         beq .square2            ;don't write this frame if they were equal
  391  06:D907  8D 03 40      sta $4003
  392  06:D90A  8D 03 03      sta sound_sq1_old       ;save the value we just wrote to $4003
  393  06:D90D            .square2:
  394  06:D90D  AD 09 03      lda soft_apu_ports+4
  395  06:D910  8D 04 40      sta $4004
  396  06:D913  AD 0A 03      lda soft_apu_ports+5
  397  06:D916  8D 05 40      sta $4005
  398  06:D919  AD 0B 03      lda soft_apu_ports+6
  399  06:D91C  8D 06 40      sta $4006
  400  06:D91F  AD 0C 03      lda soft_apu_ports+7
  401  06:D922  CD 04 03      cmp sound_sq2_old
  402  06:D925  F0 06         beq .triangle
  403  06:D927  8D 07 40      sta $4007
  404  06:D92A  8D 04 03      sta sound_sq2_old       ;save the value we just wrote to $4007
  405  06:D92D            .triangle:
  406  06:D92D  AD 0D 03      lda soft_apu_ports+8
  407  06:D930  8D 08 40      sta $4008
  408  06:D933  AD 0F 03      lda soft_apu_ports+10   ;there is no $4009, so we skip it
  409  06:D936  8D 0A 40      sta $400A
  410  06:D939  AD 10 03      lda soft_apu_ports+11
  411  06:D93C  8D 0B 40      sta $400B
  412  06:D93F            .noise:
  413  06:D93F  AD 11 03      lda soft_apu_ports+12
  414  06:D942  8D 0C 40      sta $400C
  415  06:D945  AD 13 03      lda soft_apu_ports+14   ;there is no $400D, so we skip it
  416  06:D948  8D 0E 40      sta $400E
  417  06:D94B  AD 14 03      lda soft_apu_ports+15
  418  06:D94E  8D 0F 40      sta $400F
  419  06:D951  60            rts
  420                         
  421                         
  422           0009      NUM_SONGS = $09 ;if you add a new song, change this number.    
  423                                     ;the main asm file checks this number in its song_up and song_down subroutines
  424                                     ;to determine when to wrap around.
  425                     
  426                     ;this is our pointer table.  Each entry is a pointer to a song header                
  427  06:D952            song_headers:
  428                             
  429  06:D952  44 DB         .word song0_header
  430  06:D954  51 DB             .word bank0_header
  431  06:D956  DF DB             .word menu_header
  432  06:D958  31 DD         .word drawImg_header  ;The Guardian Legend Boss song
  433  06:D95A  B4 DD             .word menuCursor_header
  434  06:D95C  C0 DD             .word puzzleCursor_header
  435                     
  436                         
#[3]   External/sound_opcodes.asm
  437                         .include "External/sound_opcodes.asm"    ;our opcode subroutines, jump table and aliases
    1                     ;these are aliases to use in the sound data.
    2           00A0      endsound = $A0
    3           00A1      loop = $A1
    4           00A2      volume_envelope = $A2
    5           00A3      duty = $A3
    6           00A4      set_loop1_counter = $A4
    7           00A5      loop1 = $A5
    8           00A6      set_note_offset = $A6
    9           00A7      adjust_note_offset = $A7
   10           00A8      transpose = $A8
   11                     
   12                     ;-----------------------------------------------------------------------
   13                     ;this is our JUMP TABLE!
   14  06:D95E            sound_opcodes:
   15  06:D95E  70 D9         .word se_op_endsound            ;$A0
   16  06:D960  89 D9         .word se_op_infinite_loop       ;$A1
   17  06:D962  A0 D9         .word se_op_change_ve           ;$A2
   18  06:D964  AB D9         .word se_op_duty                ;$A3
   19  06:D966  B1 D9         .word se_op_set_loop1_counter   ;$A4
   20  06:D968  B7 D9         .word se_op_loop1               ;$A5
   21  06:D96A  C4 D9         .word se_op_set_note_offset     ;$A6
   22  06:D96C  CA D9         .word se_op_adjust_note_offset  ;$A7
   23  06:D96E  D4 D9         .word se_op_transpose           ;$A8
   24                         ;etc, 1 entry per subroutine
   25                     
   26                         
   27                     ;-----------------------------------------------------------------
   28                     ; these are the actual opcode subroutines
   29  06:D970            se_op_endsound:
   30  06:D970  BD 1B 03      lda stream_status, x    ;end of stream, so disable it and silence
   31  06:D973  29 FE         and #%11111110
   32  06:D975  9D 1B 03      sta stream_status, x    ;clear enable flag in status byte
   33                         
   34  06:D978  BD 21 03      lda stream_channel, x
   35  06:D97B  C9 02         cmp #TRIANGLE
   36  06:D97D  F0 04         beq .silence_tri        ;triangle is silenced differently from squares and noise
   37  06:D97F  A9 30         lda #$30                ;squares and noise silenced with #$30
   38  06:D981  D0 02         bne .silence            ; (this will always branch.  bne is cheaper than a jmp)
   39  06:D983            .silence_tri:
   40  06:D983  A9 80         lda #$80                ;triangle silenced with #$80
   41  06:D985            .silence:
   42  06:D985  9D 3F 03      sta stream_vol_duty, x  ;store silence value in the stream's volume variable.
   43                     
   44  06:D988  60            rts
   45                         
   46  06:D989            se_op_infinite_loop:
   47  06:D989  B1 D2         lda [sound_ptr], y      ;read ptr LO from the data stream
   48  06:D98B  9D 27 03      sta stream_ptr_LO, x    ;update our data stream position
   49  06:D98E  C8            iny
   50  06:D98F  B1 D2         lda [sound_ptr], y      ;read ptr HI from the data stream
   51  06:D991  9D 2D 03      sta stream_ptr_HI, x    ;update our data stream position
   52                         
   53  06:D994  8D D3 00      sta sound_ptr+1         ;update the pointer to reflect the new position.
   54  06:D997  BD 27 03      lda stream_ptr_LO, x
   55  06:D99A  8D D2 00      sta sound_ptr
   56  06:D99D  A0 FF         ldy #$FF                ;after opcodes return, we do an iny.  Since we reset  
   57                                                 ;the stream buffer position, we will want y to start out at 0 again.
   58  06:D99F  60            rts
   59                         
   60  06:D9A0            se_op_change_ve:
   61  06:D9A0  B1 D2         lda [sound_ptr], y      ;read the argument
   62  06:D9A2  9D 33 03      sta stream_ve, x        ;store it in our volume envelope variable
   63  06:D9A5  A9 00         lda #$00
   64  06:D9A7  9D 39 03      sta stream_ve_index, x  ;reset volume envelope index to the beginning
   65  06:D9AA  60            rts
   66                         
   67  06:D9AB            se_op_duty:
   68  06:D9AB  B1 D2         lda [sound_ptr], y
   69  06:D9AD  9D 3F 03      sta stream_vol_duty, x
   70  06:D9B0  60            rts
   71                         
   72  06:D9B1            se_op_set_loop1_counter:
   73  06:D9B1  B1 D2         lda [sound_ptr], y      ;read the argument (# times to loop)
   74  06:D9B3  9D 69 03      sta stream_loop1, x     ;store it in the loop counter variable
   75  06:D9B6  60            rts
   76                         
   77  06:D9B7            se_op_loop1:
   78  06:D9B7  DE 69 03      dec stream_loop1, x     ;decrement the counter
   79  06:D9BA  BD 69 03      lda stream_loop1, x
   80  06:D9BD  F0 03         beq .last_iteration     ;if zero, we are done looping
   81  06:D9BF  4C 89 D9      jmp se_op_infinite_loop ;if not zero, jump back
   82  06:D9C2            .last_iteration:
   83  06:D9C2  C8            iny                     ;skip the first byte of the address argument
   84                                                 ; the second byte will be skipped automatically upon return
   85                                                 ; (see se_fetch_byte after "jsr se_opcode_launcher")
   86  06:D9C3  60            rts
   87                         
   88  06:D9C4            se_op_set_note_offset:
   89  06:D9C4  B1 D2         lda [sound_ptr], y          ;read the argument
   90  06:D9C6  9D 6F 03      sta stream_note_offset, x      ;set the note offset.
   91  06:D9C9  60            rts
   92                         
   93  06:D9CA            se_op_adjust_note_offset:
   94  06:D9CA  B1 D2         lda [sound_ptr], y          ;read the argument (what value to add)
   95  06:D9CC  18            clc
   96  06:D9CD  7D 6F 03      adc stream_note_offset, x   ;add it to the current offset
   97  06:D9D0  9D 6F 03      sta stream_note_offset, x   ;and save.
   98  06:D9D3  60            rts
   99                         
  100  06:D9D4            se_op_transpose:
  101  06:D9D4  B1 D2         lda [sound_ptr], y          ;read low byte of the pointer to our lookup table
  102  06:D9D6  8D D4 00      sta sound_ptr2              ;store it in a new pointer variable
  103  06:D9D9  C8            iny
  104  06:D9DA  B1 D2         lda [sound_ptr], y          ;read high byte of pointer to table
  105  06:D9DC  8D D5 00      sta sound_ptr2+1
  106                         
  107  06:D9DF  8C 01 03      sty sound_temp1             ;save y because we are about to destroy it
  108  06:D9E2  BD 69 03      lda stream_loop1, x         ;get loop counter, put it in Y
  109  06:D9E5  A8            tay                         ;   this will be our index into the lookup table
  110  06:D9E6  88            dey                         ;subtract 1 because indexes start from 0.
  111                         
  112  06:D9E7  B1 D4         lda [sound_ptr2], y         ;read a value from the table.
  113  06:D9E9  18            clc
  114  06:D9EA  7D 6F 03      adc stream_note_offset, x   ;add it to the note offset
  115  06:D9ED  9D 6F 03      sta stream_note_offset, x
  116                         
  117  06:D9F0  AC 01 03      ldy sound_temp1             ;restore Y
  118  06:D9F3  60            rts
#[2]   External/sound_engine.asm
#[3]   External/note_table.i
  438                         .include "External/note_table.i" ;period lookup table for notes
    1                     ;NTSC Period Lookup Table.  Thanks Celius!
    2                     ;http://www.freewebs.com/the_bott/NotesTableNTSC.txt
    3  06:D9F4            note_table:
    4  06:D9F4  F1 07         .word                                                                $07F1, $0780, $0713 ; A1-B1 ($00-$02)
       06:D9F6  80 07     
       06:D9F8  13 07     
    5  06:D9FA  AD 06         .word $06AD, $064D, $05F3, $059D, $054D, $0500, $04B8, $0475, $0435, $03F8, $03BF, $0389 ; C2-B2 ($03-$0E)
       06:D9FC  4D 06     
       06:D9FE  F3 05     
       06:DA00  9D 05     
       06:DA02  4D 05     
       06:DA04  00 05     
       06:DA06  B8 04     
       06:DA08  75 04     
       06:DA0A  35 04     
       06:DA0C  F8 03     
       06:DA0E  BF 03     
       06:DA10  89 03     
    6  06:DA12  56 03         .word $0356, $0326, $02F9, $02CE, $02A6, $027F, $025C, $023A, $021A, $01FB, $01DF, $01C4 ; C3-B3 ($0F-$1A)
       06:DA14  26 03     
       06:DA16  F9 02     
       06:DA18  CE 02     
       06:DA1A  A6 02     
       06:DA1C  7F 02     
       06:DA1E  5C 02     
       06:DA20  3A 02     
       06:DA22  1A 02     
       06:DA24  FB 01     
       06:DA26  DF 01     
       06:DA28  C4 01     
    7  06:DA2A  AB 01         .word $01AB, $0193, $017C, $0167, $0151, $013F, $012D, $011C, $010C, $00FD, $00EF, $00E2 ; C4-B4 ($1B-$26)
       06:DA2C  93 01     
       06:DA2E  7C 01     
       06:DA30  67 01     
       06:DA32  51 01     
       06:DA34  3F 01     
       06:DA36  2D 01     
       06:DA38  1C 01     
       06:DA3A  0C 01     
       06:DA3C  FD 00     
       06:DA3E  EF 00     
       06:DA40  E2 00     
    8  06:DA42  D2 00         .word $00D2, $00C9, $00BD, $00B3, $00A9, $009F, $0096, $008E, $0086, $007E, $0077, $0070 ; C5-B5 ($27-$32)
       06:DA44  C9 00     
       06:DA46  BD 00     
       06:DA48  B3 00     
       06:DA4A  A9 00     
       06:DA4C  9F 00     
       06:DA4E  96 00     
       06:DA50  8E 00     
       06:DA52  86 00     
       06:DA54  7E 00     
       06:DA56  77 00     
       06:DA58  70 00     
    9  06:DA5A  6A 00         .word $006A, $0064, $005E, $0059, $0054, $004F, $004B, $0046, $0042, $003F, $003B, $0038 ; C6-B6 ($33-$3E)
       06:DA5C  64 00     
       06:DA5E  5E 00     
       06:DA60  59 00     
       06:DA62  54 00     
       06:DA64  4F 00     
       06:DA66  4B 00     
       06:DA68  46 00     
       06:DA6A  42 00     
       06:DA6C  3F 00     
       06:DA6E  3B 00     
       06:DA70  38 00     
   10  06:DA72  34 00         .word $0034, $0031, $002F, $002C, $0029, $0027, $0025, $0023, $0021, $001F, $001D, $001B ; C7-B7 ($3F-$4A)
       06:DA74  31 00     
       06:DA76  2F 00     
       06:DA78  2C 00     
       06:DA7A  29 00     
       06:DA7C  27 00     
       06:DA7E  25 00     
       06:DA80  23 00     
       06:DA82  21 00     
       06:DA84  1F 00     
       06:DA86  1D 00     
       06:DA88  1B 00     
   11  06:DA8A  1A 00         .word $001A, $0018, $0017, $0015, $0014, $0013, $0012, $0011, $0010, $000F, $000E, $000D ; C8-B8 ($4B-$56)
       06:DA8C  18 00     
       06:DA8E  17 00     
       06:DA90  15 00     
       06:DA92  14 00     
       06:DA94  13 00     
       06:DA96  12 00     
       06:DA98  11 00     
       06:DA9A  10 00     
       06:DA9C  0F 00     
       06:DA9E  0E 00     
       06:DAA0  0D 00     
   12  06:DAA2  0C 00         .word $000C, $000C, $000B, $000A, $000A, $0009, $0008                                    ; C9-F#9 ($57-$5D)
       06:DAA4  0C 00     
       06:DAA6  0B 00     
       06:DAA8  0A 00     
       06:DAAA  0A 00     
       06:DAAC  09 00     
       06:DAAE  08 00     
   13  06:DAB0  00 00         .word $0000 ;rest
   14                     
   15                     ;Note: octaves in music traditionally start at C, not A    
   16           0000      A1 = $00    ;the "1" means Octave 1
   17           0001      As1 = $01   ;the "s" means "sharp"
   18           0001      Bb1 = $01   ;the "b" means "flat"  A# == Bb, so same value
   19           0002      B1 = $02
   20                     
   21           0003      C2 = $03
   22           0004      Cs2 = $04
   23           0004      Db2 = $04
   24           0005      D2 = $05
   25           0006      Ds2 = $06
   26           0006      Eb2 = $06
   27           0007      E2 = $07
   28           0008      F2 = $08
   29           0009      Fs2 = $09
   30           0009      Gb2 = $09
   31           000A      G2 = $0A
   32           000B      Gs2 = $0B
   33           000B      Ab2 = $0B
   34           000C      A2 = $0C
   35           000D      As2 = $0D
   36           000D      Bb2 = $0D
   37           000E      B2 = $0E
   38                     
   39           000F      C3 = $0F
   40           0010      Cs3 = $10
   41           0010      Db3 = $10
   42           0011      D3 = $11
   43           0012      Ds3 = $12
   44           0012      Eb3 = $12
   45           0013      E3 = $13
   46           0014      F3 = $14
   47           0015      Fs3 = $15
   48           0015      Gb3 = $15
   49           0016      G3 = $16
   50           0017      Gs3 = $17
   51           0017      Ab3 = $17
   52           0018      A3 = $18
   53           0019      As3 = $19
   54           0019      Bb3 = $19
   55           001A      B3 = $1a
   56                     
   57           001B      C4 = $1b
   58           001C      Cs4 = $1c
   59           001C      Db4 = $1c
   60           001D      D4 = $1d
   61           001E      Ds4 = $1e
   62           001E      Eb4 = $1e
   63           001F      E4 = $1f
   64           0020      F4 = $20
   65           0021      Fs4 = $21
   66           0021      Gb4 = $21
   67           0022      G4 = $22
   68           0023      Gs4 = $23
   69           0023      Ab4 = $23
   70           0024      A4 = $24
   71           0025      As4 = $25
   72           0025      Bb4 = $25
   73           0026      B4 = $26
   74                     
   75           0027      C5 = $27
   76           0028      Cs5 = $28
   77           0028      Db5 = $28
   78           0029      D5 = $29
   79           002A      Ds5 = $2a
   80           002A      Eb5 = $2a
   81           002B      E5 = $2b
   82           002C      F5 = $2c
   83           002D      Fs5 = $2d
   84           002D      Gb5 = $2d
   85           002E      G5 = $2e
   86           002F      Gs5 = $2f
   87           002F      Ab5 = $2f
   88           0030      A5 = $30
   89           0031      As5 = $31
   90           0031      Bb5 = $31
   91           0032      B5 = $32
   92                     
   93           0033      C6 = $33
   94           0034      Cs6 = $34
   95           0034      Db6 = $34
   96           0035      D6 = $35
   97           0036      Ds6 = $36
   98           0036      Eb6 = $36
   99           0037      E6 = $37
  100           0038      F6 = $38
  101           0039      Fs6 = $39
  102           0039      Gb6 = $39
  103           003A      G6 = $3a
  104           003B      Gs6 = $3b
  105           003B      Ab6 = $3b
  106           003C      A6 = $3c
  107           003D      As6 = $3d
  108           003D      Bb6 = $3d
  109           003E      B6 = $3e
  110                     
  111           003F      C7 = $3f
  112           0040      Cs7 = $40
  113           0040      Db7 = $40
  114           0041      D7 = $41
  115           0042      Ds7 = $42
  116           0042      Eb7 = $42
  117           0043      E7 = $43
  118           0044      F7 = $44
  119           0045      Fs7 = $45
  120           0045      Gb7 = $45
  121           0046      G7 = $46
  122           0047      Gs7 = $47
  123           0047      Ab7 = $47
  124           0048      A7 = $48
  125           0049      As7 = $49
  126           0049      Bb7 = $49
  127           004A      B7 = $4a
  128                     
  129           004B      C8 = $4b
  130           004C      Cs8 = $4c
  131           004C      Db8 = $4c
  132           004D      D8 = $4d
  133           004E      Ds8 = $4e
  134           004E      Eb8 = $4e
  135           004F      E8 = $4f
  136           0050      F8 = $50
  137           0051      Fs8 = $51
  138           0051      Gb8 = $51
  139           0052      G8 = $52
  140           0053      Gs8 = $53
  141           0053      Ab8 = $53
  142           0054      A8 = $54
  143           0055      As8 = $55
  144           0055      Bb8 = $55
  145           0056      B8 = $56
  146                     
  147           0057      C9 = $57
  148           0058      Cs9 = $58
  149           0058      Db9 = $58
  150           0059      D9 = $59
  151           005A      Ds9 = $5a
  152           005A      Eb9 = $5a
  153           005B      E9 = $5b
  154           005C      F9 = $5c
  155           005D      Fs9 = $5d
  156           005D      Gb9 = $5d
  157                     
  158           005E      rest = $5e
#[2]   External/sound_engine.asm
#[3]   External/note_length_table.i
  439                         .include "External/note_length_table.i"
    1                     ;note length constants (aliases)
    2           0080      thirtysecond = $80
    3           0081      sixteenth = $81
    4           0082      eighth = $82
    5           0083      quarter = $83
    6           0084      half = $84
    7           0085      whole = $85
    8           0086      d_sixteenth = $86
    9           0087      d_eighth = $87
   10           0088      d_quarter = $88
   11           0089      d_half = $89
   12           008A      d_whole = $8A   ;don't forget we are counting in hex
   13           008B      t_quarter = $8B
   14           008C      five_eighths =$8C
   15           008D      five_sixteenths=$8D
   16                     
   17  06:DAB2            note_length_table:
   18  06:DAB2  01            .byte $01   ;32nd note
   19  06:DAB3  02            .byte $02   ;16th note
   20  06:DAB4  04            .byte $04   ;8th note
   21  06:DAB5  08            .byte $08   ;quarter note
   22  06:DAB6  10            .byte $10   ;half note
   23  06:DAB7  20            .byte $20   ;whole note
   24                                   ;---dotted notes
   25  06:DAB8  03            .byte $03   ;dotted 16th note
   26  06:DAB9  06            .byte $06   ;dotted 8th note
   27  06:DABA  0C            .byte $0C   ;dotted quarter note
   28  06:DABB  18            .byte $18   ;dotted half note
   29  06:DABC  30            .byte $30   ;dotted whole note?
   30                                   ;---other
   31  06:DABD  07            .byte $07   ;modified quarter to fit after d_sixteenth triplets
   32  06:DABE  14            .byte $14   ;2 quarters plus an 8th
   33  06:DABF  0A            .byte $0A
#[2]   External/sound_engine.asm
#[3]   External/vol_envelopes.i
  440                         .include "External/vol_envelopes.i"
    1  06:DAC0            volume_envelopes:
    2  06:DAC0  D6 DA         .word se_ve_1
    3  06:DAC2  DE DA         .word se_ve_2
    4  06:DAC4  F5 DA         .word se_ve_3
    5  06:DAC6  0A DB         .word se_ve_tgl_1
    6  06:DAC8  12 DB         .word se_ve_tgl_2
    7  06:DACA  1D DB         .word se_battlekid_loud
    8  06:DACC  23 DB         .word se_battlekid_loud_long
    9  06:DACE  29 DB         .word se_battlekid_soft
   10  06:DAD0  2F DB         .word se_battlekid_soft_long
   11  06:DAD2  35 DB         .word se_drum_decay
   12  06:DAD4  3F DB             .word se_hiHat_decay
   13                         
   14  06:DAD6            se_ve_1:
   15  06:DAD6  0F 0E 0D      .byte $0F, $0E, $0D, $0C, $09, $05, $00
       06:DAD9  0C 09 05  
       06:DADC  00        
   16  06:DADD  FF            .byte $FF
   17  06:DADE            se_ve_2:
   18  06:DADE  01 01 02      .byte $01, $01, $02, $02, $03, $03, $04, $04, $07, $07
       06:DAE1  02 03 03  
       06:DAE4  04 04 07  
       06:DAE7  07        
   19  06:DAE8  08 08 0A      .byte $08, $08, $0A, $0A, $0C, $0C, $0D, $0D, $0E, $0E
       06:DAEB  0A 0C 0C  
       06:DAEE  0D 0D 0E  
       06:DAF1  0E        
   20  06:DAF2  0F 0F         .byte $0F, $0F
   21  06:DAF4  FF            .byte $FF
   22  06:DAF5            se_ve_3:
   23  06:DAF5  0D 0D 0D      .byte $0D, $0D, $0D, $0C, $0B, $00, $00, $00, $00, $00
       06:DAF8  0C 0B 00  
       06:DAFB  00 00 00  
       06:DAFE  00        
   24  06:DAFF  00 00 00      .byte $00, $00, $00, $00, $06, $06, $06, $05, $04, $00
       06:DB02  00 06 06  
       06:DB05  06 05 04  
       06:DB08  00        
   25  06:DB09  FF            .byte $FF
   26                         
   27  06:DB0A            se_ve_tgl_1:
   28  06:DB0A  0F 0B 09      .byte $0F, $0B, $09, $08, $07, $06, $00
       06:DB0D  08 07 06  
       06:DB10  00        
   29  06:DB11  FF            .byte $FF
   30                         
   31  06:DB12            se_ve_tgl_2:
   32  06:DB12  0B 0B 0A      .byte $0B, $0B, $0A, $09, $08, $07, $06, $06, $06, $05
       06:DB15  09 08 07  
       06:DB18  06 06 06  
       06:DB1B  05        
   33  06:DB1C  FF            .byte $FF
   34                         
   35                         
   36  06:DB1D            se_battlekid_loud:
   37  06:DB1D  0F 0E 0C      .byte $0f, $0e, $0c, $0a, $00
       06:DB20  0A 00     
   38  06:DB22  FF            .byte $FF
   39                         
   40  06:DB23            se_battlekid_loud_long:
   41  06:DB23  0F 0E 0C      .byte $0f, $0e, $0c, $0a, $09
       06:DB26  0A 09     
   42  06:DB28  FF            .byte $FF
   43                         
   44  06:DB29            se_battlekid_soft:
   45  06:DB29  09 08 06      .byte $09, $08, $06, $04, $00
       06:DB2C  04 00     
   46  06:DB2E  FF            .byte $FF
   47                         
   48  06:DB2F            se_battlekid_soft_long:
   49  06:DB2F  09 08 06      .byte $09, $08, $06, $04, $03
       06:DB32  04 03     
   50  06:DB34  FF            .byte $FF
   51                         
   52  06:DB35            se_drum_decay:
   53  06:DB35  0E 09 08      .byte $0E, $09, $08, $06, $04, $03, $02, $01, $00
       06:DB38  06 04 03  
       06:DB3B  02 01 00  
   54  06:DB3E  FF            .byte $FF
   55                             
   56  06:DB3F            se_hiHat_decay:
   57  06:DB3F  0E 06 02      .byte $0E, $06, $02, $00
       06:DB42  00        
   58  06:DB43  FF                .byte $FF
   59                         
   60                             
   61           0000      ve_short_staccato = $00
   62           0001      ve_fade_in = $01
   63           0002      ve_blip_echo = $02
   64           0003      ve_tgl_1 = $03
   65           0004      ve_tgl_2 = $04
   66           0005      ve_battlekid_1 = $05
   67           0006      ve_battlekid_1b = $06
   68           0007      ve_battlekid_2 = $07
   69           0008      ve_battlekid_2b = $08
   70           0009      ve_drum_decay = $09
   71           000A      ve_hiHat_decay = $0A
#[2]   External/sound_engine.asm
#[3]   External/song0.i
  441                         .include "External/song0.i"  ;holds the data for song 0 (header and data streams)
    1                     ;silence song.  disables all streams
    2                     
    3  06:DB44            song0_header:
    4  06:DB44  06            .byte 6          ;6 streams
    5                         
    6  06:DB45  00            .byte MUSIC_SQ1
    7  06:DB46  00            .byte $00
    8                         
    9  06:DB47  01            .byte MUSIC_SQ2
   10  06:DB48  00            .byte $00
   11                         
   12  06:DB49  02            .byte MUSIC_TRI
   13  06:DB4A  00            .byte $00
   14                         
   15  06:DB4B  03            .byte MUSIC_NOI
   16  06:DB4C  00            .byte $00
   17                         
   18  06:DB4D  04            .byte SFX_1
   19  06:DB4E  00            .byte $00
   20                         
   21  06:DB4F  05            .byte SFX_2
   22  06:DB50  00            .byte $00
#[2]   External/sound_engine.asm
#[3]   Music/Bank0.i
  442                             .include "Music/Bank0.i"  ;holds the data for song 1
    1  06:DB51            bank0_header:
    2  06:DB51  04            .byte $04           ;4 streams
    3                         
    4  06:DB52  00            .byte MUSIC_SQ1     ;which stream
    5  06:DB53  01            .byte $01           ;status byte (stream enabled)
    6  06:DB54  00            .byte SQUARE_1      ;which channel
    7  06:DB55  70            .byte $70           ;initial duty (01)
    8  06:DB56  03            .byte ve_tgl_1      ;volume envelope
    9  06:DB57  72 DB         .word bank0_square1 ;pointer to stream
   10  06:DB59  3A            .byte $3A           ;tempo
   11                         
   12  06:DB5A  01            .byte MUSIC_SQ2     ;which stream
   13  06:DB5B  01            .byte $01           ;status byte (stream enabled)
   14  06:DB5C  01            .byte SQUARE_2      ;which channel
   15  06:DB5D  70            .byte $70           ;initial duty (10)
   16  06:DB5E  03            .byte ve_tgl_1      ;volume envelope
   17  06:DB5F  77 DB         .word bank0_square2 ;pointer to stream
   18  06:DB61  3A            .byte $3A           ;tempo
   19                         
   20  06:DB62  02            .byte MUSIC_TRI     ;which stream
   21  06:DB63  01            .byte $01           ;status byte (stream enabled)
   22  06:DB64  02            .byte TRIANGLE      ;which channel
   23  06:DB65  80            .byte $80           ;initial volume (on)
   24  06:DB66  03            .byte ve_tgl_1      ;volume envelope
   25  06:DB67  98 DB         .word bank0_tri     ;pointer to stream
   26  06:DB69  3A            .byte $3A           ;tempo
   27                         
   28  06:DB6A  03            .byte MUSIC_NOI     ;which stream
   29  06:DB6B  01            .byte $01           ;enabled
   30  06:DB6C  03            .byte NOISE     
   31  06:DB6D  30            .byte $30           ;initial duty_vol
   32  06:DB6E  0A            .byte ve_hiHat_decay ;volume envelope
   33  06:DB6F  B9 DB         .word bank0_noise   ;pointer to stream
   34  06:DB71  3A            .byte $3A           ;tempo
   35                     
   36                         
   37  06:DB72            bank0_square1:
   38                     
   39  06:DB72  85            .byte whole
   40  06:DB73  5E                .byte rest
   41  06:DB74  A1            .byte loop
   42  06:DB75  72 DB         .word bank0_square1
   43                     
   44  06:DB77            bank0_square2:
   45                     
   46  06:DB77  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       06:DB7A  0C 05     
   47  06:DB7C  82 11             .byte eighth, D3
   48  06:DB7E  81 05             .byte sixteenth, D2
   49  06:DB80  88 0F             .byte d_quarter, C3
   50  06:DB82  81 0A 0C          .byte sixteenth, G2, A2, C3
       06:DB85  0F        
   51  06:DB86  05 0A 0C          .byte D2, G2, A2, D2 
       06:DB89  05        
   52  06:DB8A  82 11             .byte eighth, D3
   53  06:DB8C  81 05             .byte sixteenth, D2
   54  06:DB8E  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       06:DB91  0A 0B     
   55  06:DB93  81 0C             .byte sixteenth, A2
   56  06:DB95  A1            .byte loop
   57  06:DB96  77 DB         .word bank0_square2
   58                         
   59  06:DB98            bank0_tri:
   60                     
   61  06:DB98  81 11 16          .byte sixteenth, D3, G3, A3, D3 
       06:DB9B  18 11     
   62  06:DB9D  82 1D             .byte eighth, D4
   63  06:DB9F  81 11             .byte sixteenth, D3
   64  06:DBA1  88 1B             .byte d_quarter, C4
   65  06:DBA3  81 16 18          .byte sixteenth, G3, A3, C4
       06:DBA6  1B        
   66  06:DBA7  11 16 18          .byte D3, G3, A3, D3 
       06:DBAA  11        
   67  06:DBAB  82 1D             .byte eighth, D4
   68  06:DBAD  81 11             .byte sixteenth, D3
   69  06:DBAF  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       06:DBB2  16 17     
   70  06:DBB4  81 18             .byte sixteenth, A3
   71  06:DBB6  A1            .byte loop
   72  06:DBB7  98 DB         .word bank0_tri
   73                         
   74  06:DBB9            bank0_noise:
   75  06:DBB9  81 04 04      .byte sixteenth, $04, $04, $04, $04
       06:DBBC  04 04     
   76  06:DBBE  A2 09             .byte volume_envelope, ve_drum_decay 
   77  06:DBC0  81 04         .byte sixteenth, $04
   78  06:DBC2  A2 0A             .byte volume_envelope, ve_hiHat_decay
   79  06:DBC4  81 04 04      .byte sixteenth, $04, $04, $04, $04
       06:DBC7  04 04     
   80  06:DBC9  A2 09         .byte volume_envelope, ve_drum_decay 
   81  06:DBCB  81 04         .byte sixteenth, $04
   82  06:DBCD  A2 0A             .byte volume_envelope, ve_hiHat_decay
   83  06:DBCF  81 04 04      .byte sixteenth, $04, $04
   84  06:DBD2  A2 09             .byte volume_envelope, ve_drum_decay 
   85  06:DBD4  81 04         .byte sixteenth, $04
   86  06:DBD6  A2 0A             .byte volume_envelope, ve_hiHat_decay
   87  06:DBD8  81 04 04          .byte sixteenth, $04, $04, $04
       06:DBDB  04        
   88  06:DBDC  A1            .byte loop
   89  06:DBDD  B9 DB         .word bank0_noise
#[2]   External/sound_engine.asm
#[3]   Music/Menu.i
  443                             .include "Music/Menu.i"  ;holds the data for song 1
    1  06:DBDF            menu_header:
    2  06:DBDF  04            .byte $04           ;4 streams
    3                         
    4  06:DBE0  00            .byte MUSIC_SQ1     ;which stream
    5  06:DBE1  01            .byte $01           ;status byte (stream enabled)
    6  06:DBE2  00            .byte SQUARE_1      ;which channel
    7  06:DBE3  70            .byte $70           ;initial duty (01)
    8  06:DBE4  03            .byte ve_tgl_1      ;volume envelope
    9  06:DBE5  00 DC         .word menu_square1 ;pointer to stream
   10  06:DBE7  53            .byte $53           ;tempo
   11                         
   12  06:DBE8  01            .byte MUSIC_SQ2     ;which stream
   13  06:DBE9  01            .byte $01           ;status byte (stream enabled)
   14  06:DBEA  01            .byte SQUARE_2      ;which channel
   15  06:DBEB  B0            .byte $B0           ;initial duty (10)
   16  06:DBEC  04            .byte ve_tgl_2      ;volume envelope
   17  06:DBED  22 DC         .word menu_square2 ;pointer to stream
   18  06:DBEF  53            .byte $53           ;tempo
   19                         
   20  06:DBF0  02            .byte MUSIC_TRI     ;which stream
   21  06:DBF1  01            .byte $01           ;status byte (stream enabled)
   22  06:DBF2  02            .byte TRIANGLE      ;which channel
   23  06:DBF3  80            .byte $80           ;initial volume (on)
   24  06:DBF4  04            .byte ve_tgl_2      ;volume envelope
   25  06:DBF5  A1 DC         .word menu_tri     ;pointer to stream
   26  06:DBF7  53            .byte $53           ;tempo
   27                         
   28  06:DBF8  03            .byte MUSIC_NOI     ;which stream
   29  06:DBF9  01            .byte $01           ;enabled
   30  06:DBFA  03            .byte NOISE     
   31  06:DBFB  30            .byte $30           ;initial duty_vol
   32  06:DBFC  09            .byte ve_drum_decay ;volume envelope
   33  06:DBFD  1E DD         .word menu_noise   ;pointer to stream
   34  06:DBFF  53            .byte $53           ;tempo
   35                     
   36                         
   37  06:DC00            menu_square1:
   38  06:DC00  82            .byte eighth
   39  06:DC01  A4 0E         .byte set_loop1_counter, 14             ;repeat 14 times
   40  06:DC03            .loop:
   41  06:DC03  0C 0C 0C      .byte A2, A2, A2, A3, A2, A3, A2, A3
       06:DC06  18 0C 18  
       06:DC09  0C 18     
   42  06:DC0B  A8            .byte transpose                         ;the transpose opcode take a 2-byte argument
   43  06:DC0C  14 DC         .word .lookup_table                     ;which is the address of the lookup table
   44                         
   45  06:DC0E  A5            .byte loop1                             ;finite loop (14 times)
   46  06:DC0F  03 DC         .word .loop
   47                         
   48  06:DC11  A1            .byte loop                              ;infinite loop
   49  06:DC12  00 DC         .word menu_square1
   50                         
   51  06:DC14            .lookup_table:
   52  06:DC14  02 FF FF      .byte 2, -1, -1, -1, -1, -1, -2
       06:DC17  FF FF FF  
       06:DC1A  FE        
   53  06:DC1B  FF FF 00      .byte -1, -1, 0, -1, 8, -8, 8       ;14 entries long, reverse order
       06:DC1E  FF 08 F8  
       06:DC21  08        
   54                     
   55                     
   56                         
   57  06:DC22            menu_square2:
   58  06:DC22  81            .byte sixteenth
   59  06:DC23  5E            .byte rest    ;offset for delay effect
   60  06:DC24  82            .byte eighth
   61  06:DC25            .loop_point:
   62  06:DC25  5E            .byte rest
   63  06:DC26  24 27 26      .byte A4, C5, B4, C5, A4, C5, B4, C5
       06:DC29  27 24 27  
       06:DC2C  26 27     
   64  06:DC2E  24 27 26      .byte A4, C5, B4, C5, A4, C5, B4, C5
       06:DC31  27 24 27  
       06:DC34  26 27     
   65  06:DC36  24 27 26      .byte A4, C5, B4, C5, A4, C5, B4, C5
       06:DC39  27 24 27  
       06:DC3C  26 27     
   66  06:DC3E  24 27 26      .byte A4, C5, B4, C5, A4, C5, B4, C5
       06:DC41  27 24 27  
       06:DC44  26 27     
   67  06:DC46  23 26 24      .byte Ab4, B4, A4, B4, Ab4, B4, A4, B4
       06:DC49  26 23 26  
       06:DC4C  24 26     
   68  06:DC4E  26 2B 29      .byte B4, E5, D5, E5, B4, E5, D5, E5
       06:DC51  2B 26 2B  
       06:DC54  29 2B     
   69  06:DC56  24 2A 27      .byte A4, Eb5, C5, Eb5, A4, Eb5, C5, Eb5
       06:DC59  2A 24 2A  
       06:DC5C  27 2A     
   70  06:DC5E  24 29 28      .byte A4, D5, Db5, D5, A4, D5, Db5, D5
       06:DC61  29 24 29  
       06:DC64  28 29     
   71  06:DC66  24 27 2C      .byte A4, C5, F5, A5, C6, A5, F5, C5
       06:DC69  30 33 30  
       06:DC6C  2C 27     
   72  06:DC6E  21 26 2A      .byte Gb4, B4, Eb5, Gb5, B5, Gb5, Eb5, B4
       06:DC71  2D 32 2D  
       06:DC74  2A 26     
   73  06:DC76  20 25 29      .byte F4, Bb4, D5, F5, Gs5, F5, D5, As4
       06:DC79  2C 2F 2C  
       06:DC7C  29 25     
   74  06:DC7E  1F 24 28      .byte E4, A4, Cs5, E5, A5, E5, sixteenth, Cs5, rest
       06:DC81  2B 30 2B  
       06:DC84  81 28 5E  
   75  06:DC87  82            .byte eighth
   76  06:DC88  1E 23 27      .byte Ds4, Gs4, C5, Ds5, Gs5, Ds5, C5, Gs4
       06:DC8B  2A 2F 2A  
       06:DC8E  27 23     
   77  06:DC90  81            .byte sixteenth
   78  06:DC91  22 21 22      .byte G4, Fs4, G4, Fs4, G4, Fs4, G4, Fs4
       06:DC94  21 22 21  
       06:DC97  22 21     
   79  06:DC99  82            .byte eighth
   80  06:DC9A  22 26 29      .byte G4, B4, D5, G5
       06:DC9D  2E        
   81  06:DC9E  A1            .byte loop
   82  06:DC9F  25 DC         .word .loop_point
   83                         
   84  06:DCA1            menu_tri:
   85  06:DCA1  82            .byte eighth
   86  06:DCA2  30 33 32      .byte A5, C6, B5, C6, A5, C6, B5, C6 ;triangle data
       06:DCA5  33 30 33  
       06:DCA8  32 33     
   87  06:DCAA  30 33 32      .byte A5, C6, B5, C6, A5, C6, B5, C6
       06:DCAD  33 30 33  
       06:DCB0  32 33     
   88  06:DCB2  30 33 32      .byte A5, C6, B5, C6, A5, C6, B5, C6
       06:DCB5  33 30 33  
       06:DCB8  32 33     
   89  06:DCBA  30 33 32      .byte A5, C6, B5, C6, A5, C6, B5, C6
       06:DCBD  33 30 33  
       06:DCC0  32 33     
   90  06:DCC2  2F 32 30      .byte Ab5, B5, A5, B5, Ab5, B5, A5, B5
       06:DCC5  32 2F 32  
       06:DCC8  30 32     
   91  06:DCCA  32 37 35      .byte B5, E6, D6, E6, B5, E6, D6, E6
       06:DCCD  37 32 37  
       06:DCD0  35 37     
   92  06:DCD2  30 36 33      .byte A5, Eb6, C6, Eb6, A5, Eb6, C6, Eb6
       06:DCD5  36 30 36  
       06:DCD8  33 36     
   93  06:DCDA  30 35 34      .byte A5, D6, Db6, D6, A5, D6, Db6, D6
       06:DCDD  35 30 35  
       06:DCE0  34 35     
   94  06:DCE2  30 33 38      .byte A5, C6, F6, A6, C7, A6, F6, C6
       06:DCE5  3C 3F 3C  
       06:DCE8  38 33     
   95  06:DCEA  2D 32 36      .byte Gb5, B5, Eb6, Gb6, B6, Gb6, Eb6, B5
       06:DCED  39 3E 39  
       06:DCF0  36 32     
   96  06:DCF2  2C 31 35      .byte F5, Bb5, D6, F6, Gs6, F6, D6, As5
       06:DCF5  38 3B 38  
       06:DCF8  35 31     
   97  06:DCFA  2B 30 34      .byte E5, A5, Cs6, E6, A6, E6, Cs6, A5
       06:DCFD  37 3C 37  
       06:DD00  34 30     
   98  06:DD02  2A 2F 33      .byte Ds5, Gs5, C6, Ds6, Gs6, Ds6, C6, Gs5
       06:DD05  36 3B 36  
       06:DD08  33 2F     
   99  06:DD0A  81            .byte sixteenth
  100  06:DD0B  2E 2D 2E      .byte G5, Fs5, G5, Fs5, G5, Fs5, G5, Fs5
       06:DD0E  2D 2E 2D  
       06:DD11  2E 2D     
  101  06:DD13  2E 32 35      .byte G5, B5, D6, G6, B5, D6, B6, D7
       06:DD16  3A 32 35  
       06:DD19  3E 41     
  102  06:DD1B  A1            .byte loop
  103  06:DD1C  A1 DC         .word menu_tri
  104                         
  105  06:DD1E            menu_noise:
  106  06:DD1E  82 04         .byte eighth, $04
  107  06:DD20  81 04 04      .byte sixteenth, $04, $04, $04
       06:DD23  04        
  108  06:DD24  87 04         .byte d_eighth, $04
  109  06:DD26  81 04 04      .byte sixteenth, $04, $04, $04, $04
       06:DD29  04 04     
  110  06:DD2B  82 04 04      .byte eighth, $04, $04
  111  06:DD2E  A1            .byte loop
  112  06:DD2F  1E DD         .word menu_noise
#[2]   External/sound_engine.asm
#[3]   Music/puzzleSolvedDrawImage.i
  444                         .include "Music/puzzleSolvedDrawImage.i"  ;holds the data for song 1
    1  06:DD31            drawImg_header:
    2  06:DD31  04            .byte $04           ;4 streams
    3                         
    4  06:DD32  00            .byte MUSIC_SQ1     ;which stream
    5  06:DD33  01            .byte $01           ;status byte (stream enabled)
    6  06:DD34  00            .byte SQUARE_1      ;which channel
    7  06:DD35  70            .byte $70           ;initial duty (01)
    8  06:DD36  04            .byte ve_tgl_2       ;volume envelope
    9  06:DD37  4C DD         .word drawImg_square1 ;pointer to stream
   10  06:DD39  B9            .byte $B9             ;tempo
   11                         
   12  06:DD3A  01            .byte MUSIC_SQ2     ;which stream
   13  06:DD3B  01            .byte $01           ;status byte (stream enabled)
   14  06:DD3C  01            .byte SQUARE_2      ;which channel
   15  06:DD3D  70            .byte $70           ;initial duty (10)
   16  06:DD3E  04            .byte ve_tgl_2     ;volume envelope
   17  06:DD3F  7C DD         .word drawImg_square2   ;pointer to stream
   18  06:DD41  B9            .byte $B9           ;tempo
   19                         
   20  06:DD42  02            .byte MUSIC_TRI     ;which stream
   21  06:DD43  01            .byte $01           ;status byte (stream enabled)
   22  06:DD44  02            .byte TRIANGLE      ;which channel
   23  06:DD45  80            .byte $80           ;initial volume (on)
   24  06:DD46  04            .byte ve_tgl_2      ;volume envelope
   25  06:DD47  AF DD         .word drawImg_noise     ;pointer to stream
   26  06:DD49  B9            .byte $B9         ;tempo
   27                         
   28  06:DD4A  03            .byte MUSIC_NOI     ;which stream
   29  06:DD4B  00            .byte $00           ;enabled
   30                     
   31                         
   32  06:DD4C            drawImg_square1:
   33  06:DD4C  80            .byte thirtysecond
   34  06:DD4D  5E            .byte rest
   35  06:DD4E  82            .byte eighth
   36  06:DD4F  1B 1D 1F      .byte C4, D4, E4, Fs4, Gs4, As4
       06:DD52  21 23 25  
   37  06:DD55  1D 1F 21      .byte D4, E4, Fs4, Gs4, As4, C5
       06:DD58  23 25 27  
   38  06:DD5B  1F 21 23      .byte E4, Fs4, Gs4, As4, C5, D5
       06:DD5E  25 27 29  
   39  06:DD61  21 23 25      .byte Fs4, Gs4, As4, C5, D5, E5
       06:DD64  27 29 2B  
   40  06:DD67  23 25 27      .byte Gs4, As4, C5, D5, E5, Fs5
       06:DD6A  29 2B 2D  
   41  06:DD6D  25 27 29      .byte As4, C5, D5, E5, Fs5, Gs5
       06:DD70  2B 2D 2F  
   42  06:DD73            .loopPoint:
   43  06:DD73  27 29 2B      .byte C5, D5, E5, Fs5, Gs5, As5
       06:DD76  2D 2F 31  
   44  06:DD79  A1            .byte loop
   45  06:DD7A  73 DD             .word .loopPoint
   46                         
   47                         
   48  06:DD7C            drawImg_square2:
   49  06:DD7C  82            .byte eighth
   50  06:DD7D  1B 1D 1F      .byte C4, D4, E4, Fs4, Gs4, As4
       06:DD80  21 23 25  
   51  06:DD83  1D 1F 21      .byte D4, E4, Fs4, Gs4, As4, C5
       06:DD86  23 25 27  
   52  06:DD89  1F 21 23      .byte E4, Fs4, Gs4, As4, C5, D5
       06:DD8C  25 27 29  
   53  06:DD8F  21 23 25      .byte Fs4, Gs4, As4, C5, D5, E5
       06:DD92  27 29 2B  
   54  06:DD95  23 25 27      .byte Gs4, As4, C5, D5, E5, Fs5
       06:DD98  29 2B 2D  
   55  06:DD9B  25 27 29      .byte As4, C5, D5, E5, Fs5, Gs5
       06:DD9E  2B 2D 2F  
   56  06:DDA1            .loopPoint:
   57  06:DDA1  27 29 2B      .byte C5, D5, E5, Fs5, Gs5, As5
       06:DDA4  2D 2F 31  
   58  06:DDA7  A1            .byte loop
   59  06:DDA8  A1 DD         .word .loopPoint
   60                         
   61  06:DDAA            drawImg_tri:
   62                     
   63  06:DDAA  85            .byte whole
   64  06:DDAB  5E                .byte rest
   65  06:DDAC  A1            .byte loop
   66  06:DDAD  AA DD         .word drawImg_tri
   67                         
   68  06:DDAF            drawImg_noise:
   69                     
   70  06:DDAF  85            .byte whole
   71  06:DDB0  5E                .byte rest
   72  06:DDB1  A1            .byte loop
   73  06:DDB2  AF DD         .word drawImg_noise
#[2]   External/sound_engine.asm
#[3]   SFX/menuCursor.i
  445                             .include "SFX/menuCursor.i"  ;holds the data for song 1
    1  06:DDB4            menuCursor_header:
    2  06:DDB4  01            .byte $01           ;1 stream
    3                         
    4  06:DDB5  04            .byte SFX_1         ;which stream
    5  06:DDB6  01            .byte $01           ;status byte (stream enabled)
    6  06:DDB7  01            .byte SQUARE_2      ;which channel
    7  06:DDB8  70            .byte $70           ;duty (01)
    8  06:DDB9  0A            .byte ve_hiHat_decay  ;volume envelope
    9  06:DDBA  BD DD         .word menuCursor_square2 ;pointer to stream
   10  06:DDBC  80            .byte $80           ;tempo
   11                         
   12                         
   13  06:DDBD            menuCursor_square2:
   14  06:DDBD  81 33         .byte sixteenth, C6
   15  06:DDBF  A0            .byte endsound
#[2]   External/sound_engine.asm
#[3]   SFX/puzzleCursor.i
  446                             .include "SFX/puzzleCursor.i"  ;holds the data for song 1
    1  06:DDC0            puzzleCursor_header:
    2  06:DDC0  01            .byte $01           ;1 stream
    3                         
    4  06:DDC1  04            .byte SFX_1         ;which stream
    5  06:DDC2  01            .byte $01           ;status byte (stream enabled)
    6  06:DDC3  02            .byte TRIANGLE      ;which channel
    7  06:DDC4  80            .byte $80           ;on
    8  06:DDC5  0A            .byte ve_hiHat_decay  ;volume envelope
    9  06:DDC6  C9 DD         .word puzzleCursor_square2 ;pointer to stream
   10  06:DDC8  80            .byte $80           ;tempo
   11                         
   12                         
   13  06:DDC9            puzzleCursor_square2:
   14  06:DDC9  81 33         .byte sixteenth, C6
   15  06:DDCB  A0            .byte endsound
#[2]   External/sound_engine.asm
#[1]   Picross.asm
  111                     ;;**************************;;
  112                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  113                     ;;       PRG ROM DATA       ;;
  114                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  115                     ;;**************************;; 
  116                       
  117           0007        .bank 7
  118           E000        .org $E000
  119                     
#[2]   NameTables/Tables.asm
  120                       .include "NameTables/Tables.asm"
    1  07:E000            Palettes:
    2                     
    3  07:E000  1C E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E002  3C E0     
       07:E004  5C E0     
    4                     
    5  07:E006            NameTables:
    6                     
    7  07:E006  12 E0       .word Title_Screens, Game_Screens, GameOver_Screens
       07:E008  14 E0     
       07:E00A  1A E0     
    8                       
    9  07:E00C            NameTables2:
   10                     
   11  07:E00C  7C E4       .word Title_Second, Blank_Screen, Blank_Screen
       07:E00E  7C F8     
       07:E010  7C F8     
   12                       
   13  07:E012            Title_Screens:
   14                     
   15  07:E012  7C E0       .word Title_Screen
   16                       
   17  07:E014            Game_Screens:
   18                     
   19  07:E014  7C E8       .word Game_5, Game_10, Game_15
       07:E016  7C EC     
       07:E018  7C F0     
   20                       
   21  07:E01A            GameOver_Screens:
   22                     
   23  07:E01A  7C F4       .word GameOver_Screen
   24                     
   25  07:E01C            Title_Palette:
   26                     
   27  07:E01C              .incbin "NameTables/Title_PAL.pal"
   28  07:E02C              .incbin "NameTables/Title_PAL.pal"
   29                       
   30  07:E03C            Game_Palette:
   31                     
   32  07:E03C              .incbin "NameTables/Game_PAL.pal"
   33  07:E04C              .incbin "NameTables/Game_PAL.pal"
   34                       
   35  07:E05C            GameOver_Palette:
   36                     
   37  07:E05C              .incbin "NameTables/GameOver_PAL.pal"
   38  07:E06C              .incbin "NameTables/GameOver_PAL.pal"
   39                       
   40  07:E07C            Title_Screen:
   41                     
   42  07:E07C              .incbin "NameTables/Title_NT.nam"
   43                       
   44  07:E47C            Title_Second:
   45                     
   46  07:E47C              .incbin "NameTables/Title_PuzzMen_NT.nam"
   47                       
   48  07:E87C            Game_5: 
   49                     
   50  07:E87C              .incbin "NameTables/Game_NT_5.nam"
   51                       
   52  07:EC7C            Game_10:
   53  07:EC7C              .incbin "NameTables/Game_NT_10.nam"
   54                       
   55  07:F07C            Game_15:
   56  07:F07C              .incbin "NameTables/Game_NT.nam"
   57                       
   58  07:F47C            GameOver_Screen:
   59                     
   60  07:F47C              .incbin "NameTables/GameOver_NT.nam"
   61                       
   62  07:F87C            Blank_Screen:
   63                     
   64  07:F87C              .incbin "NameTables/Blank_NT.nam"
   65                     
   66  07:FC7C            Pause_Menu:
   67  07:FC7C  28 2A 2A    .db $28,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$29
       07:FC7F  2A 2A 2A  
       07:FC82  2A 2A 2A  
       07:FC85  2A 2A 2A  
       07:FC88  29        
   68  07:FC89  2B 24 1C    .db $2b,$24,$1c,$0a,$1f,$0e,$62,$0e,$21,$12,$1d,$24,$3b
       07:FC8C  0A 1F 0E  
       07:FC8F  62 0E 21  
       07:FC92  12 1D 24  
       07:FC95  3B        
   69  07:FC96  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FC99  24 24 24  
       07:FC9C  24 24 24  
       07:FC9F  24 24 24  
       07:FCA2  3B        
   70  07:FCA3  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FCA6  24 24 24  
       07:FCA9  24 24 24  
       07:FCAC  24 24 24  
       07:FCAF  3B        
   71  07:FCB0  2B 24 24    .db $2b,$24,$24,$22,$0e,$1c,$24,$24,$17,$18,$24,$24,$3b
       07:FCB3  22 0E 1C  
       07:FCB6  24 24 17  
       07:FCB9  18 24 24  
       07:FCBC  3B        
   72  07:FCBD  38 3A 3A    .db $38,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$39
       07:FCC0  3A 3A 3A  
       07:FCC3  3A 3A 3A  
       07:FCC6  3A 3A 3A  
       07:FCC9  39        
   73                     
   74  07:FCCA            EndScreens:
   75                     
   76  07:FCCA  CE FC       .word PuzzleClearLines, PuzzleSavedLines
       07:FCCC  FD FC     
   77                       
   78  07:FCCE            PuzzleClearLines:
   79                     
   80  07:FCCE  EA 20       .db $EA, $20
   81  07:FCD0  0D 19 1E    .db $0D, $19,$1e,$23,$23,$15,$0e,$24,$0c,$15,$0e,$0a,$1b,$64
       07:FCD3  23 23 15  
       07:FCD6  0E 24 0C  
       07:FCD9  15 0E 0A  
       07:FCDC  1B 64     
   82  07:FCDE  07 1D 12    .db $07, $1d,$12,$16,$0e,$61,$24,$24 ;print the time here as a separate call, similar to how it's printed in update game at 2131
       07:FCE1  16 0E 61  
       07:FCE4  24 24     
   83  07:FCE6  0C 17 0E    .db $0C, $17,$0e,$21,$1d,$24,$19,$1e,$23,$23,$15,$0e,$63
       07:FCE9  21 1D 24  
       07:FCEC  19 1E 23  
       07:FCEF  23 15 0E  
       07:FCF2  63        
   84  07:FCF3  09 24 24    .db $09, $24,$24,$22,$0e,$1c,$24,$24,$17,$18
       07:FCF6  22 0E 1C  
       07:FCF9  24 24 17  
       07:FCFC  18        
   85                     
   86  07:FCFD            PuzzleSavedLines:
   87                       
   88  07:FCFD  2A 21       .db $2A, $21 
   89  07:FCFF  0D 19 1E    .db $0D, $19,$1e,$23,$23,$15,$0e,$24,$1c,$0a,$1f,$0e,$0d,$64
       07:FD02  23 23 15  
       07:FD05  0E 24 1C  
       07:FD08  0A 1F 0E  
       07:FD0B  0D 64     
   90                       
   91  07:FD0D            SelectDefaultName:
   92                      
   93  07:FD0D  47 26       .db $47, $26 
   94  07:FD0F  10 63 63    .db $10, $63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63
       07:FD12  63 63 63  
       07:FD15  63 63 63  
       07:FD18  63 63 63  
       07:FD1B  63 63 63  
       07:FD1E  63 63     
   95                     
   96  07:FD20            SelectDefaultTime:
   97                     
   98  07:FD20  8F 26       .db $8F, $26 
   99  07:FD22            DefaultTimeString:
  100  07:FD22  05 60 60    .db $05, $60,$60,$61,$60,$60
       07:FD25  61 60 60  
  101                     
  102                     
  103                      
  104                             
#[1]   Picross.asm
#[2]   Sprites/Sprites.asm
  121                       .include "Sprites/Sprites.asm"
    1                     
    2                     ;;Byte0
    3                     ;;Y position of top of sprite
    4                     ;;Sprite data is delayed by one scanline; 
    5                     ;;you must subtract 1 from the sprite's 
    6                     ;;Y coordinate before writing it here. 
    7                     ;;Hide a sprite by moving it down offscreen, 
    8                     ;;by writing any values between #$EF-#$FF here. 
    9                     ;;Sprites are never displayed on the first line of the picture, 
   10                     ;;and it is impossible to place a sprite partially off the top of the screen.
   11                     
   12                     ;;Byte 1
   13                     ;;Tile index number
   14                     ;;For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of PPUCTRL ($2000).
   15                     ;;For 8x16 sprites (bit 5 of PPUCTRL set), the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
   16                     ;;76543210
   17                     ;;||||||||
   18                     ;;|||||||+- Bank ($0000 or $1000) of tiles
   19                     ;;+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
   20                     
   21                     ;;Byte 2
   22                     ;;Attributes
   23                     ;;76543210
   24                     ;;||||||||
   25                     ;;||||||++- Palette (4 to 7) of sprite
   26                     ;;|||+++--- Unimplemented (read 0)
   27                     ;;||+------ Priority (0: in front of background; 1: behind background)
   28                     ;;|+------- Flip sprite horizontally
   29                     ;;+-------- Flip sprite vertically
   30                     
   31                     ;;Byte 3
   32                     ;;X position of left side of sprite.
   33                     ;;X-scroll values of $F9-FF results in parts of the 
   34                     ;;sprite to be past the right edge of the screen, thus invisible.
   35                     ;;It is not possible to have a sprite partially visible on the left edge. 
   36                     ;;Instead, left-clipping through PPUMASK ($2001) can be used to simulate this effect.
   37  07:FD28            Sprites:
   38  07:FD28  2E FD             .word Title_Sprites, Game_Sprites, GameOver_Sprites
       07:FD2A  37 FD     
       07:FD2C  40 FD     
   39                     
   40  07:FD2E            Title_Sprites:
   41  07:FD2E  02            .db $02
   42  07:FD2F  85 00 00          .db $85,$00,$00,$E8
       07:FD32  E8        
   43  07:FD33  A0 01 00          .db $A0,$01,$00,$60
       07:FD36  60        
   44  07:FD37            Game_Sprites:
   45  07:FD37  02            .db $02
   46  07:FD38  62 02 03          .db $62,$02,$03,$72
       07:FD3B  72        
   47  07:FD3C  5F FF 00          .db $5F,$FF,$00,$60
       07:FD3F  60        
   48  07:FD40            GameOver_Sprites:
   49  07:FD40  01                .db $01
   50  07:FD41  67 FF 00          .db $67,$FF,$00,$58
       07:FD44  58        
#[1]   Picross.asm
  122                     
  123           FFFA        .org $FFFA     ;first of the three vectors starts here
  124  07:FFFA  4F D6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  125                                        ;processor will jump to the label NMI:
  126  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  127                                        ;to the label RESET:
  128  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  129                       
  130                     ;;**************************;;
  131                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  132                     ;;      CHR ROM DATA        ;;
  133                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  134                     ;;**************************;; 
  135                       
  136           0008        .bank 8
  137           0000        .org $0000
  138  08:0000              .incbin "CHRROM/Bank0.chr"   ;includes 8KB graphics file from SMB1
  139                       
  140           0009        .bank 9
  141           0000        .org $0000
  142  09:0000              .incbin "CHRROM/Bank1.chr"
  143                       
  144           000A        .bank 10
  145           0000        .org $0000
  146  0A:0000              .incbin "CHRROM/Bank2.chr"
  147                       
  148           000B        .bank 11
  149           0000        .org $0000
  150  0B:0000              .incbin "CHRROM/Bank3.chr"
