#[1]   Picross.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/Defines.asm
   14                       .include "Defines/Defines.asm"
    1                     ;; define 0 page stuff here, and SRAM stuff if we have it
    2                     
    3           0000        .rsset $0000
#[3]   Defines/GeneralVars.asm
    4                       .include "Defines/GeneralVars.asm"
    1           0000      temp1                   .rs 1
    2           0001      temp2                   .rs 1
    3           0002      temp3                   .rs 1
    4           0003      temp4                   .rs 1
    5           0004      tempx                   .rs 1
    6           0005      tempy                   .rs 1
    7           0006      time                    .rs 1
    8           0007      sleeping                .rs 1
    9           0008      game_mode               .rs 1
   10           0009      mode_state              .rs 1
   11           000A      NMI_locks               .rs 1
   12           000B      game_locks              .rs 1
   13           000C      pointer_address .rs 2
   14           000E      table_address   .rs 2
   15           0010      jump_address    .rs 2
   16                     
   17                     ;game modes
   18           0000      TITLE_IDX = $00
   19           0001      GAME_IDX = $01
   20           0002      GAMEOVER_IDX = $02
   21                     
   22                     ;locks for input and rendering
   23           0001      BGLOAD_NMI_LOCK = %00000001
   24           0001      EFFECT_GAME_LOCK = %00000001
   25                     
   26                     
   27                     
#[2]   Defines/Defines.asm
#[3]   Defines/ControllerVars.asm
    5                       .include "Defines/ControllerVars.asm"
    1           0010      GAMEPAD_UP = $10
    2           0020      GAMEPAD_DOWN = $20
    3           0040      GAMEPAD_LEFT = $40
    4           0080      GAMEPAD_RIGHT = $80
    5           0001      GAMEPAD_A = $01
    6           0002      GAMEPAD_B = $02
    7           0004      GAMEPAD_SELECT = $04
    8           0008      GAMEPAD_START = $08
    9                     
   10           00C0      GAMEPAD_HORI = $C0
   11           0030      GAMEBAD_VERT = $30
   12           00F0      GAMEPAD_MOVE = $F0
   13                     
   14           0003      GAMEPAD_AB = $03
   15                     
   16           0012      gamepad                 .rs 1
   17           0013      gamepadLast     .rs 1
   18           0014      gamepadPressed  .rs 1
#[2]   Defines/Defines.asm
#[3]   Defines/PPUVariables.asm
    6                       .include "Defines/PPUVariables.asm"
    1           0015      PPU_Control                     .rs 1
    2           0016      PPU_Mask                        .rs 1
    3           0017      PPU_ScrollX                     .rs 1
    4           0018      PPU_ScrollY                     .rs 1
    5           0019      PPU_ScrollNT            .rs 1   ;first two bits
    6           001A      PPU_NT                          .rs 1
    7                     
    8           001B      PPU_PendingWrite        .rs 1
    9           001C      PPU_StringIdx           .rs 1
   10           001D      PPU_String                      .rs 32
   11                     
   12           0020      PPU_STRINGMAX = $20 ;up to size of a full nametable, I think
   13                     
   14           0000      SPRITE_YPOS = $00
   15           0003      SPRITE_XPOS = $03
   16           0200      SPRITE_DATA = $0200
   17                     
   18           2000      PPU_CTRL = $2000
   19           2001      PPU_MASK = $2001
   20           2002      PPU_STATUS = $2002
   21           2003      OAM_LO = $2003
   22           2004      OAM_DATA = $2004
   23           2005      PPU_SCROLL = $2005
   24           2006      PPU_ADDR = $2006
   25           2007      PPU_DATA = $2007
   26           4014      OAM_HI = $4014
   27                     
   28           0080      DRAW_VERTICAL = $80
   29           0000      DRAW_HORIZONTAL = $00
   30                     
   31           0040      SPRITE_0_MASK = %01000000
#[2]   Defines/Defines.asm
#[3]   Defines/MapperVars.asm
    7                       .include "Defines/MapperVars.asm"
    1           003D      mapper_address  .rs 2
    2           003F      currentCHRBankA .rs 1
    3           0040      currentCHRBankB .rs 1
    4           0041      currentPRGBank  .rs 1
    5           0042      mapperDebugVar  .rs 1
    6                     
    7                     
#[2]   Defines/Defines.asm
#[3]   Defines/GameVariables.asm
    8                       .include "Defines/GameVariables.asm"
    1           0043      puzzle_address          .rs 2
    2           0045      clues_address           .rs 2
    3           0047      clue_start_address      .rs 2
    4           0049      clue_draw_address       .rs 2
    5           004B      clueTableIndex          .rs 1
    6           004C      clueLineIndex           .rs 1
    7           004D      clueOffsetShift         .rs 1
    8           004E      clueDrawOffset          .rs 2
    9           0050      clueDrawAdd                     .rs 1
   10           0051      clueDrawDecSize         .rs 1
   11           0052      clueParity                      .rs 1
   12           0053      mouse_location          .rs 2
   13           0055      mouse_index                     .rs 2
   14           0057      currentPaintTile        .rs 1
   15           0058      solutionCount           .rs 1
   16           0059      nonSolutionCount        .rs 1
   17                     
#[2]   Defines/Defines.asm
    9                     ;; 0100 is the stack
   10                     ;; 0200 is sprite ram
   11           0300        .rsset $0300
   12           0400        .rsset $0400
   13           0500        .rsset $0500
   14           0600        .rsset $0600
   15           0700        .rsset $0700
   16           6000        .rsset $6000
#[3]   Defines/SaveVariables.asm
   17                       .include "Defines/SaveVariables.asm"
    1                     
#[2]   Defines/Defines.asm
#[3]   Defines/ScreenStateVariables.asm
   18                       .include "Defines/ScreenStateVariables.asm"
    1           6000      Screen_Copy             .rs 1024
    2           6400      ScreenB_Copy    .rs 1024
    3           6800      Palette_Copy    .rs 32
#[2]   Defines/Defines.asm
   19                     
#[1]   Picross.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/PPUMacros.asm
    3                             .include "Macros/PPUMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetPPUControl .macro
    6                     
    7                       LDA #\1  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    8                       STA PPU_CTRL
    9                       LDA #\2   ; enable sprites, enable background, no clipping on left side
   10                       STA PPU_MASK
   11                             
   12                       .endm
   13                       
   14                     MACROSetPPUAddress .macro
   15                     
   16                       LDA PPU_STATUS             ; read PPU status to reset the high/low latch
   17                       LDA #HIGH(\1)
   18                       STA PPU_ADDR            ; write the high byte of $2000 address
   19                       LDA #LOW(\1)
   20                       STA PPU_ADDR           ; write the low byte of $2000 address
   21                       
   22                       .endm
   23                         
   24                     
   25                     MACROAddPPUStringEntryRawData .macro
   26                     
   27                       LDA #$01
   28                       STA PPU_PendingWrite
   29                       LDA \1
   30                       JSR WriteToPPUString
   31                       LDA \2
   32                       JSR WriteToPPUString
   33                       LDA \3
   34                       JSR WriteToPPUString
   35                       LDA \4
   36                       JSR WriteToPPUString
   37                       
   38                       .endm
   39                       
   40                     MACROAddPPUStringEntryTable .macro
   41                      
   42                       LDA #$01
   43                       STA PPU_PendingWrite
   44                       LDA \1
   45                       JSR WriteToPPUString
   46                       LDA \2
   47                       JSR WriteToPPUString
   48                       LDA #$40
   49                       ORA \3
   50                       JSR WriteToPPUString
   51                       LDA #LOW(\4)
   52                       JSR WriteToPPUString
   53                       LDA #HIGH(\4)
   54                       JSR WriteToPPUString
   55                      
   56                       .endm
   57                     
   58                     
#[2]   Macros/Macros.asm
#[3]   Macros/CallDynamicJump.asm
    4                             .include "Macros/CallDynamicJump.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROCallDynamicJump .macro
    6                     
    7                       LDA \1
    8                       JSR Dynamic_Jump
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetDoubleIndex.asm
    5                             .include "Macros/GetDoubleIndex.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = index to double
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROGetDoubleIndex .macro
    5                     
    6                             LDA \1
    7                             ASL A
    8                             TAY
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetLabelPointer.asm
    6                             .include "Macros/GetLabelPointer.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label we want address of
    3                     ;; \2 = address to store address to
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROGetLabelPointer .macro
    6                     
    7                             LDA #HIGH(\1)
    8                             LDX #LOW(\1)
    9                             
   10                             STX \2
   11                             STA \2+1
   12                             
   13                       .endm
   14                       
   15                     MACROGetPointer .macro
   16                     
   17                             LDA \1
   18                             STA \2
   19                             LDA \1+1
   20                             STA \2+1
   21                     
   22                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/FlagMacros.asm
    7                             .include "Macros/FlagMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetFlags .macro
    6                     
    7                       LDA \1
    8                       ORA #\2
    9                       STA \1
   10                             
   11                       .endm
   12                       
   13                     MACROClearFlags .macro
   14                     
   15                       LDA #\2
   16                       EOR #$FF
   17                       AND \1  
   18                       STA \1
   19                     
   20                       .endm
#[2]   Macros/Macros.asm
#[1]   Picross.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1           0000        .bank 0
    2           8000        .org $8000
    3                       
#[3]   Puzzles/cat.asm
    4                       .include "Puzzles/cat.asm"
    1  00:8000            cat:
    2  00:8000  03 7E 00    .db $03, $7E, $00, $0A
       00:8003  0A        
    3  00:8004  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $47, $C4, $7B, $BC, $7F, $FC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       00:8007  60 1E F0  
       00:800A  3E F8 3F  
       00:800D  F8 7F FC  
       00:8010  7F FC 47  
       00:8013  C4 7B BC  
       00:8016  7F FC 7C  
       00:8019  7C 76 DC  
       00:801C  39 38 1F  
       00:801F  F0 00 00  
    4  00:8022  00 FF 70    .db $00, $FF, $70, $FF, $54, $FF, $65, $FF, $23, $60, $FF, $13, $70, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $70, $FF, $23, $60, $FF, $65, $FF, $54, $FF, $70, $FF, $00, $FF
       00:8025  FF 54 FF  
       00:8028  65 FF 23  
       00:802B  60 FF 13  
       00:802E  70 FF 11  
       00:8031  80 FF 26  
       00:8034  FF 11 80  
       00:8037  FF 13 70  
       00:803A  FF 23 60  
       00:803D  FF 65 FF  
       00:8040  54 FF 70  
       00:8043  FF 00 FF  
    5  00:8046  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $15, $10, $FF, $43, $40, $FF, $D0, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       00:8049  FF 44 FF  
       00:804C  55 FF B0  
       00:804F  FF D0 FF  
       00:8052  D0 FF 15  
       00:8055  10 FF 43  
       00:8058  40 FF D0  
       00:805B  FF 55 FF  
       00:805E  32 23 FF  
       00:8061  31 30 FF  
       00:8064  90 FF 00  
       00:8067  FF        
    6  00:8068            catImage:
    7  00:8068  55 55 55   .db $55, $55, $55, $55, $56, $95, $A5, $55, $6A, $9A, $A5, $56, $AA, $6A, $A5, $5A, $AA, $AA, $95, $AA, $66, $6A, $96, $AA, $9A, $AA, $58, $0A, $E8, $09, $6A, $8F, $CA, $A5, $9A, $FF, $E9, $96, $AF, $57, $EA, $59, $CF, $7C, $D9, $5F, $C3, $0F, $D5, $5F, $FF, $FD, $55, $55, $55, $55, $04, $FF
       00:806B  55 56 95  
       00:806E  A5 55 6A  
       00:8071  9A A5 56  
       00:8074  AA 6A A5  
       00:8077  5A AA AA  
       00:807A  95 AA 66  
       00:807D  6A 96 AA  
       00:8080  9A AA 58  
       00:8083  0A E8 09  
       00:8086  6A 8F CA  
       00:8089  A5 9A FF  
       00:808C  E9 96 AF  
       00:808F  57 EA 59  
       00:8092  CF 7C D9  
       00:8095  5F C3 0F  
       00:8098  D5 5F FF  
       00:809B  FD 55 55  
       00:809E  55 55 04  
       00:80A1  FF        
    8  00:80A2            catName:
    9  00:80A2  0C 0A 1D    .db $0C, $0A, $1D, $FF
       00:80A5  FF        
#[2]   Banks/Bank0.asm
    5                     
    6                     
    7           0001        .bank 1
    8           A000        .org $A000
    9                       
   10  01:A000  00 80       .word cat
   11                       
   12           BFFA        .org $BFFA     ;first of the three vectors starts here
   13  01:BFFA  A8 C6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   14                                        ;processor will jump to the label NMI:
   15  01:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   16                                        ;to the label RESET:
   17  01:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
    4  02:8000            TestBankB:
    5  02:8000  A9 02             LDA #$02
    6  02:8002  8D 42 00          STA mapperDebugVar
    7  02:8005  60                RTS
    8                     
    9           0003        .bank 3
   10           A000        .org $A000
   11  03:A000  AD 02 00    LDA $02
   12                     
   13           BFFA        .org $BFFA     ;first of the three vectors starts here
   14  03:BFFA  A8 C6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   15                                        ;processor will jump to the label NMI:
   16  03:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   17                                        ;to the label RESET:
   18  03:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
    4  04:8000            TestBankC:
    5  04:8000  A9 03             LDA #$03
    6  04:8002  8D 42 00          STA mapperDebugVar
    7  04:8005  60                RTS
    8                     
    9           0005        .bank 5
   10           A000        .org $A000
   11  05:A000  AD 03 00    LDA $03
   12                     
   13           BFFA        .org $BFFA     ;first of the three vectors starts here
   14  05:BFFA  A8 C6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   15                                        ;processor will jump to the label NMI:
   16  05:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   17                                        ;to the label RESET:
   18  05:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Common/Init.asm
   34                       .include "Routines/Common/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 65 C5    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 69 C5    JSR SetMapperControls
   34                       
   35  06:C040  20 A6 C5    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   Picross.asm
   35                     
   36  06:C048  A9 00       LDA #TITLE_IDX
   37  06:C04A  20 18 C3    JSR ChangeGameMode
   38  06:C04D  20 3C C5    JSR InitPPUControl
   39                       
   40                     
   41                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   42                     ;;     Main Program         ;;
   43                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   44                     
   45  06:C050            Forever:
   46                     
   47  06:C050  EE 07 00    INC sleeping
   48                     
   49  06:C053            .loop
   50  06:C053  AD 07 00    LDA sleeping
   51  06:C056  D0 FB       BNE .loop
   52                       
   53  06:C058  20 61 C0    JSR GameLoop
   54  06:C05B  EE 06 00    INC time
   55                     
   56  06:C05E  4C 50 C0    JMP Forever     ;jump back to Forever, infinite loop
   57                       
   58                     ;; dynamic jump table
   59                     
   60  06:C061            GameLoop:
   61                     
   62                       MACROCallDynamicJump game_mode
                          
       06:C061  AD 08 00    LDA game_mode
       06:C064  20 C1 C3    JSR Dynamic_Jump
                                  
   63                       ;; we'll pop the return address here as the table index, so 
   64                       ;; the routine we pick will return us to whatever called Game Loop
   65                       ;; when it returns
   66                     
   67  06:C067            GameLoopJumpTable:
   68                     
   69  06:C067  6D C0       .word UpdateTitle
   70  06:C069  8D C0       .word UpdateGame
   71  06:C06B  08 C3       .word UpdateGameOver
   72                       
   73                     
   74                       ;;RTS is called in the subroutine
   75                     
   76                       
#[2]   Routines/Game_States/UpdateTitle.asm
   77                       .include "Routines/Game_States/UpdateTitle.asm"
    1  06:C06D            UpdateTitle:
    2                     
    3  06:C06D  AD 0A 00    LDA NMI_locks
    4  06:C070  D0 1A       BNE .leave
    5                     
    6  06:C072  EE 17 00    INC PPU_ScrollX
    7  06:C075  EE 17 00    INC PPU_ScrollX
    8  06:C078  D0 08       BNE .updateBankSelection
    9                       ;;flip bit in our PPU scroll loop thingy
   10  06:C07A  AD 19 00    LDA PPU_ScrollNT
   11  06:C07D  49 01       EOR #%00000001
   12  06:C07F  8D 19 00    STA PPU_ScrollNT
   13                       
   14                     ;;title should have two steps- the bank selection and the puzzle selection
   15                     ;;top half of screen can be used as the title screen, and the bottom half will have the selectable options
   16                     ;;
   17                     ;;starting options list: BANK 0, BANK 1, BANK 2, BANK3
   18                     ;;select one, then scroll over to the right, with numbers for puzzles 
   19                     
   20  06:C082            .updateBankSelection:
   21  06:C082            .updateScroll:
   22  06:C082            .updatePuzzleSelection:
   23                     
   24                     
   25  06:C082  AD 14 00    LDA gamepadPressed
   26  06:C085  F0 05       BEQ .leave
   27                       
   28  06:C087  A9 01         LDA #GAME_IDX
   29  06:C089  20 18 C3          JSR ChangeGameMode
   30                      
   31  06:C08C            .leave:
   32                      
   33  06:C08C  60          RTS
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGame.asm
   78                       .include "Routines/Game_States/UpdateGame.asm"
    1                     ;;VERT_CLUES = $206E
    2                     ;;HORI_CLUES = $2145
    3                     
    4           214E      VERT_CLUES = $214E
    5           218C      HORI_CLUES = $218C
    6                     
    7                     ;;this will change with puzzle sizes
    8           005A      VERT_MIN = $5A ;12 - 1
    9           00DA      VERT_MAX = $DA
   10           006A      HORI_MIN = $6A ;14 - 1
   11           00EA      HORI_MAX = $EA
   12                     
   13           618E      MOUSE_START = $618E
   14                     
   15  06:C08D            UpdateGame:
   16                     
   17  06:C08D  AD 0A 00    LDA NMI_locks
   18  06:C090  F0 01       BEQ .unlocked
   19                       
   20  06:C092  60          RTS
   21                       
   22  06:C093            .unlocked:
   23                     
   24  06:C093  20 97 C0    JSR DoUpdateGame
   25  06:C096  60          RTS
   26                       
   27  06:C097            DoUpdateGame:
   28                     
   29  06:C097  AD 09 00    LDA mode_state
   30  06:C09A  20 C1 C3    JSR Dynamic_Jump
   31                       
   32  06:C09D            UpdateGameJumpTable:
   33                     
   34  06:C09D  A7 C0       .word UpdateGameInit
   35  06:C09F  02 C1       .word UpdateDrawVertClues
   36  06:C0A1  2A C1       .word UpdateDrawHoriClues
   37  06:C0A3  33 C1       .word UpdateGamePlay
   38  06:C0A5  6D C2       .word UpdateGameExit
   39                     
   40  06:C0A7            UpdateGameInit:
   41                     
   42                       ;; get the puzzle table in the puzzle address
   43                       MACROGetLabelPointer $A000, table_address
                          
       06:C0A7  A9 A0             LDA #HIGH($A000)
       06:C0A9  A2 00             LDX #LOW($A000)
                                  
       06:C0AB  8E 0E 00          STX table_address
       06:C0AE  8D 0F 00          STA table_address+1
                                  
   44                       MACROGetDoubleIndex #$00
                          
       06:C0B1  A9 00             LDA #$00
       06:C0B3  0A                ASL A
       06:C0B4  A8                TAY
                                  
   45  06:C0B5  20 E7 C3    JSR GetTableAtIndex
   46                       MACROGetPointer table_address, puzzle_address
                          
       06:C0B8  AD 0E 00          LDA table_address
       06:C0BB  8D 43 00          STA puzzle_address
       06:C0BE  AD 0F 00          LDA table_address+1
       06:C0C1  8D 44 00          STA puzzle_address+1
                          
   47                       MACROGetLabelPointer MOUSE_START, mouse_location
                          
       06:C0C4  A9 61             LDA #HIGH(MOUSE_START)
       06:C0C6  A2 8E             LDX #LOW(MOUSE_START)
                                  
       06:C0C8  8E 53 00          STX mouse_location
       06:C0CB  8D 54 00          STA mouse_location+1
                                  
   48                       
   49                       ;;for clues, we need to get past the header- for a 15x15 puzzle, that's 34 bytes ahead
   50  06:C0CE  AD 43 00    LDA puzzle_address
   51  06:C0D1  18          CLC
   52  06:C0D2  69 22       ADC #34
   53  06:C0D4  8D 45 00    STA clues_address
   54  06:C0D7  A9 00       LDA #$00
   55  06:C0D9  6D 44 00    ADC puzzle_address+1
   56  06:C0DC  8D 46 00    STA clues_address+1
   57                     
   58  06:C0DF  A9 00       LDA #$00
   59  06:C0E1  8D 4B 00    STA clueTableIndex
   60  06:C0E4  8D 4C 00    STA clueLineIndex
   61  06:C0E7  8D 52 00    STA clueParity
   62  06:C0EA  8D 4D 00    STA clueOffsetShift
   63                       
   64  06:C0ED  A9 20       LDA #$20
   65  06:C0EF  8D 50 00    STA clueDrawAdd
   66                        
   67                       MACROGetLabelPointer VERT_CLUES, clue_start_address
                          
       06:C0F2  A9 21             LDA #HIGH(VERT_CLUES)
       06:C0F4  A2 4E             LDX #LOW(VERT_CLUES)
                                  
       06:C0F6  8E 47 00          STX clue_start_address
       06:C0F9  8D 48 00          STA clue_start_address+1
                                  
   68  06:C0FC  20 34 C6    JSR ResetClueDrawAddress
   69                         
   70  06:C0FF  EE 09 00    INC mode_state
   71                     
   72  06:C102            UpdateDrawVertClues:
   73                       
   74  06:C102  20 BC C5    JSR PopulateClues
   75  06:C105  90 22       BCC .leave
   76                       
   77  06:C107            .changeModeState:
   78                     
   79  06:C107  A9 00       LDA #$00
   80  06:C109  8D 4C 00    STA clueLineIndex
   81  06:C10C  8D 52 00    STA clueParity
   82                       
   83  06:C10F  A9 05       LDA #$05
   84  06:C111  8D 4D 00    STA clueOffsetShift
   85                       
   86  06:C114  A9 01       LDA #$01
   87  06:C116  8D 50 00    STA clueDrawAdd
   88                        
   89                       MACROGetLabelPointer HORI_CLUES, clue_start_address
                          
       06:C119  A9 21             LDA #HIGH(HORI_CLUES)
       06:C11B  A2 8C             LDX #LOW(HORI_CLUES)
                                  
       06:C11D  8E 47 00          STX clue_start_address
       06:C120  8D 48 00          STA clue_start_address+1
                                  
   90  06:C123  20 34 C6    JSR ResetClueDrawAddress
   91                     
   92  06:C126  EE 09 00    INC mode_state
   93  06:C129            .leave:
   94  06:C129  60          RTS
   95                       
   96  06:C12A            UpdateDrawHoriClues:
   97                     
   98  06:C12A  20 BC C5    JSR PopulateClues
   99  06:C12D  90 03       BCC .leave
  100                     
  101  06:C12F            .changeModeState:
  102                     
  103  06:C12F  EE 09 00    INC mode_state
  104  06:C132            .leave:
  105  06:C132  60          RTS
  106                       
  107  06:C133            UpdateGamePlay:
  108                         
  109  06:C133  A9 00       LDA #$00
  110  06:C135  8D 00 00    STA temp1
  111  06:C138  8D 01 00    STA temp2
  112  06:C13B  8D 02 00    STA temp3
  113                     
  114                       
  115  06:C13E  AD 14 00    LDA gamepadPressed
  116  06:C141  F0 6A       BEQ .updatePaint  
  117                       
  118  06:C143            .parseInputs:
  119                     
  120  06:C143  29 F0       AND #GAMEPAD_MOVE
  121  06:C145  F0 1E       BEQ .checkPaintPress
  122  06:C147  0A          ASL A
  123  06:C148  90 03       BCC .checkLeft
  124  06:C14A  EE 00 00    INC temp1
  125  06:C14D            .checkLeft:
  126  06:C14D  0A          ASL A
  127  06:C14E  90 03       BCC .checkDown
  128  06:C150  CE 00 00    DEC temp1
  129  06:C153            .checkDown:
  130  06:C153  0A          ASL A
  131  06:C154  90 03       BCC .checkUp
  132  06:C156  EE 01 00    INC temp2
  133  06:C159            .checkUp:
  134  06:C159  0A          ASL A
  135  06:C15A  90 03       BCC .move
  136  06:C15C  CE 01 00    DEC temp2
  137                       
  138  06:C15F            .move:
  139                      
  140  06:C15F  20 73 C2    JSR MoveMouse
  141  06:C162  20 B4 C2    JSR UpdateMouseScreenPos
  142                       
  143  06:C165            .checkPaintPress:
  144                     
  145  06:C165  AD 14 00    LDA gamepadPressed
  146  06:C168  29 03       AND #GAMEPAD_AB
  147  06:C16A  F0 41       BEQ .updatePaint
  148                       ;;A or B pressed, get current tile
  149                       
  150  06:C16C  8D 00 00    STA temp1
  151                       
  152  06:C16F  A0 00       LDY #$00
  153  06:C171  B1 53       LDA [mouse_location], y
  154  06:C173  8D 01 00    STA temp2
  155                       
  156                         ;;A treats X and Clear as clear
  157                             ;;B treats mark and clear as clear
  158                             ;;clear->mark->x
  159                             
  160                     
  161  06:C176  C9 7C       CMP #$7C      ;check if this is a marked tile
  162  06:C178  B0 0F       BCS .getClearTile
  163                       ;;cleared tile- store off marked tile to paint with instead
  164                       ;;not a clear tile- a mark or an x - check A or B  
  165  06:C17A  4E 00 00    LSR temp1
  166  06:C17D  B0 05       BCS .getMarkTile
  167                       
  168  06:C17F            .getXTile:
  169  06:C17F  A9 80       LDA #$80
  170  06:C181  4C A7 C1    JMP .finishGetTile
  171                       
  172  06:C184            .getMarkTile:
  173  06:C184  A9 70       LDA #$70
  174  06:C186  4C A7 C1    JMP .finishGetTile
  175                     
  176  06:C189            .getClearTile:
  177                       
  178  06:C189  4E 00 00    LSR temp1
  179  06:C18C  90 0A       BCC .checkB
  180  06:C18E  AD 01 00    LDA temp2
  181  06:C191  C9 8C       CMP #$8C                      ;; check if in X tiles - will be if >=
  182  06:C193  90 0D       BCC .clearTile
  183  06:C195  4C 84 C1    JMP .getMarkTile
  184                       
  185  06:C198            .checkB:
  186                       
  187  06:C198  AD 01 00   LDA temp2
  188  06:C19B  C9 8C      CMP #$8C
  189  06:C19D  B0 03      BCS .clearTile
  190  06:C19F  4C 7F C1   JMP .getXTile
  191                       
  192  06:C1A2            .clearTile:
  193  06:C1A2  A9 60       LDA #$60
  194  06:C1A4  4C A7 C1    JMP .finishGetTile
  195                       
  196  06:C1A7            .finishGetTile:
  197  06:C1A7  8D 57 00    STA currentPaintTile
  198  06:C1AA  4C B5 C1    JMP .setTile
  199                     
  200                     ;;we'll keep a copy of the puzzle tiles in memory, since we can't easily access tiles in the PPU
  201                     ;;might be best to just keep an entire copy of the nametable instead of trying to index it and deal with 16 bit math
  202                     ;;we can load the nametable into memory as we draw it
  203                     
  204  06:C1AD            .updatePaint:
  205                     
  206  06:C1AD  AD 12 00    LDA gamepad
  207  06:C1B0  29 03       AND #GAMEPAD_AB
  208  06:C1B2  D0 01       BNE .setTile
  209  06:C1B4  60          RTS  
  210                       
  211  06:C1B5            .setTile:
  212                     
  213                       ;;take Y position, mult by 2 to get starting index in puzzle solution
  214  06:C1B5  AD 56 00    LDA mouse_index+1
  215  06:C1B8  0A          ASL A
  216  06:C1B9  18          CLC
  217  06:C1BA  69 04       ADC #$04 ;; add to get past header
  218  06:C1BC  8D 00 00    STA temp1
  219                       
  220                       ;;div X position by 8 to get the byte index
  221  06:C1BF  AD 55 00    LDA mouse_index
  222  06:C1C2  4A          LSR A
  223  06:C1C3  4A          LSR A
  224  06:C1C4  4A          LSR A
  225  06:C1C5  F0 03       BEQ .getMask
  226                       
  227  06:C1C7  EE 00 00    INC temp1
  228                       
  229  06:C1CA            .getMask:
  230                       
  231  06:C1CA  AD 55 00    LDA mouse_index
  232  06:C1CD  29 07       AND #$07
  233  06:C1CF  AA          TAX
  234  06:C1D0  A9 80       LDA #$80
  235  06:C1D2  E0 00       CPX #$00
  236  06:C1D4  F0 04       BEQ .storeMask
  237                     
  238  06:C1D6            .maskLoop:
  239  06:C1D6  4A          LSR A
  240  06:C1D7  CA          DEX
  241  06:C1D8  D0 FC       BNE .maskLoop
  242  06:C1DA            .storeMask:
  243  06:C1DA  8D 01 00    STA temp2
  244                     
  245  06:C1DD  AC 00 00    LDY temp1
  246  06:C1E0  B1 43       LDA [puzzle_address], y
  247  06:C1E2  2D 01 00    AND temp2
  248  06:C1E5  8D 00 00    STA temp1     ;get the 0/non zero solution flag 
  249                     
  250  06:C1E8  A0 00       LDY #$00
  251  06:C1EA  B1 53       LDA [mouse_location], y
  252  06:C1EC  8D 02 00    STA temp3
  253  06:C1EF  29 F0       AND #$F0
  254  06:C1F1  CD 57 00    CMP currentPaintTile
  255  06:C1F4  F0 76       BEQ .leave
  256                       
  257                       ;;tiles are different- check if the current tile is marked as a solution tile
  258  06:C1F6  C9 70       CMP #$70
  259  06:C1F8  D0 0B       BNE .checkNewMark
  260                       ;;if erasing a mark, check if the tile was part of the solution
  261  06:C1FA  AD 00 00    LDA temp1
  262  06:C1FD  D0 18       BNE .antiMark
  263  06:C1FF  CE 59 00    DEC nonSolutionCount
  264  06:C202  4C 20 C2    JMP .checkSolution
  265                       
  266  06:C205            .checkNewMark:
  267                     
  268  06:C205  AD 57 00    LDA currentPaintTile
  269  06:C208  C9 70       CMP #$70
  270  06:C20A  D0 22       BNE .overwriteTile
  271                       
  272  06:C20C  AD 00 00    LDA temp1
  273  06:C20F  D0 0C       BNE .proMark
  274  06:C211  EE 59 00    INC nonSolutionCount 
  275  06:C214  4C 20 C2    JMP .checkSolution  
  276                       
  277  06:C217            .antiMark:
  278  06:C217  CE 58 00    DEC solutionCount
  279  06:C21A  4C 2E C2    JMP .overwriteTile
  280  06:C21D            .proMark:   
  281                       
  282  06:C21D  EE 58 00    INC solutionCount
  283                     
  284  06:C220            .checkSolution: 
  285                     
  286  06:C220  A0 01       LDY #$01
  287  06:C222  B1 43       LDA [puzzle_address], y
  288  06:C224  CD 58 00    CMP solutionCount
  289  06:C227  D0 05       BNE .overwriteTile
  290  06:C229  AD 59 00    LDA nonSolutionCount
  291  06:C22C  F0 3B       BEQ .changeModeState
  292                       
  293  06:C22E            .overwriteTile:
  294                       ;;overwrite tile
  295  06:C22E  AD 02 00    LDA temp3
  296  06:C231  29 0F       AND #$0F
  297  06:C233  0D 57 00    ORA currentPaintTile
  298  06:C236  A0 00       LDY #$00
  299  06:C238  91 53       STA [mouse_location], y
  300  06:C23A  8D 00 00    STA temp1
  301                       
  302  06:C23D  AD 54 00    LDA mouse_location+1
  303  06:C240  29 3F       AND #$3F
  304  06:C242  8D 01 00    STA temp2
  305                         
  306                       MACROAddPPUStringEntryRawData temp2, mouse_location, #DRAW_HORIZONTAL, #$01
                          
       06:C245  A9 01       LDA #$01
       06:C247  8D 1B 00    STA PPU_PendingWrite
       06:C24A  AD 01 00    LDA temp2
       06:C24D  20 E8 C4    JSR WriteToPPUString
       06:C250  AD 53 00    LDA mouse_location
       06:C253  20 E8 C4    JSR WriteToPPUString
       06:C256  A9 00       LDA #DRAW_HORIZONTAL
       06:C258  20 E8 C4    JSR WriteToPPUString
       06:C25B  A9 01       LDA #$01
       06:C25D  20 E8 C4    JSR WriteToPPUString
                            
  307  06:C260  AD 00 00    LDA temp1
  308  06:C263  20 E8 C4    JSR WriteToPPUString
  309  06:C266  4C 6C C2    JMP .leave
  310                       
  311                       ;;update the painting
  312  06:C269            .changeModeState:
  313                     
  314  06:C269  EE 09 00    INC mode_state
  315                     
  316  06:C26C            .leave:
  317                      
  318  06:C26C  60          RTS
  319                       
  320  06:C26D            UpdateGameExit:
  321                     
  322  06:C26D  A9 02       LDA #GAMEOVER_IDX
  323  06:C26F  20 18 C3    JSR ChangeGameMode
  324  06:C272  60          RTS
  325                       
  326  06:C273            MoveMouse:
  327                     
  328  06:C273  AD 00 00    LDA temp1
  329  06:C276  0E 00 00    ASL temp1
  330  06:C279  0E 00 00    ASL temp1
  331  06:C27C  0E 00 00    ASL temp1
  332                       
  333  06:C27F  AD 01 00    LDA temp2
  334  06:C282  0E 01 00    ASL temp2 
  335  06:C285  0E 01 00    ASL temp2
  336  06:C288  0E 01 00    ASL temp2
  337                       
  338  06:C28B  A2 03       LDX #SPRITE_XPOS
  339  06:C28D  BD 00 02    LDA SPRITE_DATA, x
  340  06:C290  18          CLC
  341  06:C291  6D 00 00    ADC temp1
  342                       ;;check against borders
  343  06:C294  C9 6A       CMP #HORI_MIN
  344  06:C296  F0 07       BEQ .moveVert
  345  06:C298  C9 EA       CMP #HORI_MAX
  346  06:C29A  F0 03       BEQ .moveVert
  347  06:C29C  9D 00 02    STA SPRITE_DATA, x
  348                     
  349  06:C29F            .moveVert:
  350                     
  351  06:C29F  A2 00       LDX #SPRITE_YPOS
  352  06:C2A1  BD 00 02    LDA SPRITE_DATA, x
  353  06:C2A4  18          CLC
  354  06:C2A5  6D 01 00    ADC temp2
  355                       ;;check against borders
  356  06:C2A8  C9 5A       CMP #VERT_MIN
  357  06:C2AA  F0 07       BEQ .leave
  358  06:C2AC  C9 DA       CMP #VERT_MAX
  359  06:C2AE  F0 03       BEQ .leave
  360  06:C2B0  9D 00 02    STA SPRITE_DATA, x
  361                     
  362  06:C2B3            .leave:
  363  06:C2B3  60          RTS
  364                             
  365  06:C2B4            UpdateMouseScreenPos:
  366                     
  367  06:C2B4  A2 00       LDX #$00
  368  06:C2B6  BD 00 02    LDA SPRITE_DATA, x;ypos       ;yyyy y...
  369  06:C2B9  4A          LSR A                                         ;0yyy yy..
  370  06:C2BA  4A          LSR A                                         ;00yy yyy.
  371  06:C2BB  4A          LSR A                                         ;000y yyyy
  372  06:C2BC  8D 00 00    STA temp1
  373  06:C2BF  8D 56 00    STA mouse_index+1
  374  06:C2C2  E8          INX
  375  06:C2C3  E8          INX
  376  06:C2C4  E8          INX   
  377  06:C2C5  BD 00 02    LDA SPRITE_DATA, x ;xpos  ;  xxxx x...
  378  06:C2C8  29 F8       AND #$F8                       ;              ;  xxxx x000
  379  06:C2CA  8D 01 00    STA temp2                      ;      ;  
  380  06:C2CD  4E 00 00    LSR temp1                      ;              ;  0000 yyyy y
  381  06:C2D0  6E 01 00    ROR temp2                      ;      ;  yxxx xx00
  382  06:C2D3  4E 00 00    LSR temp1                      ;              ;  0000 0yyy y
  383  06:C2D6  6E 01 00    ROR temp2                      ;              ;  yyxx xxx0
  384  06:C2D9  4E 00 00    LSR temp1              ;              ;  0000 00yy y
  385  06:C2DC  6E 01 00    ROR temp2                      ;              ;  yyyx xxxx
  386  06:C2DF  AD 01 00    LDA temp2
  387  06:C2E2  29 1F       AND #$1F
  388  06:C2E4  8D 55 00    STA mouse_index
  389                       
  390  06:C2E7  AD 55 00    LDA mouse_index
  391  06:C2EA  38          SEC 
  392  06:C2EB  E9 0E       SBC #$0E
  393  06:C2ED  8D 55 00    STA mouse_index
  394                       
  395  06:C2F0  AD 56 00    LDA mouse_index+1
  396  06:C2F3  38          SEC 
  397  06:C2F4  E9 0C       SBC #$0C
  398  06:C2F6  8D 56 00    STA mouse_index+1
  399                       
  400                       ;subtract starting offsets for mouse index
  401                       
  402  06:C2F9  AD 00 00    LDA temp1                      ;              ;  0000 00yy
  403  06:C2FC  09 60       ORA #$60                       ;              ;  0110 00yy
  404                       
  405  06:C2FE  8D 54 00    STA mouse_location+1
  406  06:C301  AD 01 00    LDA temp2
  407  06:C304  8D 53 00    STA mouse_location
  408                       
  409  06:C307            .leave:
  410  06:C307  60          RTS
  411                     
  412                     ;;using the line index and a given count based on the direction, 
  413                       
  414                     ;;      JSR ResetMapper
  415                     ;;      INC currentCHRBank
  416                     ;;      LDA currentCHRBank
  417                     ;;      CMP #$03
  418                     ;;      BNE .dontModCHR
  419                             
  420                     ;;      LDA #$00
  421                     
  422                     ;;.dontModCHR:
  423                     ;;      STA currentCHRBank 
  424                     ;;      ;4kb switches- all the banks are seqential, so we gotta add 1 and mult by 2 for BG tiles
  425                     ;;      ASL A
  426                     ;;      CLC 
  427                     ;;      ADC #$01
  428                     ;;      JSR LoadCHRBankB
  429                     ;;      
  430                     ;;      JSR ResetMapper
  431                     ;;      INC currentPRGBank
  432                     ;;      LDA currentPRGBank
  433                     ;;      CMP #$03
  434                     ;;      BNE .dontModPRG
  435                             
  436                     ;;      LDA #$00
  437                             
  438                     ;;.dontModPRG:
  439                     ;;       STA currentPRGBank
  440                     ;;       JSR LoadPRGBank
  441                      
  442                     ;;       JSR TestBankA
  443                     ;;       LDA mapperDebugVar
  444                     ;;       STA $6000
  445                     ;;       JMP .noInputDetected
  446                     
  447                     
  448                       
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGameOver.asm
   79                       .include "Routines/Game_States/UpdateGameOver.asm"
    1  06:C308            UpdateGameOver:
    2                     
    3  06:C308  AD 0A 00    LDA NMI_locks
    4  06:C30B  D0 0A       BNE .noInputDetected
    5                     
    6  06:C30D  AD 14 00    LDA gamepadPressed
    7  06:C310  F0 05       BEQ .noInputDetected
    8                       
    9  06:C312  A9 00         LDA #TITLE_IDX
   10  06:C314  20 18 C3          JSR ChangeGameMode
   11                      
   12  06:C317            .noInputDetected:
   13                      
   14  06:C317  60          RTS
#[1]   Picross.asm
   80                       
   81                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   82                     ;;     Routines             ;;
   83                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   84                     
   85                     
#[2]   Routines/Common/GameModeRoutines.asm
   86                       .include "Routines/Common/GameModeRoutines.asm"
    1  06:C318            ChangeGameMode:
    2  06:C318  8D 08 00    STA game_mode
    3  06:C31B  A9 00       LDA #$00
    4  06:C31D  8D 09 00    STA mode_state
    5  06:C320  20 F6 C4    JSR ClearPPUString
    6  06:C323  20 27 C3    JSR LoadGameModeScreen
    7  06:C326  60          RTS
    8                       
    9  06:C327            LoadGameModeScreen:
   10                     
   11                       MACROSetFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:C327  AD 0A 00    LDA NMI_locks
       06:C32A  09 01       ORA #BGLOAD_NMI_LOCK
       06:C32C  8D 0A 00    STA NMI_locks
                                  
   12                       
   13  06:C32F  A9 00       LDA #$00
   14  06:C331  8D 01 20    STA PPU_MASK    ; disable rendering- reenable on NMI when not updating
   15                     
   16  06:C334  20 62 C3    JSR LoadGameModeBackground
   17  06:C337  20 A5 C3    JSR LoadGameModeSprites
   18                     
   19                       MACROClearFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:C33A  A9 01       LDA #BGLOAD_NMI_LOCK
       06:C33C  49 FF       EOR #$FF
       06:C33E  2D 0A 00    AND NMI_locks  
       06:C341  8D 0A 00    STA NMI_locks
                          
   20                     
   21                       
   22                       ;; load the CHR bank for this mode
   23  06:C344  20 65 C5    JSR ResetMapper
   24                       ;;remember, we're loading the SECOND set in each chr bank
   25                       ;;so we'll take the index from the game mode chr table and add one mult 2
   26  06:C347  AE 08 00    LDX game_mode
   27  06:C34A  BD BB C3    LDA gameModeInitCHRROMB, x
   28  06:C34D  0A          ASL A
   29  06:C34E  18          CLC 
   30  06:C34F  69 01       ADC #$01
   31  06:C351  20 8A C5    JSR LoadCHRBankB
   32                       
   33  06:C354  20 65 C5    JSR ResetMapper
   34  06:C357  AE 08 00    LDX game_mode
   35  06:C35A  BD BE C3    LDA gameModeInitCHRROMA, x
   36  06:C35D  0A          ASL A
   37  06:C35E  20 7F C5    JSR LoadCHRBankA
   38                       
   39                       
   40                       
   41  06:C361  60          RTS
   42                       
   43  06:C362            LoadGameModeBackground:
   44                             
   45                       MACROGetDoubleIndex game_mode
                          
       06:C362  AD 08 00          LDA game_mode
       06:C365  0A                ASL A
       06:C366  A8                TAY
                                  
   46  06:C367  8C 00 00    STY temp1
   47                             
   48                       MACROGetLabelPointer Palettes, table_address
                          
       06:C36A  A9 E0             LDA #HIGH(Palettes)
       06:C36C  A2 00             LDX #LOW(Palettes)
                                  
       06:C36E  8E 0E 00          STX table_address
       06:C371  8D 0F 00          STA table_address+1
                                  
   49  06:C374  20 E7 C3    JSR GetTableAtIndex
   50                     
   51  06:C377  20 F4 C3    JSR LoadFullPaletteFromTable
   52                             
   53  06:C37A  AC 00 00    LDY temp1
   54                       MACROGetLabelPointer NameTables, table_address
                          
       06:C37D  A9 E0             LDA #HIGH(NameTables)
       06:C37F  A2 06             LDX #LOW(NameTables)
                                  
       06:C381  8E 0E 00          STX table_address
       06:C384  8D 0F 00          STA table_address+1
                                  
   55  06:C387  20 E7 C3    JSR GetTableAtIndex
   56                             
   57  06:C38A  A9 00       LDA #$00
   58  06:C38C  20 14 C4    JSR LoadFullBackgroundFromTable
   59                       
   60  06:C38F  AC 00 00    LDY temp1
   61                       MACROGetLabelPointer NameTables2, table_address
                          
       06:C392  A9 E0             LDA #HIGH(NameTables2)
       06:C394  A2 0C             LDX #LOW(NameTables2)
                                  
       06:C396  8E 0E 00          STX table_address
       06:C399  8D 0F 00          STA table_address+1
                                  
   62  06:C39C  20 E7 C3    JSR GetTableAtIndex
   63                       
   64  06:C39F  A9 01       LDA #$01
   65  06:C3A1  20 14 C4    JSR LoadFullBackgroundFromTable
   66                       
   67  06:C3A4  60          RTS
   68                       
   69  06:C3A5            LoadGameModeSprites:
   70                     
   71                       MACROGetDoubleIndex game_mode  
                          
       06:C3A5  AD 08 00          LDA game_mode
       06:C3A8  0A                ASL A
       06:C3A9  A8                TAY
                                  
   72                       MACROGetLabelPointer Sprites, table_address
                          
       06:C3AA  A9 F4             LDA #HIGH(Sprites)
       06:C3AC  A2 72             LDX #LOW(Sprites)
                                  
       06:C3AE  8E 0E 00          STX table_address
       06:C3B1  8D 0F 00          STA table_address+1
                                  
   73  06:C3B4  20 E7 C3    JSR GetTableAtIndex
   74  06:C3B7  20 DB C4    JSR LoadSprites_impl
   75                       
   76  06:C3BA  60          RTS
   77                       
   78  06:C3BB            gameModeInitCHRROMB:
   79  06:C3BB  00 02 02          .db $00, $02, $02
   80  06:C3BE            gameModeInitCHRROMA:
   81  06:C3BE  00 02 02          .db $00, $02, $02
   82                             
#[1]   Picross.asm
#[2]   Routines/Utils/PointerUtils.asm
   87                       .include "Routines/Utils/PointerUtils.asm"
    1  06:C3C1            Dynamic_Jump:
    2                     
    3  06:C3C1  0A          ASL A                                 ;; double the index passed into A
    4  06:C3C2  8E 04 00    STX tempx
    5  06:C3C5  8C 05 00    STY tempy
    6  06:C3C8  A8          TAY
    7  06:C3C9  C8          INY  
    8  06:C3CA  68          PLA
    9  06:C3CB  8D 10 00    STA jump_address
   10  06:C3CE  68          PLA 
   11  06:C3CF  8D 11 00    STA jump_address+1            
   12  06:C3D2  B1 10       LDA [jump_address], y
   13  06:C3D4  AA          TAX
   14  06:C3D5  C8          INY
   15  06:C3D6  B1 10       LDA [jump_address], y
   16  06:C3D8  8E 10 00    STX jump_address
   17  06:C3DB  8D 11 00    STA jump_address+1
   18  06:C3DE  AE 04 00    LDX tempx
   19  06:C3E1  AC 05 00    LDY tempy
   20  06:C3E4  6C 10 00    JMP [jump_address]
   21                       
   22  06:C3E7            GetTableAtIndex:
   23                     
   24  06:C3E7  B1 0E             LDA [table_address], y
   25  06:C3E9  AA                TAX
   26  06:C3EA  C8                INY
   27  06:C3EB  B1 0E             LDA [table_address], y
   28                             
   29  06:C3ED            SetTableAddress:
   30                             
   31                             ;;A is hi, X is lo
   32  06:C3ED  8E 0E 00          STX table_address
   33  06:C3F0  8D 0F 00          STA table_address+1
   34  06:C3F3  60                RTS
#[1]   Picross.asm
#[2]   Routines/Utils/PPUUtils.asm
   88                       .include "Routines/Utils/PPUUtils.asm"
    1  06:C3F4            LoadFullPaletteFromTable:
    2                     
    3                       MACROSetPPUAddress $3F00
                          
       06:C3F4  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:C3F7  A9 3F       LDA #HIGH($3F00)
       06:C3F9  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:C3FC  A9 00       LDA #LOW($3F00)
       06:C3FE  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
    4  06:C401  A0 00       LDY #$00              ; start out at 0
    5  06:C403  A2 00       LDX #$00
    6  06:C405            .loop:
    7  06:C405  B1 0E       LDA [table_address], y        ; load data from address (palette + the value in x)
    8  06:C407  8D 07 20    STA PPU_DATA            ; write to PPU
    9  06:C40A  9D 00 68    STA Palette_Copy, x
   10  06:C40D  C8          INY                   ; X = X + 1
   11  06:C40E  E8          INX
   12  06:C40F  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   13  06:C411  D0 F2       BNE .loop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   14  06:C413  60          RTS
   15                     
   16  06:C414            LoadFullBackgroundFromTable:
   17                     
   18                         ;;use A as an index for which nametable to write to
   19  06:C414  20 16 C5          JSR SetNametableFromIndex
   20  06:C417  8A                TXA
   21  06:C418  4A                LSR A
   22  06:C419  29 01             AND #$01
   23  06:C41B  D0 0D             BNE .copyScreenB
   24                             MACROGetLabelPointer Screen_Copy, pointer_address
                          
       06:C41D  A9 60             LDA #HIGH(Screen_Copy)
       06:C41F  A2 00             LDX #LOW(Screen_Copy)
                                  
       06:C421  8E 0C 00          STX pointer_address
       06:C424  8D 0D 00          STA pointer_address+1
                                  
   25  06:C427  4C 34 C4          JMP .setCounters
   26                             
   27  06:C42A            .copyScreenB:
   28                             MACROGetLabelPointer ScreenB_Copy, pointer_address
                          
       06:C42A  A9 64             LDA #HIGH(ScreenB_Copy)
       06:C42C  A2 00             LDX #LOW(ScreenB_Copy)
                                  
       06:C42E  8E 0C 00          STX pointer_address
       06:C431  8D 0D 00          STA pointer_address+1
                                  
   29                             
   30                             ;;set pointer
   31                             ;; set counters
   32  06:C434            .setCounters:
   33  06:C434  A0 00             LDY #$00
   34  06:C436  A2 00             LDX #$00
   35                             
   36                             ;;start loop
   37                     
   38  06:C438            .outerloop:
   39                     
   40  06:C438            .innerloop:
   41                     
   42  06:C438  B1 0E             LDA [table_address], y
   43  06:C43A  8D 07 20          STA PPU_DATA
   44  06:C43D  91 0C             STA [pointer_address],y
   45  06:C43F  C8                INY
   46  06:C440  C0 00             CPY #$00
   47  06:C442  D0 F4             BNE .innerloop
   48                     
   49  06:C444  EE 0D 00          INC pointer_address+1
   50  06:C447  EE 0F 00          INC table_address+1
   51                             
   52  06:C44A  E8                INX
   53  06:C44B  E0 04             CPX #$04
   54  06:C44D  D0 E9             BNE .outerloop
   55  06:C44F  60                RTS
   56                             
   57                     
   58           0000      DATA_LEN = temp1
   59           0001      WRITE_SETTINGS = temp2
   60                             
   61  06:C450            ProcessPPUString:
   62                     
   63  06:C450  AD 1B 00          LDA PPU_PendingWrite
   64  06:C453  F0 6F             BEQ .leave
   65  06:C455  A0 00             LDY #$00
   66                             
   67  06:C457  A9 1D             LDA #LOW(PPU_String)
   68  06:C459  8D 0C 00          STA pointer_address
   69  06:C45C  A9 00             LDA #HIGH(PPU_String)
   70  06:C45E  8D 0D 00          STA pointer_address + 1
   71                     
   72  06:C461            .outerloop:
   73  06:C461  AD 02 20          LDA PPU_STATUS
   74  06:C464  B1 0C             LDA [pointer_address], y
   75  06:C466  F0 59             BEQ .finish
   76  06:C468  8D 06 20          STA PPU_ADDR
   77  06:C46B  C8                INY
   78  06:C46C  B1 0C             LDA [pointer_address], y
   79  06:C46E  8D 06 20          STA PPU_ADDR
   80  06:C471  C8            INY 
   81  06:C472  B1 0C             LDA [pointer_address], y
   82  06:C474  8D 01 00          STA WRITE_SETTINGS
   83  06:C477  C8                INY
   84                             
   85  06:C478  AD 00 20          LDA PPU_CTRL
   86  06:C47B  29 FB             AND #$FB
   87  06:C47D  8D 00 20          STA PPU_CTRL
   88                             
   89  06:C480  AD 01 00          LDA WRITE_SETTINGS
   90  06:C483  29 80             AND #%10000000
   91  06:C485  F0 06             BEQ .checkTable
   92  06:C487  0D 00 20          ORA PPU_CTRL 
   93  06:C48A  8D 00 20          STA PPU_CTRL 
   94                             
   95  06:C48D            .checkTable:
   96  06:C48D  AD 01 00          LDA WRITE_SETTINGS
   97  06:C490  29 40             AND #%01000000
   98  06:C492  F0 16             BEQ .rawData
   99                             
  100  06:C494  B1 0C             LDA [pointer_address], y
  101  06:C496  8D 0E 00          STA table_address
  102  06:C499  C8                INY 
  103  06:C49A  B1 0C             LDA [pointer_address], y
  104  06:C49C  8D 0F 00          STA table_address + 1
  105  06:C49F  C8                INY
  106  06:C4A0  98                TYA 
  107  06:C4A1  48                PHA
  108  06:C4A2  20 C5 C4          JSR WriteToPPUFromTable
  109  06:C4A5  68                PLA
  110  06:C4A6  A8                TAY
  111  06:C4A7  4C 61 C4          JMP .outerloop
  112                     
  113  06:C4AA            .rawData:
  114                     
  115  06:C4AA  B1 0C             LDA [pointer_address], y
  116  06:C4AC  C8                INY
  117  06:C4AD  8D 00 00          STA DATA_LEN
  118                     
  119  06:C4B0  A2 00             LDX #$00
  120                     
  121  06:C4B2            .innerloop:
  122                             
  123  06:C4B2  B1 0C             LDA [pointer_address], y
  124  06:C4B4  8D 07 20          STA PPU_DATA
  125  06:C4B7  C8                INY
  126  06:C4B8  E8                INX
  127  06:C4B9  EC 00 00          CPX DATA_LEN
  128  06:C4BC  D0 F4             BNE .innerloop
  129  06:C4BE  4C 61 C4          JMP .outerloop
  130                             
  131  06:C4C1            .finish:
  132  06:C4C1  20 F6 C4          JSR ClearPPUString
  133  06:C4C4            .leave:
  134  06:C4C4  60                RTS
  135                             
  136  06:C4C5            WriteToPPUFromTable:
  137  06:C4C5  A0 00             LDY #$00
  138  06:C4C7  B1 0E             LDA [table_address], y
  139  06:C4C9  C8                INY
  140  06:C4CA  8D 00 00          STA DATA_LEN
  141  06:C4CD            .innerloop:
  142  06:C4CD  B1 0E             LDA [table_address], y
  143  06:C4CF  8D 07 20          STA PPU_DATA
  144  06:C4D2  C8                INY
  145  06:C4D3  CC 00 00          CPY DATA_LEN
  146  06:C4D6  90 F5             BCC .innerloop ;table should have the size in it, but since we count the byte count, we'll want to wait till we go over it
  147  06:C4D8  F0 F3             BEQ .innerloop
  148  06:C4DA  60                RTS
  149                       
  150  06:C4DB            LoadSprites_impl:
  151  06:C4DB  A0 00       LDY #$00              ; start at 0
  152                       
  153  06:C4DD            .loop:
  154  06:C4DD  B1 0E       LDA [table_address], y; load data from address (sprites +  x)
  155  06:C4DF  99 00 02    STA SPRITE_DATA, y    ; store into RAM address ($0200 + x)
  156  06:C4E2  C8          INY                   ; X = X + 1
  157  06:C4E3  C0 05       CPY #$05              ; Compare X to hex $10, decimal 16
  158  06:C4E5  D0 F6       BNE .loop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
  159                                             ; if compare was equal to 16, keep going down   
  160  06:C4E7  60          RTS
  161                     
  162                     
  163  06:C4E8            WriteToPPUString:
  164                     
  165  06:C4E8  AE 1C 00          LDX PPU_StringIdx
  166  06:C4EB  E0 20             CPX #PPU_STRINGMAX
  167  06:C4ED  F0 06             BEQ .finish
  168                             
  169  06:C4EF  9D 1D 00          STA PPU_String, x
  170  06:C4F2  EE 1C 00          INC PPU_StringIdx
  171                                     
  172  06:C4F5            .finish:
  173  06:C4F5  60                RTS
  174                     
  175  06:C4F6            ClearPPUString:
  176                             
  177  06:C4F6  A9 00             LDA #$00
  178  06:C4F8  8D 1C 00          STA PPU_StringIdx
  179  06:C4FB  8D 1D 00          STA PPU_String
  180  06:C4FE  8D 1B 00          STA PPU_PendingWrite
  181  06:C501  60                RTS
  182                     
  183  06:C502            DetectSprite0:
  184  06:C502            WaitNotSprite0:
  185  06:C502  AD 02 20    lda PPU_STATUS
  186  06:C505  29 40       and #SPRITE_0_MASK
  187  06:C507  D0 F9       bne WaitNotSprite0   ; wait until sprite 0 not hit
  188                     
  189  06:C509            WaitSprite0:
  190  06:C509  AD 02 20    lda $2002
  191  06:C50C  29 40       and #SPRITE_0_MASK
  192  06:C50E  F0 F9       beq WaitSprite0      ; wait until sprite 0 is hit
  193                     
  194  06:C510  A2 05       ldx #$05                              ;do a scanline wait
  195  06:C512            WaitScanline:
  196  06:C512  CA          dex
  197  06:C513  D0 FD       bne WaitScanline
  198  06:C515  60          RTS
  199                     
  200                     
  201  06:C516            SetNametableFromIndex:
  202                     
  203  06:C516  48          PHA
  204  06:C517  AD 02 20    LDA PPU_STATUS
  205  06:C51A  68          PLA
  206  06:C51B  0A          ASL A
  207  06:C51C  AA          TAX
  208  06:C51D  BD 4E C5    LDA NameTableMemList+1, x
  209  06:C520  8D 06 20    STA PPU_ADDR
  210  06:C523  BD 4D C5    LDA NameTableMemList, x
  211  06:C526  8D 06 20    STA PPU_ADDR
  212  06:C529  60          RTS
  213                       
  214  06:C52A            UpdatePPUControl:
  215                     
  216  06:C52A  AD 15 00    LDA PPU_Control
  217  06:C52D  29 FC       AND #$FC
  218  06:C52F  0D 1A 00    ORA PPU_NT
  219  06:C532  8D 00 20    STA PPU_CTRL
  220  06:C535  AD 16 00    LDA PPU_Mask
  221  06:C538  8D 01 20    STA PPU_MASK
  222  06:C53B  60          RTS
  223                       
  224  06:C53C            InitPPUControl:
  225                       
  226                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
  227                       ; enable sprites, enable background, no clipping on left side
  228  06:C53C  A9 90       LDA #%10010000
  229  06:C53E  8D 00 20    STA PPU_CTRL
  230  06:C541  8D 15 00    STA PPU_Control
  231  06:C544  A9 1E       LDA #%00011110
  232  06:C546  8D 01 20    STA PPU_MASK
  233  06:C549  8D 16 00    STA PPU_Mask
  234  06:C54C  60          RTS
  235                     
  236  06:C54D            NameTableMemList:
  237  06:C54D  00 20       .word $2000, $2400, $2800, $2C00
       06:C54F  00 24     
       06:C551  00 28     
       06:C553  00 2C     
  238  06:C555            PalettesMemList:
  239  06:C555  00 3F       .word $3F00, $3F04, $3F08, $3F0C
       06:C557  04 3F     
       06:C559  08 3F     
       06:C55B  0C 3F     
  240  06:C55D  10 3F       .word $3F10, $3F14, $3F18, $3F1C  
       06:C55F  14 3F     
       06:C561  18 3F     
       06:C563  1C 3F     
  241                       
  242           0024      BLANK_TILE = $24
#[1]   Picross.asm
#[2]   Routines/Utils/MapperUtils.asm
   89                       .include "Routines/Utils/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:C565            ResetMapper:
    7  06:C565  EE 65 C5    inc ResetMapper
    8  06:C568  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:C569            SetMapperControls:
   23                       ;;A = controls
   24  06:C569  AA          TAX
   25  06:C56A  A9 80       LDA #MAPPERCONTROL
   26  06:C56C  8D 3E 00    STA mapper_address+1
   27  06:C56F  8A          TXA
   28  06:C570  20 95 C5    JSR SendMapperCommand
   29  06:C573  60          RTS
   30                     
   31  06:C574            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:C574  AA                TAX
   35  06:C575  A9 E0             LDA #PRGBANK
   36  06:C577  8D 3E 00          STA mapper_address+1
   37  06:C57A  8A                TXA
   38  06:C57B  20 95 C5          JSR SendMapperCommand
   39  06:C57E  60                RTS
   40                             
   41  06:C57F            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:C57F  AA                TAX
   44  06:C580  A9 A0             LDA #CHRBANK1
   45  06:C582  8D 3E 00          STA mapper_address+1
   46  06:C585  8A                TXA
   47  06:C586  20 95 C5          JSR SendMapperCommand
   48  06:C589  60                RTS
   49                             
   50  06:C58A            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:C58A  AA                TAX
   53  06:C58B  A9 C0             LDA #CHRBANK2
   54  06:C58D  8D 3E 00          STA mapper_address+1
   55  06:C590  8A                TXA
   56  06:C591  20 95 C5          JSR SendMapperCommand
   57  06:C594  60                RTS
   58                             
   59  06:C595            SendMapperCommand:
   60                     
   61  06:C595  A0 00             LDY #$00
   62                             
   63  06:C597  91 3D             STA [mapper_address], y
   64  06:C599  4A                LSR A
   65  06:C59A  91 3D             STA [mapper_address], y
   66  06:C59C  4A                LSR A
   67  06:C59D  91 3D             STA [mapper_address], y
   68  06:C59F  4A                LSR A 
   69  06:C5A0  91 3D             STA [mapper_address], y
   70  06:C5A2  4A                LSR A
   71  06:C5A3  91 3D             STA [mapper_address], y
   72                             
   73  06:C5A5  60                RTS
   74                             
   75  06:C5A6            ResetBanks:
   76                     
   77  06:C5A6  20 65 C5          JSR ResetMapper
   78  06:C5A9  A9 00             LDA #$00
   79  06:C5AB  20 74 C5          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:C5AE  20 65 C5          JSR ResetMapper
   83  06:C5B1  A9 00             LDA #$00
   84  06:C5B3  20 7F C5          JSR LoadCHRBankA
   85  06:C5B6  A9 01             LDA #$01
   86  06:C5B8  20 8A C5          JSR LoadCHRBankB
   87  06:C5BB  60                RTS
   88                             
   89                       
#[1]   Picross.asm
#[2]   Routines/Game_Routines/ScreenEffects.asm
   90                       .include "Routines/Game_Routines/ScreenEffects.asm"
    1  06:C5BC            PopulateClues:
    2                     
    3  06:C5BC            .getByte:
    4  06:C5BC  AC 4B 00    LDY clueTableIndex
    5  06:C5BF  B1 45       LDA [clues_address], y
    6  06:C5C1  D0 07       BNE .checkNewLine
    7  06:C5C3  EE 4B 00    INC clueTableIndex
    8  06:C5C6  A9 00       LDA #$00
    9  06:C5C8  F0 38       BEQ .drawClue
   10                       ;was 0, set up a draw
   11  06:C5CA            .checkNewLine
   12  06:C5CA  C9 FF       CMP #$FF
   13  06:C5CC  D0 17       BNE .getClue
   14                       
   15                       ;;was FF- need to inc stuff
   16  06:C5CE  EE 4B 00    INC clueTableIndex
   17  06:C5D1  A9 00       LDA #$00
   18  06:C5D3  8D 52 00    STA clueParity
   19                       
   20  06:C5D6  EE 4C 00    INC clueLineIndex
   21  06:C5D9  AD 4C 00    LDA clueLineIndex
   22  06:C5DC  C9 0F       CMP #$0F
   23                       ;CMP #$01
   24  06:C5DE  F0 28       BEQ .leave    ;carry will be set
   25                       
   26  06:C5E0  20 7A C6    JSR CreateOffsetFromIndex
   27                      
   28  06:C5E3  D0 D7       BNE .getByte
   29                       
   30  06:C5E5            .getClue:
   31                       ;;clues go from high nibble to low nibble
   32  06:C5E5  48          PHA 
   33  06:C5E6  AD 52 00    LDA clueParity
   34  06:C5E9  D0 0A       BNE .getSecondClue
   35  06:C5EB  EE 52 00    INC clueParity
   36  06:C5EE  68          PLA
   37  06:C5EF  4A          LSR A
   38  06:C5F0  4A          LSR A
   39  06:C5F1  4A          LSR A
   40  06:C5F2  4A          LSR A         ;move clue over to lower nibble
   41  06:C5F3  D0 0D       BNE .drawClue
   42                       
   43  06:C5F5            .getSecondClue:
   44                     
   45  06:C5F5  CE 52 00    DEC clueParity
   46  06:C5F8  EE 4B 00    INC clueTableIndex
   47  06:C5FB  68          PLA 
   48  06:C5FC  29 0F       AND #$0F
   49  06:C5FE  D0 02       BNE .drawClue
   50                       ;;if 0, skip
   51  06:C600  F0 BA       BEQ .getByte
   52                      
   53  06:C602            .drawClue:
   54                       
   55  06:C602  09 40       ORA #$40
   56  06:C604  20 09 C6    JSR WriteClueByteToPPUString
   57  06:C607  18          CLC
   58                       
   59  06:C608            .leave:
   60  06:C608  60          RTS
   61                       
   62  06:C609            WriteClueByteToPPUString:
   63                     
   64  06:C609  8D 00 00    STA temp1 ;store off the tile value
   65                     
   66                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:C60C  A9 01       LDA #$01
       06:C60E  8D 1B 00    STA PPU_PendingWrite
       06:C611  AD 4A 00    LDA clue_draw_address+1
       06:C614  20 E8 C4    JSR WriteToPPUString
       06:C617  AD 49 00    LDA clue_draw_address
       06:C61A  20 E8 C4    JSR WriteToPPUString
       06:C61D  A9 00       LDA #DRAW_HORIZONTAL
       06:C61F  20 E8 C4    JSR WriteToPPUString
       06:C622  A9 01       LDA #$01
       06:C624  20 E8 C4    JSR WriteToPPUString
                            
   67  06:C627  AD 00 00    LDA temp1
   68  06:C62A  20 E8 C4    JSR WriteToPPUString
   69                       
   70  06:C62D  AD 50 00    LDA clueDrawAdd
   71  06:C630  20 57 C6    JSR SubFromClueDrawAddress
   72                         
   73  06:C633  60          RTS
   74                       
   75  06:C634            ResetClueDrawAddress:
   76                     
   77                       MACROGetPointer clue_start_address, clue_draw_address
                          
       06:C634  AD 47 00          LDA clue_start_address
       06:C637  8D 49 00          STA clue_draw_address
       06:C63A  AD 48 00          LDA clue_start_address+1
       06:C63D  8D 4A 00          STA clue_draw_address+1
                          
   78                       
   79  06:C640  60          RTS
   80                       
   81  06:C641            AddToClueDrawAddress:
   82                     
   83  06:C641  8D 00 00    STA temp1
   84                       
   85  06:C644  AD 49 00    LDA clue_draw_address
   86  06:C647  18          CLC
   87  06:C648  6D 00 00    ADC temp1
   88  06:C64B  8D 49 00    STA clue_draw_address
   89  06:C64E  AD 4A 00    LDA clue_draw_address+1
   90  06:C651  69 00       ADC #$00
   91  06:C653  8D 4A 00    STA clue_draw_address+1
   92                       
   93  06:C656  60          RTS
   94                         
   95  06:C657            SubFromClueDrawAddress:
   96                     
   97  06:C657  8D 00 00    STA temp1
   98                       
   99  06:C65A  AD 49 00    LDA clue_draw_address
  100  06:C65D  38          SEC
  101  06:C65E  ED 00 00    SBC temp1
  102  06:C661  8D 49 00    STA clue_draw_address
  103  06:C664  AD 4A 00    LDA clue_draw_address+1
  104  06:C667  E9 00       SBC #$00
  105  06:C669  8D 4A 00    STA clue_draw_address+1
  106                       
  107  06:C66C  60          RTS
  108                       
  109  06:C66D            AddToClueDrawAddressHi:
  110                     
  111  06:C66D  8D 00 00    STA temp1
  112                       
  113  06:C670  AD 4A 00    LDA clue_draw_address+1
  114  06:C673  6D 00 00    ADC temp1
  115  06:C676  8D 4A 00    STA clue_draw_address+1
  116                       
  117  06:C679  60          RTS
  118                       
  119  06:C67A            CreateOffsetFromIndex:
  120                     
  121                       ;;would be this, but we need to be able to go further- so we'll make a doulbe offset
  122  06:C67A  AD 4C 00    LDA clueLineIndex
  123  06:C67D  8D 4E 00    STA clueDrawOffset
  124  06:C680  A9 00       LDA #$00
  125  06:C682  8D 4F 00    STA clueDrawOffset+1
  126                       
  127  06:C685  AD 4D 00    LDA clueOffsetShift   
  128  06:C688  F0 0E       BEQ .addOffset
  129                       
  130  06:C68A  A2 00       LDX #$00
  131                       
  132  06:C68C            .loopShift:
  133  06:C68C  0E 4E 00    ASL clueDrawOffset
  134  06:C68F  2E 4F 00    ROL clueDrawOffset+1
  135  06:C692  E8          INX
  136  06:C693  EC 4D 00    CPX clueOffsetShift
  137  06:C696  D0 F4       BNE .loopShift
  138                       
  139  06:C698            .addOffset:
  140                       
  141  06:C698  20 34 C6    JSR ResetClueDrawAddress
  142  06:C69B  AD 4E 00    LDA clueDrawOffset
  143  06:C69E  20 41 C6    JSR AddToClueDrawAddress 
  144  06:C6A1  AD 4F 00    LDA clueDrawOffset+1
  145  06:C6A4  20 6D C6    JSR AddToClueDrawAddressHi
  146                       
  147  06:C6A7  60          RTS
#[1]   Picross.asm
   91                       
   92                       
   93                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   94                     ;;     NMI                  ;;
   95                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   96                     
#[2]   Routines/Common/NMI.asm
   97                       .include "Routines/Common/NMI.asm"
    1                      
    2  06:C6A8            NMI:
    3                     
    4  06:C6A8  48          PHA                              ;protect the registers
    5  06:C6A9  8A          TXA
    6  06:C6AA  48          PHA
    7  06:C6AB  98          TYA
    8  06:C6AC  48          PHA
    9                       
   10  06:C6AD            nmi_started:
   11  06:C6AD  A9 00       LDA #$00
   12  06:C6AF  8D 03 20    STA OAM_LO      ; set the low byte (00) of the RAM address
   13  06:C6B2  A9 02       LDA #$02
   14  06:C6B4  8D 14 40    STA OAM_HI       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:C6B7  AD 0A 00    LDA NMI_locks
   17  06:C6BA  F0 03       BEQ update_controllers
   18  06:C6BC  4C 14 C7    JMP WakeUp
   19                     
   20  06:C6BF            update_controllers:
   21                     
#[3]   Routines/Common/ReadControllers.asm
   22                       .include "Routines/Common/ReadControllers.asm"
    1                     
    2  06:C6BF  8A            TXA
    3  06:C6C0  48                PHA
    4  06:C6C1  98                TYA
    5  06:C6C2  48                PHA
    6                     
    7  06:C6C3  A2 00             LDX #$00
    8                     
    9  06:C6C5            GamePadCheck:
   10  06:C6C5  A9 01             LDA #$01        ;load 1
   11  06:C6C7  8D 16 40          STA $4016       ; turn latch on
   12                             ;STA gamepad2
   13  06:C6CA  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   14  06:C6CB  8D 16 40          STA $4016       ;turn latch off
   15                             
   16                             ;do a ring counter technique- load %10000000 into both
   17  06:C6CE  A9 80             LDA #$80
   18  06:C6D0  8D 12 00          STA gamepad
   19                     
   20  06:C6D3            ReadControllerABytesLoop:
   21  06:C6D3  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   22  06:C6D6  29 03             AND #%00000011  ;acc: %00000001 c: 0
   23  06:C6D8  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   24                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   25  06:C6DA  6E 12 00          ROR gamepad             ;gamepad: %11000000
   26                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   27  06:C6DD  90 F4             BCC ReadControllerABytesLoop
   28                             
   29                             ;;comapre last to current, find the pressed buttons this frame
   30  06:C6DF  AD 13 00          LDA gamepadLast
   31  06:C6E2  49 FF             EOR #$FF
   32  06:C6E4  2D 12 00          AND gamepad
   33  06:C6E7  8D 14 00          STA gamepadPressed
   34                             
   35                             
   36  06:C6EA  AD 12 00          LDA gamepad
   37  06:C6ED  8D 13 00          STA gamepadLast
   38                             
   39                             ;return x and y... before resetting them all over again- always good to make sure we're clean
   40  06:C6F0  68                PLA
   41  06:C6F1  A8                TAY
   42  06:C6F2  68                PLA
   43  06:C6F3  AA                TAX     
#[2]   Routines/Common/NMI.asm
   23                       
   24  06:C6F4  20 50 C4    JSR ProcessPPUString
   25                       
   26                       
   27  06:C6F7  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   28  06:C6F9  8D 05 20    STA PPU_SCROLL
   29  06:C6FC  8D 05 20    STA PPU_SCROLL
   30                       
   31                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   32                       ; enable sprites, enable background, no clipping on left side 
   33  06:C6FF  20 2A C5    JSR UpdatePPUControl
   34                     
   35  06:C702            NMIUpdate:
   36                     
   37  06:C702  20 08 C7    JSR StateNMIUpdate
   38  06:C705  4C 14 C7    JMP WakeUp
   39                     
   40  06:C708            StateNMIUpdate:
   41                     
   42                       MACROCallDynamicJump game_mode
                          
       06:C708  AD 08 00    LDA game_mode
       06:C70B  20 C1 C3    JSR Dynamic_Jump
                                  
   43                     
   44  06:C70E            NMIJumpTable:
   45                     
   46  06:C70E  1F C7       .word UpdateTitleNMI
   47  06:C710  39 C7       .word UpdateGameNMI
   48  06:C712  3A C7       .word UpdateGameOverNMI
   49                     
   50  06:C714            WakeUp:
   51  06:C714  A9 00       LDA #$00
   52  06:C716  8D 07 00    STA sleeping
   53                       
   54  06:C719  68          PLA             ;restore the registers
   55  06:C71A  A8          TAY 
   56  06:C71B  68          PLA
   57  06:C71C  AA          TAX
   58  06:C71D  68          PLA
   59                     
   60  06:C71E  40          RTI             ; return from interrupt
   61                       
#[3]   Routines/NMI_States/UpdateTitleNMI.asm
   62                       .include "Routines/NMI_States/UpdateTitleNMI.asm"
    1  06:C71F            UpdateTitleNMI:
    2                     
    3                       ;;load bank 0 for BG tiles, so we start with the right tile set
    4                       ;JSR ResetMapper
    5                       ;LDA #$01
    6                       ;JSR LoadCHRBankB
    7                     
    8                     
    9  06:C71F  20 02 C5    JSR DetectSprite0
   10                     
   11                       ;JSR ResetMapper
   12                       ;LDA #$03
   13                       ;JSR LoadCHRBankB
   14                       
   15  06:C722  AD 15 00    LDA PPU_Control
   16  06:C725  29 FC       AND #$FC
   17  06:C727  0D 19 00    ORA PPU_ScrollNT
   18  06:C72A  8D 00 20    STA PPU_CTRL
   19                       
   20  06:C72D  AD 17 00    LDA PPU_ScrollX     ;;tell the ppu there is no background scrolling
   21  06:C730  8D 05 20    STA PPU_SCROLL
   22  06:C733  A9 00       LDA #$00
   23  06:C735  8D 05 20    STA PPU_SCROLL
   24                     
   25                        
   26  06:C738  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameNMI.asm
   63                       .include "Routines/NMI_States/UpdateGameNMI.asm"
    1  06:C739            UpdateGameNMI:
    2  06:C739  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameOverNMI.asm
   64                       .include "Routines/NMI_States/UpdateGameOverNMI.asm"
    1  06:C73A            UpdateGameOverNMI:
    2  06:C73A  60          RTS
#[2]   Routines/Common/NMI.asm
#[1]   Picross.asm
   98                       
   99                     ;;**************************;;
  100                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  101                     ;;       PRG ROM DATA       ;;
  102                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  103                     ;;**************************;; 
  104                       
  105           0007        .bank 7
  106           E000        .org $E000
  107                     
#[2]   NameTables/Tables.asm
  108                       .include "NameTables/Tables.asm"
    1  07:E000            Palettes:
    2                     
    3  07:E000  12 E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E002  32 E0     
       07:E004  52 E0     
    4                     
    5  07:E006            NameTables:
    6                     
    7  07:E006  72 E0       .word Title_Screen, Game_Screen, GameOver_Screen
       07:E008  72 E8     
       07:E00A  72 EC     
    8                       
    9  07:E00C            NameTables2:
   10                     
   11  07:E00C  72 E4       .word Title_Second, Blank_Screen, Blank_Screen
       07:E00E  72 F0     
       07:E010  72 F0     
   12                     
   13  07:E012            Title_Palette:
   14                     
   15  07:E012              .incbin "NameTables/Title_PAL.pal"
   16  07:E022              .incbin "NameTables/Title_PAL.pal"
   17                       
   18  07:E032            Game_Palette:
   19                     
   20  07:E032              .incbin "NameTables/Game_PAL.pal"
   21  07:E042              .incbin "NameTables/Game_PAL.pal"
   22                       
   23  07:E052            GameOver_Palette:
   24                     
   25  07:E052              .incbin "NameTables/GameOver_PAL.pal"
   26  07:E062              .incbin "NameTables/GameOver_PAL.pal"
   27                       
   28  07:E072            Title_Screen:
   29                     
   30  07:E072              .incbin "NameTables/Title_NT.nam"
   31                       
   32  07:E472            Title_Second:
   33                     
   34  07:E472              .incbin "NameTables/Title_PuzzMen_NT.nam"
   35                       
   36  07:E872            Game_Screen: 
   37                     
   38  07:E872              .incbin "NameTables/Game_NT.nam"
   39                       
   40  07:EC72            GameOver_Screen:
   41                     
   42  07:EC72              .incbin "NameTables/GameOver_NT.nam"
   43                       
   44  07:F072            Blank_Screen:
   45                     
   46  07:F072              .incbin "NameTables/Blank_NT.nam"
   47                     
   48                       
   49                     
   50                       
   51                      
   52                             
#[1]   Picross.asm
#[2]   Sprites/Sprites.asm
  109                       .include "Sprites/Sprites.asm"
    1                     
    2                     ;;Byte0
    3                     ;;Y position of top of sprite
    4                     ;;Sprite data is delayed by one scanline; 
    5                     ;;you must subtract 1 from the sprite's 
    6                     ;;Y coordinate before writing it here. 
    7                     ;;Hide a sprite by moving it down offscreen, 
    8                     ;;by writing any values between #$EF-#$FF here. 
    9                     ;;Sprites are never displayed on the first line of the picture, 
   10                     ;;and it is impossible to place a sprite partially off the top of the screen.
   11                     
   12                     ;;Byte 1
   13                     ;;Tile index number
   14                     ;;For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of PPUCTRL ($2000).
   15                     ;;For 8x16 sprites (bit 5 of PPUCTRL set), the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
   16                     ;;76543210
   17                     ;;||||||||
   18                     ;;|||||||+- Bank ($0000 or $1000) of tiles
   19                     ;;+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
   20                     
   21                     ;;Byte 2
   22                     ;;Attributes
   23                     ;;76543210
   24                     ;;||||||||
   25                     ;;||||||++- Palette (4 to 7) of sprite
   26                     ;;|||+++--- Unimplemented (read 0)
   27                     ;;||+------ Priority (0: in front of background; 1: behind background)
   28                     ;;|+------- Flip sprite horizontally
   29                     ;;+-------- Flip sprite vertically
   30                     
   31                     ;;Byte 3
   32                     ;;X position of left side of sprite.
   33                     ;;X-scroll values of $F9-FF results in parts of the 
   34                     ;;sprite to be past the right edge of the screen, thus invisible.
   35                     ;;It is not possible to have a sprite partially visible on the left edge. 
   36                     ;;Instead, left-clipping through PPUMASK ($2001) can be used to simulate this effect.
   37  07:F472            Sprites:
   38  07:F472  78 F4             .word Title_Sprites, Game_Sprites, GameOver_Sprites
       07:F474  7C F4     
       07:F476  80 F4     
   39                     
   40  07:F478            Title_Sprites:
   41  07:F478  85 00 00          .db $85,$00,$00,$E8
       07:F47B  E8        
   42  07:F47C            Game_Sprites:
   43  07:F47C  62 00 03          .db $62,$00,$03,$72
       07:F47F  72        
   44  07:F480            GameOver_Sprites:
   45  07:F480  00 00 00          .db $00,$00,$00,$00
       07:F483  00        
#[1]   Picross.asm
  110                     
  111           FFFA        .org $FFFA     ;first of the three vectors starts here
  112  07:FFFA  A8 C6       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  113                                        ;processor will jump to the label NMI:
  114  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  115                                        ;to the label RESET:
  116  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  117                       
  118                     ;;**************************;;
  119                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  120                     ;;      CHR ROM DATA        ;;
  121                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  122                     ;;**************************;; 
  123                       
  124           0008        .bank 8
  125           0000        .org $0000
  126  08:0000              .incbin "CHRROM/Bank0.chr"   ;includes 8KB graphics file from SMB1
  127                       
  128           0009        .bank 9
  129           0000        .org $0000
  130  09:0000              .incbin "CHRROM/Bank1.chr"
  131                       
  132           000A        .bank 10
  133           0000        .org $0000
  134  0A:0000              .incbin "CHRROM/Bank2.chr"
  135                       
  136           000B        .bank 11
  137           0000        .org $0000
  138  0B:0000              .incbin "CHRROM/Bank3.chr"
