#[1]   Picross.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/Defines.asm
   14                       .include "Defines/Defines.asm"
    1                     ;; define 0 page stuff here, and SRAM stuff if we have it
    2                     
    3           0000        .rsset $0000
#[3]   Defines/GeneralVars.asm
    4                       .include "Defines/GeneralVars.asm"
    1           0000      temp1                   .rs 1
    2           0001      temp2                   .rs 1
    3           0002      temp3                   .rs 1
    4           0003      temp4                   .rs 1
    5           0004      temp5                   .rs 1
    6           0005      temp6                   .rs 1
    7           0006      temp7                   .rs 1
    8           0007      temp8                   .rs 1
    9           0008      tempx                   .rs 1
   10           0009      tempy                   .rs 1
   11           000A      time                    .rs 1
   12           000B      scaledTime              .rs 1
   13           000C      sleeping                .rs 1
   14           000D      mode_loadFlags  .rs 1
   15                     ;;0rcb xxxx
   16                     ;;r = read from save copy 
   17                     ;;c = write to save copy
   18           000E      game_mode               .rs 1
   19           000F      mode_state              .rs 1
   20           0010      NMI_locks               .rs 1
   21           0011      game_locks              .rs 1
   22           0012      pointer_address .rs 2
   23           0014      pointerB_address .rs 2
   24           0016      table_address   .rs 2
   25           0018      jump_address    .rs 2
   26                     
   27                     ;game modes
   28           0000      TITLE_IDX = $00
   29           0001      GAME_IDX = $01
   30           0002      GAMEOVER_IDX = $02
   31                     
   32                     ;locks for input and rendering
   33           0001      BGLOAD_NMI_LOCK = %00000001
   34           0001      EFFECT_GAME_LOCK = %00000001
   35                     
   36                     
   37                     
#[2]   Defines/Defines.asm
#[3]   Defines/ControllerVars.asm
    5                       .include "Defines/ControllerVars.asm"
    1           0010      GAMEPAD_UP = $10
    2           0020      GAMEPAD_DOWN = $20
    3           0040      GAMEPAD_LEFT = $40
    4           0080      GAMEPAD_RIGHT = $80
    5           0001      GAMEPAD_A = $01
    6           0002      GAMEPAD_B = $02
    7           0004      GAMEPAD_SELECT = $04
    8           0008      GAMEPAD_START = $08
    9                     
   10           00C0      GAMEPAD_HORI = $C0
   11           0030      GAMEPAD_VERT = $30
   12           00F0      GAMEPAD_MOVE = $F0
   13                     
   14           0003      GAMEPAD_AB = $03
   15                     
   16           0009      GAMEPAD_CONFIRM = $09
   17                     
   18           001A      gamepad                 .rs 1
   19           001B      gamepadLast     .rs 1
   20           001C      gamepadPressed  .rs 1
#[2]   Defines/Defines.asm
#[3]   Defines/PPUVariables.asm
    6                       .include "Defines/PPUVariables.asm"
    1           001D      PPU_Control                     .rs 1
    2           001E      PPU_Mask                        .rs 1
    3           001F      PPU_ScrollX                     .rs 1
    4           0020      PPU_ScrollY                     .rs 1
    5           0021      PPU_ScrollNT            .rs 1   ;first two bits
    6           0022      PPU_NT                          .rs 1
    7                     
    8           0023      PPU_PendingWrite        .rs 1
    9           0024      PPU_StringIdx           .rs 1
   10           0025      PPU_String                      .rs 128
   11                     
   12           004F      PPU_STRINGMAX = $4F ;up to size of a full nametable, I think
   13                     
   14           0000      SPRITE_YPOS = $00
   15           0001      SPRITE_ID   = $01
   16           0003      SPRITE_XPOS = $03
   17           0200      SPRITE_DATA = $0200
   18                     
   19           2000      PPU_CTRL = $2000
   20           2001      PPU_MASK = $2001
   21           2002      PPU_STATUS = $2002
   22           2003      OAM_LO = $2003
   23           2004      OAM_DATA = $2004
   24           2005      PPU_SCROLL = $2005
   25           2006      PPU_ADDR = $2006
   26           2007      PPU_DATA = $2007
   27           4014      OAM_HI = $4014
   28                     
   29           0080      DRAW_VERTICAL = $80
   30           0000      DRAW_HORIZONTAL = $00
   31                     
   32           0040      SPRITE_0_MASK = %01000000
#[2]   Defines/Defines.asm
#[3]   Defines/MapperVars.asm
    7                       .include "Defines/MapperVars.asm"
    1           00A5      mapper_address  .rs 2
    2           00A7      currentCHRBankA .rs 1
    3           00A8      currentCHRBankB .rs 1
    4           00A9      currentPRGBank  .rs 1
    5           00AA      mapperDebugVar  .rs 1
    6                     
    7                     
#[2]   Defines/Defines.asm
#[3]   Defines/TitleVariables.asm
    8                       .include "Defines/TitleVariables.asm"
    1                     
#[2]   Defines/Defines.asm
#[3]   Defines/GameVariables.asm
    9                       .include "Defines/GameVariables.asm"
    1           A000      PUZZLE_TABLE = $A000
    2           A036      NAMES_TABLE = $A036
    3           A06C      SPRITES_TABLE = $A06C
    4                     
    5           00AB      tempBank                        .rs 1
    6           00AC      tempPuzz                        .rs 1
    7           00AD      puzzle_address          .rs 2
    8           00AF      clues_address           .rs 2
    9           00B1      title_address           .rs 2
   10           00B3      pause_address           .rs 2
   11           00B5      copy_address        .rs 2
   12           00B7      pause_draw_address  .rs 2
   13           00B9      title_draw_address      .rs 2
   14           00BB      clue_start_address      .rs 2
   15           00BD      clue_draw_address       .rs 2
   16           00BF      clueTableIndex          .rs 1
   17           00C0      clueLineIndex           .rs 1
   18           00C1      clueOffsetShift         .rs 1
   19           00C2      clueDrawAdd                     .rs 1
   20           00C3      clueDrawOffset          .rs 2
   21           00C5      clueDrawDecSize         .rs 1
   22           00C6      clueParity                      .rs 1
   23           00C7      mouse_location          .rs 2
   24           00C9      mouse_index                     .rs 2
   25           00CB      currentPaintTile        .rs 1
   26           00CC      pauseState                      .rs 1
   27           00CD      pauseInputLock          .rs 1
   28           00CE      holdTimer                       .rs 1
   29           00CF      targetGameMode          .rs 1
   30           00D0      targetScreenLoad        .rs 1
   31           00D1      recordSet                       .rs 1
#[2]   Defines/Defines.asm
#[3]   External/SoundVariables_ZP.asm
   10                       .include "External/SoundVariables_ZP.asm"
    1           00D2      sound_ptr .rs 2
    2           00D4      sound_ptr2 .rs 2
    3           00D6      current_song .rs 1
#[2]   Defines/Defines.asm
   11                     
   12                     ;; 0100 is the stack
   13                     ;; 0200 is sprite ram
   14           0300        .rsset $0300
#[3]   External/SoundVariables.asm
   15                       .include "External/SoundVariables.asm"
    1           0000      SQUARE_1 = $00 ;these are channel constants
    2           0001      SQUARE_2 = $01
    3           0002      TRIANGLE = $02
    4           0003      NOISE = $03
    5           0004      DPMC = $04
    6                     
    7           0000      MUSIC_SQ1       = $00 ;these are stream # constants
    8           0001      MUSIC_SQ2       = $01 ;stream # is used to index into variables
    9           0002      MUSIC_TRI       = $02
   10           0003      MUSIC_NOI       = $03
   11           0004      SFX_1           = $04
   12           0005      SFX_2           = $05
   13           0006      MUSIC_DPMC      = $06
   14           0007      SFX_DPMC        = $07
   15                     
   16           0000      ve_short_staccato = $00
   17           0001      ve_fade_in = $01
   18           0002      ve_blip_echo = $02
   19           0003      ve_tgl_1 = $03
   20           0004      ve_tgl_2 = $04
   21           0005      ve_battlekid_1 = $05
   22           0006      ve_battlekid_1b = $06
   23           0007      ve_battlekid_2 = $07
   24           0008      ve_battlekid_2b = $08
   25           0009      ve_drum_decay = $09
   26           000A      ve_hiHat_decay = $0A
   27           000B      ve_long_decay = $0B
   28           000C      ve_tinyDecy = $0C
   29           000D      ve_noDecay = $0D
   30           000E      ve_long_tremelo = $0E
   31                     
   32                     ;these are aliases to use in the sound data.
   33           00A0      endsound = $A0
   34           00A1      loop = $A1
   35           00A2      volume_envelope = $A2
   36           00A3      duty = $A3
   37           00A4      set_loop1_counter = $A4
   38           00A5      loop1 = $A5
   39           00A6      set_note_offset = $A6
   40           00A7      adjust_note_offset = $A7
   41           00A8      transpose = $A8
   42           00A9      pitch_envelope = $A9
   43           00AA      arpeggio = $AA
   44                     
   45           0000      pe_none = $00
   46           0001      pe_mod = $01
   47           0002      pe_sweep = $02
   48           0003      pe_bassKick = $03
   49                     
   50                     ;Note: octaves in music traditionally start at C, not A    
   51           0000      A1 = $00    ;the "1" means Octave 1
   52           0001      As1 = $01   ;the "s" means "sharp"
   53           0001      Bb1 = $01   ;the "b" means "flat"  A# == Bb, so same value
   54           0002      B1 = $02
   55                     
   56           0003      C2 = $03
   57           0004      Cs2 = $04
   58           0004      Db2 = $04
   59           0005      D2 = $05
   60           0006      Ds2 = $06
   61           0006      Eb2 = $06
   62           0007      E2 = $07
   63           0008      F2 = $08
   64           0009      Fs2 = $09
   65           0009      Gb2 = $09
   66           000A      G2 = $0A
   67           000B      Gs2 = $0B
   68           000B      Ab2 = $0B
   69           000C      A2 = $0C
   70           000D      As2 = $0D
   71           000D      Bb2 = $0D
   72           000E      B2 = $0E
   73                     
   74           000F      C3 = $0F
   75           0010      Cs3 = $10
   76           0010      Db3 = $10
   77           0011      D3 = $11
   78           0012      Ds3 = $12
   79           0012      Eb3 = $12
   80           0013      E3 = $13
   81           0014      F3 = $14
   82           0015      Fs3 = $15
   83           0015      Gb3 = $15
   84           0016      G3 = $16
   85           0017      Gs3 = $17
   86           0017      Ab3 = $17
   87           0018      A3 = $18
   88           0019      As3 = $19
   89           0019      Bb3 = $19
   90           001A      B3 = $1a
   91                     
   92           001B      C4 = $1b
   93           001C      Cs4 = $1c
   94           001C      Db4 = $1c
   95           001D      D4 = $1d
   96           001E      Ds4 = $1e
   97           001E      Eb4 = $1e
   98           001F      E4 = $1f
   99           0020      F4 = $20
  100           0021      Fs4 = $21
  101           0021      Gb4 = $21
  102           0022      G4 = $22
  103           0023      Gs4 = $23
  104           0023      Ab4 = $23
  105           0024      A4 = $24
  106           0025      As4 = $25
  107           0025      Bb4 = $25
  108           0026      B4 = $26
  109                     
  110           0027      C5 = $27
  111           0028      Cs5 = $28
  112           0028      Db5 = $28
  113           0029      D5 = $29
  114           002A      Ds5 = $2a
  115           002A      Eb5 = $2a
  116           002B      E5 = $2b
  117           002C      F5 = $2c
  118           002D      Fs5 = $2d
  119           002D      Gb5 = $2d
  120           002E      G5 = $2e
  121           002F      Gs5 = $2f
  122           002F      Ab5 = $2f
  123           0030      A5 = $30
  124           0031      As5 = $31
  125           0031      Bb5 = $31
  126           0032      B5 = $32
  127                     
  128           0033      C6 = $33
  129           0034      Cs6 = $34
  130           0034      Db6 = $34
  131           0035      D6 = $35
  132           0036      Ds6 = $36
  133           0036      Eb6 = $36
  134           0037      E6 = $37
  135           0038      F6 = $38
  136           0039      Fs6 = $39
  137           0039      Gb6 = $39
  138           003A      G6 = $3a
  139           003B      Gs6 = $3b
  140           003B      Ab6 = $3b
  141           003C      A6 = $3c
  142           003D      As6 = $3d
  143           003D      Bb6 = $3d
  144           003E      B6 = $3e
  145                     
  146           003F      C7 = $3f
  147           0040      Cs7 = $40
  148           0040      Db7 = $40
  149           0041      D7 = $41
  150           0042      Ds7 = $42
  151           0042      Eb7 = $42
  152           0043      E7 = $43
  153           0044      F7 = $44
  154           0045      Fs7 = $45
  155           0045      Gb7 = $45
  156           0046      G7 = $46
  157           0047      Gs7 = $47
  158           0047      Ab7 = $47
  159           0048      A7 = $48
  160           0049      As7 = $49
  161           0049      Bb7 = $49
  162           004A      B7 = $4a
  163                     
  164           004B      C8 = $4b
  165           004C      Cs8 = $4c
  166           004C      Db8 = $4c
  167           004D      D8 = $4d
  168           004E      Ds8 = $4e
  169           004E      Eb8 = $4e
  170           004F      E8 = $4f
  171           0050      F8 = $50
  172           0051      Fs8 = $51
  173           0051      Gb8 = $51
  174           0052      G8 = $52
  175           0053      Gs8 = $53
  176           0053      Ab8 = $53
  177           0054      A8 = $54
  178           0055      As8 = $55
  179           0055      Bb8 = $55
  180           0056      B8 = $56
  181                     
  182           0057      C9 = $57
  183           0058      Cs9 = $58
  184           0058      Db9 = $58
  185           0059      D9 = $59
  186           005A      Ds9 = $5a
  187           005A      Eb9 = $5a
  188           005B      E9 = $5b
  189           005C      F9 = $5c
  190           005D      Fs9 = $5d
  191           005D      Gb9 = $5d
  192                     
  193           005E      rest = $5e
  194           0070      d_rest = $70
  195                     
  196                     ;note length constants (aliases)
  197           0080      thirtysecond = $80
  198           0081      sixteenth = $81
  199           0082      eighth = $82
  200           0083      quarter = $83
  201           0084      half = $84
  202           0085      whole = $85
  203           0086      d_sixteenth = $86
  204           0087      d_eighth = $87
  205           0088      d_quarter = $88
  206           0089      d_half = $89
  207           008A      d_whole = $8A   ;don't forget we are counting in hex
  208           008B      t_quarter = $8B
  209           008C      five_eighths =$8C
  210           008D      five_sixteenths=$8D
  211           008E      d_half_d_eight = $8E
  212           008F      whole_quarter_sixteenth = $8F
  213           0090      d_half_eighth = $90
  214           0091      whole_sixteenth = $91
  215           0092      sixtyfourth = $92
  216                     
  217           0000      arp_none = $00
  218           0001      arp_lowerThird = $01
  219                     
  220                     
  221           0300      sound_disable_flag  .rs 1   ;a flag variable that keeps track of whether the sound engine is disabled or not. 
  222           0301      sound_temp1 .rs 1           ;temporary variables
  223           0302      sound_temp2 .rs 1
  224           0303      sound_sq1_old .rs 1  ;the last value written to $4003
  225           0304      sound_sq2_old .rs 1  ;the last value written to $4007
  226           0305      soft_apu_ports .rs 20
  227                     
  228                     ;reserve 6 bytes, one for each stream
  229           0319      stream_curr_sound .rs 8     ;current song/sfx loaded
  230           0321      stream_status .rs 8         ;status byte.   bit0: (1: stream enabled; 0: stream disabled)
  231           0329      stream_channel .rs 8        ;what channel is this stream playing on?
  232           0331      stream_ptr_LO .rs 8         ;low byte of pointer to data stream
  233           0339      stream_ptr_HI .rs 8         ;high byte of pointer to data stream
  234           0341      stream_ve .rs 8             ;current volume envelope
  235           0349      stream_ve_index .rs 8       ;current position within the volume envelope
  236           0351      stream_vol_duty .rs 8       ;stream volume/duty settings
  237           0359      stream_note_idx .rs 8
  238           0361      stream_note_LO .rs 8        ;low 8 bits of period for the current note on a stream
  239           0369      stream_note_HI .rs 8        ;high 3 bits of period for the current note on a stream 
  240           0371      stream_tempo .rs 8          ;the value to add to our ticker total each frame
  241           0379      stream_ticker_total .rs 8   ;our running ticker total.
  242           0381      stream_note_length_counter .rs 8
  243           0389      stream_note_length .rs 8
  244           0391      stream_loop1 .rs 8          ;loop counter
  245           0399      stream_note_offset .rs 6
  246           039F      stream_pe .rs 8             ;current volume envelope
  247           03A7      stream_pe_index .rs 8       ;current position within the volume envelope
  248           03AF      stream_pe_offset .rs 8
  249           03B7      stream_pe_delay .rs 8
  250           03BF      stream_arp .rs 8
  251           03C7      stream_arp_index .rs 8
  252           03CF      stream_arp_offset .rs 8
#[2]   Defines/Defines.asm
   16           0400        .rsset $0400
   17           0500        .rsset $0500
   18           0600        .rsset $0600
   19           0700        .rsset $0700
   20           6000        .rsset $6000
#[3]   Defines/ScreenStateVariables.asm
   21                       .include "Defines/ScreenStateVariables.asm"
    1           6000      Screen_Copy             .rs 1024
    2           6400      ScreenB_Copy    .rs 1024
    3           6800      SaveScreen_Copy .rs 1024
    4           6C00      Palette_Copy    .rs 32
#[2]   Defines/Defines.asm
   22           7000        .rsset $7000
#[3]   Defines/SaveVariables.asm
   23                       .include "Defines/SaveVariables.asm"
    1           7000      hasContinue .rs 1
    2           7001      solutionCount           .rs 1
    3           7002      nonSolutionCount        .rs 1
    4           7003      GameTime                        .rs 4   ;in order - second, ten second, minute, 10 minute - max out at 99 minutes
    5           7007      bank_index      .rs 1
    6           7008      puzzle_index .rs 1
    7           7009      image_table_offset .rs 1
    8                     ;we can save these for the continue
    9                     ;on a continue- we just need to load the back ground as it was
   10                     ;we'll save out data for the puzzles- just need to know if it's 1) complete and 2) the time
   11                     ;we can do that in 4 bytes each, so 324 bytes
   12           700A      puzzle_clear_bank0 .rs 108
   13           7076      puzzle_clear_bank1 .rs 108
   14           70E2      puzzle_clear_bank2 .rs 108
   15                     
#[2]   Defines/Defines.asm
   24                     
   25                     
   26                     ;precompiled labels
   27                     
#[3]   SoundEnginePreComp.fns
   28                       .include "SoundEnginePreComp.fns"
    1                     ; SoundEnginePreComp.asm
    2           A51A      endScreen_square1                = $A51A
    3           A625      se_op_adjust_note_offset         = $A625
    4           A53B      endScreen_square2                = $A53B
    5           A10B      sound_load                       = $A10B
    6           A4F1      menu_header                      = $A4F1
    7           A668      note_table                       = $A668
    8           A46B      se_set_apu                       = $A46B
    9           A262      se_do_dpmc                       = $A262
   10           A60C      se_op_set_loop1_counter          = $A60C
   11           A2A0      se_check_rest                    = $A2A0
   12           A7AC      se_battlekid_loud                = $A7AC
   13           A4E0      song0_header                     = $A4E0
   14           A3B3      se_set_stream_pitch              = $A3B3
   15           A2FF      se_set_stream_volume             = $A2FF
   16           A806      se_tinyDecy                      = $A806
   17           A86F      se_pe_bassKick                   = $A86F
   18           A2D1      se_set_temp_ports                = $A2D1
   19           A845      se_pe_mod                        = $A845
   20           A591      menuCursor_header                = $A591
   21           A5B5      sound_opcodes                    = $A5B5
   22           A1BC      se_fetch_byte                    = $A1BC
   23           A5CB      se_op_endsound                   = $A5CB
   24           A7BE      se_battlekid_soft_long           = $A7BE
   25           A24C      se_do_noise                      = $A24C
   26           A799      se_ve_tgl_1                      = $A799
   27           A87A      se_arp_none                      = $A87A
   28           A55C      endScreen_tri                    = $A55C
   29           A726      note_length_table                = $A726
   30           A5E4      se_op_infinite_loop              = $A5E4
   31           A7A1      se_ve_tgl_2                      = $A7A1
   32           A65D      se_op_change_arp                 = $A65D
   33           A5FB      se_op_change_ve                  = $A5FB
   34           A87C      se_arp_lowerThird                = $A87C
   35           A59D      puzzleCursor_header              = $A59D
   36           A59A      menuCursor_square2               = $A59A
   37           A5B2      noiseBlip_noise                  = $A5B2
   38           A62F      se_op_transpose                  = $A62F
   39           A0EA      se_silence                       = $A0EA
   40           A2B6      se_opcode_launcher               = $A2B6
   41           A35B      se_set_stream_arpeggio           = $A35B
   42           A859      se_pe_sweep                      = $A859
   43           A809      se_noDecay                       = $A809
   44           A876      arpeggios                        = $A876
   45           A757      se_ve_1                          = $A757
   46           A61F      se_op_set_note_offset            = $A61F
   47           A606      se_op_duty                       = $A606
   48           A881      BankSong                         = $A881
   49           A64F      se_op_change_pe                  = $A64F
   50           A75F      se_ve_2                          = $A75F
   51           A776      se_ve_3                          = $A776
   52           A739      volume_envelopes                 = $A739
   53           A612      se_op_loop1                      = $A612
   54           A185      sound_play_frame                 = $A185
   55           A80B      se_long_tremelo                  = $A80B
   56           A5A9      noiseBlip_header                 = $A5A9
   57           A5A6      puzzleCursor_square2             = $A5A6
   58           A100      sound_disable                    = $A100
   59           A583      endScreen_noise                  = $A583
   60           A7D3      se_long_decay                    = $A7D3
   61           A7B2      se_battlekid_loud_long           = $A7B2
   62           A4D0      song_headers                     = $A4D0
   63           A7C4      se_drum_decay                    = $A7C4
   64           A4F4      drawImg_header                   = $A4F4
   65           A4F7      endScreen_header                 = $A4F7
   66           A843      se_pe_none                       = $A843
   67           A0D8      sound_init                       = $A0D8
   68           A7CE      se_hiHat_decay                   = $A7CE
   69           A7B8      se_battlekid_soft                = $A7B8
   70           A83B      pitch_envelopes                  = $A83B
#[2]   Defines/Defines.asm
   29                       ;.include "Picross.fns"
   30                       
#[1]   Picross.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/PPUMacros.asm
    3                             .include "Macros/PPUMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetPPUControl .macro
    6                     
    7                       LDA #\1  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    8                       STA PPU_CTRL
    9                       LDA #\2   ; enable sprites, enable background, no clipping on left side
   10                       STA PPU_MASK
   11                             
   12                       .endm
   13                       
   14                     MACROSetPPUAddress .macro
   15                     
   16                       LDA PPU_STATUS             ; read PPU status to reset the high/low latch
   17                       LDA #HIGH(\1)
   18                       STA PPU_ADDR            ; write the high byte of $2000 address
   19                       LDA #LOW(\1)
   20                       STA PPU_ADDR           ; write the low byte of $2000 address
   21                       
   22                       .endm
   23                         
   24                     
   25                     MACROAddPPUStringEntryRawData .macro
   26                     
   27                       LDA #$01
   28                       STA PPU_PendingWrite
   29                       LDA \1
   30                       JSR WriteToPPUString
   31                       LDA \2
   32                       JSR WriteToPPUString
   33                       LDA \3
   34                       JSR WriteToPPUString
   35                       LDA \4 
   36                       JSR WriteToPPUString
   37                       
   38                       .endm
   39                     
   40                     MACROAddPPUStringEntryRepeat .macro
   41                     
   42                       LDA #$01
   43                       STA PPU_PendingWrite
   44                       LDA \1
   45                       JSR WriteToPPUString
   46                       LDA \2
   47                       JSR WriteToPPUString
   48                       LDA #$40
   49                       ORA \3
   50                       ORA \4
   51                       JSR WriteToPPUString
   52                       LDA \5
   53                       JSR WriteToPPUString
   54                       
   55                       .endm
   56                       
   57                     MACROAddPPUStringEntryTable .macro
   58                      
   59                       LDA #$01
   60                       STA PPU_PendingWrite
   61                       LDA \1
   62                       JSR WriteToPPUString
   63                       LDA \2
   64                       JSR WriteToPPUString
   65                       LDA #$20
   66                       ORA \3
   67                       JSR WriteToPPUString
   68                       LDA #LOW(\4)
   69                       JSR WriteToPPUString
   70                       LDA #HIGH(\4)
   71                       JSR WriteToPPUString
   72                      
   73                       .endm
   74                     
   75                     MACROAddPPUStringEntryTablePtr .macro
   76                      
   77                       LDA #$01
   78                       STA PPU_PendingWrite
   79                       LDA \1
   80                       JSR WriteToPPUString
   81                       LDA \2
   82                       JSR WriteToPPUString
   83                       LDA #$20
   84                       ORA \3
   85                       JSR WriteToPPUString
   86                       LDA \4
   87                       JSR WriteToPPUString
   88                       LDA \4+1
   89                       JSR WriteToPPUString
   90                      
   91                       .endm
   92                     
#[2]   Macros/Macros.asm
#[3]   Macros/CallDynamicJump.asm
    4                             .include "Macros/CallDynamicJump.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROCallDynamicJump .macro
    6                     
    7                       LDA \1
    8                       JSR Dynamic_Jump
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetDoubleIndex.asm
    5                             .include "Macros/GetDoubleIndex.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = index to double
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROGetDoubleIndex .macro
    5                     
    6                             LDA \1
    7                             ASL A
    8                             TAY
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetLabelPointer.asm
    6                             .include "Macros/GetLabelPointer.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label we want address of
    3                     ;; \2 = address to store address to
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROGetLabelPointer .macro
    6                     
    7                             LDA #HIGH(\1)
    8                             LDX #LOW(\1)
    9                             
   10                             STX \2
   11                             STA \2+1
   12                             
   13                       .endm
   14                       
   15                     MACROGetPointer .macro
   16                     
   17                             LDA \1
   18                             STA \2
   19                             LDA \1+1
   20                             STA \2+1
   21                     
   22                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/FlagMacros.asm
    7                             .include "Macros/FlagMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetFlags .macro
    6                     
    7                       LDA \1
    8                       ORA #\2
    9                       STA \1
   10                             
   11                       .endm
   12                       
   13                     MACROClearFlags .macro
   14                     
   15                       LDA #\2
   16                       EOR #$FF
   17                       AND \1  
   18                       STA \1
   19                     
   20                       .endm
#[2]   Macros/Macros.asm
#[1]   Picross.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1                     
    2                     
    3           0000        .bank 0
    4           8000        .org $8000
    5                       
#[3]   Puzzles/B0.asm
    6                       .include "Puzzles/B0.asm"
    1  00:8000            B0_equal_sign:
    2  00:8000  00 06 00    .db $00, $06, $00, $00, $10, $20
       00:8003  00 10 20  
    3  00:8006  00 70 00    .db $00, $70, $00, $70, $00
       00:8009  70 00     
    4  00:800B  00 FF 11    .db $00, $FF, $11, $FF, $11, $FF, $11, $FF, $00, $FF
       00:800E  FF 11 FF  
       00:8011  11 FF 00  
       00:8014  FF        
    5  00:8015  00 FF 30    .db $00, $FF, $30, $FF, $00, $FF, $30, $FF, $00, $FF
       00:8018  FF 00 FF  
       00:801B  30 FF 00  
       00:801E  FF        
    6  00:801F            B0_equal_signImage:
    7  00:801F  AA AF EA   .db $AA, $AF, $EA, $56, $FE, $A5, $40, $FF
       00:8022  56 FE A5  
       00:8025  40 FF     
    8  00:8027            B0_equal_signName:
    9  00:8027  0A 0E 1A    .db $0A, $0E, $1A, $1E, $0A, $15, $24, $1C, $12, $10, $17, $FF
       00:802A  1E 0A 15  
       00:802D  24 1C 12  
       00:8030  10 17 FF  
   10                     
   11  00:8033            B0_plus_sign:
   12  00:8033  00 05 00    .db $00, $05, $00, $00, $10, $20
       00:8036  00 10 20  
   13  00:8039  00 20 70    .db $00, $20, $70, $20, $00
       00:803C  20 00     
   14  00:803E  00 FF 10    .db $00, $FF, $10, $FF, $30, $FF, $10, $FF, $00, $FF
       00:8041  FF 30 FF  
       00:8044  10 FF 00  
       00:8047  FF        
   15  00:8048  00 FF 10    .db $00, $FF, $10, $FF, $30, $FF, $10, $FF, $00, $FF
       00:804B  FF 30 FF  
       00:804E  10 FF 00  
       00:8051  FF        
   16  00:8052            B0_plus_signImage:
   17  00:8052  AA AB AB   .db $AA, $AB, $AB, $FA, $B5, $A9, $80, $FF
       00:8055  FA B5 A9  
       00:8058  80 FF     
   18  00:805A            B0_plus_signName:
   19  00:805A  09 19 15    .db $09, $19, $15, $1E, $1C, $24, $1C, $12, $10, $17, $FF
       00:805D  1E 1C 24  
       00:8060  1C 12 10  
       00:8063  17 FF     
   20                     
   21  00:8065            B0_c:
   22  00:8065  00 10 00    .db $00, $10, $00, $00, $10, $20
       00:8068  00 10 20  
   23  00:806B  70 F0 C0    .db $70, $F0, $C0, $F0, $70
       00:806E  F0 70     
   24  00:8070  30 FF 50    .db $30, $FF, $50, $FF, $22, $FF, $22, $FF, $00, $FF
       00:8073  FF 22 FF  
       00:8076  22 FF 00  
       00:8079  FF        
   25  00:807A  30 FF 40    .db $30, $FF, $40, $FF, $20, $FF, $40, $FF, $30, $FF
       00:807D  FF 20 FF  
       00:8080  40 FF 30  
       00:8083  FF        
   26  00:8084            B0_cImage:
   27  00:8084  BF BF EF   .db $BF, $BF, $EF, $AB, $FE, $BF, $80, $FF
       00:8087  AB FE BF  
       00:808A  80 FF     
   28  00:808C            B0_cName:
   29  00:808C  01 0C FF    .db $01, $0C, $FF
   30                     
   31  00:808F            B0_a:
   32  00:808F  00 11 00    .db $00, $11, $00, $00, $10, $20
       00:8092  00 10 20  
   33  00:8095  20 70 D8    .db $20, $70, $D8, $F8, $D8
       00:8098  F8 D8     
   34  00:809A  30 FF 40    .db $30, $FF, $40, $FF, $12, $FF, $40, $FF, $30, $FF
       00:809D  FF 12 FF  
       00:80A0  40 FF 30  
       00:80A3  FF        
   35  00:80A4  10 FF 30    .db $10, $FF, $30, $FF, $22, $FF, $50, $FF, $22, $FF
       00:80A7  FF 22 FF  
       00:80AA  50 FF 22  
       00:80AD  FF        
   36  00:80AE            B0_aImage:
   37  00:80AE  AE AF EF   .db $AE, $AF, $EF, $BF, $FF, $FB, $C0, $FF
       00:80B1  BF FF FB  
       00:80B4  C0 FF     
   38  00:80B6            B0_aName:
   39  00:80B6  01 0A FF    .db $01, $0A, $FF
   40                     
   41  00:80B9            B0_t:
   42  00:80B9  00 0D 00    .db $00, $0D, $00, $00, $10, $20
       00:80BC  00 10 20  
   43  00:80BF  F8 F8 20    .db $F8, $F8, $20, $20, $20
       00:80C2  20 20     
   44  00:80C4  20 FF 20    .db $20, $FF, $20, $FF, $50, $FF, $20, $FF, $20, $FF
       00:80C7  FF 50 FF  
       00:80CA  20 FF 20  
       00:80CD  FF        
   45  00:80CE  50 FF 50    .db $50, $FF, $50, $FF, $10, $FF, $10, $FF, $10, $FF
       00:80D1  FF 10 FF  
       00:80D4  10 FF 10  
       00:80D7  FF        
   46  00:80D8            B0_tImage:
   47  00:80D8  FF FF FA   .db $FF, $FF, $FA, $EA, $BA, $AE, $80, $FF
       00:80DB  EA BA AE  
       00:80DE  80 FF     
   48  00:80E0            B0_tName:
   49  00:80E0  01 1D FF    .db $01, $1D, $FF
   50                     
   51  00:80E3            B0_f:
   52  00:80E3  00 0F 00    .db $00, $0F, $00, $00, $10, $20
       00:80E6  00 10 20  
   53  00:80E9  F8 F8 80    .db $F8, $F8, $80, $E0, $80
       00:80EC  E0 80     
   54  00:80EE  50 FF 12    .db $50, $FF, $12, $FF, $12, $FF, $20, $FF, $20, $FF
       00:80F1  FF 12 FF  
       00:80F4  20 FF 20  
       00:80F7  FF        
   55  00:80F8  50 FF 50    .db $50, $FF, $50, $FF, $10, $FF, $30, $FF, $10, $FF
       00:80FB  FF 10 FF  
       00:80FE  30 FF 10  
       00:8101  FF        
   56  00:8102            B0_fImage:
   57  00:8102  FF FF FE   .db $FF, $FF, $FE, $AB, $FA, $EA, $80, $FF
       00:8105  AB FA EA  
       00:8108  80 FF     
   58  00:810A            B0_fName:
   59  00:810A  01 0F FF    .db $01, $0F, $FF
   60                     
   61  00:810D            B0_o:
   62  00:810D  00 14 00    .db $00, $14, $00, $00, $10, $20
       00:8110  00 10 20  
   63  00:8113  70 F8 D8    .db $70, $F8, $D8, $F8, $70
       00:8116  F8 70     
   64  00:8118  30 FF 50    .db $30, $FF, $50, $FF, $22, $FF, $50, $FF, $30, $FF
       00:811B  FF 22 FF  
       00:811E  50 FF 30  
       00:8121  FF        
   65  00:8122  30 FF 50    .db $30, $FF, $50, $FF, $22, $FF, $50, $FF, $30, $FF
       00:8125  FF 22 FF  
       00:8128  50 FF 30  
       00:812B  FF        
   66  00:812C            B0_oImage:
   67  00:812C  BF BF FF   .db $BF, $BF, $FF, $BF, $FF, $BF, $80, $FF
       00:812F  BF FF BF  
       00:8132  80 FF     
   68  00:8134            B0_oName:
   69  00:8134  01 18 FF    .db $01, $18, $FF
   70                     
   71  00:8137            B0_r:
   72  00:8137  00 10 00    .db $00, $10, $00, $00, $10, $20
       00:813A  00 10 20  
   73  00:813D  F0 F0 B0    .db $F0, $F0, $B0, $E0, $90
       00:8140  E0 90     
   74  00:8142  50 FF 12    .db $50, $FF, $12, $FF, $40, $FF, $13, $FF, $00, $FF
       00:8145  FF 40 FF  
       00:8148  13 FF 00  
       00:814B  FF        
   75  00:814C  40 FF 40    .db $40, $FF, $40, $FF, $21, $FF, $30, $FF, $11, $FF
       00:814F  FF 21 FF  
       00:8152  30 FF 11  
       00:8155  FF        
   76  00:8156            B0_rImage:
   77  00:8156  FF BF EE   .db $FF, $BF, $EE, $FB, $FA, $EB, $80, $FF
       00:8159  FB FA EB  
       00:815C  80 FF     
   78  00:815E            B0_rName:
   79  00:815E  01 1B FF    .db $01, $1B, $FF
   80                     
   81  00:8161            B0_lower_t:
   82  00:8161  00 08 00    .db $00, $08, $00, $00, $10, $20
       00:8164  00 10 20  
   83  00:8167  20 70 20    .db $20, $70, $20, $20, $30
       00:816A  20 30     
   84  00:816C  00 FF 10    .db $00, $FF, $10, $FF, $50, $FF, $11, $FF, $00, $FF
       00:816F  FF 50 FF  
       00:8172  11 FF 00  
       00:8175  FF        
   85  00:8176  10 FF 30    .db $10, $FF, $30, $FF, $10, $FF, $10, $FF, $20, $FF
       00:8179  FF 10 FF  
       00:817C  10 FF 20  
       00:817F  FF        
   86  00:8180            B0_lower_tImage:
   87  00:8180  AE AF EA   .db $AE, $AF, $EA, $EA, $BA, $AF, $80, $FF
       00:8183  EA BA AF  
       00:8186  80 FF     
   88  00:8188            B0_lower_tName:
   89  00:8188  07 15 18    .db $07, $15, $18, $20, $0E, $1B, $24, $1D, $FF
       00:818B  20 0E 1B  
       00:818E  24 1D FF  
   90                     
   91  00:8191            B0_perfume:
   92  00:8191  01 1A 00    .db $01, $1A, $00, $2C, $15, $20
       00:8194  2C 15 20  
   93  00:8197  00 00 0C    .db $00, $00, $0C, $00, $12, $00, $1E, $00, $0C, $00, $3F, $00, $21, $00, $21, $00, $3F, $00, $00, $00
       00:819A  00 12 00  
       00:819D  1E 00 0C  
       00:81A0  00 3F 00  
       00:81A3  21 00 21  
       00:81A6  00 3F 00  
       00:81A9  00 00     
   94  00:81AB  00 FF 00    .db $00, $FF, $00, $FF, $40, $FF, $11, $20, $FF, $13, $10, $FF, $13, $10, $FF, $11, $20, $FF, $40, $FF, $00, $FF, $00, $FF
       00:81AE  FF 40 FF  
       00:81B1  11 20 FF  
       00:81B4  13 10 FF  
       00:81B7  13 10 FF  
       00:81BA  11 20 FF  
       00:81BD  40 FF 00  
       00:81C0  FF 00 FF  
   95  00:81C3  00 FF 20    .db $00, $FF, $20, $FF, $11, $FF, $40, $FF, $20, $FF, $60, $FF, $11, $FF, $11, $FF, $60, $FF, $00, $FF
       00:81C6  FF 11 FF  
       00:81C9  40 FF 20  
       00:81CC  FF 60 FF  
       00:81CF  11 FF 11  
       00:81D2  FF 60 FF  
       00:81D5  00 FF     
   96  00:81D7            B0_perfumeImage:
   97  00:81D7  55 55 55   .db $55, $55, $55, $5F, $55, $57, $5D, $55, $7F, $D5, $55, $F5, $55, $FF, $F5, $5E, $AB, $55, $EA, $B5, $5F, $FF, $55, $55, $55, $FF
       00:81DA  5F 55 57  
       00:81DD  5D 55 7F  
       00:81E0  D5 55 F5  
       00:81E3  55 FF F5  
       00:81E6  5E AB 55  
       00:81E9  EA B5 5F  
       00:81EC  FF 55 55  
       00:81EF  55 FF     
   98  00:81F1            B0_perfumeName:
   99  00:81F1  07 19 0E    .db $07, $19, $0E, $1B, $0F, $1E, $16, $0E, $FF
       00:81F4  1B 0F 1E  
       00:81F7  16 0E FF  
  100                     
  101  00:81FA            B0_chestnut:
  102  00:81FA  01 24 00    .db $01, $24, $00, $07, $1C, $37
       00:81FD  07 1C 37  
  103  00:8200  00 00 0C    .db $00, $00, $0C, $00, $1E, $00, $33, $00, $61, $80, $40, $80, $5E, $80, $7F, $80, $3F, $00, $00, $00
       00:8203  00 1E 00  
       00:8206  33 00 61  
       00:8209  80 40 80  
       00:820C  5E 80 7F  
       00:820F  80 3F 00  
       00:8212  00 00     
  104  00:8214  00 FF 40    .db $00, $FF, $40, $FF, $22, $FF, $32, $FF, $32, $FF, $32, $FF, $32, $FF, $22, $FF, $40, $FF, $00, $FF
       00:8217  FF 22 FF  
       00:821A  32 FF 32  
       00:821D  FF 32 FF  
       00:8220  32 FF 22  
       00:8223  FF 40 FF  
       00:8226  00 FF     
  105  00:8228  00 FF 20    .db $00, $FF, $20, $FF, $40, $FF, $22, $FF, $22, $FF, $11, $FF, $14, $10, $FF, $80, $FF, $60, $FF, $00, $FF
       00:822B  FF 40 FF  
       00:822E  22 FF 22  
       00:8231  FF 11 FF  
       00:8234  14 10 FF  
       00:8237  80 FF 60  
       00:823A  FF 00 FF  
  106  00:823D            B0_chestnutImage:
  107  00:823D  AA AA AA   .db $AA, $AA, $AA, $A5, $AA, $A9, $56, $AA, $55, $5A, $95, $55, $69, $55, $56, $97, $FD, $69, $FF, $F6, $AF, $FF, $AA, $AA, $AA, $FF
       00:8240  A5 AA A9  
       00:8243  56 AA 55  
       00:8246  5A 95 55  
       00:8249  69 55 56  
       00:824C  97 FD 69  
       00:824F  FF F6 AF  
       00:8252  FF AA AA  
       00:8255  AA FF     
  108  00:8257            B0_chestnutName:
  109  00:8257  08 0C 11    .db $08, $0C, $11, $0E, $1C, $1D, $17, $1E, $1D, $FF
       00:825A  0E 1C 1D  
       00:825D  17 1E 1D  
       00:8260  FF        
  110                     
  111  00:8261            B0_cherry:
  112  00:8261  01 1F 00    .db $01, $1F, $00, $07, $16, $20
       00:8264  07 16 20  
  113  00:8267  00 00 00    .db $00, $00, $00, $80, $0F, $00, $19, $00, $31, $00, $21, $00, $73, $80, $73, $80, $73, $80, $00, $00
       00:826A  80 0F 00  
       00:826D  19 00 31  
       00:8270  00 21 00  
       00:8273  73 80 73  
       00:8276  80 73 80  
       00:8279  00 00     
  114  00:827B  00 FF 30    .db $00, $FF, $30, $FF, $50, $FF, $32, $FF, $20, $FF, $10, $FF, $31, $FF, $70, $FF, $31, $FF, $00, $FF
       00:827E  FF 50 FF  
       00:8281  32 FF 20  
       00:8284  FF 10 FF  
       00:8287  31 FF 70  
       00:828A  FF 31 FF  
       00:828D  00 FF     
  115  00:828F  00 FF 10    .db $00, $FF, $10, $FF, $40, $FF, $12, $FF, $12, $FF, $11, $FF, $33, $FF, $33, $FF, $33, $FF, $00, $FF
       00:8292  FF 40 FF  
       00:8295  12 FF 12  
       00:8298  FF 11 FF  
       00:829B  33 FF 33  
       00:829E  FF 33 FF  
       00:82A1  00 FF     
  116  00:82A3            B0_cherryImage:
  117  00:82A3  00 00 00   .db $00, $00, $00, $00, $04, $00, $55, $00, $14, $10, $05, $01, $00, $40, $10, $26, $09, $82, $E0, $B8, $2A, $0A, $80, $00, $00, $FF
       00:82A6  00 04 00  
       00:82A9  55 00 14  
       00:82AC  10 05 01  
       00:82AF  00 40 10  
       00:82B2  26 09 82  
       00:82B5  E0 B8 2A  
       00:82B8  0A 80 00  
       00:82BB  00 FF     
  118  00:82BD            B0_cherryName:
  119  00:82BD  06 0C 11    .db $06, $0C, $11, $0E, $1B, $1B, $22, $FF
       00:82C0  0E 1B 1B  
       00:82C3  22 FF     
  120                     
  121  00:82C5            B0_apple:
  122  00:82C5  01 2F 00    .db $01, $2F, $00, $07, $16, $20
       00:82C8  07 16 20  
  123  00:82CB  08 00 08    .db $08, $00, $08, $00, $37, $00, $7F, $80, $7F, $80, $7F, $80, $7F, $00, $3F, $00, $1A, $00, $00, $00
       00:82CE  00 37 00  
       00:82D1  7F 80 7F  
       00:82D4  80 7F 80  
       00:82D7  7F 00 3F  
       00:82DA  00 1A 00  
       00:82DD  00 00     
  124  00:82DF  00 FF 40    .db $00, $FF, $40, $FF, $60, $FF, $70, $FF, $62, $FF, $60, $FF, $70, $FF, $60, $FF, $30, $FF, $00, $FF
       00:82E2  FF 60 FF  
       00:82E5  70 FF 62  
       00:82E8  FF 60 FF  
       00:82EB  70 FF 60  
       00:82EE  FF 30 FF  
       00:82F1  00 FF     
  125  00:82F3  10 FF 10    .db $10, $FF, $10, $FF, $32, $FF, $80, $FF, $80, $FF, $80, $FF, $70, $FF, $60, $FF, $12, $FF, $00, $FF
       00:82F6  FF 32 FF  
       00:82F9  80 FF 80  
       00:82FC  FF 80 FF  
       00:82FF  70 FF 60  
       00:8302  FF 12 FF  
       00:8305  00 FF     
  126  00:8307            B0_appleImage:
  127  00:8307  00 40 00   .db $00, $40, $00, $04, $00, $0A, $2A, $02, $AE, $A8, $2A, $AA, $82, $AA, $A8, $2A, $AA, $00, $AA, $A0, $02, $88, $00, $00, $00, $FF
       00:830A  04 00 0A  
       00:830D  2A 02 AE  
       00:8310  A8 2A AA  
       00:8313  82 AA A8  
       00:8316  2A AA 00  
       00:8319  AA A0 02  
       00:831C  88 00 00  
       00:831F  00 FF     
  128  00:8321            B0_appleName:
  129  00:8321  05 0A 19    .db $05, $0A, $19, $19, $15, $0E, $FF
       00:8324  19 15 0E  
       00:8327  FF        
  130                     
  131  00:8328            B0_star_ship:
  132  00:8328  01 22 00    .db $01, $22, $00, $1C, $16, $20
       00:832B  1C 16 20  
  133  00:832E  00 00 0C    .db $00, $00, $0C, $00, $0C, $00, $0C, $00, $0C, $00, $0C, $00, $5E, $80, $7F, $80, $7F, $80, $12, $00
       00:8331  00 0C 00  
       00:8334  0C 00 0C  
       00:8337  00 0C 00  
       00:833A  5E 80 7F  
       00:833D  80 7F 80  
       00:8340  12 00     
  134  00:8342  00 FF 30    .db $00, $FF, $30, $FF, $20, $FF, $40, $FF, $80, $FF, $80, $FF, $40, $FF, $20, $FF, $30, $FF, $00, $FF
       00:8345  FF 20 FF  
       00:8348  40 FF 80  
       00:834B  FF 80 FF  
       00:834E  40 FF 20  
       00:8351  FF 30 FF  
       00:8354  00 FF     
  135  00:8356  00 FF 20    .db $00, $FF, $20, $FF, $20, $FF, $20, $FF, $20, $FF, $20, $FF, $14, $10, $FF, $80, $FF, $80, $FF, $11, $FF
       00:8359  FF 20 FF  
       00:835C  20 FF 20  
       00:835F  FF 20 FF  
       00:8362  14 10 FF  
       00:8365  80 FF 80  
       00:8368  FF 11 FF  
  136  00:836B            B0_star_shipImage:
  137  00:836B  00 00 00   .db $00, $00, $00, $0F, $00, $00, $F0, $00, $0F, $00, $00, $F0, $00, $0F, $00, $23, $5C, $83, $FF, $FC, $3F, $AF, $C0, $20, $80, $FF
       00:836E  0F 00 00  
       00:8371  F0 00 0F  
       00:8374  00 00 F0  
       00:8377  00 0F 00  
       00:837A  23 5C 83  
       00:837D  FF FC 3F  
       00:8380  AF C0 20  
       00:8383  80 FF     
  138  00:8385            B0_star_shipName:
  139  00:8385  09 1C 1D    .db $09, $1C, $1D, $0A, $1B, $24, $1C, $11, $12, $19, $FF
       00:8388  0A 1B 24  
       00:838B  1C 11 12  
       00:838E  19 FF     
  140                     
  141  00:8390            B0_egg_dog:
  142  00:8390  01 22 00    .db $01, $22, $00, $00, $10, $20
       00:8393  00 10 20  
  143  00:8396  00 00 0C    .db $00, $00, $0C, $00, $1E, $00, $25, $00, $3B, $00, $35, $00, $3F, $00, $1E, $00, $12, $00, $1B, $00
       00:8399  00 1E 00  
       00:839C  25 00 3B  
       00:839F  00 35 00  
       00:83A2  3F 00 1E  
       00:83A5  00 12 00  
       00:83A8  1B 00     
  144  00:83AA  00 FF 00    .db $00, $FF, $00, $FF, $40, $FF, $61, $FF, $12, $12, $FF, $33, $FF, $41, $10, $FF, $14, $FF, $00, $FF, $00, $FF
       00:83AD  FF 40 FF  
       00:83B0  61 FF 12  
       00:83B3  12 FF 33  
       00:83B6  FF 41 10  
       00:83B9  FF 14 FF  
       00:83BC  00 FF 00  
       00:83BF  FF        
  145  00:83C0  00 FF 20    .db $00, $FF, $20, $FF, $40, $FF, $11, $10, $FF, $23, $FF, $11, $20, $FF, $60, $FF, $40, $FF, $11, $FF, $22, $FF
       00:83C3  FF 40 FF  
       00:83C6  11 10 FF  
       00:83C9  23 FF 11  
       00:83CC  20 FF 60  
       00:83CF  FF 40 FF  
       00:83D2  11 FF 22  
       00:83D5  FF        
  146  00:83D6            B0_egg_dogImage:
  147  00:83D6  AA AA AA   .db $AA, $AA, $AA, $AF, $AA, $AB, $FE, $AA, $D3, $3A, $AF, $CF, $AA, $F3, $3A, $AF, $FF, $AA, $BF, $EA, $AB, $AE, $AA, $BE, $FA, $FF
       00:83D9  AF AA AB  
       00:83DC  FE AA D3  
       00:83DF  3A AF CF  
       00:83E2  AA F3 3A  
       00:83E5  AF FF AA  
       00:83E8  BF EA AB  
       00:83EB  AE AA BE  
       00:83EE  FA FF     
  148  00:83F0            B0_egg_dogName:
  149  00:83F0  07 0E 10    .db $07, $0E, $10, $10, $24, $0D, $18, $10, $FF
       00:83F3  10 24 0D  
       00:83F6  18 10 FF  
  150                     
  151  00:83F9            B0_ghost:
  152  00:83F9  01 30 00    .db $01, $30, $00, $06, $16, $26
       00:83FC  06 16 26  
  153  00:83FF  00 00 1E    .db $00, $00, $1E, $00, $3F, $00, $7F, $80, $75, $80, $7F, $80, $60, $80, $7F, $80, $55, $80, $00, $00
       00:8402  00 3F 00  
       00:8405  7F 80 75  
       00:8408  80 7F 80  
       00:840B  60 80 7F  
       00:840E  80 55 80  
       00:8411  00 00     
  154  00:8413  00 FF 60    .db $00, $FF, $60, $FF, $60, $FF, $25, $FF, $11, $30, $FF, $25, $FF, $11, $30, $FF, $24, $FF, $60, $FF, $00, $FF
       00:8416  FF 60 FF  
       00:8419  25 FF 11  
       00:841C  30 FF 25  
       00:841F  FF 11 30  
       00:8422  FF 24 FF  
       00:8425  60 FF 00  
       00:8428  FF        
  155  00:8429  00 FF 40    .db $00, $FF, $40, $FF, $60, $FF, $80, $FF, $21, $30, $FF, $80, $FF, $12, $FF, $80, $FF, $21, $11, $FF, $00, $FF
       00:842C  FF 60 FF  
       00:842F  80 FF 21  
       00:8432  30 FF 80  
       00:8435  FF 12 FF  
       00:8438  80 FF 21  
       00:843B  11 FF 00  
       00:843E  FF        
  156  00:843F            B0_ghostImage:
  157  00:843F  00 00 00   .db $00, $00, $00, $3F, $C0, $0C, $F3, $03, $F0, $FC, $3C, $F3, $C3, $FF, $FC, $3C, $03, $C3, $FF, $FC, $33, $33, $C0, $00, $00, $FF
       00:8442  3F C0 0C  
       00:8445  F3 03 F0  
       00:8448  FC 3C F3  
       00:844B  C3 FF FC  
       00:844E  3C 03 C3  
       00:8451  FF FC 33  
       00:8454  33 C0 00  
       00:8457  00 FF     
  158  00:8459            B0_ghostName:
  159  00:8459  05 10 11    .db $05, $10, $11, $18, $1C, $1D, $FF
       00:845C  18 1C 1D  
       00:845F  FF        
  160                     
  161  00:8460            B0_meat:
  162  00:8460  01 2C 00    .db $01, $2C, $00, $06, $26, $37
       00:8463  06 26 37  
  163  00:8466  00 00 20    .db $00, $00, $20, $00, $6C, $00, $17, $00, $3F, $80, $7F, $80, $7E, $80, $3D, $00, $1A, $C0, $0C, $80
       00:8469  00 6C 00  
       00:846C  17 00 3F  
       00:846F  80 7F 80  
       00:8472  7E 80 3D  
       00:8475  00 1A C0  
       00:8478  0C 80     
  164  00:847A  00 FF 21    .db $00, $FF, $21, $FF, $42, $FF, $60, $FF, $61, $FF, $16, $FF, $14, $FF, $13, $FF, $23, $FF, $10, $FF
       00:847D  FF 42 FF  
       00:8480  60 FF 61  
       00:8483  FF 16 FF  
       00:8486  14 FF 13  
       00:8489  FF 23 FF  
       00:848C  10 FF     
  165  00:848E  00 FF 10    .db $00, $FF, $10, $FF, $22, $FF, $31, $FF, $70, $FF, $80, $FF, $16, $FF, $14, $FF, $21, $20, $FF, $12, $FF
       00:8491  FF 22 FF  
       00:8494  31 FF 70  
       00:8497  FF 80 FF  
       00:849A  16 FF 14  
       00:849D  FF 21 20  
       00:84A0  FF 12 FF  
  166  00:84A3            B0_meatImage:
  167  00:84A3  00 00 00   .db $00, $00, $00, $C0, $00, $3C, $50, $00, $19, $50, $06, $55, $41, $55, $64, $15, $5A, $40, $56, $B0, $01, $68, $F0, $05, $0C, $FF
       00:84A6  C0 00 3C  
       00:84A9  50 00 19  
       00:84AC  50 06 55  
       00:84AF  41 55 64  
       00:84B2  15 5A 40  
       00:84B5  56 B0 01  
       00:84B8  68 F0 05  
       00:84BB  0C FF     
  168  00:84BD            B0_meatName:
  169  00:84BD  04 16 0E    .db $04, $16, $0E, $0A, $1D, $FF
       00:84C0  0A 1D FF  
  170                     
  171  00:84C3            B0_soda:
  172  00:84C3  01 28 00    .db $01, $28, $00, $07, $30, $16
       00:84C6  07 30 16  
  173  00:84C9  02 00 04    .db $02, $00, $04, $00, $3F, $00, $21, $00, $3F, $00, $3F, $00, $3F, $00, $1E, $00, $1E, $00, $1E, $00
       00:84CC  00 3F 00  
       00:84CF  21 00 3F  
       00:84D2  00 3F 00  
       00:84D5  3F 00 1E  
       00:84D8  00 1E 00  
       00:84DB  1E 00     
  174  00:84DD  00 FF 00    .db $00, $FF, $00, $FF, $50, $FF, $61, $FF, $61, $FF, $62, $FF, $61, $10, $FF, $50, $FF, $00, $FF, $00, $FF
       00:84E0  FF 50 FF  
       00:84E3  61 FF 61  
       00:84E6  FF 62 FF  
       00:84E9  61 10 FF  
       00:84EC  50 FF 00  
       00:84EF  FF 00 FF  
  175  00:84F2  10 FF 10    .db $10, $FF, $10, $FF, $60, $FF, $11, $FF, $60, $FF, $60, $FF, $60, $FF, $40, $FF, $40, $FF, $40, $FF
       00:84F5  FF 60 FF  
       00:84F8  11 FF 60  
       00:84FB  FF 60 FF  
       00:84FE  60 FF 40  
       00:8501  FF 40 FF  
       00:8504  40 FF     
  176  00:8506            B0_sodaImage:
  177  00:8506  00 0C 00   .db $00, $0C, $00, $02, $00, $0A, $AA, $00, $8C, $20, $09, $56, $00, $95, $60, $09, $56, $00, $25, $80, $02, $58, $00, $2A, $80, $FF
       00:8509  02 00 0A  
       00:850C  AA 00 8C  
       00:850F  20 09 56  
       00:8512  00 95 60  
       00:8515  09 56 00  
       00:8518  25 80 02  
       00:851B  58 00 2A  
       00:851E  80 FF     
  178  00:8520            B0_sodaName:
  179  00:8520  04 1C 18    .db $04, $1C, $18, $0D, $0A, $FF
       00:8523  0D 0A FF  
  180                     
  181  00:8526            B0_camera:
  182  00:8526  02 4B 00    .db $02, $4B, $00, $00, $10, $20
       00:8529  00 10 20  
  183  00:852C  00 00 01    .db $00, $00, $01, $F0, $01, $10, $01, $F0, $10, $E0, $3F, $FC, $40, $04, $53, $84, $46, $C4, $54, $4C, $46, $C4, $43, $8C, $40, $04, $7F, $FC, $00, $00
       00:852F  F0 01 10  
       00:8532  01 F0 10  
       00:8535  E0 3F FC  
       00:8538  40 04 53  
       00:853B  84 46 C4  
       00:853E  54 4C 46  
       00:8541  C4 43 8C  
       00:8544  40 04 7F  
       00:8547  FC 00 00  
  184  00:854A  00 FF 80    .db $00, $FF, $80, $FF, $11, $FF, $11, $12, $FF, $11, $FF, $13, $10, $FF, $12, $21, $FF, $11, $11, $30, $FF, $12, $23, $10, $FF, $13, $31, $FF, $13, $10, $FF, $11, $30, $FF, $11, $11, $FF, $90, $FF, $00, $FF
       00:854D  FF 11 FF  
       00:8550  11 12 FF  
       00:8553  11 FF 13  
       00:8556  10 FF 12  
       00:8559  21 FF 11  
       00:855C  11 30 FF  
       00:855F  12 23 10  
       00:8562  FF 13 31  
       00:8565  FF 13 10  
       00:8568  FF 11 30  
       00:856B  FF 11 11  
       00:856E  FF 90 FF  
       00:8571  00 FF     
  185  00:8573  00 FF 50    .db $00, $FF, $50, $FF, $11, $FF, $50, $FF, $31, $FF, $C0, $FF, $11, $FF, $13, $11, $FF, $12, $21, $FF, $21, $11, $10, $FF, $12, $21, $FF, $23, $10, $FF, $11, $FF, $D0, $FF, $00, $FF
       00:8576  FF 11 FF  
       00:8579  50 FF 31  
       00:857C  FF C0 FF  
       00:857F  11 FF 13  
       00:8582  11 FF 12  
       00:8585  21 FF 21  
       00:8588  11 10 FF  
       00:858B  12 21 FF  
       00:858E  23 10 FF  
       00:8591  11 FF D0  
       00:8594  FF 00 FF  
  186  00:8597            B0_cameraImage:
  187  00:8597  00 00 00   .db $00, $00, $00, $00, $00, $05, $54, $00, $00, $1C, $10, $00, $00, $51, $40, $01, $00, $54, $00, $15, $55, $55, $41, $AA, $AA, $A9, $06, $E9, $5A, $A4, $1A, $9C, $1A, $90, $6E, $40, $69, $41, $A9, $01, $A9, $06, $A9, $5A, $94, $1A, $AA, $AA, $90, $55, $55, $55, $40, $00, $00, $00, $00, $FF
       00:859A  00 00 05  
       00:859D  54 00 00  
       00:85A0  1C 10 00  
       00:85A3  00 51 40  
       00:85A6  01 00 54  
       00:85A9  00 15 55  
       00:85AC  55 41 AA  
       00:85AF  AA A9 06  
       00:85B2  E9 5A A4  
       00:85B5  1A 9C 1A  
       00:85B8  90 6E 40  
       00:85BB  69 41 A9  
       00:85BE  01 A9 06  
       00:85C1  A9 5A 94  
       00:85C4  1A AA AA  
       00:85C7  90 55 55  
       00:85CA  55 40 00  
       00:85CD  00 00 00  
       00:85D0  FF        
  188  00:85D1            B0_cameraName:
  189  00:85D1  06 0C 0A    .db $06, $0C, $0A, $16, $0E, $1B, $0A, $FF
       00:85D4  16 0E 1B  
       00:85D7  0A FF     
  190                     
  191  00:85D9            B0_Ellie:
  192  00:85D9  02 7E 00    .db $02, $7E, $00, $12, $22, $20
       00:85DC  12 22 20  
  193  00:85DF  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $47, $C4, $7B, $BC, $7F, $FC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       00:85E2  60 1E F0  
       00:85E5  3E F8 3F  
       00:85E8  F8 7F FC  
       00:85EB  7F FC 47  
       00:85EE  C4 7B BC  
       00:85F1  7F FC 7C  
       00:85F4  7C 76 DC  
       00:85F7  39 38 1F  
       00:85FA  F0 00 00  
  194  00:85FD  00 FF 70    .db $00, $FF, $70, $FF, $54, $FF, $65, $FF, $23, $60, $FF, $13, $70, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $70, $FF, $23, $60, $FF, $65, $FF, $54, $FF, $70, $FF, $00, $FF
       00:8600  FF 54 FF  
       00:8603  65 FF 23  
       00:8606  60 FF 13  
       00:8609  70 FF 11  
       00:860C  80 FF 26  
       00:860F  FF 11 80  
       00:8612  FF 13 70  
       00:8615  FF 23 60  
       00:8618  FF 65 FF  
       00:861B  54 FF 70  
       00:861E  FF 00 FF  
  195  00:8621  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $15, $10, $FF, $43, $40, $FF, $D0, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       00:8624  FF 44 FF  
       00:8627  55 FF B0  
       00:862A  FF D0 FF  
       00:862D  D0 FF 15  
       00:8630  10 FF 43  
       00:8633  40 FF D0  
       00:8636  FF 55 FF  
       00:8639  32 23 FF  
       00:863C  31 30 FF  
       00:863F  90 FF 00  
       00:8642  FF        
  196  00:8643            B0_EllieImage:
  197  00:8643  55 55 55   .db $55, $55, $55, $55, $56, $95, $A5, $55, $6A, $9A, $A5, $56, $AA, $6A, $A5, $5A, $AA, $AA, $95, $AA, $A6, $AA, $96, $A9, $99, $AA, $58, $0A, $A8, $09, $6A, $8F, $CA, $A5, $96, $FF, $E5, $96, $AF, $57, $EA, $59, $CF, $7C, $D9, $5F, $C3, $0F, $D5, $5F, $FF, $FD, $55, $55, $55, $55, $40, $FF
       00:8646  55 56 95  
       00:8649  A5 55 6A  
       00:864C  9A A5 56  
       00:864F  AA 6A A5  
       00:8652  5A AA AA  
       00:8655  95 AA A6  
       00:8658  AA 96 A9  
       00:865B  99 AA 58  
       00:865E  0A A8 09  
       00:8661  6A 8F CA  
       00:8664  A5 96 FF  
       00:8667  E5 96 AF  
       00:866A  57 EA 59  
       00:866D  CF 7C D9  
       00:8670  5F C3 0F  
       00:8673  D5 5F FF  
       00:8676  FD 55 55  
       00:8679  55 55 40  
       00:867C  FF        
  198  00:867D            B0_EllieName:
  199  00:867D  05 0E 15    .db $05, $0E, $15, $15, $12, $0E, $FF
       00:8680  15 12 0E  
       00:8683  FF        
  200                     
  201  00:8684            B0_mushu:
  202  00:8684  02 7A 00    .db $02, $7A, $00, $1C, $3D, $29
       00:8687  1C 3D 29  
  203  00:868A  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $5B, $B4, $5B, $B4, $67, $CC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       00:868D  60 1E F0  
       00:8690  3E F8 3F  
       00:8693  F8 7F FC  
       00:8696  7F FC 5B  
       00:8699  B4 5B B4  
       00:869C  67 CC 7C  
       00:869F  7C 76 DC  
       00:86A2  39 38 1F  
       00:86A5  F0 00 00  
  204  00:86A8  00 FF 70    .db $00, $FF, $70, $FF, $44, $FF, $47, $FF, $21, $80, $FF, $13, $60, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $60, $FF, $21, $80, $FF, $47, $FF, $44, $FF, $70, $FF, $00, $FF
       00:86AB  FF 44 FF  
       00:86AE  47 FF 21  
       00:86B1  80 FF 13  
       00:86B4  60 FF 11  
       00:86B7  80 FF 26  
       00:86BA  FF 11 80  
       00:86BD  FF 13 60  
       00:86C0  FF 21 80  
       00:86C3  FF 47 FF  
       00:86C6  44 FF 70  
       00:86C9  FF 00 FF  
  205  00:86CC  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $12, $32, $10, $FF, $12, $32, $10, $FF, $25, $20, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       00:86CF  FF 44 FF  
       00:86D2  55 FF B0  
       00:86D5  FF D0 FF  
       00:86D8  D0 FF 12  
       00:86DB  32 10 FF  
       00:86DE  12 32 10  
       00:86E1  FF 25 20  
       00:86E4  FF 55 FF  
       00:86E7  32 23 FF  
       00:86EA  31 30 FF  
       00:86ED  90 FF 00  
       00:86F0  FF        
  206  00:86F1            B0_mushuImage:
  207  00:86F1  55 55 55   .db $55, $55, $55, $55, $54, $15, $05, $55, $40, $10, $05, $54, $00, $40, $05, $50, $00, $00, $15, $00, $00, $00, $14, $00, $00, $00, $53, $8C, $0E, $31, $4C, $30, $30, $C5, $0F, $00, $3C, $14, $00, $A8, $00, $50, $20, $82, $01, $50, $28, $A0, $15, $50, $00, $01, $55, $55, $55, $55, $40, $FF
       00:86F4  55 54 15  
       00:86F7  05 55 40  
       00:86FA  10 05 54  
       00:86FD  00 40 05  
       00:8700  50 00 00  
       00:8703  15 00 00  
       00:8706  00 14 00  
       00:8709  00 00 53  
       00:870C  8C 0E 31  
       00:870F  4C 30 30  
       00:8712  C5 0F 00  
       00:8715  3C 14 00  
       00:8718  A8 00 50  
       00:871B  20 82 01  
       00:871E  50 28 A0  
       00:8721  15 50 00  
       00:8724  01 55 55  
       00:8727  55 55 40  
       00:872A  FF        
  208  00:872B            B0_mushuName:
  209  00:872B  05 16 1E    .db $05, $16, $1E, $1C, $11, $1E, $FF
       00:872E  1C 11 1E  
       00:8731  FF        
  210                     
  211  00:8732            B0_plasma_globe:
  212  00:8732  02 4C 00    .db $02, $4C, $00, $00, $3D, $25
       00:8735  00 3D 25  
  213  00:8738  07 C0 0C    .db $07, $C0, $0C, $60, $1C, $30, $36, $58, $22, $C8, $21, $78, $26, $08, $3D, $98, $19, $F0, $0D, $60, $07, $C0, $00, $00, $03, $80, $07, $C0, $0F, $E0
       00:873B  60 1C 30  
       00:873E  36 58 22  
       00:8741  C8 21 78  
       00:8744  26 08 3D  
       00:8747  98 19 F0  
       00:874A  0D 60 07  
       00:874D  C0 00 00  
       00:8750  03 80 07  
       00:8753  C0 0F E0  
  214  00:8756  00 FF 00    .db $00, $FF, $00, $FF, $50, $FF, $22, $FF, $13, $20, $FF, $22, $24, $FF, $31, $12, $10, $FF, $34, $11, $FF, $31, $21, $10, $FF, $23, $32, $FF, $12, $12, $FF, $21, $20, $FF, $50, $FF, $00, $FF, $00, $FF
       00:8759  FF 50 FF  
       00:875C  22 FF 13  
       00:875F  20 FF 22  
       00:8762  24 FF 31  
       00:8765  12 10 FF  
       00:8768  34 11 FF  
       00:876B  31 21 10  
       00:876E  FF 23 32  
       00:8771  FF 12 12  
       00:8774  FF 21 20  
       00:8777  FF 50 FF  
       00:877A  00 FF 00  
       00:877D  FF        
  215  00:877E  50 FF 22    .db $50, $FF, $22, $FF, $23, $FF, $21, $22, $FF, $12, $11, $FF, $41, $10, $FF, $12, $10, $FF, $22, $40, $FF, $52, $FF, $21, $20, $FF, $50, $FF, $00, $FF, $30, $FF, $50, $FF, $70, $FF
       00:8781  FF 23 FF  
       00:8784  21 22 FF  
       00:8787  12 11 FF  
       00:878A  41 10 FF  
       00:878D  12 10 FF  
       00:8790  22 40 FF  
       00:8793  52 FF 21  
       00:8796  20 FF 50  
       00:8799  FF 00 FF  
       00:879C  30 FF 50  
       00:879F  FF 70 FF  
  216  00:87A2            B0_plasma_globeImage:
  217  00:87A2  00 2A A0   .db $00, $2A, $A0, $00, $02, $80, $A0, $00, $2B, $00, $A0, $02, $8F, $0C, $A0, $08, $0C, $F0, $80, $20, $0C, $FE, $00, $83, $C0, $08, $02, $BC, $B0, $A0, $02, $82, $FA, $00, $02, $88, $A0, $00, $02, $AA, $00, $00, $00, $00, $00, $00, $05, $40, $00, $00, $55, $40, $00, $05, $55, $40, $00, $FF
       00:87A5  00 02 80  
       00:87A8  A0 00 2B  
       00:87AB  00 A0 02  
       00:87AE  8F 0C A0  
       00:87B1  08 0C F0  
       00:87B4  80 20 0C  
       00:87B7  FE 00 83  
       00:87BA  C0 08 02  
       00:87BD  BC B0 A0  
       00:87C0  02 82 FA  
       00:87C3  00 02 88  
       00:87C6  A0 00 02  
       00:87C9  AA 00 00  
       00:87CC  00 00 00  
       00:87CF  00 05 40  
       00:87D2  00 00 55  
       00:87D5  40 00 05  
       00:87D8  55 40 00  
       00:87DB  FF        
  218  00:87DC            B0_plasma_globeName:
  219  00:87DC  0C 19 15    .db $0C, $19, $15, $0A, $1C, $16, $0A, $24, $10, $15, $18, $0B, $0E, $FF
       00:87DF  0A 1C 16  
       00:87E2  0A 24 10  
       00:87E5  15 18 0B  
       00:87E8  0E FF     
  220                     
  221  00:87EA            B0_house:
  222  00:87EA  02 77 00    .db $02, $77, $00, $11, $21, $20
       00:87ED  11 21 20  
  223  00:87F0  01 F8 0F    .db $01, $F8, $0F, $00, $78, $F6, $C0, $08, $01, $00, $03, $80, $E7, $CE, $ED, $EE, $47, $44, $47, $44, $FF, $FE, $FF, $FE, $AB, $AA, $03, $80, $FF, $FE
       00:87F3  00 78 F6  
       00:87F6  C0 08 01  
       00:87F9  00 03 80  
       00:87FC  E7 CE ED  
       00:87FF  EE 47 44  
       00:8802  47 44 FF  
       00:8805  FE FF FE  
       00:8808  AB AA 03  
       00:880B  80 FF FE  
  224  00:880E  13 21 FF    .db $13, $21, $FF, $16, $20, $FF, $13, $21, $FF, $12, $10, $FF, $13, $12, $FF, $16, $10, $FF, $72, $10, $FF, $B2, $FF, $53, $11, $FF, $16, $11, $FF, $13, $11, $10, $FF, $12, $11, $FF, $13, $21, $10, $FF, $16, $10, $FF, $13, $21, $FF
       00:8811  16 20 FF  
       00:8814  13 21 FF  
       00:8817  12 10 FF  
       00:881A  13 12 FF  
       00:881D  16 10 FF  
       00:8820  72 10 FF  
       00:8823  B2 FF 53  
       00:8826  11 FF 16  
       00:8829  11 FF 13  
       00:882C  11 10 FF  
       00:882F  12 11 FF  
       00:8832  13 21 10  
       00:8835  FF 16 10  
       00:8838  FF 13 21  
       00:883B  FF        
  225  00:883C  60 FF 40    .db $60, $FF, $40, $FF, $24, $40, $FF, $12, $FF, $10, $FF, $30, $FF, $35, $30, $FF, $34, $23, $FF, $11, $31, $FF, $11, $31, $FF, $F0, $FF, $F0, $FF, $11, $13, $11, $10, $FF, $30, $FF, $F0, $FF
       00:883F  FF 24 40  
       00:8842  FF 12 FF  
       00:8845  10 FF 30  
       00:8848  FF 35 30  
       00:884B  FF 34 23  
       00:884E  FF 11 31  
       00:8851  FF 11 31  
       00:8854  FF F0 FF  
       00:8857  F0 FF 11  
       00:885A  13 11 10  
       00:885D  FF 30 FF  
       00:8860  F0 FF     
  226  00:8862            B0_houseImage:
  227  00:8862  AA AB FF   .db $AA, $AB, $FF, $EA, $AB, $FE, $AA, $AB, $FE, $AF, $FB, $FE, $AA, $AA, $BA, $AA, $A8, $AA, $AA, $AA, $8C, $AA, $A5, $68, $FC, $A5, $55, $8C, $FC, $95, $8A, $BF, $3A, $8A, $2A, $FC, $EA, $25, $55, $55, $55, $55, $55, $55, $55, $77, $75, $77, $77, $FF, $D5, $FF, $F5, $55, $55, $55, $40, $FF
       00:8865  EA AB FE  
       00:8868  AA AB FE  
       00:886B  AF FB FE  
       00:886E  AA AA BA  
       00:8871  AA A8 AA  
       00:8874  AA AA 8C  
       00:8877  AA A5 68  
       00:887A  FC A5 55  
       00:887D  8C FC 95  
       00:8880  8A BF 3A  
       00:8883  8A 2A FC  
       00:8886  EA 25 55  
       00:8889  55 55 55  
       00:888C  55 55 55  
       00:888F  77 75 77  
       00:8892  77 FF D5  
       00:8895  FF F5 55  
       00:8898  55 55 40  
       00:889B  FF        
  228  00:889C            B0_houseName:
  229  00:889C  05 11 18    .db $05, $11, $18, $1E, $1C, $0E, $FF
       00:889F  1E 1C 0E  
       00:88A2  FF        
  230                     
  231  00:88A3            B0_the:
  232  00:88A3  01 27 00    .db $01, $27, $00, $17, $27, $20
       00:88A6  17 27 20  
  233  00:88A9  F0 00 F0    .db $F0, $00, $F0, $00, $60, $00, $7A, $00, $1F, $C0, $1B, $00, $1B, $C0, $01, $00, $01, $C0, $01, $C0
       00:88AC  00 60 00  
       00:88AF  7A 00 1F  
       00:88B2  C0 1B 00  
       00:88B5  1B C0 01  
       00:88B8  00 01 C0  
       00:88BB  01 C0     
  234  00:88BD  20 FF 40    .db $20, $FF, $40, $FF, $40, $FF, $42, $FF, $40, $FF, $10, $FF, $40, $FF, $60, $FF, $21, $10, $FF, $21, $10, $FF
       00:88C0  FF 40 FF  
       00:88C3  42 FF 40  
       00:88C6  FF 10 FF  
       00:88C9  40 FF 60  
       00:88CC  FF 21 10  
       00:88CF  FF 21 10  
       00:88D2  FF        
  235  00:88D3  40 FF 40    .db $40, $FF, $40, $FF, $20, $FF, $14, $FF, $70, $FF, $22, $FF, $42, $FF, $10, $FF, $30, $FF, $30, $FF
       00:88D6  FF 20 FF  
       00:88D9  14 FF 70  
       00:88DC  FF 22 FF  
       00:88DF  42 FF 10  
       00:88E2  FF 30 FF  
       00:88E5  30 FF     
  236  00:88E7            B0_theImage:
  237  00:88E7  FF AA AF   .db $FF, $AA, $AF, $F6, $AA, $BD, $6A, $AB, $FE, $EA, $A7, $FF, $FA, $BD, $F5, $AB, $DF, $FA, $A5, $B5, $AA, $AB, $FA, $AA, $BF, $FF
       00:88EA  F6 AA BD  
       00:88ED  6A AB FE  
       00:88F0  EA A7 FF  
       00:88F3  FA BD F5  
       00:88F6  AB DF FA  
       00:88F9  A5 B5 AA  
       00:88FC  AB FA AA  
       00:88FF  BF FF     
  238  00:8901            B0_theName:
  239  00:8901  03 1D 11    .db $03, $1D, $11, $0E, $FF
       00:8904  0E FF     
  240                     
  241  00:8906            B0_end:
  242  00:8906  01 25 00    .db $01, $25, $00, $0A, $1A, $20
       00:8909  0A 1A 20  
  243  00:890C  E0 00 80    .db $E0, $00, $80, $00, $E0, $00, $92, $00, $FA, $00, $FE, $00, $17, $80, $02, $C0, $02, $C0, $03, $80
       00:890F  00 E0 00  
       00:8912  92 00 FA  
       00:8915  00 FE 00  
       00:8918  17 80 02  
       00:891B  C0 02 C0  
       00:891E  03 80     
  244  00:8920  60 FF 21    .db $60, $FF, $21, $10, $FF, $21, $10, $FF, $40, $FF, $20, $FF, $20, $FF, $70, $FF, $11, $FF, $40, $FF, $20, $FF
       00:8923  10 FF 21  
       00:8926  10 FF 40  
       00:8929  FF 20 FF  
       00:892C  20 FF 70  
       00:892F  FF 11 FF  
       00:8932  40 FF 20  
       00:8935  FF        
  245  00:8936  30 FF 10    .db $30, $FF, $10, $FF, $30, $FF, $11, $10, $FF, $15, $FF, $70, $FF, $41, $FF, $21, $FF, $21, $FF, $30, $FF
       00:8939  FF 30 FF  
       00:893C  11 10 FF  
       00:893F  15 FF 70  
       00:8942  FF 41 FF  
       00:8945  21 FF 21  
       00:8948  FF 30 FF  
  246  00:894B            B0_endImage:
  247  00:894B  FE AA AD   .db $FE, $AA, $AD, $5A, $AA, $FE, $AA, $AD, $7A, $EA, $FF, $EE, $AF, $FF, $EA, $97, $7F, $EA, $A5, $DF, $AA, $AD, $FA, $AA, $FD, $FF
       00:894E  5A AA FE  
       00:8951  AA AD 7A  
       00:8954  EA FF EE  
       00:8957  AF FF EA  
       00:895A  97 7F EA  
       00:895D  A5 DF AA  
       00:8960  AD FA AA  
       00:8963  FD FF     
  248  00:8965            B0_endName:
  249  00:8965  03 0E 17    .db $03, $0E, $17, $0D, $FF
       00:8968  0D FF     
  250                     
  251  00:896A            B0_for:
  252  00:896A  02 47 00    .db $02, $47, $00, $02, $12, $20
       00:896D  02 12 20  
  253  00:8970  00 00 00    .db $00, $00, $00, $00, $00, $00, $00, $00, $F7, $7C, $FF, $FC, $8D, $DC, $8D, $DC, $ED, $F8, $8F, $CC, $87, $4C, $00, $00, $00, $00, $00, $00, $00, $00
       00:8973  00 00 00  
       00:8976  00 00 F7  
       00:8979  7C FF FC  
       00:897C  8D DC 8D  
       00:897F  DC ED F8  
       00:8982  8F CC 87  
       00:8985  4C 00 00  
       00:8988  00 00 00  
       00:898B  00 00 00  
  254  00:898E  70 FF 12    .db $70, $FF, $12, $FF, $12, $FF, $20, $FF, $50, $FF, $70, $FF, $22, $FF, $70, $FF, $50, $FF, $70, $FF, $12, $FF, $50, $FF, $70, $FF, $24, $FF, $00, $FF
       00:8991  FF 12 FF  
       00:8994  20 FF 50  
       00:8997  FF 70 FF  
       00:899A  22 FF 70  
       00:899D  FF 50 FF  
       00:89A0  70 FF 12  
       00:89A3  FF 50 FF  
       00:89A6  70 FF 24  
       00:89A9  FF 00 FF  
  255  00:89AC  00 FF 00    .db $00, $FF, $00, $FF, $00, $FF, $00, $FF, $53, $40, $FF, $E0, $FF, $33, $21, $FF, $33, $21, $FF, $62, $30, $FF, $26, $10, $FF, $21, $31, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:89AF  FF 00 FF  
       00:89B2  00 FF 53  
       00:89B5  40 FF E0  
       00:89B8  FF 33 21  
       00:89BB  FF 33 21  
       00:89BE  FF 62 30  
       00:89C1  FF 26 10  
       00:89C4  FF 21 31  
       00:89C7  FF 00 FF  
       00:89CA  00 FF 00  
       00:89CD  FF 00 FF  
  256  00:89D0            B0_forImage:
  257  00:89D0  AA AA AA   .db $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $FF, $BF, $BF, $FB, $FD, $FF, $FF, $DD, $5F, $7F, $7F, $76, $BD, $FD, $FD, $FE, $F7, $FF, $D7, $57, $FF, $D7, $ED, $AB, $F7, $6F, $66, $A9, $59, $A5, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $80, $FF
       00:89D3  AA AA AA  
       00:89D6  AA AA AA  
       00:89D9  AA AA AA  
       00:89DC  AA AA AA  
       00:89DF  FF BF BF  
       00:89E2  FB FD FF  
       00:89E5  FF DD 5F  
       00:89E8  7F 7F 76  
       00:89EB  BD FD FD  
       00:89EE  FE F7 FF  
       00:89F1  D7 57 FF  
       00:89F4  D7 ED AB  
       00:89F7  F7 6F 66  
       00:89FA  A9 59 A5  
       00:89FD  AA AA AA  
       00:8A00  AA AA AA  
       00:8A03  AA AA AA  
       00:8A06  AA AA 80  
       00:8A09  FF        
  258  00:8A0A            B0_forName:
  259  00:8A0A  03 0F 18    .db $03, $0F, $18, $1B, $FF
       00:8A0D  1B FF     
  260                     
  261  00:8A0F            B0_now:
  262  00:8A0F  02 47 00    .db $02, $47, $00, $0B, $1B, $20
       00:8A12  0B 1B 20  
  263  00:8A15  00 00 07    .db $00, $00, $07, $80, $04, $80, $24, $A0, $34, $A0, $14, $A0, $14, $E0, $DF, $C0, $FB, $52, $D8, $72, $40, $F6, $60, $DC, $20, $58, $00, $18, $00, $00
       00:8A18  80 04 80  
       00:8A1B  24 A0 34  
       00:8A1E  A0 14 A0  
       00:8A21  14 E0 DF  
       00:8A24  C0 FB 52  
       00:8A27  D8 72 40  
       00:8A2A  F6 60 DC  
       00:8A2D  20 58 00  
       00:8A30  18 00 00  
  264  00:8A33  30 FF 50    .db $30, $FF, $50, $FF, $21, $20, $FF, $60, $FF, $30, $FF, $70, $FF, $21, $FF, $21, $FF, $27, $FF, $70, $FF, $24, $FF, $60, $FF, $30, $FF, $20, $FF, $30, $FF
       00:8A36  FF 21 20  
       00:8A39  FF 60 FF  
       00:8A3C  30 FF 70  
       00:8A3F  FF 21 FF  
       00:8A42  21 FF 27  
       00:8A45  FF 70 FF  
       00:8A48  24 FF 60  
       00:8A4B  FF 30 FF  
       00:8A4E  20 FF 30  
       00:8A51  FF        
  265  00:8A52  00 FF 40    .db $00, $FF, $40, $FF, $11, $FF, $11, $11, $FF, $11, $12, $FF, $11, $11, $FF, $31, $10, $FF, $72, $FF, $11, $12, $50, $FF, $13, $22, $FF, $24, $10, $FF, $32, $20, $FF, $21, $10, $FF, $20, $FF, $00, $FF
       00:8A55  FF 11 FF  
       00:8A58  11 11 FF  
       00:8A5B  11 12 FF  
       00:8A5E  11 11 FF  
       00:8A61  31 10 FF  
       00:8A64  72 FF 11  
       00:8A67  12 50 FF  
       00:8A6A  13 22 FF  
       00:8A6D  24 10 FF  
       00:8A70  32 20 FF  
       00:8A73  21 10 FF  
       00:8A76  20 FF 00  
       00:8A79  FF        
  266  00:8A7A            B0_nowImage:
  267  00:8A7A  AA AA AA   .db $AA, $AA, $AA, $AA, $AA, $FF, $AA, $AA, $AB, $5D, $AA, $AB, $AD, $B7, $AA, $AF, $B6, $DD, $AA, $AD, $DB, $76, $AA, $B7, $6F, $DA, $BE, $FF, $FD, $6A, $FF, $DF, $77, $AF, $DF, $65, $FE, $BB, $65, $AF, $FB, $EF, $AA, $BD, $FD, $AD, $AA, $B7, $D6, $A6, $AA, $9F, $6A, $AA, $AA, $A5, $80, $FF
       00:8A7D  AA AA FF  
       00:8A80  AA AA AB  
       00:8A83  5D AA AB  
       00:8A86  AD B7 AA  
       00:8A89  AF B6 DD  
       00:8A8C  AA AD DB  
       00:8A8F  76 AA B7  
       00:8A92  6F DA BE  
       00:8A95  FF FD 6A  
       00:8A98  FF DF 77  
       00:8A9B  AF DF 65  
       00:8A9E  FE BB 65  
       00:8AA1  AF FB EF  
       00:8AA4  AA BD FD  
       00:8AA7  AD AA B7  
       00:8AAA  D6 A6 AA  
       00:8AAD  9F 6A AA  
       00:8AB0  AA A5 80  
       00:8AB3  FF        
  268  00:8AB4            B0_nowName:
  269  00:8AB4  03 17 18    .db $03, $17, $18, $20, $FF
       00:8AB7  20 FF     
  270                     
#[2]   Banks/Bank0.asm
    7                     
    8           0001        .bank 1
    9           A000        .org $A000
   10                     
#[3]   Puzzles/B0Tables.asm
   11                       .include "Puzzles/B0Tables.asm"
    1  01:A000  00 80       .word B0_equal_sign, B0_plus_sign, B0_c, B0_a, B0_t, B0_f, B0_o, B0_r, B0_lower_t
       01:A002  33 80     
       01:A004  65 80     
       01:A006  8F 80     
       01:A008  B9 80     
       01:A00A  E3 80     
       01:A00C  0D 81     
       01:A00E  37 81     
       01:A010  61 81     
    2  01:A012  91 81       .word B0_perfume, B0_chestnut, B0_cherry, B0_apple, B0_star_ship, B0_egg_dog, B0_ghost, B0_meat, B0_soda
       01:A014  FA 81     
       01:A016  61 82     
       01:A018  C5 82     
       01:A01A  28 83     
       01:A01C  90 83     
       01:A01E  F9 83     
       01:A020  60 84     
       01:A022  C3 84     
    3  01:A024  26 85       .word B0_camera, B0_Ellie, B0_mushu, B0_plasma_globe, B0_house, B0_the, B0_end, B0_for, B0_now
       01:A026  D9 85     
       01:A028  84 86     
       01:A02A  32 87     
       01:A02C  EA 87     
       01:A02E  A3 88     
       01:A030  06 89     
       01:A032  6A 89     
       01:A034  0F 8A     
    4                     
    5  01:A036  27 80       .word B0_equal_signName, B0_plus_signName, B0_cName, B0_aName, B0_tName, B0_fName, B0_oName, B0_rName, B0_lower_tName
       01:A038  5A 80     
       01:A03A  8C 80     
       01:A03C  B6 80     
       01:A03E  E0 80     
       01:A040  0A 81     
       01:A042  34 81     
       01:A044  5E 81     
       01:A046  88 81     
    6  01:A048  F1 81       .word B0_perfumeName, B0_chestnutName, B0_cherryName, B0_appleName, B0_star_shipName, B0_egg_dogName, B0_ghostName, B0_meatName, B0_sodaName
       01:A04A  57 82     
       01:A04C  BD 82     
       01:A04E  21 83     
       01:A050  85 83     
       01:A052  F0 83     
       01:A054  59 84     
       01:A056  BD 84     
       01:A058  20 85     
    7  01:A05A  D1 85       .word B0_cameraName, B0_EllieName, B0_mushuName, B0_plasma_globeName, B0_houseName, B0_theName, B0_endName, B0_forName, B0_nowName
       01:A05C  7D 86     
       01:A05E  2B 87     
       01:A060  DC 87     
       01:A062  9C 88     
       01:A064  01 89     
       01:A066  65 89     
       01:A068  0A 8A     
       01:A06A  B4 8A     
#[2]   Banks/Bank0.asm
   12                     ;puzzle sprites
   13  01:A06C  00 00 00    .db $00, $00, $00, $00
       01:A06F  00        
   14  01:A070  00 00 00    .db $00, $00, $00, $00
       01:A073  00        
   15  01:A074  00 00 00    .db $00, $00, $00, $00
       01:A077  00        
   16  01:A078  00 00 00    .db $00, $00, $00, $00
       01:A07B  00        
   17  01:A07C  00 00 00    .db $00, $00, $00, $00
       01:A07F  00        
   18  01:A080  00 00 00    .db $00, $00, $00, $00
       01:A083  00        
   19  01:A084  00 00 00    .db $00, $00, $00, $00
       01:A087  00        
   20  01:A088  00 00 00    .db $00, $00, $00, $00
       01:A08B  00        
   21  01:A08C  00 00 00    .db $00, $00, $00, $00
       01:A08F  00        
   22  01:A090  00 00 00    .db $00, $00, $00, $00
       01:A093  00        
   23  01:A094  00 00 00    .db $00, $00, $00, $00
       01:A097  00        
   24  01:A098  00 00 00    .db $00, $00, $00, $00
       01:A09B  00        
   25  01:A09C  00 00 00    .db $00, $00, $00, $00
       01:A09F  00        
   26  01:A0A0  00 00 00    .db $00, $00, $00, $00
       01:A0A3  00        
   27  01:A0A4  00 00 00    .db $00, $00, $00, $00
       01:A0A7  00        
   28  01:A0A8  00 00 00    .db $00, $00, $00, $00
       01:A0AB  00        
   29  01:A0AC  00 00 00    .db $00, $00, $00, $00
       01:A0AF  00        
   30  01:A0B0  00 00 00    .db $00, $00, $00, $00
       01:A0B3  00        
   31  01:A0B4  00 00 00    .db $00, $00, $00, $00
       01:A0B7  00        
   32  01:A0B8  00 00 00    .db $00, $00, $00, $00
       01:A0BB  00        
   33  01:A0BC  00 00 00    .db $00, $00, $00, $00
       01:A0BF  00        
   34  01:A0C0  00 00 00    .db $00, $00, $00, $00
       01:A0C3  00        
   35  01:A0C4  00 00 00    .db $00, $00, $00, $00
       01:A0C7  00        
   36  01:A0C8  00 00 00    .db $00, $00, $00, $00
       01:A0CB  00        
   37  01:A0CC  00 00 00    .db $00, $00, $00, $00
       01:A0CF  00        
   38  01:A0D0  00 00 00    .db $00, $00, $00, $00
       01:A0D3  00        
   39  01:A0D4  00 00 00    .db $00, $00, $00, $00
       01:A0D7  00        
   40                       
   41  01:A0D8              .incbin "SoundEnginePreComp.nes"
#[3]   Music/Bank0.i
   42                       .include "Music/Bank0.i"  ;holds the data for bank song
    1  01:A881            bank0_header:
    2  01:A881  05            .byte $05           ;4 streams
    3                         
    4  01:A882  00            .byte MUSIC_SQ1     ;which stream
    5  01:A883  01            .byte $01           ;status byte (stream enabled)
    6  01:A884  00            .byte SQUARE_1      ;which channel
    7  01:A885  70            .byte $70           ;initial duty (01)
    8  01:A886  0B            .byte ve_long_decay ;volume envelope
    9  01:A887  AA A8         .word bank0_square1 ;pointer to stream
   10  01:A889  3A            .byte $3A           ;tempo
   11                         
   12  01:A88A  01            .byte MUSIC_SQ2     ;which stream
   13  01:A88B  01            .byte $01           ;status byte (stream enabled)
   14  01:A88C  01            .byte SQUARE_2      ;which channel
   15  01:A88D  70            .byte $70           ;initial duty (10)
   16  01:A88E  03            .byte ve_tgl_1      ;volume envelope
   17  01:A88F  4E AA         .word bank0_square2 ;pointer to stream
   18  01:A891  3A            .byte $3A           ;tempo
   19                         
   20  01:A892  02            .byte MUSIC_TRI     ;which stream
   21  01:A893  01            .byte $01           ;status byte (stream enabled)
   22  01:A894  02            .byte TRIANGLE      ;which channel
   23  01:A895  80            .byte $80           ;initial volume (on)
   24  01:A896  03            .byte ve_tgl_1      ;volume envelope
   25  01:A897  41 AC         .word bank0_tri     ;pointer to stream
   26  01:A899  3A            .byte $3A           ;tempo
   27                         
   28  01:A89A  03            .byte MUSIC_NOI     ;which stream
   29  01:A89B  01            .byte $01           ;enabled
   30  01:A89C  03            .byte NOISE     
   31  01:A89D  30            .byte $30           ;initial duty_vol
   32  01:A89E  0A            .byte ve_hiHat_decay ;volume envelope
   33  01:A89F  2D AE         .word bank0_noise   ;pointer to stream
   34  01:A8A1  3A            .byte $3A           ;tempo
   35                             
   36  01:A8A2  06                .byte MUSIC_DPMC
   37  01:A8A3  01                .byte $01
   38  01:A8A4  04                .byte DPMC
   39  01:A8A5  30                .byte $30
   40  01:A8A6  0A                .byte ve_hiHat_decay
   41  01:A8A7  53 AE             .word bank0_dpcm  ;pointer to stream
   42  01:A8A9  3A            .byte $3A           ;tempo
   43                     
   44                         
   45  01:A8AA            bank0_square1:
   46                     
   47  01:A8AA  A9 02             .byte pitch_envelope, pe_sweep
   48  01:A8AC  A2 0B             .byte volume_envelope, ve_long_decay 
   49  01:A8AE  83 5E         .byte quarter, rest
   50  01:A8B0  87 29             .byte d_eighth, D5
   51  01:A8B2  A9 01             .byte pitch_envelope, pe_mod
   52  01:A8B4  8E 27             .byte d_half_d_eight, C5
   53  01:A8B6  81 26 27          .byte sixteenth, B4, C5
   54  01:A8B9  82 26             .byte eighth, B4
   55  01:A8BB  81 21             .byte sixteenth, Fs4
   56  01:A8BD  82 22 24          .byte eighth, G4,  A4
   57  01:A8C0  81 26             .byte sixteenth, B4
   58  01:A8C2  A9 02             .byte pitch_envelope, pe_sweep
   59  01:A8C4  87 21             .byte d_eighth, Fs4
   60  01:A8C6  A9 01             .byte pitch_envelope, pe_mod
   61  01:A8C8  8F 24             .byte whole_quarter_sixteenth, A4
   62  01:A8CA  81 5E             .byte sixteenth, rest
   63  01:A8CC  15 16 17          .byte Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       01:A8CF  18 17 16  
       01:A8D2  15        
   64                             
   65  01:A8D3  A9 02             .byte pitch_envelope, pe_sweep
   66  01:A8D5  83 5E             .byte quarter, rest
   67  01:A8D7  87 29             .byte d_eighth, D5
   68  01:A8D9  A9 01             .byte pitch_envelope, pe_mod
   69  01:A8DB  8E 27             .byte d_half_d_eight, C5
   70  01:A8DD  81 26 27          .byte sixteenth, B4, C5
   71  01:A8E0  82 26             .byte eighth, B4
   72  01:A8E2  81 21             .byte sixteenth, Fs4
   73  01:A8E4  82 22 2B          .byte eighth, G4,  E5
   74  01:A8E7  A9 02             .byte pitch_envelope, pe_sweep
   75  01:A8E9  81 2E             .byte sixteenth, G5
   76  01:A8EB  A9 01             .byte pitch_envelope, pe_mod
   77  01:A8ED  8A 2D             .byte d_whole, Fs5
   78  01:A8EF  81 5E             .byte sixteenth, rest
   79  01:A8F1  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       01:A8F4  16 18 1D  
       01:A8F7  21        
   80                         
   81  01:A8F8  A9 02             .byte pitch_envelope, pe_sweep
   82  01:A8FA  83 5E             .byte quarter, rest
   83  01:A8FC  87 2E             .byte d_eighth, G5
   84  01:A8FE  A9 01             .byte pitch_envelope, pe_mod
   85  01:A900  8E 2C             .byte d_half_d_eight, F5
   86  01:A902  81 2B 2C          .byte sixteenth, E5, F5
   87  01:A905  82 2B             .byte eighth, E5
   88  01:A907  81 26             .byte sixteenth, B4
   89  01:A909  82 27 29          .byte eighth, C5,  D5
   90  01:A90C  81 2B 29          .byte sixteenth, E5, D5 
   91  01:A90F  82 26 27          .byte eighth, B4, C5, A4, B4, G4 
       01:A912  24 26 22  
   92  01:A915  81 27 26          .byte sixteenth, C5, B4, G4, F4, D4
       01:A918  22 20 1D  
   93  01:A91B  A9 02             .byte pitch_envelope, pe_sweep
   94  01:A91D  82 20             .byte eighth, F4
   95  01:A91F  A9 01             .byte pitch_envelope, pe_mod
   96  01:A921  81 24             .byte sixteenth, A4
   97  01:A923  A9 02             .byte pitch_envelope, pe_sweep
   98  01:A925  82 22             .byte eighth, G4
   99  01:A927  A9 01             .byte pitch_envelope, pe_mod
  100  01:A929  81 27             .byte sixteenth, C5
  101  01:A92B  8C 26             .byte five_eighths, B4
  102                             
  103  01:A92D  A9 02             .byte pitch_envelope, pe_sweep
  104  01:A92F  83 5E             .byte quarter, rest
  105  01:A931  87 29             .byte d_eighth, D5
  106  01:A933  A9 01             .byte pitch_envelope, pe_mod
  107  01:A935  8E 27             .byte d_half_d_eight, C5
  108  01:A937  81 26 27          .byte sixteenth, B4, C5
  109  01:A93A  82 26             .byte eighth, B4
  110  01:A93C  81 21             .byte sixteenth, Fs4
  111  01:A93E  82 22             .byte eighth, G4
  112  01:A940  A9 02             .byte pitch_envelope, pe_sweep
  113  01:A942  24                .byte A4
  114  01:A943  A9 01             .byte pitch_envelope, pe_mod
  115  01:A945  81 22             .byte sixteenth, G4
  116  01:A947  8A 21             .byte d_whole, Fs4
  117  01:A949  81 5E             .byte sixteenth, rest
  118  01:A94B  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       01:A94E  16 18 1D  
       01:A951  21        
  119                             
  120                             ;;bridge
  121                             
  122  01:A952  87 24 22          .byte d_eighth, A4, G4, Fs4
       01:A955  21        
  123  01:A956  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       01:A959  0A 2E 0B  
       01:A95C  2D 0C     
  124  01:A95E  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       01:A961  0A 24 09  
       01:A964  22        
  125  01:A965  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       01:A968  1D 18     
  126  01:A96A  82 1B             .byte eighth, C4
  127  01:A96C  81 16             .byte sixteenth, G3
  128  01:A96E  91 15             .byte whole_sixteenth, Fs3
  129  01:A970  84 5E             .byte half, rest
  130  01:A972  81 5E             .byte sixteenth, rest
  131  01:A974  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:A977  18 16 18  
       01:A97A  1D 21     
  132                             
  133  01:A97C  87 24 22          .byte d_eighth, A4, G4, Fs4
       01:A97F  21        
  134  01:A980  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       01:A983  0A 2E 0B  
       01:A986  2D 0C     
  135  01:A988  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       01:A98B  0A 24 09  
       01:A98E  22        
  136  01:A98F  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       01:A992  1D 18     
  137  01:A994  82 1B             .byte eighth, C4
  138  01:A996  81 22             .byte sixteenth, G4
  139  01:A998  91 21             .byte whole_sixteenth, Fs4
  140  01:A99A  84 5E             .byte half, rest
  141  01:A99C  81 5E             .byte sixteenth, rest
  142  01:A99E  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:A9A1  18 16 18  
       01:A9A4  1D 21     
  143                     
  144                             ;; reach-around
  145  01:A9A6  A9 02             .byte pitch_envelope, pe_sweep
  146  01:A9A8  A2 0B             .byte volume_envelope, ve_long_decay 
  147  01:A9AA  87 22 22          .byte d_eighth, G4, G4
  148  01:A9AD  A9 01             .byte pitch_envelope, pe_mod
  149  01:A9AF  A2 04             .byte volume_envelope, ve_tgl_2
  150  01:A9B1  82 24             .byte eighth, A4
  151  01:A9B3  A2 03             .byte volume_envelope, ve_tgl_1
  152  01:A9B5  80 5E 38          .byte thirtysecond, rest, F6
  153  01:A9B8  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:A9BB  33 30 2E  
       01:A9BE  2D 30     
  154  01:A9C0  82 2E             .byte eighth, G5
  155  01:A9C2  81 27             .byte sixteenth, C5
  156  01:A9C4  82 2C             .byte eighth, F5
  157  01:A9C6  81 29             .byte sixteenth, D5
  158  01:A9C8  82 2E             .byte eighth, G5
  159  01:A9CA  81 2D             .byte sixteenth, Fs5
  160  01:A9CC  82 30             .byte eighth, A5
  161  01:A9CE  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       01:A9D1  2D 33 30  
  162                             
  163  01:A9D4  A9 02             .byte pitch_envelope, pe_sweep
  164  01:A9D6  A2 0B             .byte volume_envelope, ve_long_decay 
  165  01:A9D8  87 22 22          .byte d_eighth, G4, G4
  166  01:A9DB  A9 01             .byte pitch_envelope, pe_mod
  167  01:A9DD  A2 04             .byte volume_envelope, ve_tgl_2
  168  01:A9DF  82 24             .byte eighth, A4
  169  01:A9E1  A2 03             .byte volume_envelope, ve_tgl_1
  170  01:A9E3  80 5E 1C          .byte thirtysecond, rest, Cs4
  171  01:A9E6  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       01:A9E9  29 24 29  
       01:A9EC  2D        
  172  01:A9ED  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       01:A9F0  2B 24 2C  
       01:A9F3  27 21     
  173  01:A9F5  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6, D6
       01:A9F8  24 29 24  
       01:A9FB  1F 2E 2D  
       01:A9FE  33 35     
  174                             
  175  01:AA00  A9 02             .byte pitch_envelope, pe_sweep
  176  01:AA02  A2 0B             .byte volume_envelope, ve_long_decay 
  177  01:AA04  87 22 22          .byte d_eighth, G4, G4
  178  01:AA07  A9 01             .byte pitch_envelope, pe_mod
  179  01:AA09  A2 04             .byte volume_envelope, ve_tgl_2
  180  01:AA0B  82 24             .byte eighth, A4
  181  01:AA0D  A2 03             .byte volume_envelope, ve_tgl_1
  182  01:AA0F  80 5E 38          .byte thirtysecond, rest, F6
  183  01:AA12  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:AA15  33 30 2E  
       01:AA18  2D 30     
  184  01:AA1A  82 2E             .byte eighth, G5
  185  01:AA1C  81 27             .byte sixteenth, C5
  186  01:AA1E  82 2C             .byte eighth, F5
  187  01:AA20  81 29             .byte sixteenth, D5
  188  01:AA22  82 2E             .byte eighth, G5
  189  01:AA24  81 2D             .byte sixteenth, Fs5
  190  01:AA26  82 30             .byte eighth, A5
  191  01:AA28  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       01:AA2B  2D 33 30  
  192                             
  193  01:AA2E  A9 02             .byte pitch_envelope, pe_sweep
  194  01:AA30  A2 0B             .byte volume_envelope, ve_long_decay 
  195  01:AA32  87 22 22          .byte d_eighth, G4, G4
  196  01:AA35  A9 01             .byte pitch_envelope, pe_mod
  197  01:AA37  A2 04             .byte volume_envelope, ve_tgl_2
  198  01:AA39  82 24             .byte eighth, A4
  199  01:AA3B  A2 0B             .byte volume_envelope, ve_long_decay 
  200  01:AA3D  88 5E             .byte d_quarter, rest
  201  01:AA3F  8C 24             .byte five_eighths, A4
  202  01:AA41  A2 03             .byte volume_envelope, ve_tgl_1
  203  01:AA43  81 5E             .byte sixteenth, rest
  204  01:AA45  82 21 22          .byte eighth, Fs4, G4, Gs4
       01:AA48  23        
  205  01:AA49  81 24             .byte sixteenth, A4
  206                     
  207  01:AA4B  A1                .byte loop
  208  01:AA4C  AA A8         .word bank0_square1
  209                             
  210                             
  211                     
  212  01:AA4E            bank0_square2:
  213                     
  214  01:AA4E  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:AA51  0C 05     
  215  01:AA53  82 11             .byte eighth, D3
  216  01:AA55  81 05             .byte sixteenth, D2
  217  01:AA57  88 0F             .byte d_quarter, C3
  218  01:AA59  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AA5C  0F        
  219  01:AA5D  05 0A 0C          .byte D2, G2, A2, D2 
       01:AA60  05        
  220  01:AA61  82 11             .byte eighth, D3
  221  01:AA63  81 05             .byte sixteenth, D2
  222  01:AA65  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       01:AA68  0A 0B     
  223  01:AA6A  81 0C             .byte sixteenth, A2
  224  01:AA6C  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:AA6F  0C 05     
  225  01:AA71  82 11             .byte eighth, D3
  226  01:AA73  81 05             .byte sixteenth, D2
  227  01:AA75  88 0F             .byte d_quarter, C3
  228  01:AA77  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AA7A  0F        
  229  01:AA7B  05 0A 0C          .byte D2, G2, A2, D2 
       01:AA7E  05        
  230  01:AA7F  82 11             .byte eighth, D3
  231  01:AA81  81 05             .byte sixteenth, D2
  232  01:AA83  82 0F             .byte eighth, C3 
  233  01:AA85  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       01:AA88  0B 0C 0B  
       01:AA8B  0A 09     
  234                             
  235  01:AA8D  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:AA90  0C 05     
  236  01:AA92  82 11             .byte eighth, D3
  237  01:AA94  81 05             .byte sixteenth, D2
  238  01:AA96  88 0F             .byte d_quarter, C3
  239  01:AA98  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AA9B  0F        
  240  01:AA9C  05 0A 0C          .byte D2, G2, A2, D2 
       01:AA9F  05        
  241  01:AAA0  82 11             .byte eighth, D3
  242  01:AAA2  81 05             .byte sixteenth, D2
  243  01:AAA4  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       01:AAA7  0A 0B     
  244  01:AAA9  81 0C             .byte sixteenth, A2
  245  01:AAAB  05 0A 0C          .byte D2, G2, A2, D2 
       01:AAAE  05        
  246  01:AAAF  82 11             .byte eighth, D3
  247  01:AAB1  81 05             .byte sixteenth, D2
  248  01:AAB3  88 0F             .byte d_quarter, C3
  249  01:AAB5  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AAB8  0F        
  250  01:AAB9  05 0A 0C          .byte D2, G2, A2, D2 
       01:AABC  05        
  251  01:AABD  82 11             .byte eighth, D3
  252  01:AABF  81 05             .byte sixteenth, D2
  253  01:AAC1  82 0F             .byte eighth, C3 
  254  01:AAC3  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       01:AAC6  0C 0A 0C  
       01:AAC9  11 15     
  255                             
  256  01:AACB  0A 0F 11          .byte G2, C3, D3, G2 
       01:AACE  0A        
  257  01:AACF  82 16             .byte eighth, G3
  258  01:AAD1  81 0A             .byte sixteenth, G2
  259  01:AAD3  88 14             .byte d_quarter, F3
  260  01:AAD5  81 0F 11          .byte sixteenth, C3, D3, F3
       01:AAD8  14        
  261  01:AAD9  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       01:AADC  11 0A     
  262  01:AADE  82 16             .byte eighth, G3
  263  01:AAE0  81 0A             .byte sixteenth, G2
  264  01:AAE2  88 14             .byte d_quarter, F3
  265  01:AAE4  81 14 13          .byte sixteenth, F3, E3, D3
       01:AAE7  11        
  266  01:AAE8  0A 0F 11          .byte G2, C3, D3, G2 
       01:AAEB  0A        
  267  01:AAEC  82 16             .byte eighth, G3
  268  01:AAEE  81 0A             .byte sixteenth, G2
  269  01:AAF0  88 14             .byte d_quarter, F3
  270  01:AAF2  81 0F 11          .byte sixteenth, C3, D3, F3
       01:AAF5  14        
  271  01:AAF6  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       01:AAF9  11 0A     
  272  01:AAFB  82 16             .byte eighth, G3
  273  01:AAFD  81 0A             .byte sixteenth, G2
  274  01:AAFF  88 14             .byte d_quarter, F3
  275  01:AB01  81 14 13          .byte sixteenth, F3, E3, D3
       01:AB04  11        
  276                     
  277  01:AB05  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       01:AB08  0C 05     
  278  01:AB0A  82 11             .byte eighth, D3
  279  01:AB0C  81 05             .byte sixteenth, D2
  280  01:AB0E  88 0F             .byte d_quarter, C3
  281  01:AB10  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AB13  0F        
  282  01:AB14  05 0A 0C          .byte D2, G2, A2, D2 
       01:AB17  05        
  283  01:AB18  82 11             .byte eighth, D3
  284  01:AB1A  81 05             .byte sixteenth, D2
  285  01:AB1C  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       01:AB1F  0A 0B     
  286  01:AB21  81 0C             .byte sixteenth, A2
  287  01:AB23  05 0A 0C          .byte D2, G2, A2, D2 
       01:AB26  05        
  288  01:AB27  82 11             .byte eighth, D3
  289  01:AB29  81 05             .byte sixteenth, D2
  290  01:AB2B  88 0F             .byte d_quarter, C3
  291  01:AB2D  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AB30  0F        
  292  01:AB31  05 0A 0C          .byte D2, G2, A2, D2 
       01:AB34  05        
  293  01:AB35  82 11             .byte eighth, D3
  294  01:AB37  81 05             .byte sixteenth, D2
  295  01:AB39  82 0F             .byte eighth, C3 
  296  01:AB3B  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       01:AB3E  0C 0A 0C  
       01:AB41  11 15     
  297                             
  298                             ;;bridge
  299                             
  300  01:AB43  A2 0B             .byte volume_envelope, ve_long_decay 
  301  01:AB45  87 1B 1A          .byte d_eighth, C4, B3, A3
       01:AB48  18        
  302  01:AB49  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       01:AB4C  0B 0C 0B  
       01:AB4F  0A 09     
  303  01:AB51  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       01:AB54  15 11     
  304  01:AB56  82 14             .byte eighth, F3
  305  01:AB58  81 11             .byte sixteenth, D3
  306  01:AB5A  90 0F             .byte d_half_eighth, C3
  307  01:AB5C  A2 03             .byte volume_envelope, ve_tgl_1
  308  01:AB5E  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AB61  0F        
  309  01:AB62  05 0A 0C          .byte D2, G2, A2, D2 
       01:AB65  05        
  310  01:AB66  82 11             .byte eighth, D3
  311  01:AB68  81 05             .byte sixteenth, D2
  312  01:AB6A  82 0F             .byte eighth, C3 
  313  01:AB6C  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       01:AB6F  0C 0A 0C  
       01:AB72  11 15     
  314                             
  315  01:AB74  A2 0B             .byte volume_envelope, ve_long_decay 
  316  01:AB76  87 1B 1A          .byte d_eighth, C4, B3, A3
       01:AB79  18        
  317  01:AB7A  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       01:AB7D  0B 0C 0B  
       01:AB80  0A 09     
  318  01:AB82  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       01:AB85  15 11     
  319  01:AB87  82 14             .byte eighth, F3
  320  01:AB89  81 1B             .byte sixteenth, C4
  321  01:AB8B  90 1D             .byte d_half_eighth, D4
  322  01:AB8D  A2 03             .byte volume_envelope, ve_tgl_1
  323  01:AB8F  81 0A 0C          .byte sixteenth, G2, A2, C3
       01:AB92  0F        
  324  01:AB93  05 0A 0C          .byte D2, G2, A2, D2 
       01:AB96  05        
  325  01:AB97  82 11             .byte eighth, D3
  326  01:AB99  81 05             .byte sixteenth, D2
  327  01:AB9B  82 0F             .byte eighth, C3 
  328  01:AB9D  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       01:ABA0  0C 0A 0C  
       01:ABA3  11 15     
  329                             
  330                             ;; reach-around
  331  01:ABA5  A2 0B             .byte volume_envelope, ve_long_decay 
  332  01:ABA7  87 1F 1F          .byte d_eighth, E4, E4
  333  01:ABAA  A2 04             .byte volume_envelope, ve_tgl_2
  334  01:ABAC  82 21             .byte eighth, Fs4
  335  01:ABAE  A2 07             .byte volume_envelope, ve_battlekid_2
  336  01:ABB0  86 5E             .byte d_sixteenth, rest
  337  01:ABB2  80 38             .byte thirtysecond, F6
  338  01:ABB4  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:ABB7  33 30 2E  
       01:ABBA  2D 30     
  339  01:ABBC  82 2E             .byte eighth, G5
  340  01:ABBE  81 27             .byte sixteenth, C5
  341  01:ABC0  82 2C             .byte eighth, F5
  342  01:ABC2  81 29             .byte sixteenth, D5
  343  01:ABC4  82 2E             .byte eighth, G5
  344  01:ABC6  81 2D             .byte sixteenth, Fs5
  345  01:ABC8  82 30             .byte eighth, A5
  346  01:ABCA  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       01:ABCD  2D 33     
  347                             
  348  01:ABCF  A2 0B             .byte volume_envelope, ve_long_decay 
  349  01:ABD1  87 1F 1F          .byte d_eighth, E4, E4
  350  01:ABD4  A2 04             .byte volume_envelope, ve_tgl_2
  351  01:ABD6  82 21             .byte eighth, Fs4
  352  01:ABD8  A2 07             .byte volume_envelope, ve_battlekid_2
  353  01:ABDA  86 5E             .byte d_sixteenth, rest
  354  01:ABDC  80 1C             .byte thirtysecond, Cs4
  355  01:ABDE  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       01:ABE1  29 24 29  
       01:ABE4  2D        
  356  01:ABE5  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       01:ABE8  2B 24 2C  
       01:ABEB  27 21     
  357  01:ABED  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6
       01:ABF0  24 29 24  
       01:ABF3  1F 2E 2D  
       01:ABF6  33        
  358                             
  359  01:ABF7  A2 0B             .byte volume_envelope, ve_long_decay 
  360  01:ABF9  87 1F 1F          .byte d_eighth, E4, E4
  361  01:ABFC  A2 04             .byte volume_envelope, ve_tgl_2
  362  01:ABFE  82 21             .byte eighth, Fs4
  363  01:AC00  A2 07             .byte volume_envelope, ve_battlekid_2
  364  01:AC02  86 5E             .byte d_sixteenth, rest
  365  01:AC04  80 38             .byte thirtysecond, F6
  366  01:AC06  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       01:AC09  33 30 2E  
       01:AC0C  2D 30     
  367  01:AC0E  82 2E             .byte eighth, G5
  368  01:AC10  81 27             .byte sixteenth, C5
  369  01:AC12  82 2C             .byte eighth, F5
  370  01:AC14  81 29             .byte sixteenth, D5
  371  01:AC16  82 2E             .byte eighth, G5
  372  01:AC18  81 2D             .byte sixteenth, Fs5
  373  01:AC1A  82 30             .byte eighth, A5
  374  01:AC1C  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       01:AC1F  2D 33     
  375                             
  376  01:AC21  A2 0B             .byte volume_envelope, ve_long_decay 
  377  01:AC23  87 1F 1F          .byte d_eighth, E4, E4
  378  01:AC26  A2 04             .byte volume_envelope, ve_tgl_2
  379  01:AC28  82 21             .byte eighth, Fs4
  380  01:AC2A  A2 0B             .byte volume_envelope, ve_long_decay 
  381  01:AC2C  88 5E             .byte d_quarter, rest
  382  01:AC2E  AA 01             .byte arpeggio, arp_lowerThird
  383  01:AC30  8C 27             .byte five_eighths, C5
  384  01:AC32  A2 03             .byte volume_envelope, ve_tgl_1
  385  01:AC34  AA 00             .byte arpeggio, arp_none
  386  01:AC36  81 5E             .byte sixteenth, rest
  387  01:AC38  82 09 0A          .byte eighth, Fs2, G2, Gs2
       01:AC3B  0B        
  388  01:AC3C  81 0C             .byte sixteenth, A2
  389                             
  390  01:AC3E  A1            .byte loop
  391  01:AC3F  4E AA         .word bank0_square2
  392                         
  393  01:AC41            bank0_tri:
  394                     
  395  01:AC41  81 11 16          .byte sixteenth, D3, G3, A3, D3 
       01:AC44  18 11     
  396  01:AC46  82 1D             .byte eighth, D4
  397  01:AC48  81 11             .byte sixteenth, D3
  398  01:AC4A  88 1B             .byte d_quarter, C4
  399  01:AC4C  81 16 18          .byte sixteenth, G3, A3, C4
       01:AC4F  1B        
  400  01:AC50  11 16 18          .byte D3, G3, A3, D3 
       01:AC53  11        
  401  01:AC54  82 1D             .byte eighth, D4
  402  01:AC56  81 11             .byte sixteenth, D3
  403  01:AC58  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       01:AC5B  16 17     
  404  01:AC5D  81 18             .byte sixteenth, A3
  405  01:AC5F  11 16 18          .byte D3, G3, A3, D3 
       01:AC62  11        
  406  01:AC63  82 1D             .byte eighth, D4
  407  01:AC65  81 11             .byte sixteenth, D3
  408  01:AC67  88 1B             .byte d_quarter, C4
  409  01:AC69  81 16 18          .byte sixteenth, G3, A3, C4
       01:AC6C  1B        
  410  01:AC6D  11 16 18          .byte D3, G3, A3, D3 
       01:AC70  11        
  411  01:AC71  82 1D             .byte eighth, D4
  412  01:AC73  81 11             .byte sixteenth, D3
  413  01:AC75  82 1B             .byte eighth, C4
  414  01:AC77  81 15 16          .byte sixteenth, Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       01:AC7A  17 18 17  
       01:AC7D  16 15     
  415                             
  416  01:AC7F  11 16 18          .byte D3, G3, A3, D3 
       01:AC82  11        
  417  01:AC83  82 1D             .byte eighth, D4
  418  01:AC85  81 11             .byte sixteenth, D3
  419  01:AC87  88 1B             .byte d_quarter, C4
  420  01:AC89  81 16 18          .byte sixteenth, G3, A3, C4
       01:AC8C  1B        
  421  01:AC8D  11 16 18          .byte D3, G3, A3, D3 
       01:AC90  11        
  422  01:AC91  82 1D             .byte eighth, D4
  423  01:AC93  81 11             .byte sixteenth, D3
  424  01:AC95  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       01:AC98  16 17     
  425  01:AC9A  81 18             .byte sixteenth, A3
  426  01:AC9C  11 16 18          .byte D3, G3, A3, D3 
       01:AC9F  11        
  427  01:ACA0  82 1D             .byte eighth, D4
  428  01:ACA2  81 11             .byte sixteenth, D3
  429  01:ACA4  88 1B             .byte d_quarter, C4
  430  01:ACA6  81 16 18          .byte sixteenth, G3, A3, C4
       01:ACA9  1B        
  431  01:ACAA  11 16 18          .byte D3, G3, A3, D3 
       01:ACAD  11        
  432  01:ACAE  82 1D             .byte eighth, D4
  433  01:ACB0  81 11             .byte sixteenth, D3
  434  01:ACB2  82 1B             .byte eighth, C4
  435  01:ACB4  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:ACB7  18 16 18  
       01:ACBA  1D 21     
  436                             
  437  01:ACBC  16 1B 1D          .byte G3, C4, D4, G3 
       01:ACBF  16        
  438  01:ACC0  82 22             .byte eighth, G4
  439  01:ACC2  81 16             .byte sixteenth, G3
  440  01:ACC4  88 20             .byte d_quarter, F4
  441  01:ACC6  81 1B 1D          .byte sixteenth, C4, D4, F4
       01:ACC9  20        
  442  01:ACCA  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       01:ACCD  1D 16     
  443  01:ACCF  82 22             .byte eighth, G4
  444  01:ACD1  81 16             .byte sixteenth, G3
  445  01:ACD3  88 20             .byte d_quarter, F4
  446  01:ACD5  81 20 1F          .byte sixteenth, F4, E4, D4
       01:ACD8  1D        
  447  01:ACD9  16 1B 1D          .byte G3, C4, D4, G3 
       01:ACDC  16        
  448  01:ACDD  82 22             .byte eighth, G4
  449  01:ACDF  81 16             .byte sixteenth, G3
  450  01:ACE1  88 20             .byte d_quarter, F4
  451  01:ACE3  81 1B 1D          .byte sixteenth, C4, D4, F4
       01:ACE6  20        
  452  01:ACE7  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       01:ACEA  1D 16     
  453  01:ACEC  82 22             .byte eighth, G4
  454  01:ACEE  81 16             .byte sixteenth, G3
  455  01:ACF0  88 20             .byte d_quarter, F4
  456  01:ACF2  81 20 1F          .byte sixteenth, F4, E4, D4
       01:ACF5  1D        
  457                     
  458  01:ACF6  11 16 18          .byte D3, G3, A3, D3 
       01:ACF9  11        
  459  01:ACFA  82 1D             .byte eighth, D4
  460  01:ACFC  81 11             .byte sixteenth, D3
  461  01:ACFE  88 1B             .byte d_quarter, C4
  462  01:AD00  81 16 18          .byte sixteenth, G3, A3, C4
       01:AD03  1B        
  463  01:AD04  11 16 18          .byte D3, G3, A3, D3 
       01:AD07  11        
  464  01:AD08  82 1D             .byte eighth, D4
  465  01:AD0A  81 11             .byte sixteenth, D3
  466  01:AD0C  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       01:AD0F  16 17     
  467  01:AD11  81 18             .byte sixteenth, A3
  468  01:AD13  11 16 18          .byte D3, G3, A3, D3 
       01:AD16  11        
  469  01:AD17  82 1D             .byte eighth, D4
  470  01:AD19  81 11             .byte sixteenth, D3
  471  01:AD1B  88 1B             .byte d_quarter, C4
  472  01:AD1D  81 16 18          .byte sixteenth, G3, A3, C4
       01:AD20  1B        
  473  01:AD21  11 16 18          .byte D3, G3, A3, D3 
       01:AD24  11        
  474  01:AD25  82 1D             .byte eighth, D4
  475  01:AD27  81 11             .byte sixteenth, D3
  476  01:AD29  82 1B             .byte eighth, C4
  477  01:AD2B  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:AD2E  18 16 18  
       01:AD31  1D 21     
  478                             
  479                             ;;bridge
  480                             
  481  01:AD33  81                .byte sixteenth
  482  01:AD34  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       01:AD37  22 1D 16  
       01:AD3A  18 1D 24  
  483  01:AD3D  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       01:AD40  35 33 30  
       01:AD43  2E        
  484  01:AD44  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       01:AD47  1F 18 12  
       01:AD4A  1D 18 11  
  485  01:AD4D  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       01:AD50  18 11 14  
       01:AD53  0F        
  486  01:AD54  11 16 18          .byte D3, G3, A3, D3 
       01:AD57  11        
  487  01:AD58  82 1D             .byte eighth, D4
  488  01:AD5A  81 11             .byte sixteenth, D3
  489  01:AD5C  88 1B             .byte d_quarter, C4
  490  01:AD5E  81 16 18          .byte sixteenth, G3, A3, C4
       01:AD61  1B        
  491  01:AD62  11 16 18          .byte D3, G3, A3, D3 
       01:AD65  11        
  492  01:AD66  82 1D             .byte eighth, D4
  493  01:AD68  81 11             .byte sixteenth, D3
  494  01:AD6A  82 1B             .byte eighth, C4
  495  01:AD6C  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:AD6F  18 16 18  
       01:AD72  1D 21     
  496  01:AD74  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       01:AD77  22 1D 16  
       01:AD7A  18 1D 24  
  497  01:AD7D  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       01:AD80  35 33 30  
       01:AD83  2E        
  498  01:AD84  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       01:AD87  1F 18 12  
       01:AD8A  1D 18 11  
  499  01:AD8D  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       01:AD90  18 11 14  
       01:AD93  0F        
  500  01:AD94  11 16 18          .byte D3, G3, A3, D3 
       01:AD97  11        
  501  01:AD98  82 1D             .byte eighth, D4
  502  01:AD9A  81 11             .byte sixteenth, D3
  503  01:AD9C  88 1B             .byte d_quarter, C4
  504  01:AD9E  81 16 18          .byte sixteenth, G3, A3, C4
       01:ADA1  1B        
  505  01:ADA2  11 16 18          .byte D3, G3, A3, D3 
       01:ADA5  11        
  506  01:ADA6  82 1D             .byte eighth, D4
  507  01:ADA8  81 11             .byte sixteenth, D3
  508  01:ADAA  82 1B             .byte eighth, C4
  509  01:ADAC  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       01:ADAF  18 16 18  
       01:ADB2  1D 21     
  510                             
  511                             ;; reach-around
  512  01:ADB4  A2 0B             .byte volume_envelope, ve_long_decay 
  513  01:ADB6  87 0F 0F          .byte d_eighth, C3, C3
  514  01:ADB9  A2 04             .byte volume_envelope, ve_tgl_2
  515  01:ADBB  82 11             .byte eighth, D3
  516  01:ADBD  A2 03             .byte volume_envelope, ve_tgl_1
  517  01:ADBF  87 5E             .byte d_eighth, rest
  518  01:ADC1  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADC4  1D        
  519  01:ADC5  8D 5E             .byte five_sixteenths, rest
  520  01:ADC7  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADCA  1D        
  521  01:ADCB  8D 5E             .byte five_sixteenths, rest
  522  01:ADCD  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADD0  1D        
  523  01:ADD1  82 5E             .byte eighth, rest
  524                             
  525  01:ADD3  A2 0B             .byte volume_envelope, ve_long_decay 
  526  01:ADD5  87 0F 0F          .byte d_eighth, C3, C3
  527  01:ADD8  A2 04             .byte volume_envelope, ve_tgl_2
  528  01:ADDA  82 11             .byte eighth, D3
  529  01:ADDC  A2 03             .byte volume_envelope, ve_tgl_1
  530  01:ADDE  87 5E             .byte d_eighth, rest
  531  01:ADE0  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADE3  1D        
  532  01:ADE4  8D 5E             .byte five_sixteenths, rest
  533  01:ADE6  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADE9  1D        
  534  01:ADEA  8D 5E             .byte five_sixteenths, rest
  535  01:ADEC  81 11 11          .byte sixteenth, D3, D3, D4
       01:ADEF  1D        
  536  01:ADF0  82 5E             .byte eighth, rest
  537                                     
  538  01:ADF2  A2 0B             .byte volume_envelope, ve_long_decay 
  539  01:ADF4  87 0F 0F          .byte d_eighth, C3, C3
  540  01:ADF7  A2 04             .byte volume_envelope, ve_tgl_2
  541  01:ADF9  82 11             .byte eighth, D3
  542  01:ADFB  A2 03             .byte volume_envelope, ve_tgl_1
  543  01:ADFD  87 5E             .byte d_eighth, rest
  544  01:ADFF  81 11 11          .byte sixteenth, D3, D3, D4
       01:AE02  1D        
  545  01:AE03  8D 5E             .byte five_sixteenths, rest
  546  01:AE05  81 11 11          .byte sixteenth, D3, D3, D4
       01:AE08  1D        
  547  01:AE09  8D 5E             .byte five_sixteenths, rest
  548  01:AE0B  81 11 11          .byte sixteenth, D3, D3, D4
       01:AE0E  1D        
  549  01:AE0F  82 5E             .byte eighth, rest
  550                             
  551  01:AE11  A2 0B             .byte volume_envelope, ve_long_decay 
  552  01:AE13  87 0F 0F          .byte d_eighth, C3, C3
  553  01:AE16  A2 04             .byte volume_envelope, ve_tgl_2
  554  01:AE18  82 11             .byte eighth, D3
  555  01:AE1A  A2 0B             .byte volume_envelope, ve_long_decay
  556  01:AE1C  88 5E             .byte d_quarter, rest
  557  01:AE1E  8C 0C             .byte five_eighths, A2
  558  01:AE20  A2 03             .byte volume_envelope, ve_tgl_1
  559  01:AE22  81 5E             .byte sixteenth, rest
  560  01:AE24  82 15 16          .byte eighth, Fs3, G3, Gs3
       01:AE27  17        
  561  01:AE28  81 18             .byte sixteenth, A3
  562                             
  563  01:AE2A  A1            .byte loop
  564  01:AE2B  41 AC         .word bank0_tri
  565                         
  566  01:AE2D            bank0_noise:
  567  01:AE2D  81 04 04      .byte sixteenth, $04, $04, $04, $04
       01:AE30  04 04     
  568  01:AE32  A2 09             .byte volume_envelope, ve_drum_decay 
  569  01:AE34  81 04         .byte sixteenth, $04
  570  01:AE36  A2 0A             .byte volume_envelope, ve_hiHat_decay
  571  01:AE38  81 04 04      .byte sixteenth, $04, $04, $04, $04
       01:AE3B  04 04     
  572  01:AE3D  A2 09         .byte volume_envelope, ve_drum_decay 
  573  01:AE3F  81 04         .byte sixteenth, $04
  574  01:AE41  A2 0A             .byte volume_envelope, ve_hiHat_decay
  575  01:AE43  81 04 04      .byte sixteenth, $04, $04
  576  01:AE46  A2 09             .byte volume_envelope, ve_drum_decay 
  577  01:AE48  81 04         .byte sixteenth, $04
  578  01:AE4A  A2 0A             .byte volume_envelope, ve_hiHat_decay
  579  01:AE4C  81 04 04          .byte sixteenth, $04, $04, $04
       01:AE4F  04        
  580  01:AE50  A1            .byte loop
  581  01:AE51  2D AE         .word bank0_noise
  582                     
  583  01:AE53            bank0_dpcm:
  584  01:AE53  83 0B 1B          .byte quarter, $0B, $1B, $0B, $1B
       01:AE56  0B 1B     
  585  01:AE58  0B 87 1B          .byte $0B, d_eighth, $1B, sixteenth, $1B 
       01:AE5B  81 1B     
  586  01:AE5D  82 0B 0B          .byte eighth, $0B, $0B, quarter, $1B
       01:AE60  83 1B     
  587  01:AE62  A1                .byte loop
  588  01:AE63  53 AE             .word bank0_dpcm
#[2]   Banks/Bank0.asm
   43                     
   44           BFFA        .org $BFFA     ;first of the three vectors starts here
   45  01:BFFA  08 D7       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   46                                        ;processor will jump to the label NMI:
   47  01:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   48                                        ;to the label RESET:
   49  01:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
#[3]   Puzzles/B1.asm
    4                       .include "Puzzles/B1.asm"
    1  02:8000            B1_puzzle0:
    2  02:8000  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8003  00 10 20  
    3  02:8006  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8009  00 00 00  
       02:800C  00 00 00  
       02:800F  00 00 00  
       02:8012  00 00 00  
       02:8015  00 00 00  
       02:8018  00 00     
    4  02:801A  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:801D  FF 00 FF  
       02:8020  00 FF 00  
       02:8023  FF 00 FF  
       02:8026  00 FF 00  
       02:8029  FF 00 FF  
       02:802C  00 FF     
    5  02:802E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8031  FF 00 FF  
       02:8034  00 FF 00  
       02:8037  FF 00 FF  
       02:803A  00 FF 00  
       02:803D  FF 00 FF  
       02:8040  00 FF     
    6  02:8042            B1_puzzle0Image:
    7  02:8042  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8045  00 00 00  
       02:8048  00 00 00  
       02:804B  00 00 00  
       02:804E  00 00 00  
       02:8051  00 00 00  
       02:8054  00 00 00  
       02:8057  00 00 00  
       02:805A  00 FF     
    8  02:805C            B1_puzzle0Name:
    9  02:805C  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $00, $FF
       02:805F  23 23 15  
       02:8062  0E 00 FF  
   10                     
   11  02:8065            B1_puzzle1:
   12  02:8065  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8068  00 10 20  
   13  02:806B  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:806E  00 00 00  
       02:8071  00 00 00  
       02:8074  00 00 00  
       02:8077  00 00 00  
       02:807A  00 00 00  
       02:807D  00 00     
   14  02:807F  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8082  FF 00 FF  
       02:8085  00 FF 00  
       02:8088  FF 00 FF  
       02:808B  00 FF 00  
       02:808E  FF 00 FF  
       02:8091  00 FF     
   15  02:8093  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8096  FF 00 FF  
       02:8099  00 FF 00  
       02:809C  FF 00 FF  
       02:809F  00 FF 00  
       02:80A2  FF 00 FF  
       02:80A5  00 FF     
   16  02:80A7            B1_puzzle1Image:
   17  02:80A7  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:80AA  00 00 00  
       02:80AD  00 00 00  
       02:80B0  00 00 00  
       02:80B3  00 00 00  
       02:80B6  00 00 00  
       02:80B9  00 00 00  
       02:80BC  00 00 00  
       02:80BF  00 FF     
   18  02:80C1            B1_puzzle1Name:
   19  02:80C1  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $01, $FF
       02:80C4  23 23 15  
       02:80C7  0E 01 FF  
   20                     
   21  02:80CA            B1_puzzle2:
   22  02:80CA  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:80CD  00 10 20  
   23  02:80D0  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:80D3  00 00 00  
       02:80D6  00 00 00  
       02:80D9  00 00 00  
       02:80DC  00 00 00  
       02:80DF  00 00 00  
       02:80E2  00 00     
   24  02:80E4  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:80E7  FF 00 FF  
       02:80EA  00 FF 00  
       02:80ED  FF 00 FF  
       02:80F0  00 FF 00  
       02:80F3  FF 00 FF  
       02:80F6  00 FF     
   25  02:80F8  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:80FB  FF 00 FF  
       02:80FE  00 FF 00  
       02:8101  FF 00 FF  
       02:8104  00 FF 00  
       02:8107  FF 00 FF  
       02:810A  00 FF     
   26  02:810C            B1_puzzle2Image:
   27  02:810C  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:810F  00 00 00  
       02:8112  00 00 00  
       02:8115  00 00 00  
       02:8118  00 00 00  
       02:811B  00 00 00  
       02:811E  00 00 00  
       02:8121  00 00 00  
       02:8124  00 FF     
   28  02:8126            B1_puzzle2Name:
   29  02:8126  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $02, $FF
       02:8129  23 23 15  
       02:812C  0E 02 FF  
   30                     
   31  02:812F            B1_puzzle3:
   32  02:812F  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8132  00 10 20  
   33  02:8135  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8138  00 00 00  
       02:813B  00 00 00  
       02:813E  00 00 00  
       02:8141  00 00 00  
       02:8144  00 00 00  
       02:8147  00 00     
   34  02:8149  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:814C  FF 00 FF  
       02:814F  00 FF 00  
       02:8152  FF 00 FF  
       02:8155  00 FF 00  
       02:8158  FF 00 FF  
       02:815B  00 FF     
   35  02:815D  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8160  FF 00 FF  
       02:8163  00 FF 00  
       02:8166  FF 00 FF  
       02:8169  00 FF 00  
       02:816C  FF 00 FF  
       02:816F  00 FF     
   36  02:8171            B1_puzzle3Image:
   37  02:8171  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8174  00 00 00  
       02:8177  00 00 00  
       02:817A  00 00 00  
       02:817D  00 00 00  
       02:8180  00 00 00  
       02:8183  00 00 00  
       02:8186  00 00 00  
       02:8189  00 FF     
   38  02:818B            B1_puzzle3Name:
   39  02:818B  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $03, $FF
       02:818E  23 23 15  
       02:8191  0E 03 FF  
   40                     
   41  02:8194            B1_puzzle4:
   42  02:8194  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8197  00 10 20  
   43  02:819A  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:819D  00 00 00  
       02:81A0  00 00 00  
       02:81A3  00 00 00  
       02:81A6  00 00 00  
       02:81A9  00 00 00  
       02:81AC  00 00     
   44  02:81AE  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:81B1  FF 00 FF  
       02:81B4  00 FF 00  
       02:81B7  FF 00 FF  
       02:81BA  00 FF 00  
       02:81BD  FF 00 FF  
       02:81C0  00 FF     
   45  02:81C2  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:81C5  FF 00 FF  
       02:81C8  00 FF 00  
       02:81CB  FF 00 FF  
       02:81CE  00 FF 00  
       02:81D1  FF 00 FF  
       02:81D4  00 FF     
   46  02:81D6            B1_puzzle4Image:
   47  02:81D6  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:81D9  00 00 00  
       02:81DC  00 00 00  
       02:81DF  00 00 00  
       02:81E2  00 00 00  
       02:81E5  00 00 00  
       02:81E8  00 00 00  
       02:81EB  00 00 00  
       02:81EE  00 FF     
   48  02:81F0            B1_puzzle4Name:
   49  02:81F0  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $04, $FF
       02:81F3  23 23 15  
       02:81F6  0E 04 FF  
   50                     
   51  02:81F9            B1_puzzle5:
   52  02:81F9  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:81FC  00 10 20  
   53  02:81FF  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8202  00 00 00  
       02:8205  00 00 00  
       02:8208  00 00 00  
       02:820B  00 00 00  
       02:820E  00 00 00  
       02:8211  00 00     
   54  02:8213  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8216  FF 00 FF  
       02:8219  00 FF 00  
       02:821C  FF 00 FF  
       02:821F  00 FF 00  
       02:8222  FF 00 FF  
       02:8225  00 FF     
   55  02:8227  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:822A  FF 00 FF  
       02:822D  00 FF 00  
       02:8230  FF 00 FF  
       02:8233  00 FF 00  
       02:8236  FF 00 FF  
       02:8239  00 FF     
   56  02:823B            B1_puzzle5Image:
   57  02:823B  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:823E  00 00 00  
       02:8241  00 00 00  
       02:8244  00 00 00  
       02:8247  00 00 00  
       02:824A  00 00 00  
       02:824D  00 00 00  
       02:8250  00 00 00  
       02:8253  00 FF     
   58  02:8255            B1_puzzle5Name:
   59  02:8255  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $05, $FF
       02:8258  23 23 15  
       02:825B  0E 05 FF  
   60                     
   61  02:825E            B1_puzzle6:
   62  02:825E  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8261  00 10 20  
   63  02:8264  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8267  00 00 00  
       02:826A  00 00 00  
       02:826D  00 00 00  
       02:8270  00 00 00  
       02:8273  00 00 00  
       02:8276  00 00     
   64  02:8278  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:827B  FF 00 FF  
       02:827E  00 FF 00  
       02:8281  FF 00 FF  
       02:8284  00 FF 00  
       02:8287  FF 00 FF  
       02:828A  00 FF     
   65  02:828C  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:828F  FF 00 FF  
       02:8292  00 FF 00  
       02:8295  FF 00 FF  
       02:8298  00 FF 00  
       02:829B  FF 00 FF  
       02:829E  00 FF     
   66  02:82A0            B1_puzzle6Image:
   67  02:82A0  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:82A3  00 00 00  
       02:82A6  00 00 00  
       02:82A9  00 00 00  
       02:82AC  00 00 00  
       02:82AF  00 00 00  
       02:82B2  00 00 00  
       02:82B5  00 00 00  
       02:82B8  00 FF     
   68  02:82BA            B1_puzzle6Name:
   69  02:82BA  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $06, $FF
       02:82BD  23 23 15  
       02:82C0  0E 06 FF  
   70                     
   71  02:82C3            B1_puzzle7:
   72  02:82C3  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:82C6  00 10 20  
   73  02:82C9  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:82CC  00 00 00  
       02:82CF  00 00 00  
       02:82D2  00 00 00  
       02:82D5  00 00 00  
       02:82D8  00 00 00  
       02:82DB  00 00     
   74  02:82DD  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:82E0  FF 00 FF  
       02:82E3  00 FF 00  
       02:82E6  FF 00 FF  
       02:82E9  00 FF 00  
       02:82EC  FF 00 FF  
       02:82EF  00 FF     
   75  02:82F1  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:82F4  FF 00 FF  
       02:82F7  00 FF 00  
       02:82FA  FF 00 FF  
       02:82FD  00 FF 00  
       02:8300  FF 00 FF  
       02:8303  00 FF     
   76  02:8305            B1_puzzle7Image:
   77  02:8305  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8308  00 00 00  
       02:830B  00 00 00  
       02:830E  00 00 00  
       02:8311  00 00 00  
       02:8314  00 00 00  
       02:8317  00 00 00  
       02:831A  00 00 00  
       02:831D  00 FF     
   78  02:831F            B1_puzzle7Name:
   79  02:831F  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $07, $FF
       02:8322  23 23 15  
       02:8325  0E 07 FF  
   80                     
   81  02:8328            B1_puzzle8:
   82  02:8328  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:832B  00 10 20  
   83  02:832E  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8331  00 00 00  
       02:8334  00 00 00  
       02:8337  00 00 00  
       02:833A  00 00 00  
       02:833D  00 00 00  
       02:8340  00 00     
   84  02:8342  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8345  FF 00 FF  
       02:8348  00 FF 00  
       02:834B  FF 00 FF  
       02:834E  00 FF 00  
       02:8351  FF 00 FF  
       02:8354  00 FF     
   85  02:8356  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8359  FF 00 FF  
       02:835C  00 FF 00  
       02:835F  FF 00 FF  
       02:8362  00 FF 00  
       02:8365  FF 00 FF  
       02:8368  00 FF     
   86  02:836A            B1_puzzle8Image:
   87  02:836A  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:836D  00 00 00  
       02:8370  00 00 00  
       02:8373  00 00 00  
       02:8376  00 00 00  
       02:8379  00 00 00  
       02:837C  00 00 00  
       02:837F  00 00 00  
       02:8382  00 FF     
   88  02:8384            B1_puzzle8Name:
   89  02:8384  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $08, $FF
       02:8387  23 23 15  
       02:838A  0E 08 FF  
   90                     
   91  02:838D            B1_puzzle9:
   92  02:838D  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8390  00 10 20  
   93  02:8393  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8396  00 00 00  
       02:8399  00 00 00  
       02:839C  00 00 00  
       02:839F  00 00 00  
       02:83A2  00 00 00  
       02:83A5  00 00     
   94  02:83A7  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:83AA  FF 00 FF  
       02:83AD  00 FF 00  
       02:83B0  FF 00 FF  
       02:83B3  00 FF 00  
       02:83B6  FF 00 FF  
       02:83B9  00 FF     
   95  02:83BB  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:83BE  FF 00 FF  
       02:83C1  00 FF 00  
       02:83C4  FF 00 FF  
       02:83C7  00 FF 00  
       02:83CA  FF 00 FF  
       02:83CD  00 FF     
   96  02:83CF            B1_puzzle9Image:
   97  02:83CF  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:83D2  00 00 00  
       02:83D5  00 00 00  
       02:83D8  00 00 00  
       02:83DB  00 00 00  
       02:83DE  00 00 00  
       02:83E1  00 00 00  
       02:83E4  00 00 00  
       02:83E7  00 FF     
   98  02:83E9            B1_puzzle9Name:
   99  02:83E9  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $09, $FF
       02:83EC  23 23 15  
       02:83EF  0E 09 FF  
  100                     
  101  02:83F2            B1_puzzle10:
  102  02:83F2  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:83F5  00 10 20  
  103  02:83F8  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:83FB  00 00 00  
       02:83FE  00 00 00  
       02:8401  00 00 00  
       02:8404  00 00 00  
       02:8407  00 00 00  
       02:840A  00 00     
  104  02:840C  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:840F  FF 00 FF  
       02:8412  00 FF 00  
       02:8415  FF 00 FF  
       02:8418  00 FF 00  
       02:841B  FF 00 FF  
       02:841E  00 FF     
  105  02:8420  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8423  FF 00 FF  
       02:8426  00 FF 00  
       02:8429  FF 00 FF  
       02:842C  00 FF 00  
       02:842F  FF 00 FF  
       02:8432  00 FF     
  106  02:8434            B1_puzzle10Image:
  107  02:8434  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8437  00 00 00  
       02:843A  00 00 00  
       02:843D  00 00 00  
       02:8440  00 00 00  
       02:8443  00 00 00  
       02:8446  00 00 00  
       02:8449  00 00 00  
       02:844C  00 FF     
  108  02:844E            B1_puzzle10Name:
  109  02:844E  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $00, $FF
       02:8451  23 23 15  
       02:8454  0E 01 00  
       02:8457  FF        
  110                     
  111  02:8458            B1_puzzle11:
  112  02:8458  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:845B  00 10 20  
  113  02:845E  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8461  00 00 00  
       02:8464  00 00 00  
       02:8467  00 00 00  
       02:846A  00 00 00  
       02:846D  00 00 00  
       02:8470  00 00     
  114  02:8472  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8475  FF 00 FF  
       02:8478  00 FF 00  
       02:847B  FF 00 FF  
       02:847E  00 FF 00  
       02:8481  FF 00 FF  
       02:8484  00 FF     
  115  02:8486  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8489  FF 00 FF  
       02:848C  00 FF 00  
       02:848F  FF 00 FF  
       02:8492  00 FF 00  
       02:8495  FF 00 FF  
       02:8498  00 FF     
  116  02:849A            B1_puzzle11Image:
  117  02:849A  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:849D  00 00 00  
       02:84A0  00 00 00  
       02:84A3  00 00 00  
       02:84A6  00 00 00  
       02:84A9  00 00 00  
       02:84AC  00 00 00  
       02:84AF  00 00 00  
       02:84B2  00 FF     
  118  02:84B4            B1_puzzle11Name:
  119  02:84B4  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $01, $FF
       02:84B7  23 23 15  
       02:84BA  0E 01 01  
       02:84BD  FF        
  120                     
  121  02:84BE            B1_puzzle12:
  122  02:84BE  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:84C1  00 10 20  
  123  02:84C4  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:84C7  00 00 00  
       02:84CA  00 00 00  
       02:84CD  00 00 00  
       02:84D0  00 00 00  
       02:84D3  00 00 00  
       02:84D6  00 00     
  124  02:84D8  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:84DB  FF 00 FF  
       02:84DE  00 FF 00  
       02:84E1  FF 00 FF  
       02:84E4  00 FF 00  
       02:84E7  FF 00 FF  
       02:84EA  00 FF     
  125  02:84EC  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:84EF  FF 00 FF  
       02:84F2  00 FF 00  
       02:84F5  FF 00 FF  
       02:84F8  00 FF 00  
       02:84FB  FF 00 FF  
       02:84FE  00 FF     
  126  02:8500            B1_puzzle12Image:
  127  02:8500  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8503  00 00 00  
       02:8506  00 00 00  
       02:8509  00 00 00  
       02:850C  00 00 00  
       02:850F  00 00 00  
       02:8512  00 00 00  
       02:8515  00 00 00  
       02:8518  00 FF     
  128  02:851A            B1_puzzle12Name:
  129  02:851A  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $02, $FF
       02:851D  23 23 15  
       02:8520  0E 01 02  
       02:8523  FF        
  130                     
  131  02:8524            B1_puzzle13:
  132  02:8524  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8527  00 10 20  
  133  02:852A  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:852D  00 00 00  
       02:8530  00 00 00  
       02:8533  00 00 00  
       02:8536  00 00 00  
       02:8539  00 00 00  
       02:853C  00 00     
  134  02:853E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8541  FF 00 FF  
       02:8544  00 FF 00  
       02:8547  FF 00 FF  
       02:854A  00 FF 00  
       02:854D  FF 00 FF  
       02:8550  00 FF     
  135  02:8552  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8555  FF 00 FF  
       02:8558  00 FF 00  
       02:855B  FF 00 FF  
       02:855E  00 FF 00  
       02:8561  FF 00 FF  
       02:8564  00 FF     
  136  02:8566            B1_puzzle13Image:
  137  02:8566  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8569  00 00 00  
       02:856C  00 00 00  
       02:856F  00 00 00  
       02:8572  00 00 00  
       02:8575  00 00 00  
       02:8578  00 00 00  
       02:857B  00 00 00  
       02:857E  00 FF     
  138  02:8580            B1_puzzle13Name:
  139  02:8580  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $03, $FF
       02:8583  23 23 15  
       02:8586  0E 01 03  
       02:8589  FF        
  140                     
  141  02:858A            B1_puzzle14:
  142  02:858A  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:858D  00 10 20  
  143  02:8590  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8593  00 00 00  
       02:8596  00 00 00  
       02:8599  00 00 00  
       02:859C  00 00 00  
       02:859F  00 00 00  
       02:85A2  00 00     
  144  02:85A4  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:85A7  FF 00 FF  
       02:85AA  00 FF 00  
       02:85AD  FF 00 FF  
       02:85B0  00 FF 00  
       02:85B3  FF 00 FF  
       02:85B6  00 FF     
  145  02:85B8  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:85BB  FF 00 FF  
       02:85BE  00 FF 00  
       02:85C1  FF 00 FF  
       02:85C4  00 FF 00  
       02:85C7  FF 00 FF  
       02:85CA  00 FF     
  146  02:85CC            B1_puzzle14Image:
  147  02:85CC  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:85CF  00 00 00  
       02:85D2  00 00 00  
       02:85D5  00 00 00  
       02:85D8  00 00 00  
       02:85DB  00 00 00  
       02:85DE  00 00 00  
       02:85E1  00 00 00  
       02:85E4  00 FF     
  148  02:85E6            B1_puzzle14Name:
  149  02:85E6  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $04, $FF
       02:85E9  23 23 15  
       02:85EC  0E 01 04  
       02:85EF  FF        
  150                     
  151  02:85F0            B1_puzzle15:
  152  02:85F0  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:85F3  00 10 20  
  153  02:85F6  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:85F9  00 00 00  
       02:85FC  00 00 00  
       02:85FF  00 00 00  
       02:8602  00 00 00  
       02:8605  00 00 00  
       02:8608  00 00     
  154  02:860A  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:860D  FF 00 FF  
       02:8610  00 FF 00  
       02:8613  FF 00 FF  
       02:8616  00 FF 00  
       02:8619  FF 00 FF  
       02:861C  00 FF     
  155  02:861E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8621  FF 00 FF  
       02:8624  00 FF 00  
       02:8627  FF 00 FF  
       02:862A  00 FF 00  
       02:862D  FF 00 FF  
       02:8630  00 FF     
  156  02:8632            B1_puzzle15Image:
  157  02:8632  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8635  00 00 00  
       02:8638  00 00 00  
       02:863B  00 00 00  
       02:863E  00 00 00  
       02:8641  00 00 00  
       02:8644  00 00 00  
       02:8647  00 00 00  
       02:864A  00 FF     
  158  02:864C            B1_puzzle15Name:
  159  02:864C  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $05, $FF
       02:864F  23 23 15  
       02:8652  0E 01 05  
       02:8655  FF        
  160                     
  161  02:8656            B1_puzzle16:
  162  02:8656  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8659  00 10 20  
  163  02:865C  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:865F  00 00 00  
       02:8662  00 00 00  
       02:8665  00 00 00  
       02:8668  00 00 00  
       02:866B  00 00 00  
       02:866E  00 00     
  164  02:8670  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8673  FF 00 FF  
       02:8676  00 FF 00  
       02:8679  FF 00 FF  
       02:867C  00 FF 00  
       02:867F  FF 00 FF  
       02:8682  00 FF     
  165  02:8684  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8687  FF 00 FF  
       02:868A  00 FF 00  
       02:868D  FF 00 FF  
       02:8690  00 FF 00  
       02:8693  FF 00 FF  
       02:8696  00 FF     
  166  02:8698            B1_puzzle16Image:
  167  02:8698  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:869B  00 00 00  
       02:869E  00 00 00  
       02:86A1  00 00 00  
       02:86A4  00 00 00  
       02:86A7  00 00 00  
       02:86AA  00 00 00  
       02:86AD  00 00 00  
       02:86B0  00 FF     
  168  02:86B2            B1_puzzle16Name:
  169  02:86B2  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $06, $FF
       02:86B5  23 23 15  
       02:86B8  0E 01 06  
       02:86BB  FF        
  170                     
  171  02:86BC            B1_puzzle17:
  172  02:86BC  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:86BF  00 10 20  
  173  02:86C2  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:86C5  00 00 00  
       02:86C8  00 00 00  
       02:86CB  00 00 00  
       02:86CE  00 00 00  
       02:86D1  00 00 00  
       02:86D4  00 00     
  174  02:86D6  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:86D9  FF 00 FF  
       02:86DC  00 FF 00  
       02:86DF  FF 00 FF  
       02:86E2  00 FF 00  
       02:86E5  FF 00 FF  
       02:86E8  00 FF     
  175  02:86EA  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:86ED  FF 00 FF  
       02:86F0  00 FF 00  
       02:86F3  FF 00 FF  
       02:86F6  00 FF 00  
       02:86F9  FF 00 FF  
       02:86FC  00 FF     
  176  02:86FE            B1_puzzle17Image:
  177  02:86FE  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8701  00 00 00  
       02:8704  00 00 00  
       02:8707  00 00 00  
       02:870A  00 00 00  
       02:870D  00 00 00  
       02:8710  00 00 00  
       02:8713  00 00 00  
       02:8716  00 FF     
  178  02:8718            B1_puzzle17Name:
  179  02:8718  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $07, $FF
       02:871B  23 23 15  
       02:871E  0E 01 07  
       02:8721  FF        
  180                     
  181  02:8722            B1_puzzle18:
  182  02:8722  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8725  00 10 20  
  183  02:8728  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:872B  00 00 00  
       02:872E  00 00 00  
       02:8731  00 00 00  
       02:8734  00 00 00  
       02:8737  00 00 00  
       02:873A  00 00     
  184  02:873C  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:873F  FF 00 FF  
       02:8742  00 FF 00  
       02:8745  FF 00 FF  
       02:8748  00 FF 00  
       02:874B  FF 00 FF  
       02:874E  00 FF     
  185  02:8750  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8753  FF 00 FF  
       02:8756  00 FF 00  
       02:8759  FF 00 FF  
       02:875C  00 FF 00  
       02:875F  FF 00 FF  
       02:8762  00 FF     
  186  02:8764            B1_puzzle18Image:
  187  02:8764  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8767  00 00 00  
       02:876A  00 00 00  
       02:876D  00 00 00  
       02:8770  00 00 00  
       02:8773  00 00 00  
       02:8776  00 00 00  
       02:8779  00 00 00  
       02:877C  00 FF     
  188  02:877E            B1_puzzle18Name:
  189  02:877E  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $08, $FF
       02:8781  23 23 15  
       02:8784  0E 01 08  
       02:8787  FF        
  190                     
  191  02:8788            B1_puzzle19:
  192  02:8788  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:878B  00 10 20  
  193  02:878E  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8791  00 00 00  
       02:8794  00 00 00  
       02:8797  00 00 00  
       02:879A  00 00 00  
       02:879D  00 00 00  
       02:87A0  00 00     
  194  02:87A2  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:87A5  FF 00 FF  
       02:87A8  00 FF 00  
       02:87AB  FF 00 FF  
       02:87AE  00 FF 00  
       02:87B1  FF 00 FF  
       02:87B4  00 FF     
  195  02:87B6  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:87B9  FF 00 FF  
       02:87BC  00 FF 00  
       02:87BF  FF 00 FF  
       02:87C2  00 FF 00  
       02:87C5  FF 00 FF  
       02:87C8  00 FF     
  196  02:87CA            B1_puzzle19Image:
  197  02:87CA  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:87CD  00 00 00  
       02:87D0  00 00 00  
       02:87D3  00 00 00  
       02:87D6  00 00 00  
       02:87D9  00 00 00  
       02:87DC  00 00 00  
       02:87DF  00 00 00  
       02:87E2  00 FF     
  198  02:87E4            B1_puzzle19Name:
  199  02:87E4  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $09, $FF
       02:87E7  23 23 15  
       02:87EA  0E 01 09  
       02:87ED  FF        
  200                     
  201  02:87EE            B1_puzzle20:
  202  02:87EE  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:87F1  00 10 20  
  203  02:87F4  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:87F7  00 00 00  
       02:87FA  00 00 00  
       02:87FD  00 00 00  
       02:8800  00 00 00  
       02:8803  00 00 00  
       02:8806  00 00     
  204  02:8808  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:880B  FF 00 FF  
       02:880E  00 FF 00  
       02:8811  FF 00 FF  
       02:8814  00 FF 00  
       02:8817  FF 00 FF  
       02:881A  00 FF     
  205  02:881C  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:881F  FF 00 FF  
       02:8822  00 FF 00  
       02:8825  FF 00 FF  
       02:8828  00 FF 00  
       02:882B  FF 00 FF  
       02:882E  00 FF     
  206  02:8830            B1_puzzle20Image:
  207  02:8830  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8833  00 00 00  
       02:8836  00 00 00  
       02:8839  00 00 00  
       02:883C  00 00 00  
       02:883F  00 00 00  
       02:8842  00 00 00  
       02:8845  00 00 00  
       02:8848  00 FF     
  208  02:884A            B1_puzzle20Name:
  209  02:884A  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $00, $FF
       02:884D  23 23 15  
       02:8850  0E 02 00  
       02:8853  FF        
  210                     
  211  02:8854            B1_puzzle21:
  212  02:8854  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8857  00 10 20  
  213  02:885A  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:885D  00 00 00  
       02:8860  00 00 00  
       02:8863  00 00 00  
       02:8866  00 00 00  
       02:8869  00 00 00  
       02:886C  00 00     
  214  02:886E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8871  FF 00 FF  
       02:8874  00 FF 00  
       02:8877  FF 00 FF  
       02:887A  00 FF 00  
       02:887D  FF 00 FF  
       02:8880  00 FF     
  215  02:8882  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8885  FF 00 FF  
       02:8888  00 FF 00  
       02:888B  FF 00 FF  
       02:888E  00 FF 00  
       02:8891  FF 00 FF  
       02:8894  00 FF     
  216  02:8896            B1_puzzle21Image:
  217  02:8896  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8899  00 00 00  
       02:889C  00 00 00  
       02:889F  00 00 00  
       02:88A2  00 00 00  
       02:88A5  00 00 00  
       02:88A8  00 00 00  
       02:88AB  00 00 00  
       02:88AE  00 FF     
  218  02:88B0            B1_puzzle21Name:
  219  02:88B0  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $01, $FF
       02:88B3  23 23 15  
       02:88B6  0E 02 01  
       02:88B9  FF        
  220                     
  221  02:88BA            B1_puzzle22:
  222  02:88BA  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:88BD  00 10 20  
  223  02:88C0  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:88C3  00 00 00  
       02:88C6  00 00 00  
       02:88C9  00 00 00  
       02:88CC  00 00 00  
       02:88CF  00 00 00  
       02:88D2  00 00     
  224  02:88D4  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:88D7  FF 00 FF  
       02:88DA  00 FF 00  
       02:88DD  FF 00 FF  
       02:88E0  00 FF 00  
       02:88E3  FF 00 FF  
       02:88E6  00 FF     
  225  02:88E8  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:88EB  FF 00 FF  
       02:88EE  00 FF 00  
       02:88F1  FF 00 FF  
       02:88F4  00 FF 00  
       02:88F7  FF 00 FF  
       02:88FA  00 FF     
  226  02:88FC            B1_puzzle22Image:
  227  02:88FC  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:88FF  00 00 00  
       02:8902  00 00 00  
       02:8905  00 00 00  
       02:8908  00 00 00  
       02:890B  00 00 00  
       02:890E  00 00 00  
       02:8911  00 00 00  
       02:8914  00 FF     
  228  02:8916            B1_puzzle22Name:
  229  02:8916  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $02, $FF
       02:8919  23 23 15  
       02:891C  0E 02 02  
       02:891F  FF        
  230                     
  231  02:8920            B1_puzzle23:
  232  02:8920  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8923  00 10 20  
  233  02:8926  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8929  00 00 00  
       02:892C  00 00 00  
       02:892F  00 00 00  
       02:8932  00 00 00  
       02:8935  00 00 00  
       02:8938  00 00     
  234  02:893A  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:893D  FF 00 FF  
       02:8940  00 FF 00  
       02:8943  FF 00 FF  
       02:8946  00 FF 00  
       02:8949  FF 00 FF  
       02:894C  00 FF     
  235  02:894E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8951  FF 00 FF  
       02:8954  00 FF 00  
       02:8957  FF 00 FF  
       02:895A  00 FF 00  
       02:895D  FF 00 FF  
       02:8960  00 FF     
  236  02:8962            B1_puzzle23Image:
  237  02:8962  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8965  00 00 00  
       02:8968  00 00 00  
       02:896B  00 00 00  
       02:896E  00 00 00  
       02:8971  00 00 00  
       02:8974  00 00 00  
       02:8977  00 00 00  
       02:897A  00 FF     
  238  02:897C            B1_puzzle23Name:
  239  02:897C  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $03, $FF
       02:897F  23 23 15  
       02:8982  0E 02 03  
       02:8985  FF        
  240                     
  241  02:8986            B1_puzzle24:
  242  02:8986  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8989  00 10 20  
  243  02:898C  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:898F  00 00 00  
       02:8992  00 00 00  
       02:8995  00 00 00  
       02:8998  00 00 00  
       02:899B  00 00 00  
       02:899E  00 00     
  244  02:89A0  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:89A3  FF 00 FF  
       02:89A6  00 FF 00  
       02:89A9  FF 00 FF  
       02:89AC  00 FF 00  
       02:89AF  FF 00 FF  
       02:89B2  00 FF     
  245  02:89B4  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:89B7  FF 00 FF  
       02:89BA  00 FF 00  
       02:89BD  FF 00 FF  
       02:89C0  00 FF 00  
       02:89C3  FF 00 FF  
       02:89C6  00 FF     
  246  02:89C8            B1_puzzle24Image:
  247  02:89C8  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:89CB  00 00 00  
       02:89CE  00 00 00  
       02:89D1  00 00 00  
       02:89D4  00 00 00  
       02:89D7  00 00 00  
       02:89DA  00 00 00  
       02:89DD  00 00 00  
       02:89E0  00 FF     
  248  02:89E2            B1_puzzle24Name:
  249  02:89E2  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $04, $FF
       02:89E5  23 23 15  
       02:89E8  0E 02 04  
       02:89EB  FF        
  250                     
  251  02:89EC            B1_puzzle25:
  252  02:89EC  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:89EF  00 10 20  
  253  02:89F2  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:89F5  00 00 00  
       02:89F8  00 00 00  
       02:89FB  00 00 00  
       02:89FE  00 00 00  
       02:8A01  00 00 00  
       02:8A04  00 00     
  254  02:8A06  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8A09  FF 00 FF  
       02:8A0C  00 FF 00  
       02:8A0F  FF 00 FF  
       02:8A12  00 FF 00  
       02:8A15  FF 00 FF  
       02:8A18  00 FF     
  255  02:8A1A  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8A1D  FF 00 FF  
       02:8A20  00 FF 00  
       02:8A23  FF 00 FF  
       02:8A26  00 FF 00  
       02:8A29  FF 00 FF  
       02:8A2C  00 FF     
  256  02:8A2E            B1_puzzle25Image:
  257  02:8A2E  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8A31  00 00 00  
       02:8A34  00 00 00  
       02:8A37  00 00 00  
       02:8A3A  00 00 00  
       02:8A3D  00 00 00  
       02:8A40  00 00 00  
       02:8A43  00 00 00  
       02:8A46  00 FF     
  258  02:8A48            B1_puzzle25Name:
  259  02:8A48  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $05, $FF
       02:8A4B  23 23 15  
       02:8A4E  0E 02 05  
       02:8A51  FF        
  260                     
  261  02:8A52            B1_puzzle26:
  262  02:8A52  01 01 00    .db $01, $01, $00, $00, $10, $20
       02:8A55  00 10 20  
  263  02:8A58  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       02:8A5B  00 00 00  
       02:8A5E  00 00 00  
       02:8A61  00 00 00  
       02:8A64  00 00 00  
       02:8A67  00 00 00  
       02:8A6A  00 00     
  264  02:8A6C  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8A6F  FF 00 FF  
       02:8A72  00 FF 00  
       02:8A75  FF 00 FF  
       02:8A78  00 FF 00  
       02:8A7B  FF 00 FF  
       02:8A7E  00 FF     
  265  02:8A80  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       02:8A83  FF 00 FF  
       02:8A86  00 FF 00  
       02:8A89  FF 00 FF  
       02:8A8C  00 FF 00  
       02:8A8F  FF 00 FF  
       02:8A92  00 FF     
  266  02:8A94            B1_puzzle26Image:
  267  02:8A94  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       02:8A97  00 00 00  
       02:8A9A  00 00 00  
       02:8A9D  00 00 00  
       02:8AA0  00 00 00  
       02:8AA3  00 00 00  
       02:8AA6  00 00 00  
       02:8AA9  00 00 00  
       02:8AAC  00 FF     
  268  02:8AAE            B1_puzzle26Name:
  269  02:8AAE  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $06, $FF
       02:8AB1  23 23 15  
       02:8AB4  0E 02 06  
       02:8AB7  FF        
  270                     
#[2]   Banks/Bank1.asm
    5                     
    6           0003        .bank 3
    7           A000        .org $A000
    8                      
#[3]   Puzzles/B1Tables.asm
    9                       .include "Puzzles/B1Tables.asm"
    1  03:A000  00 80       .word B1_puzzle0, B1_puzzle1, B1_puzzle2, B1_puzzle3, B1_puzzle4, B1_puzzle5, B1_puzzle6, B1_puzzle7, B1_puzzle8
       03:A002  65 80     
       03:A004  CA 80     
       03:A006  2F 81     
       03:A008  94 81     
       03:A00A  F9 81     
       03:A00C  5E 82     
       03:A00E  C3 82     
       03:A010  28 83     
    2  03:A012  8D 83       .word B1_puzzle9, B1_puzzle10, B1_puzzle11, B1_puzzle12, B1_puzzle13, B1_puzzle14, B1_puzzle15, B1_puzzle16, B1_puzzle17
       03:A014  F2 83     
       03:A016  58 84     
       03:A018  BE 84     
       03:A01A  24 85     
       03:A01C  8A 85     
       03:A01E  F0 85     
       03:A020  56 86     
       03:A022  BC 86     
    3  03:A024  22 87       .word B1_puzzle18, B1_puzzle19, B1_puzzle20, B1_puzzle21, B1_puzzle22, B1_puzzle23, B1_puzzle24, B1_puzzle25, B1_puzzle26
       03:A026  88 87     
       03:A028  EE 87     
       03:A02A  54 88     
       03:A02C  BA 88     
       03:A02E  20 89     
       03:A030  86 89     
       03:A032  EC 89     
       03:A034  52 8A     
    4                     
    5  03:A036  5C 80       .word B1_puzzle0Name, B1_puzzle1Name, B1_puzzle2Name, B1_puzzle3Name, B1_puzzle4Name, B1_puzzle5Name, B1_puzzle6Name, B1_puzzle7Name, B1_puzzle8Name
       03:A038  C1 80     
       03:A03A  26 81     
       03:A03C  8B 81     
       03:A03E  F0 81     
       03:A040  55 82     
       03:A042  BA 82     
       03:A044  1F 83     
       03:A046  84 83     
    6  03:A048  E9 83       .word B1_puzzle9Name, B1_puzzle10Name, B1_puzzle11Name, B1_puzzle12Name, B1_puzzle13Name, B1_puzzle14Name, B1_puzzle15Name, B1_puzzle16Name, B1_puzzle17Name
       03:A04A  4E 84     
       03:A04C  B4 84     
       03:A04E  1A 85     
       03:A050  80 85     
       03:A052  E6 85     
       03:A054  4C 86     
       03:A056  B2 86     
       03:A058  18 87     
    7  03:A05A  7E 87       .word B1_puzzle18Name, B1_puzzle19Name, B1_puzzle20Name, B1_puzzle21Name, B1_puzzle22Name, B1_puzzle23Name, B1_puzzle24Name, B1_puzzle25Name, B1_puzzle26Name
       03:A05C  E4 87     
       03:A05E  4A 88     
       03:A060  B0 88     
       03:A062  16 89     
       03:A064  7C 89     
       03:A066  E2 89     
       03:A068  48 8A     
       03:A06A  AE 8A     
#[2]   Banks/Bank1.asm
   10                     ;puzzle sprites
   11  03:A06C  00 00 00    .db $00, $00, $00, $00
       03:A06F  00        
   12  03:A070  00 00 00    .db $00, $00, $00, $00
       03:A073  00        
   13  03:A074  00 00 00    .db $00, $00, $00, $00
       03:A077  00        
   14  03:A078  00 00 00    .db $00, $00, $00, $00
       03:A07B  00        
   15  03:A07C  00 00 00    .db $00, $00, $00, $00
       03:A07F  00        
   16  03:A080  00 00 00    .db $00, $00, $00, $00
       03:A083  00        
   17  03:A084  00 00 00    .db $00, $00, $00, $00
       03:A087  00        
   18  03:A088  00 00 00    .db $00, $00, $00, $00
       03:A08B  00        
   19  03:A08C  00 00 00    .db $00, $00, $00, $00
       03:A08F  00        
   20  03:A090  00 00 00    .db $00, $00, $00, $00
       03:A093  00        
   21  03:A094  00 00 00    .db $00, $00, $00, $00
       03:A097  00        
   22  03:A098  00 00 00    .db $00, $00, $00, $00
       03:A09B  00        
   23  03:A09C  00 00 00    .db $00, $00, $00, $00
       03:A09F  00        
   24  03:A0A0  00 00 00    .db $00, $00, $00, $00
       03:A0A3  00        
   25  03:A0A4  00 00 00    .db $00, $00, $00, $00
       03:A0A7  00        
   26  03:A0A8  00 00 00    .db $00, $00, $00, $00
       03:A0AB  00        
   27  03:A0AC  00 00 00    .db $00, $00, $00, $00
       03:A0AF  00        
   28  03:A0B0  00 00 00    .db $00, $00, $00, $00
       03:A0B3  00        
   29  03:A0B4  00 00 00    .db $00, $00, $00, $00
       03:A0B7  00        
   30  03:A0B8  00 00 00    .db $00, $00, $00, $00
       03:A0BB  00        
   31  03:A0BC  00 00 00    .db $00, $00, $00, $00
       03:A0BF  00        
   32  03:A0C0  00 00 00    .db $00, $00, $00, $00
       03:A0C3  00        
   33  03:A0C4  00 00 00    .db $00, $00, $00, $00
       03:A0C7  00        
   34  03:A0C8  00 00 00    .db $00, $00, $00, $00
       03:A0CB  00        
   35  03:A0CC  00 00 00    .db $00, $00, $00, $00
       03:A0CF  00        
   36  03:A0D0  00 00 00    .db $00, $00, $00, $00
       03:A0D3  00        
   37  03:A0D4  00 00 00    .db $00, $00, $00, $00
       03:A0D7  00        
   38                     
   39  03:A0D8              .incbin "SoundEnginePreComp.nes"
#[3]   Music/Bank1.i
   40                       .include "Music/Bank1.i"  ;holds the data for bank song
    1  03:A881            bank1_header:
    2  03:A881  08            .byte 8          ;6 streams
    3                         
    4  03:A882  00            .byte MUSIC_SQ1
    5  03:A883  00            .byte $00
    6                             
    7  03:A884  01                .byte MUSIC_SQ2
    8  03:A885  00                .byte $00
    9                             
   10  03:A886  02            .byte MUSIC_TRI    ;which stream
   11  03:A887  01            .byte $01           ;status byte (stream enabled)
   12  03:A888  02            .byte TRIANGLE      ;which channel
   13  03:A889  80            .byte $80           ;initial duty (01)
   14  03:A88A  0A            .byte ve_hiHat_decay ;volume envelope
   15  03:A88B  98 A8         .word bank1_triangle ;pointer to stream
   16  03:A88D  50            .byte $50           ;tempo
   17                             
   18  03:A88E  03                .byte MUSIC_NOI
   19  03:A88F  00                .byte $00
   20                             
   21  03:A890  04                .byte SFX_1
   22  03:A891  00                .byte $00
   23                             
   24  03:A892  05                .byte SFX_2
   25  03:A893  00                .byte $00
   26                             
   27  03:A894  06                .byte MUSIC_DPMC
   28  03:A895  00                .byte $00
   29                             
   30  03:A896  07                .byte SFX_DPMC
   31  03:A897  00                .byte $00
   32                     
   33                     
   34                         
   35                         
   36  03:A898            bank1_triangle:
   37                     
   38  03:A898  A9 03             .byte pitch_envelope, pe_bassKick
   39  03:A89A  82                .byte eighth
   40  03:A89B  27 27             .byte C5, C5
   41  03:A89D  81                .byte sixteenth
   42  03:A89E  24 24 24          .byte A4, A4, A4, rest
       03:A8A1  5E        
   43  03:A8A2  20 20 20          .byte F4, F4, F4, rest
       03:A8A5  5E        
   44  03:A8A6  83                .byte quarter
   45  03:A8A7  1B                .byte C4
   46                     
   47  03:A8A8  A1                .byte loop
   48  03:A8A9  98 A8         .word bank1_triangle
#[2]   Banks/Bank1.asm
   41                       
   42           BFFA        .org $BFFA     ;first of the three vectors starts here
   43  03:BFFA  08 D7       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   44                                        ;processor will jump to the label NMI:
   45  03:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   46                                        ;to the label RESET:
   47  03:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
#[3]   Puzzles/B2.asm
    4                       .include "Puzzles/B2.asm"
    1  04:8000            B2_puzzle0:
    2  04:8000  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8003  00 10 20  
    3  04:8006  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8009  00 00 00  
       04:800C  00 00 00  
       04:800F  00 00 00  
       04:8012  00 00 00  
       04:8015  00 00 00  
       04:8018  00 00     
    4  04:801A  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:801D  FF 00 FF  
       04:8020  00 FF 00  
       04:8023  FF 00 FF  
       04:8026  00 FF 00  
       04:8029  FF 00 FF  
       04:802C  00 FF     
    5  04:802E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8031  FF 00 FF  
       04:8034  00 FF 00  
       04:8037  FF 00 FF  
       04:803A  00 FF 00  
       04:803D  FF 00 FF  
       04:8040  00 FF     
    6  04:8042            B2_puzzle0Image:
    7  04:8042  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8045  00 00 00  
       04:8048  00 00 00  
       04:804B  00 00 00  
       04:804E  00 00 00  
       04:8051  00 00 00  
       04:8054  00 00 00  
       04:8057  00 00 00  
       04:805A  00 FF     
    8  04:805C            B2_puzzle0Name:
    9  04:805C  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $00, $FF
       04:805F  23 23 15  
       04:8062  0E 00 FF  
   10                     
   11  04:8065            B2_puzzle1:
   12  04:8065  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8068  00 10 20  
   13  04:806B  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:806E  00 00 00  
       04:8071  00 00 00  
       04:8074  00 00 00  
       04:8077  00 00 00  
       04:807A  00 00 00  
       04:807D  00 00     
   14  04:807F  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8082  FF 00 FF  
       04:8085  00 FF 00  
       04:8088  FF 00 FF  
       04:808B  00 FF 00  
       04:808E  FF 00 FF  
       04:8091  00 FF     
   15  04:8093  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8096  FF 00 FF  
       04:8099  00 FF 00  
       04:809C  FF 00 FF  
       04:809F  00 FF 00  
       04:80A2  FF 00 FF  
       04:80A5  00 FF     
   16  04:80A7            B2_puzzle1Image:
   17  04:80A7  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:80AA  00 00 00  
       04:80AD  00 00 00  
       04:80B0  00 00 00  
       04:80B3  00 00 00  
       04:80B6  00 00 00  
       04:80B9  00 00 00  
       04:80BC  00 00 00  
       04:80BF  00 FF     
   18  04:80C1            B2_puzzle1Name:
   19  04:80C1  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $01, $FF
       04:80C4  23 23 15  
       04:80C7  0E 01 FF  
   20                     
   21  04:80CA            B2_puzzle2:
   22  04:80CA  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:80CD  00 10 20  
   23  04:80D0  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:80D3  00 00 00  
       04:80D6  00 00 00  
       04:80D9  00 00 00  
       04:80DC  00 00 00  
       04:80DF  00 00 00  
       04:80E2  00 00     
   24  04:80E4  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:80E7  FF 00 FF  
       04:80EA  00 FF 00  
       04:80ED  FF 00 FF  
       04:80F0  00 FF 00  
       04:80F3  FF 00 FF  
       04:80F6  00 FF     
   25  04:80F8  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:80FB  FF 00 FF  
       04:80FE  00 FF 00  
       04:8101  FF 00 FF  
       04:8104  00 FF 00  
       04:8107  FF 00 FF  
       04:810A  00 FF     
   26  04:810C            B2_puzzle2Image:
   27  04:810C  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:810F  00 00 00  
       04:8112  00 00 00  
       04:8115  00 00 00  
       04:8118  00 00 00  
       04:811B  00 00 00  
       04:811E  00 00 00  
       04:8121  00 00 00  
       04:8124  00 FF     
   28  04:8126            B2_puzzle2Name:
   29  04:8126  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $02, $FF
       04:8129  23 23 15  
       04:812C  0E 02 FF  
   30                     
   31  04:812F            B2_puzzle3:
   32  04:812F  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8132  00 10 20  
   33  04:8135  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8138  00 00 00  
       04:813B  00 00 00  
       04:813E  00 00 00  
       04:8141  00 00 00  
       04:8144  00 00 00  
       04:8147  00 00     
   34  04:8149  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:814C  FF 00 FF  
       04:814F  00 FF 00  
       04:8152  FF 00 FF  
       04:8155  00 FF 00  
       04:8158  FF 00 FF  
       04:815B  00 FF     
   35  04:815D  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8160  FF 00 FF  
       04:8163  00 FF 00  
       04:8166  FF 00 FF  
       04:8169  00 FF 00  
       04:816C  FF 00 FF  
       04:816F  00 FF     
   36  04:8171            B2_puzzle3Image:
   37  04:8171  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8174  00 00 00  
       04:8177  00 00 00  
       04:817A  00 00 00  
       04:817D  00 00 00  
       04:8180  00 00 00  
       04:8183  00 00 00  
       04:8186  00 00 00  
       04:8189  00 FF     
   38  04:818B            B2_puzzle3Name:
   39  04:818B  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $03, $FF
       04:818E  23 23 15  
       04:8191  0E 03 FF  
   40                     
   41  04:8194            B2_puzzle4:
   42  04:8194  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8197  00 10 20  
   43  04:819A  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:819D  00 00 00  
       04:81A0  00 00 00  
       04:81A3  00 00 00  
       04:81A6  00 00 00  
       04:81A9  00 00 00  
       04:81AC  00 00     
   44  04:81AE  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:81B1  FF 00 FF  
       04:81B4  00 FF 00  
       04:81B7  FF 00 FF  
       04:81BA  00 FF 00  
       04:81BD  FF 00 FF  
       04:81C0  00 FF     
   45  04:81C2  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:81C5  FF 00 FF  
       04:81C8  00 FF 00  
       04:81CB  FF 00 FF  
       04:81CE  00 FF 00  
       04:81D1  FF 00 FF  
       04:81D4  00 FF     
   46  04:81D6            B2_puzzle4Image:
   47  04:81D6  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:81D9  00 00 00  
       04:81DC  00 00 00  
       04:81DF  00 00 00  
       04:81E2  00 00 00  
       04:81E5  00 00 00  
       04:81E8  00 00 00  
       04:81EB  00 00 00  
       04:81EE  00 FF     
   48  04:81F0            B2_puzzle4Name:
   49  04:81F0  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $04, $FF
       04:81F3  23 23 15  
       04:81F6  0E 04 FF  
   50                     
   51  04:81F9            B2_puzzle5:
   52  04:81F9  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:81FC  00 10 20  
   53  04:81FF  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8202  00 00 00  
       04:8205  00 00 00  
       04:8208  00 00 00  
       04:820B  00 00 00  
       04:820E  00 00 00  
       04:8211  00 00     
   54  04:8213  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8216  FF 00 FF  
       04:8219  00 FF 00  
       04:821C  FF 00 FF  
       04:821F  00 FF 00  
       04:8222  FF 00 FF  
       04:8225  00 FF     
   55  04:8227  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:822A  FF 00 FF  
       04:822D  00 FF 00  
       04:8230  FF 00 FF  
       04:8233  00 FF 00  
       04:8236  FF 00 FF  
       04:8239  00 FF     
   56  04:823B            B2_puzzle5Image:
   57  04:823B  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:823E  00 00 00  
       04:8241  00 00 00  
       04:8244  00 00 00  
       04:8247  00 00 00  
       04:824A  00 00 00  
       04:824D  00 00 00  
       04:8250  00 00 00  
       04:8253  00 FF     
   58  04:8255            B2_puzzle5Name:
   59  04:8255  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $05, $FF
       04:8258  23 23 15  
       04:825B  0E 05 FF  
   60                     
   61  04:825E            B2_puzzle6:
   62  04:825E  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8261  00 10 20  
   63  04:8264  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8267  00 00 00  
       04:826A  00 00 00  
       04:826D  00 00 00  
       04:8270  00 00 00  
       04:8273  00 00 00  
       04:8276  00 00     
   64  04:8278  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:827B  FF 00 FF  
       04:827E  00 FF 00  
       04:8281  FF 00 FF  
       04:8284  00 FF 00  
       04:8287  FF 00 FF  
       04:828A  00 FF     
   65  04:828C  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:828F  FF 00 FF  
       04:8292  00 FF 00  
       04:8295  FF 00 FF  
       04:8298  00 FF 00  
       04:829B  FF 00 FF  
       04:829E  00 FF     
   66  04:82A0            B2_puzzle6Image:
   67  04:82A0  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:82A3  00 00 00  
       04:82A6  00 00 00  
       04:82A9  00 00 00  
       04:82AC  00 00 00  
       04:82AF  00 00 00  
       04:82B2  00 00 00  
       04:82B5  00 00 00  
       04:82B8  00 FF     
   68  04:82BA            B2_puzzle6Name:
   69  04:82BA  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $06, $FF
       04:82BD  23 23 15  
       04:82C0  0E 06 FF  
   70                     
   71  04:82C3            B2_puzzle7:
   72  04:82C3  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:82C6  00 10 20  
   73  04:82C9  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:82CC  00 00 00  
       04:82CF  00 00 00  
       04:82D2  00 00 00  
       04:82D5  00 00 00  
       04:82D8  00 00 00  
       04:82DB  00 00     
   74  04:82DD  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:82E0  FF 00 FF  
       04:82E3  00 FF 00  
       04:82E6  FF 00 FF  
       04:82E9  00 FF 00  
       04:82EC  FF 00 FF  
       04:82EF  00 FF     
   75  04:82F1  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:82F4  FF 00 FF  
       04:82F7  00 FF 00  
       04:82FA  FF 00 FF  
       04:82FD  00 FF 00  
       04:8300  FF 00 FF  
       04:8303  00 FF     
   76  04:8305            B2_puzzle7Image:
   77  04:8305  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8308  00 00 00  
       04:830B  00 00 00  
       04:830E  00 00 00  
       04:8311  00 00 00  
       04:8314  00 00 00  
       04:8317  00 00 00  
       04:831A  00 00 00  
       04:831D  00 FF     
   78  04:831F            B2_puzzle7Name:
   79  04:831F  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $07, $FF
       04:8322  23 23 15  
       04:8325  0E 07 FF  
   80                     
   81  04:8328            B2_puzzle8:
   82  04:8328  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:832B  00 10 20  
   83  04:832E  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8331  00 00 00  
       04:8334  00 00 00  
       04:8337  00 00 00  
       04:833A  00 00 00  
       04:833D  00 00 00  
       04:8340  00 00     
   84  04:8342  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8345  FF 00 FF  
       04:8348  00 FF 00  
       04:834B  FF 00 FF  
       04:834E  00 FF 00  
       04:8351  FF 00 FF  
       04:8354  00 FF     
   85  04:8356  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8359  FF 00 FF  
       04:835C  00 FF 00  
       04:835F  FF 00 FF  
       04:8362  00 FF 00  
       04:8365  FF 00 FF  
       04:8368  00 FF     
   86  04:836A            B2_puzzle8Image:
   87  04:836A  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:836D  00 00 00  
       04:8370  00 00 00  
       04:8373  00 00 00  
       04:8376  00 00 00  
       04:8379  00 00 00  
       04:837C  00 00 00  
       04:837F  00 00 00  
       04:8382  00 FF     
   88  04:8384            B2_puzzle8Name:
   89  04:8384  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $08, $FF
       04:8387  23 23 15  
       04:838A  0E 08 FF  
   90                     
   91  04:838D            B2_puzzle9:
   92  04:838D  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8390  00 10 20  
   93  04:8393  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8396  00 00 00  
       04:8399  00 00 00  
       04:839C  00 00 00  
       04:839F  00 00 00  
       04:83A2  00 00 00  
       04:83A5  00 00     
   94  04:83A7  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:83AA  FF 00 FF  
       04:83AD  00 FF 00  
       04:83B0  FF 00 FF  
       04:83B3  00 FF 00  
       04:83B6  FF 00 FF  
       04:83B9  00 FF     
   95  04:83BB  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:83BE  FF 00 FF  
       04:83C1  00 FF 00  
       04:83C4  FF 00 FF  
       04:83C7  00 FF 00  
       04:83CA  FF 00 FF  
       04:83CD  00 FF     
   96  04:83CF            B2_puzzle9Image:
   97  04:83CF  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:83D2  00 00 00  
       04:83D5  00 00 00  
       04:83D8  00 00 00  
       04:83DB  00 00 00  
       04:83DE  00 00 00  
       04:83E1  00 00 00  
       04:83E4  00 00 00  
       04:83E7  00 FF     
   98  04:83E9            B2_puzzle9Name:
   99  04:83E9  07 19 1E    .db $07, $19, $1E, $23, $23, $15, $0E, $09, $FF
       04:83EC  23 23 15  
       04:83EF  0E 09 FF  
  100                     
  101  04:83F2            B2_puzzle10:
  102  04:83F2  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:83F5  00 10 20  
  103  04:83F8  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:83FB  00 00 00  
       04:83FE  00 00 00  
       04:8401  00 00 00  
       04:8404  00 00 00  
       04:8407  00 00 00  
       04:840A  00 00     
  104  04:840C  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:840F  FF 00 FF  
       04:8412  00 FF 00  
       04:8415  FF 00 FF  
       04:8418  00 FF 00  
       04:841B  FF 00 FF  
       04:841E  00 FF     
  105  04:8420  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8423  FF 00 FF  
       04:8426  00 FF 00  
       04:8429  FF 00 FF  
       04:842C  00 FF 00  
       04:842F  FF 00 FF  
       04:8432  00 FF     
  106  04:8434            B2_puzzle10Image:
  107  04:8434  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8437  00 00 00  
       04:843A  00 00 00  
       04:843D  00 00 00  
       04:8440  00 00 00  
       04:8443  00 00 00  
       04:8446  00 00 00  
       04:8449  00 00 00  
       04:844C  00 FF     
  108  04:844E            B2_puzzle10Name:
  109  04:844E  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $00, $FF
       04:8451  23 23 15  
       04:8454  0E 01 00  
       04:8457  FF        
  110                     
  111  04:8458            B2_puzzle11:
  112  04:8458  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:845B  00 10 20  
  113  04:845E  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8461  00 00 00  
       04:8464  00 00 00  
       04:8467  00 00 00  
       04:846A  00 00 00  
       04:846D  00 00 00  
       04:8470  00 00     
  114  04:8472  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8475  FF 00 FF  
       04:8478  00 FF 00  
       04:847B  FF 00 FF  
       04:847E  00 FF 00  
       04:8481  FF 00 FF  
       04:8484  00 FF     
  115  04:8486  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8489  FF 00 FF  
       04:848C  00 FF 00  
       04:848F  FF 00 FF  
       04:8492  00 FF 00  
       04:8495  FF 00 FF  
       04:8498  00 FF     
  116  04:849A            B2_puzzle11Image:
  117  04:849A  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:849D  00 00 00  
       04:84A0  00 00 00  
       04:84A3  00 00 00  
       04:84A6  00 00 00  
       04:84A9  00 00 00  
       04:84AC  00 00 00  
       04:84AF  00 00 00  
       04:84B2  00 FF     
  118  04:84B4            B2_puzzle11Name:
  119  04:84B4  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $01, $FF
       04:84B7  23 23 15  
       04:84BA  0E 01 01  
       04:84BD  FF        
  120                     
  121  04:84BE            B2_puzzle12:
  122  04:84BE  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:84C1  00 10 20  
  123  04:84C4  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:84C7  00 00 00  
       04:84CA  00 00 00  
       04:84CD  00 00 00  
       04:84D0  00 00 00  
       04:84D3  00 00 00  
       04:84D6  00 00     
  124  04:84D8  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:84DB  FF 00 FF  
       04:84DE  00 FF 00  
       04:84E1  FF 00 FF  
       04:84E4  00 FF 00  
       04:84E7  FF 00 FF  
       04:84EA  00 FF     
  125  04:84EC  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:84EF  FF 00 FF  
       04:84F2  00 FF 00  
       04:84F5  FF 00 FF  
       04:84F8  00 FF 00  
       04:84FB  FF 00 FF  
       04:84FE  00 FF     
  126  04:8500            B2_puzzle12Image:
  127  04:8500  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8503  00 00 00  
       04:8506  00 00 00  
       04:8509  00 00 00  
       04:850C  00 00 00  
       04:850F  00 00 00  
       04:8512  00 00 00  
       04:8515  00 00 00  
       04:8518  00 FF     
  128  04:851A            B2_puzzle12Name:
  129  04:851A  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $02, $FF
       04:851D  23 23 15  
       04:8520  0E 01 02  
       04:8523  FF        
  130                     
  131  04:8524            B2_puzzle13:
  132  04:8524  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8527  00 10 20  
  133  04:852A  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:852D  00 00 00  
       04:8530  00 00 00  
       04:8533  00 00 00  
       04:8536  00 00 00  
       04:8539  00 00 00  
       04:853C  00 00     
  134  04:853E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8541  FF 00 FF  
       04:8544  00 FF 00  
       04:8547  FF 00 FF  
       04:854A  00 FF 00  
       04:854D  FF 00 FF  
       04:8550  00 FF     
  135  04:8552  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8555  FF 00 FF  
       04:8558  00 FF 00  
       04:855B  FF 00 FF  
       04:855E  00 FF 00  
       04:8561  FF 00 FF  
       04:8564  00 FF     
  136  04:8566            B2_puzzle13Image:
  137  04:8566  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8569  00 00 00  
       04:856C  00 00 00  
       04:856F  00 00 00  
       04:8572  00 00 00  
       04:8575  00 00 00  
       04:8578  00 00 00  
       04:857B  00 00 00  
       04:857E  00 FF     
  138  04:8580            B2_puzzle13Name:
  139  04:8580  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $03, $FF
       04:8583  23 23 15  
       04:8586  0E 01 03  
       04:8589  FF        
  140                     
  141  04:858A            B2_puzzle14:
  142  04:858A  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:858D  00 10 20  
  143  04:8590  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8593  00 00 00  
       04:8596  00 00 00  
       04:8599  00 00 00  
       04:859C  00 00 00  
       04:859F  00 00 00  
       04:85A2  00 00     
  144  04:85A4  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:85A7  FF 00 FF  
       04:85AA  00 FF 00  
       04:85AD  FF 00 FF  
       04:85B0  00 FF 00  
       04:85B3  FF 00 FF  
       04:85B6  00 FF     
  145  04:85B8  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:85BB  FF 00 FF  
       04:85BE  00 FF 00  
       04:85C1  FF 00 FF  
       04:85C4  00 FF 00  
       04:85C7  FF 00 FF  
       04:85CA  00 FF     
  146  04:85CC            B2_puzzle14Image:
  147  04:85CC  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:85CF  00 00 00  
       04:85D2  00 00 00  
       04:85D5  00 00 00  
       04:85D8  00 00 00  
       04:85DB  00 00 00  
       04:85DE  00 00 00  
       04:85E1  00 00 00  
       04:85E4  00 FF     
  148  04:85E6            B2_puzzle14Name:
  149  04:85E6  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $04, $FF
       04:85E9  23 23 15  
       04:85EC  0E 01 04  
       04:85EF  FF        
  150                     
  151  04:85F0            B2_puzzle15:
  152  04:85F0  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:85F3  00 10 20  
  153  04:85F6  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:85F9  00 00 00  
       04:85FC  00 00 00  
       04:85FF  00 00 00  
       04:8602  00 00 00  
       04:8605  00 00 00  
       04:8608  00 00     
  154  04:860A  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:860D  FF 00 FF  
       04:8610  00 FF 00  
       04:8613  FF 00 FF  
       04:8616  00 FF 00  
       04:8619  FF 00 FF  
       04:861C  00 FF     
  155  04:861E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8621  FF 00 FF  
       04:8624  00 FF 00  
       04:8627  FF 00 FF  
       04:862A  00 FF 00  
       04:862D  FF 00 FF  
       04:8630  00 FF     
  156  04:8632            B2_puzzle15Image:
  157  04:8632  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8635  00 00 00  
       04:8638  00 00 00  
       04:863B  00 00 00  
       04:863E  00 00 00  
       04:8641  00 00 00  
       04:8644  00 00 00  
       04:8647  00 00 00  
       04:864A  00 FF     
  158  04:864C            B2_puzzle15Name:
  159  04:864C  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $05, $FF
       04:864F  23 23 15  
       04:8652  0E 01 05  
       04:8655  FF        
  160                     
  161  04:8656            B2_puzzle16:
  162  04:8656  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8659  00 10 20  
  163  04:865C  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:865F  00 00 00  
       04:8662  00 00 00  
       04:8665  00 00 00  
       04:8668  00 00 00  
       04:866B  00 00 00  
       04:866E  00 00     
  164  04:8670  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8673  FF 00 FF  
       04:8676  00 FF 00  
       04:8679  FF 00 FF  
       04:867C  00 FF 00  
       04:867F  FF 00 FF  
       04:8682  00 FF     
  165  04:8684  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8687  FF 00 FF  
       04:868A  00 FF 00  
       04:868D  FF 00 FF  
       04:8690  00 FF 00  
       04:8693  FF 00 FF  
       04:8696  00 FF     
  166  04:8698            B2_puzzle16Image:
  167  04:8698  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:869B  00 00 00  
       04:869E  00 00 00  
       04:86A1  00 00 00  
       04:86A4  00 00 00  
       04:86A7  00 00 00  
       04:86AA  00 00 00  
       04:86AD  00 00 00  
       04:86B0  00 FF     
  168  04:86B2            B2_puzzle16Name:
  169  04:86B2  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $06, $FF
       04:86B5  23 23 15  
       04:86B8  0E 01 06  
       04:86BB  FF        
  170                     
  171  04:86BC            B2_puzzle17:
  172  04:86BC  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:86BF  00 10 20  
  173  04:86C2  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:86C5  00 00 00  
       04:86C8  00 00 00  
       04:86CB  00 00 00  
       04:86CE  00 00 00  
       04:86D1  00 00 00  
       04:86D4  00 00     
  174  04:86D6  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:86D9  FF 00 FF  
       04:86DC  00 FF 00  
       04:86DF  FF 00 FF  
       04:86E2  00 FF 00  
       04:86E5  FF 00 FF  
       04:86E8  00 FF     
  175  04:86EA  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:86ED  FF 00 FF  
       04:86F0  00 FF 00  
       04:86F3  FF 00 FF  
       04:86F6  00 FF 00  
       04:86F9  FF 00 FF  
       04:86FC  00 FF     
  176  04:86FE            B2_puzzle17Image:
  177  04:86FE  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8701  00 00 00  
       04:8704  00 00 00  
       04:8707  00 00 00  
       04:870A  00 00 00  
       04:870D  00 00 00  
       04:8710  00 00 00  
       04:8713  00 00 00  
       04:8716  00 FF     
  178  04:8718            B2_puzzle17Name:
  179  04:8718  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $07, $FF
       04:871B  23 23 15  
       04:871E  0E 01 07  
       04:8721  FF        
  180                     
  181  04:8722            B2_puzzle18:
  182  04:8722  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8725  00 10 20  
  183  04:8728  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:872B  00 00 00  
       04:872E  00 00 00  
       04:8731  00 00 00  
       04:8734  00 00 00  
       04:8737  00 00 00  
       04:873A  00 00     
  184  04:873C  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:873F  FF 00 FF  
       04:8742  00 FF 00  
       04:8745  FF 00 FF  
       04:8748  00 FF 00  
       04:874B  FF 00 FF  
       04:874E  00 FF     
  185  04:8750  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8753  FF 00 FF  
       04:8756  00 FF 00  
       04:8759  FF 00 FF  
       04:875C  00 FF 00  
       04:875F  FF 00 FF  
       04:8762  00 FF     
  186  04:8764            B2_puzzle18Image:
  187  04:8764  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8767  00 00 00  
       04:876A  00 00 00  
       04:876D  00 00 00  
       04:8770  00 00 00  
       04:8773  00 00 00  
       04:8776  00 00 00  
       04:8779  00 00 00  
       04:877C  00 FF     
  188  04:877E            B2_puzzle18Name:
  189  04:877E  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $08, $FF
       04:8781  23 23 15  
       04:8784  0E 01 08  
       04:8787  FF        
  190                     
  191  04:8788            B2_puzzle19:
  192  04:8788  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:878B  00 10 20  
  193  04:878E  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8791  00 00 00  
       04:8794  00 00 00  
       04:8797  00 00 00  
       04:879A  00 00 00  
       04:879D  00 00 00  
       04:87A0  00 00     
  194  04:87A2  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:87A5  FF 00 FF  
       04:87A8  00 FF 00  
       04:87AB  FF 00 FF  
       04:87AE  00 FF 00  
       04:87B1  FF 00 FF  
       04:87B4  00 FF     
  195  04:87B6  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:87B9  FF 00 FF  
       04:87BC  00 FF 00  
       04:87BF  FF 00 FF  
       04:87C2  00 FF 00  
       04:87C5  FF 00 FF  
       04:87C8  00 FF     
  196  04:87CA            B2_puzzle19Image:
  197  04:87CA  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:87CD  00 00 00  
       04:87D0  00 00 00  
       04:87D3  00 00 00  
       04:87D6  00 00 00  
       04:87D9  00 00 00  
       04:87DC  00 00 00  
       04:87DF  00 00 00  
       04:87E2  00 FF     
  198  04:87E4            B2_puzzle19Name:
  199  04:87E4  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $01, $09, $FF
       04:87E7  23 23 15  
       04:87EA  0E 01 09  
       04:87ED  FF        
  200                     
  201  04:87EE            B2_puzzle20:
  202  04:87EE  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:87F1  00 10 20  
  203  04:87F4  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:87F7  00 00 00  
       04:87FA  00 00 00  
       04:87FD  00 00 00  
       04:8800  00 00 00  
       04:8803  00 00 00  
       04:8806  00 00     
  204  04:8808  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:880B  FF 00 FF  
       04:880E  00 FF 00  
       04:8811  FF 00 FF  
       04:8814  00 FF 00  
       04:8817  FF 00 FF  
       04:881A  00 FF     
  205  04:881C  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:881F  FF 00 FF  
       04:8822  00 FF 00  
       04:8825  FF 00 FF  
       04:8828  00 FF 00  
       04:882B  FF 00 FF  
       04:882E  00 FF     
  206  04:8830            B2_puzzle20Image:
  207  04:8830  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8833  00 00 00  
       04:8836  00 00 00  
       04:8839  00 00 00  
       04:883C  00 00 00  
       04:883F  00 00 00  
       04:8842  00 00 00  
       04:8845  00 00 00  
       04:8848  00 FF     
  208  04:884A            B2_puzzle20Name:
  209  04:884A  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $00, $FF
       04:884D  23 23 15  
       04:8850  0E 02 00  
       04:8853  FF        
  210                     
  211  04:8854            B2_puzzle21:
  212  04:8854  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8857  00 10 20  
  213  04:885A  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:885D  00 00 00  
       04:8860  00 00 00  
       04:8863  00 00 00  
       04:8866  00 00 00  
       04:8869  00 00 00  
       04:886C  00 00     
  214  04:886E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8871  FF 00 FF  
       04:8874  00 FF 00  
       04:8877  FF 00 FF  
       04:887A  00 FF 00  
       04:887D  FF 00 FF  
       04:8880  00 FF     
  215  04:8882  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8885  FF 00 FF  
       04:8888  00 FF 00  
       04:888B  FF 00 FF  
       04:888E  00 FF 00  
       04:8891  FF 00 FF  
       04:8894  00 FF     
  216  04:8896            B2_puzzle21Image:
  217  04:8896  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8899  00 00 00  
       04:889C  00 00 00  
       04:889F  00 00 00  
       04:88A2  00 00 00  
       04:88A5  00 00 00  
       04:88A8  00 00 00  
       04:88AB  00 00 00  
       04:88AE  00 FF     
  218  04:88B0            B2_puzzle21Name:
  219  04:88B0  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $01, $FF
       04:88B3  23 23 15  
       04:88B6  0E 02 01  
       04:88B9  FF        
  220                     
  221  04:88BA            B2_puzzle22:
  222  04:88BA  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:88BD  00 10 20  
  223  04:88C0  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:88C3  00 00 00  
       04:88C6  00 00 00  
       04:88C9  00 00 00  
       04:88CC  00 00 00  
       04:88CF  00 00 00  
       04:88D2  00 00     
  224  04:88D4  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:88D7  FF 00 FF  
       04:88DA  00 FF 00  
       04:88DD  FF 00 FF  
       04:88E0  00 FF 00  
       04:88E3  FF 00 FF  
       04:88E6  00 FF     
  225  04:88E8  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:88EB  FF 00 FF  
       04:88EE  00 FF 00  
       04:88F1  FF 00 FF  
       04:88F4  00 FF 00  
       04:88F7  FF 00 FF  
       04:88FA  00 FF     
  226  04:88FC            B2_puzzle22Image:
  227  04:88FC  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:88FF  00 00 00  
       04:8902  00 00 00  
       04:8905  00 00 00  
       04:8908  00 00 00  
       04:890B  00 00 00  
       04:890E  00 00 00  
       04:8911  00 00 00  
       04:8914  00 FF     
  228  04:8916            B2_puzzle22Name:
  229  04:8916  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $02, $FF
       04:8919  23 23 15  
       04:891C  0E 02 02  
       04:891F  FF        
  230                     
  231  04:8920            B2_puzzle23:
  232  04:8920  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8923  00 10 20  
  233  04:8926  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8929  00 00 00  
       04:892C  00 00 00  
       04:892F  00 00 00  
       04:8932  00 00 00  
       04:8935  00 00 00  
       04:8938  00 00     
  234  04:893A  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:893D  FF 00 FF  
       04:8940  00 FF 00  
       04:8943  FF 00 FF  
       04:8946  00 FF 00  
       04:8949  FF 00 FF  
       04:894C  00 FF     
  235  04:894E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8951  FF 00 FF  
       04:8954  00 FF 00  
       04:8957  FF 00 FF  
       04:895A  00 FF 00  
       04:895D  FF 00 FF  
       04:8960  00 FF     
  236  04:8962            B2_puzzle23Image:
  237  04:8962  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8965  00 00 00  
       04:8968  00 00 00  
       04:896B  00 00 00  
       04:896E  00 00 00  
       04:8971  00 00 00  
       04:8974  00 00 00  
       04:8977  00 00 00  
       04:897A  00 FF     
  238  04:897C            B2_puzzle23Name:
  239  04:897C  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $03, $FF
       04:897F  23 23 15  
       04:8982  0E 02 03  
       04:8985  FF        
  240                     
  241  04:8986            B2_puzzle24:
  242  04:8986  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8989  00 10 20  
  243  04:898C  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:898F  00 00 00  
       04:8992  00 00 00  
       04:8995  00 00 00  
       04:8998  00 00 00  
       04:899B  00 00 00  
       04:899E  00 00     
  244  04:89A0  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:89A3  FF 00 FF  
       04:89A6  00 FF 00  
       04:89A9  FF 00 FF  
       04:89AC  00 FF 00  
       04:89AF  FF 00 FF  
       04:89B2  00 FF     
  245  04:89B4  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:89B7  FF 00 FF  
       04:89BA  00 FF 00  
       04:89BD  FF 00 FF  
       04:89C0  00 FF 00  
       04:89C3  FF 00 FF  
       04:89C6  00 FF     
  246  04:89C8            B2_puzzle24Image:
  247  04:89C8  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:89CB  00 00 00  
       04:89CE  00 00 00  
       04:89D1  00 00 00  
       04:89D4  00 00 00  
       04:89D7  00 00 00  
       04:89DA  00 00 00  
       04:89DD  00 00 00  
       04:89E0  00 FF     
  248  04:89E2            B2_puzzle24Name:
  249  04:89E2  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $04, $FF
       04:89E5  23 23 15  
       04:89E8  0E 02 04  
       04:89EB  FF        
  250                     
  251  04:89EC            B2_puzzle25:
  252  04:89EC  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:89EF  00 10 20  
  253  04:89F2  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:89F5  00 00 00  
       04:89F8  00 00 00  
       04:89FB  00 00 00  
       04:89FE  00 00 00  
       04:8A01  00 00 00  
       04:8A04  00 00     
  254  04:8A06  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8A09  FF 00 FF  
       04:8A0C  00 FF 00  
       04:8A0F  FF 00 FF  
       04:8A12  00 FF 00  
       04:8A15  FF 00 FF  
       04:8A18  00 FF     
  255  04:8A1A  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8A1D  FF 00 FF  
       04:8A20  00 FF 00  
       04:8A23  FF 00 FF  
       04:8A26  00 FF 00  
       04:8A29  FF 00 FF  
       04:8A2C  00 FF     
  256  04:8A2E            B2_puzzle25Image:
  257  04:8A2E  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8A31  00 00 00  
       04:8A34  00 00 00  
       04:8A37  00 00 00  
       04:8A3A  00 00 00  
       04:8A3D  00 00 00  
       04:8A40  00 00 00  
       04:8A43  00 00 00  
       04:8A46  00 FF     
  258  04:8A48            B2_puzzle25Name:
  259  04:8A48  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $05, $FF
       04:8A4B  23 23 15  
       04:8A4E  0E 02 05  
       04:8A51  FF        
  260                     
  261  04:8A52            B2_puzzle26:
  262  04:8A52  01 01 00    .db $01, $01, $00, $00, $10, $20
       04:8A55  00 10 20  
  263  04:8A58  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       04:8A5B  00 00 00  
       04:8A5E  00 00 00  
       04:8A61  00 00 00  
       04:8A64  00 00 00  
       04:8A67  00 00 00  
       04:8A6A  00 00     
  264  04:8A6C  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8A6F  FF 00 FF  
       04:8A72  00 FF 00  
       04:8A75  FF 00 FF  
       04:8A78  00 FF 00  
       04:8A7B  FF 00 FF  
       04:8A7E  00 FF     
  265  04:8A80  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       04:8A83  FF 00 FF  
       04:8A86  00 FF 00  
       04:8A89  FF 00 FF  
       04:8A8C  00 FF 00  
       04:8A8F  FF 00 FF  
       04:8A92  00 FF     
  266  04:8A94            B2_puzzle26Image:
  267  04:8A94  00 00 00   .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF
       04:8A97  00 00 00  
       04:8A9A  00 00 00  
       04:8A9D  00 00 00  
       04:8AA0  00 00 00  
       04:8AA3  00 00 00  
       04:8AA6  00 00 00  
       04:8AA9  00 00 00  
       04:8AAC  00 FF     
  268  04:8AAE            B2_puzzle26Name:
  269  04:8AAE  08 19 1E    .db $08, $19, $1E, $23, $23, $15, $0E, $02, $06, $FF
       04:8AB1  23 23 15  
       04:8AB4  0E 02 06  
       04:8AB7  FF        
  270                     
#[2]   Banks/Bank2.asm
    5                     
    6           0005        .bank 5
    7           A000        .org $A000
    8                       
#[3]   Puzzles/B2Tables.asm
    9                       .include "Puzzles/B2Tables.asm"
    1  05:A000  00 80       .word B2_puzzle0, B2_puzzle1, B2_puzzle2, B2_puzzle3, B2_puzzle4, B2_puzzle5, B2_puzzle6, B2_puzzle7, B2_puzzle8
       05:A002  65 80     
       05:A004  CA 80     
       05:A006  2F 81     
       05:A008  94 81     
       05:A00A  F9 81     
       05:A00C  5E 82     
       05:A00E  C3 82     
       05:A010  28 83     
    2  05:A012  8D 83       .word B2_puzzle9, B2_puzzle10, B2_puzzle11, B2_puzzle12, B2_puzzle13, B2_puzzle14, B2_puzzle15, B2_puzzle16, B2_puzzle17
       05:A014  F2 83     
       05:A016  58 84     
       05:A018  BE 84     
       05:A01A  24 85     
       05:A01C  8A 85     
       05:A01E  F0 85     
       05:A020  56 86     
       05:A022  BC 86     
    3  05:A024  22 87       .word B2_puzzle18, B2_puzzle19, B2_puzzle20, B2_puzzle21, B2_puzzle22, B2_puzzle23, B2_puzzle24, B2_puzzle25, B2_puzzle26
       05:A026  88 87     
       05:A028  EE 87     
       05:A02A  54 88     
       05:A02C  BA 88     
       05:A02E  20 89     
       05:A030  86 89     
       05:A032  EC 89     
       05:A034  52 8A     
    4                     
    5  05:A036  5C 80       .word B2_puzzle0Name, B2_puzzle1Name, B2_puzzle2Name, B2_puzzle3Name, B2_puzzle4Name, B2_puzzle5Name, B2_puzzle6Name, B2_puzzle7Name, B2_puzzle8Name
       05:A038  C1 80     
       05:A03A  26 81     
       05:A03C  8B 81     
       05:A03E  F0 81     
       05:A040  55 82     
       05:A042  BA 82     
       05:A044  1F 83     
       05:A046  84 83     
    6  05:A048  E9 83       .word B2_puzzle9Name, B2_puzzle10Name, B2_puzzle11Name, B2_puzzle12Name, B2_puzzle13Name, B2_puzzle14Name, B2_puzzle15Name, B2_puzzle16Name, B2_puzzle17Name
       05:A04A  4E 84     
       05:A04C  B4 84     
       05:A04E  1A 85     
       05:A050  80 85     
       05:A052  E6 85     
       05:A054  4C 86     
       05:A056  B2 86     
       05:A058  18 87     
    7  05:A05A  7E 87       .word B2_puzzle18Name, B2_puzzle19Name, B2_puzzle20Name, B2_puzzle21Name, B2_puzzle22Name, B2_puzzle23Name, B2_puzzle24Name, B2_puzzle25Name, B2_puzzle26Name
       05:A05C  E4 87     
       05:A05E  4A 88     
       05:A060  B0 88     
       05:A062  16 89     
       05:A064  7C 89     
       05:A066  E2 89     
       05:A068  48 8A     
       05:A06A  AE 8A     
#[2]   Banks/Bank2.asm
   10                     ;puzzle sprites
   11  05:A06C  00 00 00    .db $00, $00, $00, $00
       05:A06F  00        
   12  05:A070  00 00 00    .db $00, $00, $00, $00
       05:A073  00        
   13  05:A074  00 00 00    .db $00, $00, $00, $00
       05:A077  00        
   14  05:A078  00 00 00    .db $00, $00, $00, $00
       05:A07B  00        
   15  05:A07C  00 00 00    .db $00, $00, $00, $00
       05:A07F  00        
   16  05:A080  00 00 00    .db $00, $00, $00, $00
       05:A083  00        
   17  05:A084  00 00 00    .db $00, $00, $00, $00
       05:A087  00        
   18  05:A088  00 00 00    .db $00, $00, $00, $00
       05:A08B  00        
   19  05:A08C  00 00 00    .db $00, $00, $00, $00
       05:A08F  00        
   20  05:A090  00 00 00    .db $00, $00, $00, $00
       05:A093  00        
   21  05:A094  00 00 00    .db $00, $00, $00, $00
       05:A097  00        
   22  05:A098  00 00 00    .db $00, $00, $00, $00
       05:A09B  00        
   23  05:A09C  00 00 00    .db $00, $00, $00, $00
       05:A09F  00        
   24  05:A0A0  00 00 00    .db $00, $00, $00, $00
       05:A0A3  00        
   25  05:A0A4  00 00 00    .db $00, $00, $00, $00
       05:A0A7  00        
   26  05:A0A8  00 00 00    .db $00, $00, $00, $00
       05:A0AB  00        
   27  05:A0AC  00 00 00    .db $00, $00, $00, $00
       05:A0AF  00        
   28  05:A0B0  00 00 00    .db $00, $00, $00, $00
       05:A0B3  00        
   29  05:A0B4  00 00 00    .db $00, $00, $00, $00
       05:A0B7  00        
   30  05:A0B8  00 00 00    .db $00, $00, $00, $00
       05:A0BB  00        
   31  05:A0BC  00 00 00    .db $00, $00, $00, $00
       05:A0BF  00        
   32  05:A0C0  00 00 00    .db $00, $00, $00, $00
       05:A0C3  00        
   33  05:A0C4  00 00 00    .db $00, $00, $00, $00
       05:A0C7  00        
   34  05:A0C8  00 00 00    .db $00, $00, $00, $00
       05:A0CB  00        
   35  05:A0CC  00 00 00    .db $00, $00, $00, $00
       05:A0CF  00        
   36  05:A0D0  00 00 00    .db $00, $00, $00, $00
       05:A0D3  00        
   37  05:A0D4  00 00 00    .db $00, $00, $00, $00
       05:A0D7  00        
   38                     ;bank song, A0D8
   39  05:A0D8              .incbin "SoundEnginePreComp.nes"
#[3]   Music/Bank2.i
   40                       .include "Music/Bank2.i"  ;holds the data for bank song
    1  05:A881            bank2_header:
    2  05:A881  04            .byte $04           ;4 streams
    3                         
    4  05:A882  00            .byte MUSIC_SQ1     ;which stream
    5  05:A883  01            .byte $01           ;status byte (stream enabled)
    6  05:A884  00            .byte SQUARE_1      ;which channel
    7  05:A885  70            .byte $70           ;initial duty (01)
    8  05:A886  0B            .byte ve_long_decay ;volume envelope
    9  05:A887  A2 A8         .word bank2_square1 ;pointer to stream
   10  05:A889  3A            .byte $3A           ;tempo
   11                         
   12  05:A88A  01            .byte MUSIC_SQ2     ;which stream
   13  05:A88B  01            .byte $01           ;status byte (stream enabled)
   14  05:A88C  01            .byte SQUARE_2      ;which channel
   15  05:A88D  70            .byte $70           ;initial duty (10)
   16  05:A88E  03            .byte ve_tgl_1      ;volume envelope
   17  05:A88F  12 AA         .word bank2_square2 ;pointer to stream
   18  05:A891  3A            .byte $3A           ;tempo
   19                         
   20  05:A892  02            .byte MUSIC_TRI     ;which stream
   21  05:A893  01            .byte $01           ;status byte (stream enabled)
   22  05:A894  02            .byte TRIANGLE      ;which channel
   23  05:A895  80            .byte $80           ;initial volume (on)
   24  05:A896  03            .byte ve_tgl_1      ;volume envelope
   25  05:A897  12 AC         .word bank2_tri     ;pointer to stream
   26  05:A899  3A            .byte $3A           ;tempo
   27                         
   28  05:A89A  03            .byte MUSIC_NOI     ;which stream
   29  05:A89B  01            .byte $01           ;enabled
   30  05:A89C  03            .byte NOISE     
   31  05:A89D  30            .byte $30           ;initial duty_vol
   32  05:A89E  0A            .byte ve_hiHat_decay ;volume envelope
   33  05:A89F  FE AD         .word bank2_noise   ;pointer to stream
   34  05:A8A1  3A            .byte $3A           ;tempo
   35                     
   36                         
   37  05:A8A2            bank2_square1:
   38                     
   39  05:A8A2  A2 0B             .byte volume_envelope, ve_long_decay 
   40  05:A8A4  83 5E         .byte quarter, rest
   41  05:A8A6  87 29             .byte d_eighth, D5
   42  05:A8A8  8E 27             .byte d_half_d_eight, C5
   43  05:A8AA  81 26 27          .byte sixteenth, B4, C5
   44  05:A8AD  82 26             .byte eighth, B4
   45  05:A8AF  81 21             .byte sixteenth, Fs4
   46  05:A8B1  82 22 24          .byte eighth, G4,  A4
   47  05:A8B4  81 26             .byte sixteenth, B4
   48  05:A8B6  87 21             .byte d_eighth, Fs4
   49  05:A8B8  8F 24             .byte whole_quarter_sixteenth, A4
   50  05:A8BA  81 5E             .byte sixteenth, rest
   51  05:A8BC  15 16 17          .byte Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       05:A8BF  18 17 16  
       05:A8C2  15        
   52                             
   53  05:A8C3  83 5E             .byte quarter, rest
   54  05:A8C5  87 29             .byte d_eighth, D5
   55  05:A8C7  8E 27             .byte d_half_d_eight, C5
   56  05:A8C9  81 26 27          .byte sixteenth, B4, C5
   57  05:A8CC  82 26             .byte eighth, B4
   58  05:A8CE  81 21             .byte sixteenth, Fs4
   59  05:A8D0  82 22 2B          .byte eighth, G4,  E5
   60  05:A8D3  81 2E             .byte sixteenth, G5
   61  05:A8D5  8A 2D             .byte d_whole, Fs5
   62  05:A8D7  81 5E             .byte sixteenth, rest
   63  05:A8D9  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       05:A8DC  16 18 1D  
       05:A8DF  21        
   64                         
   65  05:A8E0  83 5E             .byte quarter, rest
   66  05:A8E2  87 2E             .byte d_eighth, G5
   67  05:A8E4  8E 2C             .byte d_half_d_eight, F5
   68  05:A8E6  81 2B 2C          .byte sixteenth, E5, F5
   69  05:A8E9  82 2B             .byte eighth, E5
   70  05:A8EB  81 26             .byte sixteenth, B4
   71  05:A8ED  82 27 29          .byte eighth, C5,  D5
   72  05:A8F0  81 2B 29          .byte sixteenth, E5, D5 
   73  05:A8F3  82 26 27          .byte eighth, B4, C5, A4, B4, G4 
       05:A8F6  24 26 22  
   74  05:A8F9  81 27 26          .byte sixteenth, C5, B4, G4, F4, D4
       05:A8FC  22 20 1D  
   75  05:A8FF  82 20             .byte eighth, F4
   76  05:A901  81 24             .byte sixteenth, A4
   77  05:A903  82 22             .byte eighth, G4
   78  05:A905  81 27             .byte sixteenth, C5
   79  05:A907  8C 26             .byte five_eighths, B4
   80                             
   81  05:A909  83 5E             .byte quarter, rest
   82  05:A90B  87 29             .byte d_eighth, D5
   83  05:A90D  8E 27             .byte d_half_d_eight, C5
   84  05:A90F  81 26 27          .byte sixteenth, B4, C5
   85  05:A912  82 26             .byte eighth, B4
   86  05:A914  81 21             .byte sixteenth, Fs4
   87  05:A916  82 22 24          .byte eighth, G4,  A4
   88  05:A919  81 22             .byte sixteenth, G4
   89  05:A91B  8A 21             .byte d_whole, Fs4
   90  05:A91D  81 5E             .byte sixteenth, rest
   91  05:A91F  15 16 18          .byte Fs3, G3, A3, G3, A3, D4, Fs4
       05:A922  16 18 1D  
       05:A925  21        
   92                             
   93                             ;;bridge
   94                             
   95  05:A926  87 24 22          .byte d_eighth, A4, G4, Fs4
       05:A929  21        
   96  05:A92A  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       05:A92D  0A 2E 0B  
       05:A930  2D 0C     
   97  05:A932  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       05:A935  0A 24 09  
       05:A938  22        
   98  05:A939  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       05:A93C  1D 18     
   99  05:A93E  82 1B             .byte eighth, C4
  100  05:A940  81 16             .byte sixteenth, G3
  101  05:A942  91 15             .byte whole_sixteenth, Fs3
  102  05:A944  84 5E             .byte half, rest
  103  05:A946  81 5E             .byte sixteenth, rest
  104  05:A948  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:A94B  18 16 18  
       05:A94E  1D 21     
  105                             
  106  05:A950  87 24 22          .byte d_eighth, A4, G4, Fs4
       05:A953  21        
  107  05:A954  80 09 30          .byte thirtysecond, Fs2, A5, G2, G5, Gs2, Fs5, A2
       05:A957  0A 2E 0B  
       05:A95A  2D 0C     
  108  05:A95C  29 0B 27          .byte D5, Gs2, C5, G2, A4, Fs2, G4
       05:A95F  0A 24 09  
       05:A962  22        
  109  05:A963  87 20 1F          .byte d_eighth, F4, E4, D4, A3
       05:A966  1D 18     
  110  05:A968  82 1B             .byte eighth, C4
  111  05:A96A  81 22             .byte sixteenth, G4
  112  05:A96C  91 21             .byte whole_sixteenth, Fs4
  113  05:A96E  84 5E             .byte half, rest
  114  05:A970  81 5E             .byte sixteenth, rest
  115  05:A972  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:A975  18 16 18  
       05:A978  1D 21     
  116                     
  117                             ;; reach-around
  118  05:A97A  A2 0B             .byte volume_envelope, ve_long_decay 
  119  05:A97C  87 22 22          .byte d_eighth, G4, G4
  120  05:A97F  A2 04             .byte volume_envelope, ve_tgl_2
  121  05:A981  82 24             .byte eighth, A4
  122  05:A983  A2 03             .byte volume_envelope, ve_tgl_1
  123  05:A985  80 5E 38          .byte thirtysecond, rest, F6
  124  05:A988  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:A98B  33 30 2E  
       05:A98E  2D 30     
  125  05:A990  82 2E             .byte eighth, G5
  126  05:A992  81 27             .byte sixteenth, C5
  127  05:A994  82 2C             .byte eighth, F5
  128  05:A996  81 29             .byte sixteenth, D5
  129  05:A998  82 2E             .byte eighth, G5
  130  05:A99A  81 2D             .byte sixteenth, Fs5
  131  05:A99C  82 30             .byte eighth, A5
  132  05:A99E  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       05:A9A1  2D 33 30  
  133                             
  134  05:A9A4  A2 0B             .byte volume_envelope, ve_long_decay 
  135  05:A9A6  87 22 22          .byte d_eighth, G4, G4
  136  05:A9A9  A2 04             .byte volume_envelope, ve_tgl_2
  137  05:A9AB  82 24             .byte eighth, A4
  138  05:A9AD  A2 03             .byte volume_envelope, ve_tgl_1
  139  05:A9AF  80 5E 1C          .byte thirtysecond, rest, Cs4
  140  05:A9B2  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       05:A9B5  29 24 29  
       05:A9B8  2D        
  141  05:A9B9  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       05:A9BC  2B 24 2C  
       05:A9BF  27 21     
  142  05:A9C1  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6, D6
       05:A9C4  24 29 24  
       05:A9C7  1F 2E 2D  
       05:A9CA  33 35     
  143                             
  144  05:A9CC  A2 0B             .byte volume_envelope, ve_long_decay 
  145  05:A9CE  87 22 22          .byte d_eighth, G4, G4
  146  05:A9D1  A2 04             .byte volume_envelope, ve_tgl_2
  147  05:A9D3  82 24             .byte eighth, A4
  148  05:A9D5  A2 03             .byte volume_envelope, ve_tgl_1
  149  05:A9D7  80 5E 38          .byte thirtysecond, rest, F6
  150  05:A9DA  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:A9DD  33 30 2E  
       05:A9E0  2D 30     
  151  05:A9E2  82 2E             .byte eighth, G5
  152  05:A9E4  81 27             .byte sixteenth, C5
  153  05:A9E6  82 2C             .byte eighth, F5
  154  05:A9E8  81 29             .byte sixteenth, D5
  155  05:A9EA  82 2E             .byte eighth, G5
  156  05:A9EC  81 2D             .byte sixteenth, Fs5
  157  05:A9EE  82 30             .byte eighth, A5
  158  05:A9F0  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6, A5
       05:A9F3  2D 33 30  
  159                             
  160  05:A9F6  A2 0B             .byte volume_envelope, ve_long_decay 
  161  05:A9F8  87 22 22          .byte d_eighth, G4, G4
  162  05:A9FB  A2 04             .byte volume_envelope, ve_tgl_2
  163  05:A9FD  82 24             .byte eighth, A4
  164  05:A9FF  A2 0B             .byte volume_envelope, ve_long_decay 
  165  05:AA01  88 5E             .byte d_quarter, rest
  166  05:AA03  8C 24             .byte five_eighths, A4
  167  05:AA05  A2 03             .byte volume_envelope, ve_tgl_1
  168  05:AA07  81 5E             .byte sixteenth, rest
  169  05:AA09  82 21 22          .byte eighth, Fs4, G4, Gs4
       05:AA0C  23        
  170  05:AA0D  81 24             .byte sixteenth, A4
  171                     
  172  05:AA0F  A1                .byte loop
  173  05:AA10  A2 A8         .word bank2_square1
  174                             
  175                             
  176                     
  177  05:AA12            bank2_square2:
  178                     
  179  05:AA12  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:AA15  0C 05     
  180  05:AA17  82 11             .byte eighth, D3
  181  05:AA19  81 05             .byte sixteenth, D2
  182  05:AA1B  88 0F             .byte d_quarter, C3
  183  05:AA1D  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AA20  0F        
  184  05:AA21  05 0A 0C          .byte D2, G2, A2, D2 
       05:AA24  05        
  185  05:AA25  82 11             .byte eighth, D3
  186  05:AA27  81 05             .byte sixteenth, D2
  187  05:AA29  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       05:AA2C  0A 0B     
  188  05:AA2E  81 0C             .byte sixteenth, A2
  189  05:AA30  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:AA33  0C 05     
  190  05:AA35  82 11             .byte eighth, D3
  191  05:AA37  81 05             .byte sixteenth, D2
  192  05:AA39  88 0F             .byte d_quarter, C3
  193  05:AA3B  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AA3E  0F        
  194  05:AA3F  05 0A 0C          .byte D2, G2, A2, D2 
       05:AA42  05        
  195  05:AA43  82 11             .byte eighth, D3
  196  05:AA45  81 05             .byte sixteenth, D2
  197  05:AA47  82 0F             .byte eighth, C3 
  198  05:AA49  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       05:AA4C  0B 0C 0B  
       05:AA4F  0A 09     
  199                             
  200  05:AA51  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:AA54  0C 05     
  201  05:AA56  82 11             .byte eighth, D3
  202  05:AA58  81 05             .byte sixteenth, D2
  203  05:AA5A  88 0F             .byte d_quarter, C3
  204  05:AA5C  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AA5F  0F        
  205  05:AA60  05 0A 0C          .byte D2, G2, A2, D2 
       05:AA63  05        
  206  05:AA64  82 11             .byte eighth, D3
  207  05:AA66  81 05             .byte sixteenth, D2
  208  05:AA68  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       05:AA6B  0A 0B     
  209  05:AA6D  81 0C             .byte sixteenth, A2
  210  05:AA6F  05 0A 0C          .byte D2, G2, A2, D2 
       05:AA72  05        
  211  05:AA73  82 11             .byte eighth, D3
  212  05:AA75  81 05             .byte sixteenth, D2
  213  05:AA77  88 0F             .byte d_quarter, C3
  214  05:AA79  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AA7C  0F        
  215  05:AA7D  05 0A 0C          .byte D2, G2, A2, D2 
       05:AA80  05        
  216  05:AA81  82 11             .byte eighth, D3
  217  05:AA83  81 05             .byte sixteenth, D2
  218  05:AA85  82 0F             .byte eighth, C3 
  219  05:AA87  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       05:AA8A  0C 0A 0C  
       05:AA8D  11 15     
  220                             
  221  05:AA8F  0A 0F 11          .byte G2, C3, D3, G2 
       05:AA92  0A        
  222  05:AA93  82 16             .byte eighth, G3
  223  05:AA95  81 0A             .byte sixteenth, G2
  224  05:AA97  88 14             .byte d_quarter, F3
  225  05:AA99  81 0F 11          .byte sixteenth, C3, D3, F3
       05:AA9C  14        
  226  05:AA9D  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       05:AAA0  11 0A     
  227  05:AAA2  82 16             .byte eighth, G3
  228  05:AAA4  81 0A             .byte sixteenth, G2
  229  05:AAA6  88 14             .byte d_quarter, F3
  230  05:AAA8  81 14 13          .byte sixteenth, F3, E3, D3
       05:AAAB  11        
  231  05:AAAC  0A 0F 11          .byte G2, C3, D3, G2 
       05:AAAF  0A        
  232  05:AAB0  82 16             .byte eighth, G3
  233  05:AAB2  81 0A             .byte sixteenth, G2
  234  05:AAB4  88 14             .byte d_quarter, F3
  235  05:AAB6  81 0F 11          .byte sixteenth, C3, D3, F3
       05:AAB9  14        
  236  05:AABA  81 0A 0F          .byte sixteenth, G2, C3, D3, G2 
       05:AABD  11 0A     
  237  05:AABF  82 16             .byte eighth, G3
  238  05:AAC1  81 0A             .byte sixteenth, G2
  239  05:AAC3  88 14             .byte d_quarter, F3
  240  05:AAC5  81 14 13          .byte sixteenth, F3, E3, D3
       05:AAC8  11        
  241                     
  242  05:AAC9  81 05 0A          .byte sixteenth, D2, G2, A2, D2 
       05:AACC  0C 05     
  243  05:AACE  82 11             .byte eighth, D3
  244  05:AAD0  81 05             .byte sixteenth, D2
  245  05:AAD2  88 0F             .byte d_quarter, C3
  246  05:AAD4  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AAD7  0F        
  247  05:AAD8  05 0A 0C          .byte D2, G2, A2, D2 
       05:AADB  05        
  248  05:AADC  82 11             .byte eighth, D3
  249  05:AADE  81 05             .byte sixteenth, D2
  250  05:AAE0  82 0F 09          .byte eighth, C3, Fs2, G2, Gs2
       05:AAE3  0A 0B     
  251  05:AAE5  81 0C             .byte sixteenth, A2
  252  05:AAE7  05 0A 0C          .byte D2, G2, A2, D2 
       05:AAEA  05        
  253  05:AAEB  82 11             .byte eighth, D3
  254  05:AAED  81 05             .byte sixteenth, D2
  255  05:AAEF  88 0F             .byte d_quarter, C3
  256  05:AAF1  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AAF4  0F        
  257  05:AAF5  05 0A 0C          .byte D2, G2, A2, D2 
       05:AAF8  05        
  258  05:AAF9  82 11             .byte eighth, D3
  259  05:AAFB  81 05             .byte sixteenth, D2
  260  05:AAFD  82 0F             .byte eighth, C3 
  261  05:AAFF  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3 
       05:AB02  0C 0A 0C  
       05:AB05  11 15     
  262                             
  263                             ;;bridge
  264                             
  265  05:AB07  A2 0B             .byte volume_envelope, ve_long_decay 
  266  05:AB09  87 1B 1A          .byte d_eighth, C4, B3, A3
       05:AB0C  18        
  267  05:AB0D  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       05:AB10  0B 0C 0B  
       05:AB13  0A 09     
  268  05:AB15  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       05:AB18  15 11     
  269  05:AB1A  82 14             .byte eighth, F3
  270  05:AB1C  81 11             .byte sixteenth, D3
  271  05:AB1E  90 0F             .byte d_half_eighth, C3
  272  05:AB20  A2 03             .byte volume_envelope, ve_tgl_1
  273  05:AB22  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AB25  0F        
  274  05:AB26  05 0A 0C          .byte D2, G2, A2, D2 
       05:AB29  05        
  275  05:AB2A  82 11             .byte eighth, D3
  276  05:AB2C  81 05             .byte sixteenth, D2
  277  05:AB2E  82 0F             .byte eighth, C3 
  278  05:AB30  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       05:AB33  0C 0A 0C  
       05:AB36  11 15     
  279                             
  280  05:AB38  A2 0B             .byte volume_envelope, ve_long_decay 
  281  05:AB3A  87 1B 1A          .byte d_eighth, C4, B3, A3
       05:AB3D  18        
  282  05:AB3E  81 09 0A          .byte sixteenth, Fs2, G2, Gs2, A2, Gs2, G2, Fs2
       05:AB41  0B 0C 0B  
       05:AB44  0A 09     
  283  05:AB46  87 18 16          .byte d_eighth, A3, G3, Fs3, D3
       05:AB49  15 11     
  284  05:AB4B  82 14             .byte eighth, F3
  285  05:AB4D  81 1B             .byte sixteenth, C4
  286  05:AB4F  90 1D             .byte d_half_eighth, D4
  287  05:AB51  A2 03             .byte volume_envelope, ve_tgl_1
  288  05:AB53  81 0A 0C          .byte sixteenth, G2, A2, C3
       05:AB56  0F        
  289  05:AB57  05 0A 0C          .byte D2, G2, A2, D2 
       05:AB5A  05        
  290  05:AB5B  82 11             .byte eighth, D3
  291  05:AB5D  81 05             .byte sixteenth, D2
  292  05:AB5F  82 0F             .byte eighth, C3 
  293  05:AB61  81 09 0A          .byte sixteenth, Fs2, G2, A2, G2, A2, D3, Fs3
       05:AB64  0C 0A 0C  
       05:AB67  11 15     
  294                             
  295                             ;; reach-around
  296  05:AB69  A2 0B             .byte volume_envelope, ve_long_decay 
  297  05:AB6B  87 1F 1F          .byte d_eighth, E4, E4
  298  05:AB6E  A2 04             .byte volume_envelope, ve_tgl_2
  299  05:AB70  82 21             .byte eighth, Fs4
  300  05:AB72  A2 07             .byte volume_envelope, ve_battlekid_2
  301  05:AB74  86 5E             .byte d_sixteenth, rest
  302  05:AB76  80 38             .byte thirtysecond, F6
  303  05:AB78  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:AB7B  33 30 2E  
       05:AB7E  2D 30     
  304  05:AB80  82 2E             .byte eighth, G5
  305  05:AB82  81 27             .byte sixteenth, C5
  306  05:AB84  82 2C             .byte eighth, F5
  307  05:AB86  81 29             .byte sixteenth, D5
  308  05:AB88  82 2E             .byte eighth, G5
  309  05:AB8A  81 2D             .byte sixteenth, Fs5
  310  05:AB8C  82 30             .byte eighth, A5
  311  05:AB8E  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       05:AB91  2D 33     
  312                             
  313  05:AB93  A2 0B             .byte volume_envelope, ve_long_decay 
  314  05:AB95  87 1F 1F          .byte d_eighth, E4, E4
  315  05:AB98  A2 04             .byte volume_envelope, ve_tgl_2
  316  05:AB9A  82 21             .byte eighth, Fs4
  317  05:AB9C  A2 07             .byte volume_envelope, ve_battlekid_2
  318  05:AB9E  86 5E             .byte d_sixteenth, rest
  319  05:ABA0  80 1C             .byte thirtysecond, Cs4
  320  05:ABA2  81 1D 21          .byte sixteenth, D4, Fs4, D5, A4, D5, Fs5
       05:ABA5  29 24 29  
       05:ABA8  2D        
  321  05:ABA9  81 33 30          .byte sixteenth, C6, A5, E5, A4, F5, C5, Fs4
       05:ABAC  2B 24 2C  
       05:ABAF  27 21     
  322  05:ABB1  81 2E 29          .byte sixteenth, G5, D5, A4, D5, A4, E4, G5, Fs5, C6
       05:ABB4  24 29 24  
       05:ABB7  1F 2E 2D  
       05:ABBA  33        
  323                             
  324  05:ABBB  A2 0B             .byte volume_envelope, ve_long_decay 
  325  05:ABBD  87 1F 1F          .byte d_eighth, E4, E4
  326  05:ABC0  A2 04             .byte volume_envelope, ve_tgl_2
  327  05:ABC2  82 21             .byte eighth, Fs4
  328  05:ABC4  A2 07             .byte volume_envelope, ve_battlekid_2
  329  05:ABC6  86 5E             .byte d_sixteenth, rest
  330  05:ABC8  80 38             .byte thirtysecond, F6
  331  05:ABCA  81 39 35          .byte sixteenth, Fs6, D6, C6, A5, G5, Fs5, A5
       05:ABCD  33 30 2E  
       05:ABD0  2D 30     
  332  05:ABD2  82 2E             .byte eighth, G5
  333  05:ABD4  81 27             .byte sixteenth, C5
  334  05:ABD6  82 2C             .byte eighth, F5
  335  05:ABD8  81 29             .byte sixteenth, D5
  336  05:ABDA  82 2E             .byte eighth, G5
  337  05:ABDC  81 2D             .byte sixteenth, Fs5
  338  05:ABDE  82 30             .byte eighth, A5
  339  05:ABE0  81 27 2E          .byte sixteenth, C5, G5, Fs5, C6 
       05:ABE3  2D 33     
  340                             
  341  05:ABE5  A2 0B             .byte volume_envelope, ve_long_decay 
  342  05:ABE7  87 1F 1F          .byte d_eighth, E4, E4
  343  05:ABEA  A2 04             .byte volume_envelope, ve_tgl_2
  344  05:ABEC  82 21             .byte eighth, Fs4
  345  05:ABEE  A2 03             .byte volume_envelope, ve_tgl_1
  346  05:ABF0  88 5E             .byte d_quarter, rest
  347  05:ABF2  80 27 1F          .byte thirtysecond, C5, E4, C5, E4, C5, E4, C5, E4, C5, E4
       05:ABF5  27 1F 27  
       05:ABF8  1F 27 1F  
       05:ABFB  27 1F     
  348  05:ABFD  27 1F 27          .byte C5, E4, C5, E4, C5, E4, C5, E4, C5, E4
       05:AC00  1F 27 1F  
       05:AC03  27 1F 27  
       05:AC06  1F        
  349  05:AC07  81 5E             .byte sixteenth, rest
  350  05:AC09  82 09 0A          .byte eighth, Fs2, G2, Gs2
       05:AC0C  0B        
  351  05:AC0D  81 0C             .byte sixteenth, A2
  352                             
  353  05:AC0F  A1            .byte loop
  354  05:AC10  12 AA         .word bank2_square2
  355                         
  356  05:AC12            bank2_tri:
  357                     
  358  05:AC12  81 11 16          .byte sixteenth, D3, G3, A3, D3 
       05:AC15  18 11     
  359  05:AC17  82 1D             .byte eighth, D4
  360  05:AC19  81 11             .byte sixteenth, D3
  361  05:AC1B  88 1B             .byte d_quarter, C4
  362  05:AC1D  81 16 18          .byte sixteenth, G3, A3, C4
       05:AC20  1B        
  363  05:AC21  11 16 18          .byte D3, G3, A3, D3 
       05:AC24  11        
  364  05:AC25  82 1D             .byte eighth, D4
  365  05:AC27  81 11             .byte sixteenth, D3
  366  05:AC29  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       05:AC2C  16 17     
  367  05:AC2E  81 18             .byte sixteenth, A3
  368  05:AC30  11 16 18          .byte D3, G3, A3, D3 
       05:AC33  11        
  369  05:AC34  82 1D             .byte eighth, D4
  370  05:AC36  81 11             .byte sixteenth, D3
  371  05:AC38  88 1B             .byte d_quarter, C4
  372  05:AC3A  81 16 18          .byte sixteenth, G3, A3, C4
       05:AC3D  1B        
  373  05:AC3E  11 16 18          .byte D3, G3, A3, D3 
       05:AC41  11        
  374  05:AC42  82 1D             .byte eighth, D4
  375  05:AC44  81 11             .byte sixteenth, D3
  376  05:AC46  82 1B             .byte eighth, C4
  377  05:AC48  81 15 16          .byte sixteenth, Fs3, G3, Gs3, A3, Gs3, G3, Fs3
       05:AC4B  17 18 17  
       05:AC4E  16 15     
  378                             
  379  05:AC50  11 16 18          .byte D3, G3, A3, D3 
       05:AC53  11        
  380  05:AC54  82 1D             .byte eighth, D4
  381  05:AC56  81 11             .byte sixteenth, D3
  382  05:AC58  88 1B             .byte d_quarter, C4
  383  05:AC5A  81 16 18          .byte sixteenth, G3, A3, C4
       05:AC5D  1B        
  384  05:AC5E  11 16 18          .byte D3, G3, A3, D3 
       05:AC61  11        
  385  05:AC62  82 1D             .byte eighth, D4
  386  05:AC64  81 11             .byte sixteenth, D3
  387  05:AC66  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       05:AC69  16 17     
  388  05:AC6B  81 18             .byte sixteenth, A3
  389  05:AC6D  11 16 18          .byte D3, G3, A3, D3 
       05:AC70  11        
  390  05:AC71  82 1D             .byte eighth, D4
  391  05:AC73  81 11             .byte sixteenth, D3
  392  05:AC75  88 1B             .byte d_quarter, C4
  393  05:AC77  81 16 18          .byte sixteenth, G3, A3, C4
       05:AC7A  1B        
  394  05:AC7B  11 16 18          .byte D3, G3, A3, D3 
       05:AC7E  11        
  395  05:AC7F  82 1D             .byte eighth, D4
  396  05:AC81  81 11             .byte sixteenth, D3
  397  05:AC83  82 1B             .byte eighth, C4
  398  05:AC85  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:AC88  18 16 18  
       05:AC8B  1D 21     
  399                             
  400  05:AC8D  16 1B 1D          .byte G3, C4, D4, G3 
       05:AC90  16        
  401  05:AC91  82 22             .byte eighth, G4
  402  05:AC93  81 16             .byte sixteenth, G3
  403  05:AC95  88 20             .byte d_quarter, F4
  404  05:AC97  81 1B 1D          .byte sixteenth, C4, D4, F4
       05:AC9A  20        
  405  05:AC9B  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       05:AC9E  1D 16     
  406  05:ACA0  82 22             .byte eighth, G4
  407  05:ACA2  81 16             .byte sixteenth, G3
  408  05:ACA4  88 20             .byte d_quarter, F4
  409  05:ACA6  81 20 1F          .byte sixteenth, F4, E4, D4
       05:ACA9  1D        
  410  05:ACAA  16 1B 1D          .byte G3, C4, D4, G3 
       05:ACAD  16        
  411  05:ACAE  82 22             .byte eighth, G4
  412  05:ACB0  81 16             .byte sixteenth, G3
  413  05:ACB2  88 20             .byte d_quarter, F4
  414  05:ACB4  81 1B 1D          .byte sixteenth, C4, D4, F4
       05:ACB7  20        
  415  05:ACB8  81 16 1B          .byte sixteenth, G3, C4, D4, G3 
       05:ACBB  1D 16     
  416  05:ACBD  82 22             .byte eighth, G4
  417  05:ACBF  81 16             .byte sixteenth, G3
  418  05:ACC1  88 20             .byte d_quarter, F4
  419  05:ACC3  81 20 1F          .byte sixteenth, F4, E4, D4
       05:ACC6  1D        
  420                     
  421  05:ACC7  11 16 18          .byte D3, G3, A3, D3 
       05:ACCA  11        
  422  05:ACCB  82 1D             .byte eighth, D4
  423  05:ACCD  81 11             .byte sixteenth, D3
  424  05:ACCF  88 1B             .byte d_quarter, C4
  425  05:ACD1  81 16 18          .byte sixteenth, G3, A3, C4
       05:ACD4  1B        
  426  05:ACD5  11 16 18          .byte D3, G3, A3, D3 
       05:ACD8  11        
  427  05:ACD9  82 1D             .byte eighth, D4
  428  05:ACDB  81 11             .byte sixteenth, D3
  429  05:ACDD  82 1B 15          .byte eighth, C4, Fs3, G3, Gs3
       05:ACE0  16 17     
  430  05:ACE2  81 18             .byte sixteenth, A3
  431  05:ACE4  11 16 18          .byte D3, G3, A3, D3 
       05:ACE7  11        
  432  05:ACE8  82 1D             .byte eighth, D4
  433  05:ACEA  81 11             .byte sixteenth, D3
  434  05:ACEC  88 1B             .byte d_quarter, C4
  435  05:ACEE  81 16 18          .byte sixteenth, G3, A3, C4
       05:ACF1  1B        
  436  05:ACF2  11 16 18          .byte D3, G3, A3, D3 
       05:ACF5  11        
  437  05:ACF6  82 1D             .byte eighth, D4
  438  05:ACF8  81 11             .byte sixteenth, D3
  439  05:ACFA  82 1B             .byte eighth, C4
  440  05:ACFC  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:ACFF  18 16 18  
       05:AD02  1D 21     
  441                             
  442                             ;;bridge
  443                             
  444  05:AD04  81                .byte sixteenth
  445  05:AD05  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       05:AD08  22 1D 16  
       05:AD0B  18 1D 24  
  446  05:AD0E  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       05:AD11  35 33 30  
       05:AD14  2E        
  447  05:AD15  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       05:AD18  1F 18 12  
       05:AD1B  1D 18 11  
  448  05:AD1E  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       05:AD21  18 11 14  
       05:AD24  0F        
  449  05:AD25  11 16 18          .byte D3, G3, A3, D3 
       05:AD28  11        
  450  05:AD29  82 1D             .byte eighth, D4
  451  05:AD2B  81 11             .byte sixteenth, D3
  452  05:AD2D  88 1B             .byte d_quarter, C4
  453  05:AD2F  81 16 18          .byte sixteenth, G3, A3, C4
       05:AD32  1B        
  454  05:AD33  11 16 18          .byte D3, G3, A3, D3 
       05:AD36  11        
  455  05:AD37  82 1D             .byte eighth, D4
  456  05:AD39  81 11             .byte sixteenth, D3
  457  05:AD3B  82 1B             .byte eighth, C4
  458  05:AD3D  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:AD40  18 16 18  
       05:AD43  1D 21     
  459  05:AD45  27 22 1B          .byte C5, G4, C4, G4, D4, G3, A3, D4, A4
       05:AD48  22 1D 16  
       05:AD4B  18 1D 24  
  460  05:AD4E  3C 3A 39          .byte A6, G6, Fs6, D6, C6, A5, G5
       05:AD51  35 33 30  
       05:AD54  2E        
  461  05:AD55  20 1B 14          .byte F4, C4, F3, E4, A3, Ds3, D4, A3, D3
       05:AD58  1F 18 12  
       05:AD5B  1D 18 11  
  462  05:AD5E  11 1D 11          .byte D3, D4, D3, A3, D3, F3, C3
       05:AD61  18 11 14  
       05:AD64  0F        
  463  05:AD65  11 16 18          .byte D3, G3, A3, D3 
       05:AD68  11        
  464  05:AD69  82 1D             .byte eighth, D4
  465  05:AD6B  81 11             .byte sixteenth, D3
  466  05:AD6D  88 1B             .byte d_quarter, C4
  467  05:AD6F  81 16 18          .byte sixteenth, G3, A3, C4
       05:AD72  1B        
  468  05:AD73  11 16 18          .byte D3, G3, A3, D3 
       05:AD76  11        
  469  05:AD77  82 1D             .byte eighth, D4
  470  05:AD79  81 11             .byte sixteenth, D3
  471  05:AD7B  82 1B             .byte eighth, C4
  472  05:AD7D  81 15 16          .byte sixteenth, Fs3, G3, A3, G3, A3, D4, Fs4
       05:AD80  18 16 18  
       05:AD83  1D 21     
  473                             
  474                             ;; reach-around
  475  05:AD85  A2 0B             .byte volume_envelope, ve_long_decay 
  476  05:AD87  87 0F 0F          .byte d_eighth, C3, C3
  477  05:AD8A  A2 04             .byte volume_envelope, ve_tgl_2
  478  05:AD8C  82 11             .byte eighth, D3
  479  05:AD8E  A2 03             .byte volume_envelope, ve_tgl_1
  480  05:AD90  87 5E             .byte d_eighth, rest
  481  05:AD92  81 11 11          .byte sixteenth, D3, D3, D4
       05:AD95  1D        
  482  05:AD96  8D 5E             .byte five_sixteenths, rest
  483  05:AD98  81 11 11          .byte sixteenth, D3, D3, D4
       05:AD9B  1D        
  484  05:AD9C  8D 5E             .byte five_sixteenths, rest
  485  05:AD9E  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADA1  1D        
  486  05:ADA2  82 5E             .byte eighth, rest
  487                             
  488  05:ADA4  A2 0B             .byte volume_envelope, ve_long_decay 
  489  05:ADA6  87 0F 0F          .byte d_eighth, C3, C3
  490  05:ADA9  A2 04             .byte volume_envelope, ve_tgl_2
  491  05:ADAB  82 11             .byte eighth, D3
  492  05:ADAD  A2 03             .byte volume_envelope, ve_tgl_1
  493  05:ADAF  87 5E             .byte d_eighth, rest
  494  05:ADB1  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADB4  1D        
  495  05:ADB5  8D 5E             .byte five_sixteenths, rest
  496  05:ADB7  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADBA  1D        
  497  05:ADBB  8D 5E             .byte five_sixteenths, rest
  498  05:ADBD  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADC0  1D        
  499  05:ADC1  82 5E             .byte eighth, rest
  500                                     
  501  05:ADC3  A2 0B             .byte volume_envelope, ve_long_decay 
  502  05:ADC5  87 0F 0F          .byte d_eighth, C3, C3
  503  05:ADC8  A2 04             .byte volume_envelope, ve_tgl_2
  504  05:ADCA  82 11             .byte eighth, D3
  505  05:ADCC  A2 03             .byte volume_envelope, ve_tgl_1
  506  05:ADCE  87 5E             .byte d_eighth, rest
  507  05:ADD0  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADD3  1D        
  508  05:ADD4  8D 5E             .byte five_sixteenths, rest
  509  05:ADD6  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADD9  1D        
  510  05:ADDA  8D 5E             .byte five_sixteenths, rest
  511  05:ADDC  81 11 11          .byte sixteenth, D3, D3, D4
       05:ADDF  1D        
  512  05:ADE0  82 5E             .byte eighth, rest
  513                             
  514  05:ADE2  A2 0B             .byte volume_envelope, ve_long_decay 
  515  05:ADE4  87 0F 0F          .byte d_eighth, C3, C3
  516  05:ADE7  A2 04             .byte volume_envelope, ve_tgl_2
  517  05:ADE9  82 11             .byte eighth, D3
  518  05:ADEB  A2 0B             .byte volume_envelope, ve_long_decay
  519  05:ADED  88 5E             .byte d_quarter, rest
  520  05:ADEF  8C 0C             .byte five_eighths, A2
  521  05:ADF1  A2 03             .byte volume_envelope, ve_tgl_1
  522  05:ADF3  81 5E             .byte sixteenth, rest
  523  05:ADF5  82 15 16          .byte eighth, Fs3, G3, Gs3
       05:ADF8  17        
  524  05:ADF9  81 18             .byte sixteenth, A3
  525                             
  526  05:ADFB  A1            .byte loop
  527  05:ADFC  12 AC         .word bank2_tri
  528                         
  529  05:ADFE            bank2_noise:
  530  05:ADFE  81 04 04      .byte sixteenth, $04, $04, $04, $04
       05:AE01  04 04     
  531  05:AE03  A2 09             .byte volume_envelope, ve_drum_decay 
  532  05:AE05  81 04         .byte sixteenth, $04
  533  05:AE07  A2 0A             .byte volume_envelope, ve_hiHat_decay
  534  05:AE09  81 04 04      .byte sixteenth, $04, $04, $04, $04
       05:AE0C  04 04     
  535  05:AE0E  A2 09         .byte volume_envelope, ve_drum_decay 
  536  05:AE10  81 04         .byte sixteenth, $04
  537  05:AE12  A2 0A             .byte volume_envelope, ve_hiHat_decay
  538  05:AE14  81 04 04      .byte sixteenth, $04, $04
  539  05:AE17  A2 09             .byte volume_envelope, ve_drum_decay 
  540  05:AE19  81 04         .byte sixteenth, $04
  541  05:AE1B  A2 0A             .byte volume_envelope, ve_hiHat_decay
  542  05:AE1D  81 04 04          .byte sixteenth, $04, $04, $04
       05:AE20  04        
  543  05:AE21  A1            .byte loop
  544  05:AE22  FE AD         .word bank2_noise
#[2]   Banks/Bank2.asm
   41           BFFA        .org $BFFA     ;first of the three vectors starts here
   42  05:BFFA  08 D7       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   43                                        ;processor will jump to the label NMI:
   44  05:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   45                                        ;to the label RESET:
   46  05:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Common/Init.asm
   34                       .include "Routines/Common/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 B0 D2    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 B4 D2    JSR SetMapperControls
   34                       
   35  06:C040  20 F1 D2    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   Picross.asm
   35                     
   36  06:C048  20 D8 A0    jsr sound_init
   37                         
   38                     
   39                     ;;Clean up save data
   40                       
   41                       ;;go through our save times, and check for invalid time
   42                       ;;check first byte for msb flag set- if so, check to make sure all values are less/equal to 9
   43                       ;;if not, re-flip the msb
   44                       
   45                       ;get start of puzzle save data into pointer address
   46                       MACROGetLabelPointer puzzle_clear_bank0, pointer_address
                          
       06:C04B  A9 70             LDA #HIGH(puzzle_clear_bank0)
       06:C04D  A2 0A             LDX #LOW(puzzle_clear_bank0)
                                  
       06:C04F  8E 12 00          STX pointer_address
       06:C052  8D 13 00          STA pointer_address+1
                                  
   47  06:C055  A0 00       LDY #$00
   48  06:C057  A2 00       LDX #$00      ;up to 81, the total amount of puzzles
   49  06:C059            CleanUpSRAM:
   50  06:C059  B1 12       LDA [pointer_address], y
   51  06:C05B  29 80       AND #$80
   52  06:C05D  10 16       BPL .goToNext ;skip times without clear flag set- they can be whatever
   53                     
   54  06:C05F  29 0F       AND #$0F
   55                       
   56  06:C061            .loopOverTime:
   57  06:C061  C9 0A       CMP #$0A
   58  06:C063  B0 0A       BCS .sanatizeData
   59  06:C065  C8          INY
   60  06:C066  C0 04       CPY #$04
   61  06:C068  F0 0B       BEQ .goToNext
   62  06:C06A  B1 12       LDA [pointer_address], y
   63  06:C06C  4C 61 C0    JMP .loopOverTime
   64                        
   65  06:C06F            .sanatizeData:
   66                     
   67  06:C06F  A0 00       LDY #$00
   68  06:C071  A9 00       LDA #$00
   69  06:C073  91 12       STA [pointer_address], y
   70                             
   71  06:C075            .goToNext:
   72  06:C075  AD 12 00    LDA pointer_address
   73  06:C078  18          CLC
   74  06:C079  69 04       ADC #$04
   75  06:C07B  8D 12 00    STA pointer_address
   76  06:C07E  AD 13 00    LDA pointer_address+1
   77  06:C081  69 00       ADC #$00
   78  06:C083  8D 13 00    STA pointer_address+1
   79                     
   80  06:C086  A0 00       LDY #$00
   81                     
   82  06:C088  E8          INX
   83  06:C089  E0 51       CPX #81
   84  06:C08B  D0 CC       BNE CleanUpSRAM
   85                       
   86  06:C08D            ValidateContinue:
   87                             ;if we have a continue, make sure it's valid-
   88                             ; make sure bank and puzzle values are valis
   89                             ; make sure game time is valid
   90                     
   91  06:C08D  AD 00 70    LDA hasContinue
   92  06:C090  C9 01       CMP #$01
   93  06:C092  90 28       BCC .finishValidation
   94  06:C094  F0 02       BEQ .continueValidation
   95  06:C096  B0 1F       BCS .sanitizeContinue
   96                     
   97  06:C098            .continueValidation:
   98                       
   99  06:C098  AD 07 70    LDA bank_index
  100  06:C09B  C9 03       CMP #$03
  101  06:C09D  B0 18       BCS .sanitizeContinue
  102  06:C09F  AD 08 70    LDA puzzle_index
  103  06:C0A2  C9 1B       CMP #27
  104  06:C0A4  B0 11       BCS .sanitizeContinue
  105  06:C0A6  A2 00       LDX #$00
  106                     
  107  06:C0A8            .loopTime:
  108  06:C0A8  BD 03 70    LDA GameTime, x
  109  06:C0AB  C9 0A       CMP #$0A
  110  06:C0AD  B0 08       BCS .sanitizeContinue
  111  06:C0AF  E8          INX
  112  06:C0B0  E0 04       CPX #$04
  113  06:C0B2  D0 F4       BNE .loopTime
  114  06:C0B4  4C BC C0    jmp .finishValidation
  115                       
  116  06:C0B7            .sanitizeContinue:
  117                     
  118  06:C0B7  A9 00       LDA #$00
  119  06:C0B9  8D 00 70    STA hasContinue
  120                     
  121  06:C0BC            .finishValidation:
  122                       
  123                     ;;Init title
  124  06:C0BC  A9 00       LDA #TITLE_IDX
  125  06:C0BE  A2 00       LDX #$00
  126  06:C0C0  20 76 CF    JSR ChangeGameMode
  127  06:C0C3  20 35 D2    JSR InitPPUControl
  128                       
  129                     
  130                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  131                     ;;     Main Program         ;;
  132                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  133                     
  134  06:C0C6            Forever:
  135                     
  136  06:C0C6  EE 0C 00    INC sleeping
  137                     
  138  06:C0C9            .loop
  139  06:C0C9  AD 0C 00    LDA sleeping
  140  06:C0CC  D0 FB       BNE .loop
  141                     
  142  06:C0CE  EE 0A 00    INC time  
  143  06:C0D1  AD CC 00    LDA pauseState
  144  06:C0D4  D0 03       BNE .skipScaleUpdate
  145  06:C0D6  EE 0B 00    INC scaledTime
  146  06:C0D9            .skipScaleUpdate:
  147  06:C0D9  20 DF C0    JSR GameLoop
  148                     
  149                     
  150  06:C0DC  4C C6 C0    JMP Forever     ;jump back to Forever, infinite loop
  151                       
  152                     ;; dynamic jump table
  153                     
  154  06:C0DF            GameLoop:
  155                     
  156                       MACROCallDynamicJump game_mode
                          
       06:C0DF  AD 0E 00    LDA game_mode
       06:C0E2  20 47 D0    JSR Dynamic_Jump
                                  
  157                       ;; we'll pop the return address here as the table index, so 
  158                       ;; the routine we pick will return us to whatever called Game Loop
  159                       ;; when it returns
  160                     
  161  06:C0E5            GameLoopJumpTable:
  162                     
  163  06:C0E5  EB C0       .word UpdateTitle
  164  06:C0E7  46 C5       .word UpdateGame
  165  06:C0E9  3D CD       .word UpdateGameOver
  166                       
  167                     
  168                       ;;RTS is called in the subroutine
  169                     
  170                       
#[2]   Routines/Game_States/UpdateTitle.asm
  171                       .include "Routines/Game_States/UpdateTitle.asm"
    1  06:C0EB            UpdateTitle:
    2                     
    3  06:C0EB  AD 10 00    LDA NMI_locks
    4  06:C0EE  F0 01       BEQ .unlocked
    5                       
    6  06:C0F0  60          RTS
    7                       
    8  06:C0F1            .unlocked:
    9                     
   10  06:C0F1  20 F5 C0    JSR DoUpdateTitle  
   11  06:C0F4  60          RTS
   12                       
   13  06:C0F5            DoUpdateTitle:
   14                     
   15  06:C0F5  AD 0F 00    LDA mode_state
   16  06:C0F8  20 47 D0    JSR Dynamic_Jump
   17                         
   18  06:C0FB            UpdateTitleJumpTable:
   19                     
   20  06:C0FB  07 C1       .word UpdateTitleInit
   21  06:C0FD  48 C1       .word UpdateBankSelection
   22  06:C0FF  8F C1       .word UpdateScroll
   23  06:C101  B8 C1       .word UpdatePuzzleSelection
   24  06:C103  19 C2       .word UpdateScrollBack
   25  06:C105  38 C2       .word UpdateTitleExit
   26                     
   27                       
   28                     ;;title should have two steps- the bank selection and the puzzle selection
   29                     ;;top half of screen can be used as the title screen, and the bottom half will have the selectable options
   30                     ;;
   31                     ;;starting options list: BANK 0, BANK 1, BANK 2
   32                     ;;select one, then scroll over to the right, with numbers for puzzles 
   33                     
   34  06:C107            UpdateTitleInit:
   35                     
   36  06:C107  A9 00       lda #$00
   37  06:C109  8D D6 00    sta current_song
   38  06:C10C  AD D6 00    lda current_song
   39  06:C10F  20 0B A1    jsr sound_load
   40                     
   41  06:C112  20 11 D2    JSR TurnOnSprites
   42                       
   43  06:C115  AD 00 70    LDA hasContinue
   44  06:C118  F0 20       BEQ .skipContinueText
   45                       MACROAddPPUStringEntryTable #$2B, #$4D, #DRAW_HORIZONTAL, ContinueText
                           
       06:C11A  A9 01       LDA #$01
       06:C11C  8D 23 00    STA PPU_PendingWrite
       06:C11F  A9 2B       LDA #$2B
       06:C121  20 C9 D1    JSR WriteToPPUString
       06:C124  A9 4D       LDA #$4D
       06:C126  20 C9 D1    JSR WriteToPPUString
       06:C129  A9 20       LDA #$20
       06:C12B  09 00       ORA #DRAW_HORIZONTAL
       06:C12D  20 C9 D1    JSR WriteToPPUString
       06:C130  A9 3D       LDA #LOW(ContinueText)
       06:C132  20 C9 D1    JSR WriteToPPUString
       06:C135  A9 C5       LDA #HIGH(ContinueText)
       06:C137  20 C9 D1    JSR WriteToPPUString
                           
   46                       
   47  06:C13A            .skipContinueText:
   48                       
   49  06:C13A  A9 00       LDA #$00
   50  06:C13C  8D C9 00    STA mouse_index
   51  06:C13F  A9 00       LDA #$00
   52  06:C141  8D CA 00    STA mouse_index+1
   53                     
   54  06:C144            .changeModeState:
   55                     
   56  06:C144  EE 0F 00    INC mode_state
   57  06:C147            .leave:
   58  06:C147  60          RTS
   59                       
   60  06:C148            UpdateBankSelection:
   61                     
   62  06:C148  20 24 C3    JSR UpdateBankPointer
   63                       
   64  06:C14B  AD 1C 00    LDA gamepadPressed
   65  06:C14E  29 01       AND #GAMEPAD_A
   66  06:C150  F0 3C       BEQ .leave
   67                       
   68  06:C152  20 FE C4    JSR PlayMenuCursorSound
   69                       
   70  06:C155            .changeModeState:
   71                       
   72  06:C155  AD C9 00    LDA mouse_index
   73  06:C158  C9 03       CMP #$03
   74  06:C15A  D0 0F       BNE .setBank
   75                       
   76  06:C15C  EE 0F 00    INC mode_state
   77  06:C15F  EE 0F 00    INC mode_state
   78  06:C162  EE 0F 00    INC mode_state
   79                       
   80                       ;;load bank
   81  06:C165  20 E8 C3    JSR LoadBank
   82  06:C168  4C 88 C1    JMP .goToNext
   83                       
   84  06:C16B            .setBank:
   85  06:C16B  8D AB 00    STA tempBank
   86  06:C16E  A9 FF       LDA #$FF
   87  06:C170  A2 01       LDX #$01
   88  06:C172  20 06 C3    JSR SetSpriteImage
   89                       
   90  06:C175  20 B0 D2    JSR ResetMapper
   91  06:C178  AD AB 00    LDA tempBank
   92  06:C17B  20 BF D2    JSR LoadPRGBank
   93  06:C17E  20 B0 D2    JSR ResetMapper
   94  06:C181  AD AB 00    LDA tempBank
   95  06:C184  0A          ASL A
   96  06:C185  20 CA D2    JSR LoadCHRBankA
   97                     
   98  06:C188            .goToNext:
   99  06:C188  EE 0F 00    INC mode_state
  100                     
  101  06:C18B  4C 8E C1    JMP .leave
  102                     
  103                     
  104  06:C18E            .leave:
  105  06:C18E  60          RTS
  106                       
  107  06:C18F            UpdateScroll:
  108  06:C18F  EE 1F 00    INC PPU_ScrollX
  109  06:C192  EE 1F 00    INC PPU_ScrollX
  110  06:C195  EE 1F 00    INC PPU_ScrollX
  111  06:C198  EE 1F 00    INC PPU_ScrollX
  112  06:C19B  D0 1A       BNE .leave
  113  06:C19D  AD 21 00    LDA PPU_ScrollNT
  114  06:C1A0  49 01       EOR #%00000001
  115  06:C1A2  8D 21 00    STA PPU_ScrollNT
  116                       
  117  06:C1A5            .changeModeState:
  118  06:C1A5  A9 01       LDA #$01
  119  06:C1A7  A2 01       LDX #$01
  120  06:C1A9  20 06 C3    JSR SetSpriteImage
  121  06:C1AC  20 C8 C2    JSR InitPuzzlePointer
  122  06:C1AF  EE 0F 00    INC mode_state
  123  06:C1B2  A9 FF       LDA #$FF
  124  06:C1B4  8D AC 00    STA tempPuzz
  125  06:C1B7            .leave:
  126  06:C1B7  60          RTS
  127                       
  128  06:C1B8            UpdatePuzzleSelection:
  129                     
  130  06:C1B8  20 76 C3    JSR UpdatePuzzlePointer
  131                       
  132  06:C1BB  AD C9 00    LDA mouse_index
  133  06:C1BE  0A          ASL A
  134  06:C1BF  0A          ASL A
  135  06:C1C0  0A          ASL A
  136  06:C1C1  18          CLC
  137  06:C1C2  6D C9 00    ADC mouse_index
  138  06:C1C5  6D CA 00    ADC mouse_index+1
  139  06:C1C8  CD AC 00    CMP tempPuzz
  140  06:C1CB  F0 06       BEQ .checkButtonPresses       ;no change
  141  06:C1CD  8D AC 00    STA tempPuzz
  142                       
  143  06:C1D0  20 F5 C3    JSR UpdatePuzzleInfo
  144                       
  145  06:C1D3            .checkButtonPresses:
  146                     
  147  06:C1D3  AD 1C 00    LDA gamepadPressed
  148  06:C1D6  29 02       AND #GAMEPAD_B
  149  06:C1D8  D0 10       BNE .changeToScrollBack
  150  06:C1DA  AD 1C 00    LDA gamepadPressed
  151  06:C1DD  29 09       AND #GAMEPAD_CONFIRM
  152  06:C1DF  F0 37       BEQ .leave
  153                       
  154  06:C1E1  EE 0F 00    INC mode_state
  155  06:C1E4  EE 0F 00    INC mode_state
  156  06:C1E7  4C 18 C2    JMP .leave
  157                       
  158  06:C1EA            .changeToScrollBack:
  159                      
  160  06:C1EA  A9 FF       LDA #$FF
  161  06:C1EC  A2 01       LDX #$01
  162  06:C1EE  20 06 C3    JSR SetSpriteImage
  163  06:C1F1  20 19 C5    JSR SetPuzzleDisplaySprite
  164  06:C1F4  20 C0 C2    JSR InitBankPointer
  165  06:C1F7  AD AB 00    LDA tempBank
  166  06:C1FA  8D C9 00    STA mouse_index
  167  06:C1FD  20 66 C3    JSR SetBankPointerFromIndex
  168                       
  169  06:C200  A9 00       LDA #$00
  170  06:C202  8D 20 00    STA PPU_ScrollY
  171  06:C205  A9 FC       LDA #$FC
  172  06:C207  8D 1F 00    STA PPU_ScrollX
  173  06:C20A  AD 21 00    LDA PPU_ScrollNT
  174  06:C20D  29 FE       AND #$FE
  175  06:C20F  8D 21 00    STA PPU_ScrollNT
  176                       
  177  06:C212  EE 0F 00    INC mode_state
  178                       
  179  06:C215  20 FE C4    JSR PlayMenuCursorSound
  180  06:C218            .leave:
  181  06:C218  60          RTS
  182                       
  183  06:C219            UpdateScrollBack:
  184                     
  185  06:C219  CE 1F 00    DEC PPU_ScrollX
  186  06:C21C  CE 1F 00    DEC PPU_ScrollX
  187  06:C21F  CE 1F 00    DEC PPU_ScrollX
  188  06:C222  CE 1F 00    DEC PPU_ScrollX
  189  06:C225  D0 10       BNE .leave
  190                       
  191  06:C227            .changeModeState:
  192                     
  193  06:C227  A9 01       LDA #$01
  194  06:C229  A2 01       LDX #$01
  195  06:C22B  20 06 C3    JSR SetSpriteImage
  196  06:C22E  CE 0F 00    DEC mode_state
  197  06:C231  CE 0F 00    DEC mode_state
  198  06:C234  CE 0F 00    DEC mode_state
  199                       
  200  06:C237            .leave:
  201  06:C237  60          RTS
  202                       
  203  06:C238            UpdateTitleExit:
  204                       
  205  06:C238  A9 FF       LDA #$FF
  206  06:C23A  20 19 C5    JSR SetPuzzleDisplaySprite
  207                       
  208  06:C23D  A9 00       lda #$00
  209  06:C23F  8D D6 00    sta current_song
  210  06:C242  AD D6 00    lda current_song
  211  06:C245  20 0B A1    jsr sound_load
  212                       
  213                       ;;reset screen scroll
  214  06:C248  A9 00       LDA #$00
  215  06:C24A  8D 1F 00    STA PPU_ScrollX
  216  06:C24D  8D 21 00    STA PPU_ScrollNT
  217                       
  218  06:C250  A9 20       LDA #%00100000
  219  06:C252  8D 00 00    STA temp1
  220                       
  221  06:C255  AD C9 00    LDA mouse_index
  222  06:C258  C9 03       CMP #$03
  223  06:C25A  D0 06       BNE .loadPuzzle
  224                       
  225  06:C25C  0E 00 00    ASL temp1
  226  06:C25F  4C 76 C2    JMP .setupPuzzle
  227                         
  228  06:C262            .loadPuzzle:
  229                       ;; we can also pick out the puzzle index
  230                       ;; we have the mouse indexes - one vert, one hori
  231                       ;; take vert, mult by 9- alternatively, mult by 8, add index 
  232                       ;; IE - ind = 1, mult 8 = 8, add 1 = 9
  233                       ;; add X index
  234  06:C262  AD AB 00    LDA tempBank
  235  06:C265  8D 07 70    STA bank_index
  236  06:C268  20 E8 C3    JSR LoadBank
  237                       
  238  06:C26B  AD AC 00    LDA tempPuzz
  239  06:C26E  8D 08 70    STA puzzle_index
  240  06:C271  A9 00       LDA #$00
  241  06:C273  8D 00 70    STA hasContinue
  242                     
  243                     
  244  06:C276            .setupPuzzle:
  245                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C276  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C278  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C27A  8E 16 00          STX table_address
       06:C27D  8D 17 00          STA table_address+1
                                  
  246                       MACROGetDoubleIndex puzzle_index
                          
       06:C280  AD 08 70          LDA puzzle_index
       06:C283  0A                ASL A
       06:C284  A8                TAY
                                  
  247  06:C285  20 6D D0    JSR GetTableAtIndex
  248                       MACROGetPointer table_address, puzzle_address
                          
       06:C288  AD 16 00          LDA table_address
       06:C28B  8D AD 00          STA puzzle_address
       06:C28E  AD 17 00          LDA table_address+1
       06:C291  8D AE 00          STA puzzle_address+1
                          
  249                       
  250                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:C294  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:C296  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:C298  8E 16 00          STX table_address
       06:C29B  8D 17 00          STA table_address+1
                                  
  251                       MACROGetDoubleIndex puzzle_index
                          
       06:C29E  AD 08 70          LDA puzzle_index
       06:C2A1  0A                ASL A
       06:C2A2  A8                TAY
                                  
  252  06:C2A3  20 6D D0    JSR GetTableAtIndex
  253                       MACROGetPointer table_address, title_address
                          
       06:C2A6  AD 16 00          LDA table_address
       06:C2A9  8D B1 00          STA title_address
       06:C2AC  AD 17 00          LDA table_address+1
       06:C2AF  8D B2 00          STA title_address+1
                          
  254                     
  255  06:C2B2  A0 00       LDY #$00
  256  06:C2B4  B1 AD       LDA [puzzle_address], y
  257  06:C2B6  0D 00 00    ORA temp1
  258                       
  259  06:C2B9  AA          TAX
  260                       
  261                     
  262  06:C2BA  A9 01       LDA #GAME_IDX
  263  06:C2BC  20 76 CF    JSR ChangeGameMode
  264                       
  265  06:C2BF            .leave
  266  06:C2BF  60          RTS
  267                       
  268  06:C2C0            InitBankPointer:
  269                     
  270  06:C2C0  A2 A0       LDX #$A0
  271  06:C2C2  A9 60       LDA #$60
  272  06:C2C4  20 DB C2    JSR InitPointer
  273                       
  274  06:C2C7  60          RTS  
  275                       
  276  06:C2C8            InitPuzzlePointer:
  277                       
  278  06:C2C8  A2 AE       LDX #$AE
  279  06:C2CA  A9 10       LDA #$10
  280  06:C2CC  20 DB C2    JSR InitPointer
  281                       
  282  06:C2CF  60          RTS
  283                     
  284  06:C2D0            ResetMouseIndex:
  285                     
  286  06:C2D0  A9 00       LDA #$00
  287  06:C2D2  8D C9 00    STA mouse_index
  288  06:C2D5  A9 00       LDA #$00
  289  06:C2D7  8D CA 00    STA mouse_index+1
  290  06:C2DA  60          RTS
  291                     
  292  06:C2DB            InitPointer:
  293                     
  294  06:C2DB  20 E2 C2    JSR SetPointerPosition
  295  06:C2DE  20 D0 C2    JSR ResetMouseIndex
  296  06:C2E1  60          RTS  
  297                       
  298  06:C2E2            SetPointerPosition:
  299                     
  300  06:C2E2  48          PHA
  301  06:C2E3  8A          TXA
  302  06:C2E4  A2 01       LDX #$01
  303  06:C2E6  20 F0 C2    JSR SetSpriteYPosition
  304  06:C2E9  68          PLA
  305  06:C2EA  A2 01       LDX #$01
  306  06:C2EC  20 FB C2    JSR SetSpriteXPosition
  307                      
  308  06:C2EF  60          RTS
  309                       
  310  06:C2F0            SetSpriteYPosition:
  311                       
  312  06:C2F0  48          PHA
  313  06:C2F1  A9 00       LDA #SPRITE_YPOS
  314  06:C2F3  20 11 C3    JSR GetSpriteDataIndexInX
  315  06:C2F6  68          PLA
  316  06:C2F7  9D 00 02    STA SPRITE_DATA, x
  317  06:C2FA  60          RTS
  318                       
  319  06:C2FB            SetSpriteXPosition:  
  320                       
  321  06:C2FB  48          PHA
  322  06:C2FC  A9 03       LDA #SPRITE_XPOS
  323  06:C2FE  20 11 C3    JSR GetSpriteDataIndexInX
  324  06:C301  68          PLA
  325  06:C302  9D 00 02    STA SPRITE_DATA, x 
  326  06:C305  60          RTS
  327                     
  328  06:C306            SetSpriteImage:
  329                     
  330                     ;; A has sprite image index we want
  331                     ;; X has the sprite index
  332  06:C306  48          PHA
  333  06:C307  A9 01       LDA #SPRITE_ID
  334  06:C309  20 11 C3    JSR GetSpriteDataIndexInX
  335  06:C30C  68          PLA
  336  06:C30D  9D 00 02    STA SPRITE_DATA, x
  337  06:C310  60          RTS
  338                       
  339  06:C311            GetSpriteDataIndexInX:
  340                     
  341                       ;; A has data index we want to get
  342                       ;; X has sprite index
  343  06:C311  8D 02 00    STA temp3
  344  06:C314  8A          TXA
  345  06:C315  0A          ASL A
  346  06:C316  0A          ASL A
  347  06:C317  18          CLC
  348  06:C318  6D 02 00    ADC temp3
  349  06:C31B  AA          TAX
  350                       
  351  06:C31C  60          RTS  
  352  06:C31D            GetSpriteData:
  353                     
  354                       ;;A is data we want
  355                       ;;X is Sprite
  356  06:C31D  20 11 C3    JSR GetSpriteDataIndexInX
  357  06:C320  BD 00 02    LDA SPRITE_DATA, x
  358  06:C323  60          RTS
  359                       
  360  06:C324            UpdateBankPointer:
  361                      
  362                       ;;bank pointer is 1D, will loop between 0->3
  363  06:C324  AD 1C 00    LDA gamepadPressed
  364  06:C327  D0 01       BNE .continue
  365  06:C329            .leaveEarly:
  366  06:C329  60          RTS
  367                       
  368  06:C32A            .continue:
  369  06:C32A  A9 00       LDA #$00
  370  06:C32C  8D 00 00    STA temp1
  371                       
  372  06:C32F  A9 02       LDA #$02
  373  06:C331  8D 01 00    STA temp2
  374                       
  375  06:C334  AD 00 70    LDA hasContinue
  376  06:C337  F0 05       BEQ .parseInputs
  377  06:C339  A9 03       LDA #$03
  378  06:C33B  8D 01 00    STA temp2
  379                       
  380  06:C33E            .parseInputs:
  381  06:C33E  AD 1C 00    LDA gamepadPressed
  382  06:C341  29 30       AND #GAMEPAD_VERT
  383  06:C343  F0 E4       BEQ .leaveEarly
  384  06:C345  0A          ASL A
  385  06:C346  0A          ASL A
  386  06:C347            .checkDown:
  387  06:C347  0A          ASL A
  388  06:C348  90 03       BCC .checkUp
  389  06:C34A  EE 00 00    INC temp1
  390  06:C34D            .checkUp:
  391  06:C34D  0A          ASL A
  392  06:C34E  90 03       BCC .move
  393  06:C350  CE 00 00    DEC temp1
  394  06:C353            .move:
  395                       
  396  06:C353  AD C9 00    LDA mouse_index
  397  06:C356  18          CLC
  398  06:C357  6D 00 00    ADC temp1
  399  06:C35A  CD 01 00    CMP temp2
  400  06:C35D  F0 04       BEQ .skipMod
  401  06:C35F  90 02       BCC .skipMod
  402  06:C361  A9 00       LDA #$00
  403  06:C363            .skipMod:
  404  06:C363  8D C9 00    STA mouse_index
  405                       ;; mult mouse_index by 16
  406  06:C366            SetBankPointerFromIndex:
  407                     
  408  06:C366  0A          ASL A
  409  06:C367  0A          ASL A
  410  06:C368  0A          ASL A
  411  06:C369  0A          ASL A
  412  06:C36A  18          CLC
  413  06:C36B  69 A0       ADC #$A0
  414  06:C36D  A2 01       LDX #$01
  415  06:C36F  20 F0 C2    JSR SetSpriteYPosition
  416                       
  417  06:C372  20 FE C4    JSR PlayMenuCursorSound
  418                     
  419  06:C375            .leave:
  420                       
  421  06:C375  60          RTS
  422                       
  423  06:C376            UpdatePuzzlePointer:
  424                     
  425                       ;;puzzle pointer is 2D, will loop between 0-9 and 0-2
  426  06:C376  AD 1C 00    LDA gamepadPressed
  427  06:C379  F0 6C       BEQ .leave 
  428                       
  429  06:C37B  A9 00       LDA #$00
  430  06:C37D  8D 00 00    STA temp1
  431  06:C380  8D 01 00    STA temp2
  432                       
  433  06:C383            .parseInputs:
  434  06:C383  AD 1C 00    LDA gamepadPressed
  435  06:C386  29 F0       AND #GAMEPAD_MOVE
  436  06:C388  F0 5D       BEQ .leave
  437  06:C38A  0A          ASL A
  438  06:C38B  90 03       BCC .checkLeft
  439  06:C38D  EE 00 00    INC temp1
  440  06:C390            .checkLeft:
  441  06:C390  0A          ASL A
  442  06:C391  90 03       BCC .checkDown
  443  06:C393  CE 00 00    DEC temp1
  444  06:C396            .checkDown:
  445  06:C396  0A          ASL A
  446  06:C397  90 03       BCC .checkUp
  447  06:C399  EE 01 00    INC temp2
  448  06:C39C            .checkUp:
  449  06:C39C  0A          ASL A
  450  06:C39D  90 03       BCC .move
  451  06:C39F  CE 01 00    DEC temp2
  452                       
  453  06:C3A2            .move:
  454                     
  455  06:C3A2  AD C9 00    LDA mouse_index
  456  06:C3A5  18          CLC
  457  06:C3A6  6D 01 00    ADC temp2
  458  06:C3A9  C9 02       CMP #$02
  459  06:C3AB  F0 04       BEQ .skipYMod
  460  06:C3AD  90 02       BCC .skipYMod
  461  06:C3AF  A9 00       LDA #$00
  462  06:C3B1            .skipYMod:
  463  06:C3B1  8D C9 00    STA mouse_index
  464                       ;; mult mouse_index by 16
  465  06:C3B4  0A          ASL A
  466  06:C3B5  0A          ASL A
  467  06:C3B6  0A          ASL A
  468  06:C3B7  0A          ASL A
  469  06:C3B8  18          CLC
  470  06:C3B9  69 AE       ADC #$AE
  471  06:C3BB  A2 01       LDX #$01
  472  06:C3BD  20 F0 C2    JSR SetSpriteYPosition
  473                       
  474  06:C3C0  AD CA 00    LDA mouse_index+1
  475  06:C3C3  18          CLC
  476  06:C3C4  6D 00 00    ADC temp1
  477  06:C3C7  C9 08       CMP #$08
  478  06:C3C9  F0 04       BEQ .skipXMod
  479  06:C3CB  90 02       BCC .skipXMod
  480  06:C3CD  A9 00       LDA #$00
  481  06:C3CF            .skipXMod:
  482  06:C3CF  8D CA 00    STA mouse_index+1
  483                       ;; we need to move 3 tiles each- so index * 3 * 8,
  484  06:C3D2  18          CLC
  485  06:C3D3  6D CA 00    ADC mouse_index+1
  486  06:C3D6  6D CA 00    ADC mouse_index+1
  487  06:C3D9  0A          ASL A
  488  06:C3DA  0A          ASL A
  489  06:C3DB  0A          ASL A
  490  06:C3DC  18          CLC
  491  06:C3DD  69 10       ADC #$10
  492  06:C3DF  A2 01       LDX #$01
  493  06:C3E1  20 FB C2    JSR SetSpriteXPosition
  494  06:C3E4  20 FE C4    JSR PlayMenuCursorSound
  495                       
  496  06:C3E7            .leave:
  497                       
  498  06:C3E7  60          RTS
  499                     
  500  06:C3E8            LoadBank:
  501                     
  502                       ;;load bank
  503  06:C3E8  20 B0 D2    JSR ResetMapper
  504  06:C3EB  AD 07 70    LDA bank_index
  505  06:C3EE  8D A9 00    STA currentPRGBank
  506  06:C3F1  20 BF D2    JSR LoadPRGBank
  507  06:C3F4  60          RTS
  508                       
  509  06:C3F5            UpdatePuzzleInfo:
  510                     
  511                     
  512                       MACROGetLabelPointer PuzzleSaveLocations, table_address
                          
       06:C3F5  A9 CD             LDA #HIGH(PuzzleSaveLocations)
       06:C3F7  A2 37             LDX #LOW(PuzzleSaveLocations)
                                  
       06:C3F9  8E 16 00          STX table_address
       06:C3FC  8D 17 00          STA table_address+1
                                  
  513  06:C3FF  AD AB 00    LDA tempBank
  514  06:C402  0A          ASL A
  515  06:C403  A8          TAY
  516  06:C404  20 6D D0    JSR GetTableAtIndex
  517                       
  518                       ;;load title/time
  519                       ;;time first, we haven't done titles
  520  06:C407  A2 00       LDX #$00
  521  06:C409  BD 20 FD    LDA SelectDefaultTime,x
  522  06:C40C  8D 01 00    STA temp2
  523  06:C40F  E8          INX
  524  06:C410  BD 20 FD    LDA SelectDefaultTime,x
  525  06:C413  8D 00 00    STA temp1
  526                       
  527  06:C416  AD AC 00    LDA tempPuzz
  528  06:C419  0A          ASL A
  529  06:C41A  0A          ASL A
  530  06:C41B  A8          TAY
  531  06:C41C  B1 16       LDA [table_address], y
  532  06:C41E  10 43       BPL .loadDefaultTime
  533                       
  534                       ;;time exists!
  535  06:C420  29 0F       AND #$0F
  536  06:C422  8D 02 00    STA temp3
  537  06:C425  C8          INY
  538  06:C426  C8          INY
  539  06:C427  C8          INY
  540                       MACROAddPPUStringEntryRawData temp1, temp2, #DRAW_HORIZONTAL, #$05
                          
       06:C428  A9 01       LDA #$01
       06:C42A  8D 23 00    STA PPU_PendingWrite
       06:C42D  AD 00 00    LDA temp1
       06:C430  20 C9 D1    JSR WriteToPPUString
       06:C433  AD 01 00    LDA temp2
       06:C436  20 C9 D1    JSR WriteToPPUString
       06:C439  A9 00       LDA #DRAW_HORIZONTAL
       06:C43B  20 C9 D1    JSR WriteToPPUString
       06:C43E  A9 05       LDA #$05 
       06:C440  20 C9 D1    JSR WriteToPPUString
                            
  541  06:C443  B1 16       LDA [table_address], y
  542  06:C445  20 C9 D1    JSR WriteToPPUString
  543  06:C448  88          DEY
  544  06:C449  B1 16       LDA [table_address], y
  545  06:C44B  20 C9 D1    JSR WriteToPPUString
  546  06:C44E  A9 61       LDA #$61
  547  06:C450  20 C9 D1    JSR WriteToPPUString
  548  06:C453  88          DEY
  549  06:C454  B1 16       LDA [table_address], y
  550  06:C456  20 C9 D1    JSR WriteToPPUString
  551  06:C459  88          DEY
  552  06:C45A  AD 02 00    LDA temp3
  553  06:C45D  20 C9 D1    JSR WriteToPPUString  
  554  06:C460  4C AA C4    JMP .drawTitle
  555                     
  556  06:C463            .loadDefaultTime:
  557                       
  558                       MACROAddPPUStringEntryRepeat #$26, #$47, #DRAW_HORIZONTAL, #$10, #$63
                          
       06:C463  A9 01       LDA #$01
       06:C465  8D 23 00    STA PPU_PendingWrite
       06:C468  A9 26       LDA #$26
       06:C46A  20 C9 D1    JSR WriteToPPUString
       06:C46D  A9 47       LDA #$47
       06:C46F  20 C9 D1    JSR WriteToPPUString
       06:C472  A9 40       LDA #$40
       06:C474  09 00       ORA #DRAW_HORIZONTAL
       06:C476  09 10       ORA #$10
       06:C478  20 C9 D1    JSR WriteToPPUString
       06:C47B  A9 63       LDA #$63
       06:C47D  20 C9 D1    JSR WriteToPPUString
                            
  559                       MACROAddPPUStringEntryTable temp1, temp2, #DRAW_HORIZONTAL, DefaultTimeString
                           
       06:C480  A9 01       LDA #$01
       06:C482  8D 23 00    STA PPU_PendingWrite
       06:C485  AD 00 00    LDA temp1
       06:C488  20 C9 D1    JSR WriteToPPUString
       06:C48B  AD 01 00    LDA temp2
       06:C48E  20 C9 D1    JSR WriteToPPUString
       06:C491  A9 20       LDA #$20
       06:C493  09 00       ORA #DRAW_HORIZONTAL
       06:C495  20 C9 D1    JSR WriteToPPUString
       06:C498  A9 22       LDA #LOW(DefaultTimeString)
       06:C49A  20 C9 D1    JSR WriteToPPUString
       06:C49D  A9 FD       LDA #HIGH(DefaultTimeString)
       06:C49F  20 C9 D1    JSR WriteToPPUString
                           
  560                       ;;also set the display sprite to all FF
  561  06:C4A2  A9 FF       LDA #$FF
  562  06:C4A4  20 19 C5    JSR SetPuzzleDisplaySprite
  563  06:C4A7  4C FD C4    JMP .leave
  564                     
  565  06:C4AA            .drawTitle:
  566                       MACROAddPPUStringEntryRepeat #$26, #$47, #DRAW_HORIZONTAL, #$10, #$24
                          
       06:C4AA  A9 01       LDA #$01
       06:C4AC  8D 23 00    STA PPU_PendingWrite
       06:C4AF  A9 26       LDA #$26
       06:C4B1  20 C9 D1    JSR WriteToPPUString
       06:C4B4  A9 47       LDA #$47
       06:C4B6  20 C9 D1    JSR WriteToPPUString
       06:C4B9  A9 40       LDA #$40
       06:C4BB  09 00       ORA #DRAW_HORIZONTAL
       06:C4BD  09 10       ORA #$10
       06:C4BF  20 C9 D1    JSR WriteToPPUString
       06:C4C2  A9 24       LDA #$24
       06:C4C4  20 C9 D1    JSR WriteToPPUString
                            
  567                       
  568                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:C4C7  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:C4C9  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:C4CB  8E 16 00          STX table_address
       06:C4CE  8D 17 00          STA table_address+1
                                  
  569                       MACROGetDoubleIndex tempPuzz
                          
       06:C4D1  AD AC 00          LDA tempPuzz
       06:C4D4  0A                ASL A
       06:C4D5  A8                TAY
                                  
  570  06:C4D6  20 6D D0    JSR GetTableAtIndex
  571                       MACROGetPointer table_address, title_address
                          
       06:C4D9  AD 16 00          LDA table_address
       06:C4DC  8D B1 00          STA title_address
       06:C4DF  AD 17 00          LDA table_address+1
       06:C4E2  8D B2 00          STA title_address+1
                          
  572                     
  573                       ;draw title at 264F
  574  06:C4E5  A9 4F       LDA #$4F 
  575  06:C4E7  8D B9 00    STA title_draw_address
  576  06:C4EA  A9 26       LDA #$26
  577  06:C4EC  8D BA 00    STA title_draw_address+1
  578                       
  579  06:C4EF  20 5D D6    JSR DrawTitle
  580                     
  581  06:C4F2  AD AC 00    LDA tempPuzz
  582  06:C4F5  0A          ASL A
  583  06:C4F6  0A          ASL A
  584  06:C4F7  18          CLC 
  585  06:C4F8  69 10       ADC #$10
  586  06:C4FA  20 19 C5    JSR SetPuzzleDisplaySprite
  587                      
  588  06:C4FD            .leave:
  589  06:C4FD  60          RTS
  590                     
  591  06:C4FE            PlayMenuCursorSound:
  592                         
  593  06:C4FE  A9 05       LDA #$05
  594  06:C500  8D D6 00    STA current_song
  595  06:C503  20 0B A1    JSR sound_load
  596  06:C506  60          RTS 
  597                     
  598  06:C507            PlayPuzzleCursorSound:
  599  06:C507  A9 06       LDA #$06
  600  06:C509  8D D6 00    STA current_song
  601  06:C50C  20 0B A1    JSR sound_load
  602  06:C50F  60          RTS 
  603                       
  604  06:C510            PlayNoiseBlipSound:
  605                      
  606  06:C510  A9 07       LDA #$07
  607  06:C512  8D D6 00    STA current_song
  608  06:C515  20 0B A1    JSR sound_load
  609  06:C518  60          RTS 
  610                       
  611  06:C519            SetPuzzleDisplaySprite:
  612                     
  613                       ;;A has starting sprite index, will never go over FF
  614  06:C519  A2 02       LDX #$02
  615  06:C51B  48          PHA
  616  06:C51C  A9 01       LDA #SPRITE_ID
  617  06:C51E  20 11 C3    JSR GetSpriteDataIndexInX
  618  06:C521  68          PLA
  619  06:C522  9D 00 02    STA SPRITE_DATA, x 
  620  06:C525  A0 01       LDY #$01
  621                             
  622  06:C527            .loop:
  623  06:C527  C0 04       CPY #$04
  624  06:C529  F0 11       BEQ .leave
  625  06:C52B  C9 FF       CMP #$FF
  626  06:C52D  F0 03       BEQ .skipSpriteInc
  627  06:C52F  18          CLC
  628  06:C530  69 01       ADC #1
  629  06:C532            .skipSpriteInc:
  630                       ;;increment to the next sprite data, by adding 4 to x
  631  06:C532  E8          INX
  632  06:C533  E8          INX
  633  06:C534  E8          INX
  634  06:C535  E8          INX
  635  06:C536  9D 00 02    STA SPRITE_DATA, x
  636  06:C539  C8          INY
  637  06:C53A  D0 EB       BNE .loop     ;;should never get to 0 again
  638                       
  639  06:C53C            .leave:
  640  06:C53C  60          RTS
  641                     
  642  06:C53D            ContinueText:
  643                     
  644  06:C53D  08 0C 18    .db $08, $0C, $18, $17, $1D, $12, $17, $1E, $0E
       06:C540  17 1D 12  
       06:C543  17 1E 0E  
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGame.asm
  172                       .include "Routines/Game_States/UpdateGame.asm"
    1                     ;;VERT_CLUES = $206E
    2                     ;;HORI_CLUES = $2145
    3                     
    4           214E      VERT_CLUES = $214E
    5           218C      HORI_CLUES = $218C
    6           20A8      BANK_LEVEL = $20A8
    7           20E5      TIMER_LOC = $20E5
    8                     
    9           618E      MOUSE_START = $618E
   10                     
   11           0010      HOLD_TIME = $10
   12           0004      HOLD_FREQ = $04
   13                     
   14  06:C546            UpdateGame:
   15                     
   16  06:C546  AD 10 00    LDA NMI_locks
   17  06:C549  F0 01       BEQ .unlocked
   18                       
   19  06:C54B  60          RTS
   20                       
   21  06:C54C            .unlocked:
   22                     
   23  06:C54C  20 50 C5    JSR DoUpdateGame
   24  06:C54F  60          RTS
   25                       
   26  06:C550            DoUpdateGame:
   27                     
   28  06:C550  AD 0F 00    LDA mode_state
   29  06:C553  20 47 D0    JSR Dynamic_Jump
   30                       
   31  06:C556            UpdateGameJumpTable:
   32                     
   33  06:C556  6A C5       .word UpdateGameInit
   34  06:C558  2D C6       .word UpdateDrawVertClues
   35  06:C55A  5A C6       .word UpdateDrawHoriClues
   36  06:C55C  B4 C6       .word UpdateGamePlay
   37  06:C55E  94 C8       .word UpdateClearPuzzle
   38  06:C560  A7 C8       .word UpdateMoveScreen
   39  06:C562  20 C9       .word UpdateDrawImage
   40  06:C564  82 C9       .word UpdateWaitInput
   41  06:C566  98 C9       .word UpdateGameFadeOut
   42  06:C568  BE C9       .word UpdateGameExit
   43                     
   44  06:C56A            UpdateGameInit:
   45                     
   46                       ;;start bank song
   47                       
   48  06:C56A  A9 01       lda #$01
   49  06:C56C  8D D6 00    sta current_song
   50  06:C56F  AD D6 00    lda current_song
   51  06:C572  20 0B A1    jsr sound_load
   52                       
   53                       ;; get the puzzle table in the puzzle address
   54                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C575  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C577  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C579  8E 16 00          STX table_address
       06:C57C  8D 17 00          STA table_address+1
                                  
   55                       MACROGetDoubleIndex puzzle_index
                          
       06:C57F  AD 08 70          LDA puzzle_index
       06:C582  0A                ASL A
       06:C583  A8                TAY
                                  
   56  06:C584  20 6D D0    JSR GetTableAtIndex
   57                       MACROGetPointer table_address, puzzle_address
                          
       06:C587  AD 16 00          LDA table_address
       06:C58A  8D AD 00          STA puzzle_address
       06:C58D  AD 17 00          LDA table_address+1
       06:C590  8D AE 00          STA puzzle_address+1
                          
   58                       MACROGetLabelPointer MOUSE_START, mouse_location
                          
       06:C593  A9 61             LDA #HIGH(MOUSE_START)
       06:C595  A2 8E             LDX #LOW(MOUSE_START)
                                  
       06:C597  8E C7 00          STX mouse_location
       06:C59A  8D C8 00          STA mouse_location+1
                                  
   59                     
   60                       ;;for clues, we need to get past the header- for a 15x15 puzzle, that's 34 bytes ahead
   61  06:C59D  A0 00       LDY #$00
   62  06:C59F  B1 AD       LDA [puzzle_address], y
   63  06:C5A1  AA          TAX
   64  06:C5A2  BD 34 CD    LDA PuzzleHeaderSkips, x
   65  06:C5A5  8D 00 00    STA temp1
   66                       
   67  06:C5A8  AD AD 00    LDA puzzle_address
   68  06:C5AB  18          CLC
   69  06:C5AC  6D 00 00    ADC temp1
   70  06:C5AF  8D AF 00    STA clues_address
   71  06:C5B2  A9 00       LDA #$00
   72  06:C5B4  6D AE 00    ADC puzzle_address+1
   73  06:C5B7  8D B0 00    STA clues_address+1
   74                     
   75  06:C5BA  A9 00       LDA #$00
   76  06:C5BC  8D BF 00    STA clueTableIndex
   77  06:C5BF  8D C0 00    STA clueLineIndex
   78  06:C5C2  8D C6 00    STA clueParity
   79  06:C5C5  8D C1 00    STA clueOffsetShift
   80  06:C5C8  8D C9 00    STA mouse_index
   81  06:C5CB  8D CA 00    STA mouse_index+1
   82                       
   83  06:C5CE  A9 01       LDA #$01
   84  06:C5D0  8D CD 00    STA pauseInputLock 
   85                      
   86  06:C5D3  AD 00 70    LDA hasContinue
   87  06:C5D6  D0 14       BNE .skipSolutionReset
   88                       
   89  06:C5D8  A9 00       LDA #$00
   90  06:C5DA  8D 01 70    STA solutionCount
   91  06:C5DD  8D 02 70    STA nonSolutionCount
   92  06:C5E0  8D 03 70    STA GameTime
   93  06:C5E3  8D 04 70    STA GameTime+1
   94  06:C5E6  8D 05 70    STA GameTime+2
   95  06:C5E9  8D 06 70    STA GameTime+3
   96                       
   97  06:C5EC            .skipSolutionReset:     
   98                       
   99  06:C5EC  A9 20       LDA #$20
  100  06:C5EE  8D C2 00    STA clueDrawAdd
  101                      
  102                       MACROGetLabelPointer VERT_CLUES, clue_start_address
                          
       06:C5F1  A9 21             LDA #HIGH(VERT_CLUES)
       06:C5F3  A2 4E             LDX #LOW(VERT_CLUES)
                                  
       06:C5F5  8E BB 00          STX clue_start_address
       06:C5F8  8D BC 00          STA clue_start_address+1
                                  
  103  06:C5FB  20 B0 D3    JSR ResetClueDrawAddress
  104                       
  105                       MACROAddPPUStringEntryRawData #HIGH(BANK_LEVEL), #LOW(BANK_LEVEL), #DRAW_HORIZONTAL, #$03
                          
       06:C5FE  A9 01       LDA #$01
       06:C600  8D 23 00    STA PPU_PendingWrite
       06:C603  A9 20       LDA #HIGH(BANK_LEVEL)
       06:C605  20 C9 D1    JSR WriteToPPUString
       06:C608  A9 A8       LDA #LOW(BANK_LEVEL)
       06:C60A  20 C9 D1    JSR WriteToPPUString
       06:C60D  A9 00       LDA #DRAW_HORIZONTAL
       06:C60F  20 C9 D1    JSR WriteToPPUString
       06:C612  A9 03       LDA #$03 
       06:C614  20 C9 D1    JSR WriteToPPUString
                            
  106  06:C617  AD 07 70    LDA bank_index
  107  06:C61A  20 C9 D1    JSR WriteToPPUString
  108  06:C61D  A9 60       LDA #$60
  109  06:C61F  20 C9 D1    JSR WriteToPPUString
  110  06:C622  AE 08 70    LDX puzzle_index
  111  06:C625  E8          INX
  112  06:C626  8A          TXA 
  113  06:C627  20 C9 D1    JSR WriteToPPUString
  114                       
  115  06:C62A  EE 0F 00    INC mode_state
  116                     
  117  06:C62D            UpdateDrawVertClues:
  118                       
  119  06:C62D  AD 00 70    LDA hasContinue
  120  06:C630  D0 05       BNE .changeModeState
  121  06:C632  20 07 D3    JSR PopulateClues
  122                       
  123  06:C635  90 22       BCC .leave
  124                       
  125  06:C637            .changeModeState:
  126                     
  127  06:C637  A9 00       LDA #$00
  128  06:C639  8D C0 00    STA clueLineIndex
  129  06:C63C  8D C6 00    STA clueParity
  130                       
  131  06:C63F  A9 05       LDA #$05
  132  06:C641  8D C1 00    STA clueOffsetShift
  133                       
  134  06:C644  A9 01       LDA #$01
  135  06:C646  8D C2 00    STA clueDrawAdd
  136                        
  137                       MACROGetLabelPointer HORI_CLUES, clue_start_address
                          
       06:C649  A9 21             LDA #HIGH(HORI_CLUES)
       06:C64B  A2 8C             LDX #LOW(HORI_CLUES)
                                  
       06:C64D  8E BB 00          STX clue_start_address
       06:C650  8D BC 00          STA clue_start_address+1
                                  
  138  06:C653  20 B0 D3    JSR ResetClueDrawAddress
  139                     
  140  06:C656  EE 0F 00    INC mode_state
  141  06:C659            .leave:
  142  06:C659  60          RTS
  143                       
  144  06:C65A            UpdateDrawHoriClues:
  145                     
  146  06:C65A  AD 00 70    LDA hasContinue
  147  06:C65D  D0 0B       BNE .changeModeState
  148  06:C65F  20 07 D3    JSR PopulateClues
  149  06:C662  AD BF 00    LDA clueTableIndex
  150  06:C665  8D 09 70    STA image_table_offset
  151  06:C668  90 49       BCC .leave
  152                     
  153  06:C66A            .changeModeState:
  154  06:C66A  20 11 D2    JSR TurnOnSprites
  155                       
  156                       ;;set the timer to 00
  157                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C66D  A9 01       LDA #$01
       06:C66F  8D 23 00    STA PPU_PendingWrite
       06:C672  A9 20       LDA #HIGH(TIMER_LOC)
       06:C674  20 C9 D1    JSR WriteToPPUString
       06:C677  A9 E5       LDA #LOW(TIMER_LOC)
       06:C679  20 C9 D1    JSR WriteToPPUString
       06:C67C  A9 00       LDA #DRAW_HORIZONTAL
       06:C67E  20 C9 D1    JSR WriteToPPUString
       06:C681  A9 05       LDA #$05 
       06:C683  20 C9 D1    JSR WriteToPPUString
                            
  158  06:C686  AD 06 70    LDA GameTime+3
  159  06:C689  20 C9 D1    JSR WriteToPPUString
  160  06:C68C  AD 05 70    LDA GameTime+2
  161  06:C68F  20 C9 D1    JSR WriteToPPUString
  162  06:C692  A9 61       LDA #$61
  163  06:C694  20 C9 D1    JSR WriteToPPUString
  164  06:C697  AD 04 70    LDA GameTime+1
  165  06:C69A  20 C9 D1    JSR WriteToPPUString
  166  06:C69D  AD 03 70    LDA GameTime
  167  06:C6A0  20 C9 D1    JSR WriteToPPUString
  168                       
  169                       ;;reset time
  170  06:C6A3  A9 00       LDA #$00
  171  06:C6A5  8D 0A 00    STA time
  172  06:C6A8  8D 0B 00    STA scaledTime
  173                       
  174                       ;;clear has continue
  175  06:C6AB  A9 00       LDA #$00
  176  06:C6AD  8D 00 70    STA hasContinue 
  177                       
  178                       
  179  06:C6B0  EE 0F 00    INC mode_state
  180  06:C6B3            .leave:
  181  06:C6B3  60          RTS
  182                       
  183  06:C6B4            UpdateGamePlay:
  184                         
  185  06:C6B4  AD CC 00    LDA pauseState
  186  06:C6B7  F0 04       BEQ .checkPause
  187  06:C6B9  20 97 CB    JSR UpdatePause
  188  06:C6BC  60          RTS
  189                       
  190  06:C6BD            .checkPause:
  191                       
  192  06:C6BD  AD 1C 00    LDA gamepadPressed
  193  06:C6C0  29 08       AND #GAMEPAD_START
  194  06:C6C2  F0 29       BEQ .updatePlay
  195  06:C6C4  A9 01       LDA #$01
  196  06:C6C6  8D CC 00    STA pauseState
  197  06:C6C9  A9 00       LDA #$00
  198  06:C6CB  8D C0 00    STA clueLineIndex 
  199  06:C6CE  8D C1 00    STA clueOffsetShift   
  200                     
  201  06:C6D1  A9 FF       LDA #$FF
  202  06:C6D3  A2 00       LDX #$00
  203  06:C6D5  20 06 C3    JSR SetSpriteImage
  204                     
  205                       ;;we need the pause screen table loaded
  206                       MACROGetLabelPointer Pause_Menu, pause_address
                          
       06:C6D8  A9 FC             LDA #HIGH(Pause_Menu)
       06:C6DA  A2 7C             LDX #LOW(Pause_Menu)
                                  
       06:C6DC  8E B3 00          STX pause_address
       06:C6DF  8D B4 00          STA pause_address+1
                                  
  207                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:C6E2  A9 21             LDA #HIGH($210A)
       06:C6E4  A2 0A             LDX #LOW($210A)
                                  
       06:C6E6  8E B7 00          STX pause_draw_address
       06:C6E9  8D B8 00          STA pause_draw_address+1
                                  
  208                       
  209                       
  210  06:C6EC  60          RTS
  211                     
  212  06:C6ED            .updatePlay:
  213                     
  214  06:C6ED  20 47 CB    JSR UpdateTimeDisplay
  215                             
  216  06:C6F0  A9 00       LDA #$00
  217  06:C6F2  8D 00 00    STA temp1
  218  06:C6F5  8D 01 00    STA temp2
  219  06:C6F8  8D 02 00    STA temp3
  220                       
  221  06:C6FB            .checkPressed:  
  222                     
  223  06:C6FB  AD 1C 00    LDA gamepadPressed
  224  06:C6FE  29 F0       AND #GAMEPAD_MOVE
  225  06:C700  F0 0B       BEQ .checkHeld
  226                       
  227  06:C702  A9 10       LDA #HOLD_TIME
  228  06:C704  8D CE 00    STA holdTimer 
  229  06:C707  AD 1C 00    LDA gamepadPressed
  230  06:C70A  4C 21 C7    JMP .parseInputs
  231                       
  232  06:C70D            .checkHeld:
  233                       
  234  06:C70D  AD 1A 00    LDA gamepad
  235  06:C710  29 F0       AND #GAMEPAD_MOVE
  236  06:C712  F0 2F       BEQ .checkPaintPress
  237                       
  238                       ;;decrement the hold timer
  239  06:C714  CE CE 00    DEC holdTimer
  240  06:C717  D0 2A       BNE .checkPaintPress
  241  06:C719  A9 04       LDA #HOLD_FREQ
  242  06:C71B  8D CE 00    STA holdTimer
  243  06:C71E  AD 1A 00    LDA gamepad
  244                     
  245  06:C721            .parseInputs:
  246                     
  247  06:C721  29 F0       AND #GAMEPAD_MOVE
  248  06:C723  F0 1E       BEQ .checkPaintPress
  249  06:C725  0A          ASL A
  250  06:C726  90 03       BCC .checkLeft
  251  06:C728  EE 00 00    INC temp1
  252  06:C72B            .checkLeft:
  253  06:C72B  0A          ASL A
  254  06:C72C  90 03       BCC .checkDown
  255  06:C72E  CE 00 00    DEC temp1
  256  06:C731            .checkDown:
  257  06:C731  0A          ASL A
  258  06:C732  90 03       BCC .checkUp
  259  06:C734  EE 01 00    INC temp2
  260  06:C737            .checkUp:
  261  06:C737  0A          ASL A
  262  06:C738  90 03       BCC .move
  263  06:C73A  CE 01 00    DEC temp2
  264                       
  265  06:C73D            .move:
  266                      
  267  06:C73D  20 D9 C9    JSR MoveMouse
  268  06:C740  20 D3 CA    JSR UpdateMouseScreenPos
  269                       
  270  06:C743            .checkPaintPress:
  271                     
  272  06:C743  AD 1C 00    LDA gamepadPressed
  273  06:C746  29 03       AND #GAMEPAD_AB
  274  06:C748  F0 41       BEQ .updatePaint
  275                       ;;A or B pressed, get current tile
  276                       
  277  06:C74A  8D 00 00    STA temp1
  278                       
  279  06:C74D  A0 00       LDY #$00
  280  06:C74F  B1 C7       LDA [mouse_location], y
  281  06:C751  8D 01 00    STA temp2
  282                       
  283                         ;;A treats X and Clear as clear
  284                             ;;B treats mark and clear as clear
  285                             ;;clear->mark->x
  286                             
  287                     
  288  06:C754  C9 7C       CMP #$7C      ;check if this is a marked tile
  289  06:C756  B0 0F       BCS .getClearTile
  290                       ;;cleared tile- store off marked tile to paint with instead
  291                       ;;not a clear tile- a mark or an x - check A or B  
  292  06:C758  4E 00 00    LSR temp1
  293  06:C75B  B0 05       BCS .getMarkTile
  294                       
  295  06:C75D            .getXTile:
  296  06:C75D  A9 80       LDA #$80
  297  06:C75F  4C 85 C7    JMP .finishGetTile
  298                       
  299  06:C762            .getMarkTile:
  300  06:C762  A9 70       LDA #$70
  301  06:C764  4C 85 C7    JMP .finishGetTile
  302                     
  303  06:C767            .getClearTile:
  304                       
  305  06:C767  4E 00 00    LSR temp1
  306  06:C76A  90 0A       BCC .checkB
  307  06:C76C  AD 01 00    LDA temp2
  308  06:C76F  C9 8C       CMP #$8C                      ;; check if in X tiles - will be if >=
  309  06:C771  90 0D       BCC .clearTile
  310  06:C773  4C 62 C7    JMP .getMarkTile
  311                       
  312  06:C776            .checkB:
  313                       
  314  06:C776  AD 01 00   LDA temp2
  315  06:C779  C9 8C      CMP #$8C
  316  06:C77B  B0 03      BCS .clearTile
  317  06:C77D  4C 5D C7   JMP .getXTile
  318                       
  319  06:C780            .clearTile:
  320  06:C780  A9 60       LDA #$60
  321  06:C782  4C 85 C7    JMP .finishGetTile
  322                       
  323  06:C785            .finishGetTile:
  324  06:C785  8D CB 00    STA currentPaintTile
  325  06:C788  4C 9D C7    JMP .setTile
  326                     
  327                     ;;we'll keep a copy of the puzzle tiles in memory, since we can't easily access tiles in the PPU
  328                     ;;might be best to just keep an entire copy of the nametable instead of trying to index it and deal with 16 bit math
  329                     ;;we can load the nametable into memory as we draw it
  330                     
  331  06:C78B            .updatePaint:
  332                     
  333  06:C78B  AD 1A 00    LDA gamepad
  334  06:C78E  29 03       AND #GAMEPAD_AB
  335  06:C790  D0 06       BNE .checkInputLock
  336                       
  337  06:C792  A9 00       LDA #$00
  338  06:C794  8D CD 00    STA pauseInputLock
  339                       
  340  06:C797            .leaveEarly:
  341  06:C797  60          RTS  
  342                     
  343  06:C798            .checkInputLock:
  344                     
  345                       ;;check if the input lock is on
  346  06:C798  2D CD 00    AND pauseInputLock
  347  06:C79B  D0 FA       BNE .leaveEarly
  348                       
  349  06:C79D            .setTile:
  350                       
  351  06:C79D  AD C9 00    LDA mouse_index
  352  06:C7A0  0D CA 00    ORA mouse_index+1
  353  06:C7A3  29 10       AND #$10
  354  06:C7A5  F0 22       BEQ .getPuzzleTile
  355                       
  356  06:C7A7  AD 1C 00    LDA gamepadPressed ; only draw on click
  357  06:C7AA  29 03       AND #GAMEPAD_AB
  358  06:C7AC  F0 E9       BEQ .leaveEarly
  359                       
  360  06:C7AE  A0 00       LDY #$00
  361  06:C7B0  B1 C7       LDA [mouse_location], y
  362  06:C7B2  C9 40       CMP #$40
  363  06:C7B4  90 E1       BCC .leaveEarly
  364  06:C7B6  C9 5F       CMP #$5F
  365  06:C7B8  F0 02       BEQ .toggleClue
  366  06:C7BA  B0 DB       BCS .leaveEarly
  367                     
  368  06:C7BC            .toggleClue:
  369  06:C7BC  8D 02 00    STA temp3
  370  06:C7BF  29 F0       AND #$F0
  371  06:C7C1  49 10       EOR #$10
  372  06:C7C3  8D CB 00    STA currentPaintTile
  373  06:C7C6  4C CC C7    JMP .overwriteTile
  374                       
  375  06:C7C9            .getPuzzleTile:
  376  06:C7C9  20 A7 CC    JSR CheckAgainstSolution
  377                       
  378  06:C7CC            .overwriteTile:
  379                       ;;overwrite tile
  380                        
  381  06:C7CC  AD 02 00    LDA temp3             ;tile taken from current mouse location
  382  06:C7CF  29 F0       AND #$F0
  383  06:C7D1  CD CB 00    CMP currentPaintTile
  384  06:C7D4  F0 03       BEQ .skipSound
  385  06:C7D6  20 FE C4    JSR PlayMenuCursorSound
  386  06:C7D9            .skipSound:
  387  06:C7D9  AD 02 00    LDA temp3
  388  06:C7DC  29 0F       AND #$0F
  389  06:C7DE  0D CB 00    ORA currentPaintTile
  390  06:C7E1  A0 00       LDY #$00
  391  06:C7E3  91 C7       STA [mouse_location], y
  392  06:C7E5  8D 00 00    STA temp1
  393                       
  394  06:C7E8  AD C8 00    LDA mouse_location+1
  395  06:C7EB  29 3F       AND #$3F
  396  06:C7ED  8D 01 00    STA temp2
  397                         
  398                       MACROAddPPUStringEntryRawData temp2, mouse_location, #DRAW_HORIZONTAL, #$01
                          
       06:C7F0  A9 01       LDA #$01
       06:C7F2  8D 23 00    STA PPU_PendingWrite
       06:C7F5  AD 01 00    LDA temp2
       06:C7F8  20 C9 D1    JSR WriteToPPUString
       06:C7FB  AD C7 00    LDA mouse_location
       06:C7FE  20 C9 D1    JSR WriteToPPUString
       06:C801  A9 00       LDA #DRAW_HORIZONTAL
       06:C803  20 C9 D1    JSR WriteToPPUString
       06:C806  A9 01       LDA #$01 
       06:C808  20 C9 D1    JSR WriteToPPUString
                            
  399  06:C80B  AD 00 00    LDA temp1
  400  06:C80E  20 C9 D1    JSR WriteToPPUString
  401                       
  402                       ;;also copy to save copy
  403  06:C811  AD C7 00    LDA mouse_location
  404  06:C814  8D B5 00    STA copy_address
  405  06:C817  AD C8 00    LDA mouse_location+1
  406  06:C81A  29 0F       AND #$0F
  407  06:C81C  09 60       ORA #$60
  408  06:C81E  18          CLC
  409  06:C81F  69 08       ADC #$08
  410  06:C821  8D B6 00    STA copy_address+1
  411                       
  412  06:C824  AD 00 00    LDA temp1
  413  06:C827  A0 00       LDY #$00
  414  06:C829  91 B5       STA [copy_address],y
  415                       
  416  06:C82B            .checkSolution: 
  417                     
  418  06:C82B  A0 01       LDY #$01
  419  06:C82D  B1 AD       LDA [puzzle_address], y
  420  06:C82F  CD 01 70    CMP solutionCount
  421  06:C832  D0 5F       BNE .leave
  422  06:C834  AD 02 70    LDA nonSolutionCount
  423  06:C837  F0 03       BEQ .changeModeState
  424                       
  425  06:C839  4C 93 C8    JMP .leave
  426                       
  427                       ;;update the painting
  428  06:C83C            .changeModeState:
  429                      
  430  06:C83C  20 1A D2    JSR TurnOffSprites
  431                        
  432  06:C83F  A9 00       LDA #$00
  433  06:C841  8D BD 00    STA clue_draw_address
  434  06:C844  8D C0 00    STA clueLineIndex
  435  06:C847  A9 20       LDA #$20
  436  06:C849  8D BE 00    STA clue_draw_address+1
  437                       
  438  06:C84C  EE 0F 00    INC mode_state
  439                       
  440  06:C84F  A9 00       lda #$00
  441  06:C851  8D D6 00    sta current_song
  442  06:C854  AD D6 00    lda current_song
  443  06:C857  20 0B A1    jsr sound_load
  444                       
  445                       ;;the puzzle is solved, store the time and solved bit in memory
  446                       ;;if the puzzle was solved before, only update the time
  447                       
  448                       MACROGetLabelPointer PuzzleSaveLocations, table_address
                          
       06:C85A  A9 CD             LDA #HIGH(PuzzleSaveLocations)
       06:C85C  A2 37             LDX #LOW(PuzzleSaveLocations)
                                  
       06:C85E  8E 16 00          STX table_address
       06:C861  8D 17 00          STA table_address+1
                                  
  449  06:C864  AD 07 70    LDA bank_index
  450  06:C867  0A          ASL A
  451  06:C868  A8          TAY
  452  06:C869  20 6D D0    JSR GetTableAtIndex
  453                       
  454  06:C86C  20 5F CC    JSR CheckNewBestTime
  455                       
  456  06:C86F  AD D1 00    LDA recordSet
  457  06:C872  F0 1F       BEQ .leave
  458                       
  459  06:C874  AD 08 70    LDA puzzle_index
  460  06:C877  0A          ASL A
  461  06:C878  0A          ASL A
  462  06:C879  A8          TAY
  463  06:C87A  AD 03 70    LDA GameTime
  464  06:C87D  09 80       ORA #$80
  465  06:C87F  91 16       STA [table_address], y
  466  06:C881  C8          INY
  467  06:C882  AD 04 70    LDA GameTime+1
  468  06:C885  91 16       STA [table_address], y
  469  06:C887  C8          INY
  470  06:C888  AD 05 70    LDA GameTime+2
  471  06:C88B  91 16       STA [table_address], y
  472  06:C88D  C8          INY
  473  06:C88E  AD 06 70    LDA GameTime+3
  474  06:C891  91 16       STA [table_address],y
  475                     
  476                      
  477                       
  478  06:C893            .leave:
  479                     
  480  06:C893  60          RTS
  481                       
  482  06:C894            UpdateClearPuzzle:
  483                     
  484  06:C894  20 24 D4    JSR ClearPuzzle
  485  06:C897  AD C0 00    LDA clueLineIndex
  486  06:C89A  C9 1E       CMP #30
  487  06:C89C  D0 08       BNE .leave
  488                       
  489  06:C89E            .changeModeState:
  490                     
  491  06:C89E  A9 00       LDA #$00
  492  06:C8A0  8D C0 00    STA clueLineIndex ;using this as a scroller
  493  06:C8A3  EE 0F 00    INC mode_state
  494                     
  495  06:C8A6            .leave:
  496                      
  497  06:C8A6  60          RTS
  498  06:C8A7            UpdateMoveScreen:
  499                       
  500                       ;for 15x15, move 5 tiles left and 5 tiles up- let's do 1 at a time
  501                       ;we'll take the lower nibble of the clue line index as our scroll counter, and the higher nibble as the x/y flag
  502                       
  503  06:C8A7  A0 00       LDY #$00
  504  06:C8A9  B1 AD       LDA [puzzle_address], y
  505  06:C8AB  AA          TAX
  506  06:C8AC  BD 2E CD    LDA PuzzleScrollHori, x
  507  06:C8AF  8D 00 00    STA temp1
  508  06:C8B2  BD 31 CD    LDA PuzzleScrollVert, x
  509  06:C8B5  8D 01 00    STA temp2
  510                       
  511  06:C8B8  AD C0 00    LDA clueLineIndex
  512  06:C8BB  29 10       AND #$10
  513  06:C8BD  D0 1E       BNE .scrollY
  514                       
  515                       ;;scroll X over
  516  06:C8BF  AD C0 00    LDA clueLineIndex
  517  06:C8C2  29 0F       AND #$0F
  518  06:C8C4  0A          ASL A
  519  06:C8C5  0A          ASL A
  520  06:C8C6  0A          ASL A ;mult by 8
  521  06:C8C7  8D 1F 00    STA PPU_ScrollX
  522                       
  523  06:C8CA  EE C0 00    INC clueLineIndex
  524  06:C8CD  AD C0 00    LDA clueLineIndex
  525  06:C8D0  CD 00 00    CMP temp1
  526  06:C8D3  D0 4A       BNE .leave
  527  06:C8D5  A9 10       LDA #$10
  528  06:C8D7  8D C0 00    STA clueLineIndex
  529  06:C8DA  4C 1F C9    JMP .leave
  530                       
  531  06:C8DD            .scrollY:
  532                     
  533  06:C8DD  AD C0 00    LDA clueLineIndex
  534  06:C8E0  29 0F       AND #$0F
  535  06:C8E2  0A          ASL A
  536  06:C8E3  0A          ASL A
  537  06:C8E4  0A          ASL A ;mult by 8
  538  06:C8E5  8D 20 00    STA PPU_ScrollY
  539                     
  540  06:C8E8  EE C0 00    INC clueLineIndex
  541  06:C8EB  AD C0 00    LDA clueLineIndex
  542  06:C8EE  29 0F       AND #$0F
  543  06:C8F0  CD 01 00    CMP temp2
  544  06:C8F3  D0 2A       BNE .leave
  545                       
  546  06:C8F5            .changeModeState:
  547                     
  548  06:C8F5  A9 8E       LDA #$8E
  549  06:C8F7  8D BD 00    STA clue_draw_address
  550  06:C8FA  A9 21       LDA #$21
  551  06:C8FC  8D BE 00    STA clue_draw_address+1
  552                       
  553  06:C8FF  AD AF 00    LDA clues_address
  554  06:C902  18          CLC
  555  06:C903  6D 09 70    ADC image_table_offset
  556  06:C906  8D AF 00    STA clues_address
  557  06:C909  AD B0 00    LDA clues_address+1
  558  06:C90C  69 00       ADC #$00
  559  06:C90E  8D B0 00    STA clues_address+1
  560                       
  561  06:C911  A9 00       LDA #$00
  562  06:C913  8D BF 00    STA clueTableIndex
  563  06:C916  8D C0 00    STA clueLineIndex
  564  06:C919  8D C1 00    STA clueOffsetShift
  565                     
  566  06:C91C  EE 0F 00    INC mode_state
  567                     
  568  06:C91F            .leave:
  569                      
  570  06:C91F  60          RTS
  571  06:C920            UpdateDrawImage:
  572                     
  573                       ;run it twice for a faster draw
  574  06:C920  AD 0A 00    LDA time
  575  06:C923  29 01       AND #$01
  576  06:C925  D0 0B       BNE .leaveEarly
  577  06:C927  20 06 D5    JSR DrawImage
  578  06:C92A  AD BF 00    LDA clueTableIndex
  579  06:C92D  CD 09 00    CMP tempy
  580                     
  581  06:C930  F0 01       BEQ .changeModeState
  582  06:C932            .leaveEarly:
  583  06:C932  60          RTS
  584                       
  585  06:C933            .changeModeState:
  586                     
  587                       ;;do a palette draw
  588                       ;;puzzle address + 03 has the desired palette offset
  589                     
  590                       MACROAddPPUStringEntryRawData #$3F, #$01, #DRAW_HORIZONTAL, #03
                          
       06:C933  A9 01       LDA #$01
       06:C935  8D 23 00    STA PPU_PendingWrite
       06:C938  A9 3F       LDA #$3F
       06:C93A  20 C9 D1    JSR WriteToPPUString
       06:C93D  A9 01       LDA #$01
       06:C93F  20 C9 D1    JSR WriteToPPUString
       06:C942  A9 00       LDA #DRAW_HORIZONTAL
       06:C944  20 C9 D1    JSR WriteToPPUString
       06:C947  A9 03       LDA #03 
       06:C949  20 C9 D1    JSR WriteToPPUString
                            
  591  06:C94C  A0 03       LDY #$03
  592  06:C94E  B1 AD       LDA [puzzle_address],y
  593  06:C950  99 FE 6B    STA Palette_Copy-2, y
  594  06:C953  20 C9 D1    JSR WriteToPPUString
  595  06:C956  C8          INY
  596  06:C957  B1 AD       LDA [puzzle_address],y
  597  06:C959  99 FE 6B    STA Palette_Copy-2, y
  598  06:C95C  20 C9 D1    JSR WriteToPPUString
  599  06:C95F  C8          INY
  600  06:C960  B1 AD       LDA [puzzle_address],y
  601  06:C962  99 FE 6B    STA Palette_Copy-2, y
  602  06:C965  20 C9 D1    JSR WriteToPPUString
  603                       
  604  06:C968  A0 00       LDY #$00
  605  06:C96A  B1 AD       LDA [puzzle_address], y
  606  06:C96C  0A          ASL A
  607  06:C96D  AA          TAX
  608  06:C96E  BD 02 D7    LDA ImageTitleLowerHalfPos, x
  609  06:C971  8D B9 00    STA title_draw_address
  610  06:C974  E8          INX
  611  06:C975  BD 02 D7    LDA ImageTitleLowerHalfPos, x
  612  06:C978  8D BA 00    STA title_draw_address+1
  613                       
  614  06:C97B  20 5D D6    JSR DrawTitle
  615                       
  616  06:C97E  EE 0F 00    INC mode_state
  617                     
  618  06:C981            .leave:
  619                      
  620  06:C981  60          RTS
  621                       
  622  06:C982            UpdateWaitInput:
  623                     
  624  06:C982  AD 1C 00    LDA gamepadPressed
  625  06:C985  F0 10       BEQ .leave
  626                       
  627  06:C987            .changeModeState:
  628  06:C987  A9 00       LDA #$00
  629  06:C989  8D 0A 00    STA time
  630  06:C98C  8D 0B 00    STA scaledTime
  631  06:C98F  A9 02       LDA #GAMEOVER_IDX
  632  06:C991  8D CF 00    STA targetGameMode
  633  06:C994  EE 0F 00    INC mode_state
  634                     
  635  06:C997            .leave:
  636                      
  637  06:C997  60          RTS
  638                       
  639  06:C998            UpdateGameFadeOut:
  640                     
  641  06:C998  AD 0A 00    LDA time
  642  06:C99B  29 07       AND #$07
  643  06:C99D  D0 1E       BNE .leave
  644                       ;;every 8 frames, decrement the palettes
  645  06:C99F  20 46 D2    JSR FadeOutPalettes
  646  06:C9A2  B0 19       BCS .leave
  647                     
  648  06:C9A4            .changeModeState:
  649  06:C9A4  A9 00       LDA #$00
  650  06:C9A6  8D 0A 00    STA time
  651  06:C9A9  EE 0F 00    INC mode_state
  652                       
  653                       ;;don't need to turn all the sprites off, just need to
  654                       ;;clear them out   
  655  06:C9AC  A9 FF       LDA #$FF
  656  06:C9AE  A2 00       LDX #$00
  657  06:C9B0  20 06 C3    JSR SetSpriteImage
  658                       
  659  06:C9B3  A9 FF       LDA #$FF
  660  06:C9B5  A2 01       LDX #$01
  661  06:C9B7  20 06 C3    JSR SetSpriteImage
  662                       
  663  06:C9BA  20 11 D2    JSR TurnOnSprites     ;turn sprite rendering back on
  664                       
  665  06:C9BD            .leave:
  666  06:C9BD  60          RTS  
  667                     
  668  06:C9BE            UpdateGameExit:
  669                     
  670                       ;JSR famistudio_music_stop
  671  06:C9BE  AD 0A 00    LDA time
  672  06:C9C1  29 0F       AND #$0F
  673  06:C9C3  D0 13       BNE .leave
  674                     
  675  06:C9C5  A9 00       LDA #$00
  676  06:C9C7  8D 1F 00    STA PPU_ScrollX
  677  06:C9CA  8D 20 00    STA PPU_ScrollY
  678  06:C9CD  8D 21 00    STA PPU_ScrollNT
  679                       
  680  06:C9D0  AD CF 00    LDA targetGameMode
  681  06:C9D3  A2 00       LDX #$00
  682  06:C9D5  20 76 CF    JSR ChangeGameMode
  683  06:C9D8            .leave:
  684  06:C9D8  60          RTS
  685                       
  686  06:C9D9            MoveMouse:
  687                     
  688  06:C9D9  20 07 C5    JSR PlayPuzzleCursorSound
  689                     
  690  06:C9DC  AD 00 00    LDA temp1                             ;horizontal move 
  691  06:C9DF  0E 00 00    ASL temp1
  692  06:C9E2  0E 00 00    ASL temp1
  693  06:C9E5  0E 00 00    ASL temp1
  694                       
  695  06:C9E8  AD 01 00    LDA temp2                             ;vertical move
  696  06:C9EB  0E 01 00    ASL temp2 
  697  06:C9EE  0E 01 00    ASL temp2
  698  06:C9F1  0E 01 00    ASL temp2
  699                       
  700                       
  701  06:C9F4  A0 00       LDY #$00
  702  06:C9F6  B1 AD       LDA [puzzle_address], y ;puzzle size 0 = 5, 1 = 10, 2 = 15  
  703  06:C9F8  0A          ASL A
  704  06:C9F9  AA          TAX
  705                     
  706  06:C9FA  AD CA 00    LDA mouse_index+1             ;horizontal index
  707  06:C9FD  29 10       AND #$10                              ;check clue flag
  708  06:C9FF  8D 09 00    STA tempy                             ;store clue flag
  709  06:CA02  AD C9 00    LDA mouse_index               ;horizontal index
  710  06:CA05  29 10       AND #$10                              ;check clue flag
  711  06:CA07  8D 08 00    STA tempx                             ;store clue flag
  712                       
  713  06:CA0A  F0 0D       BEQ .puzzleHoriMin
  714  06:CA0C  A9 22       LDA #HORI_CLUE_MIN
  715  06:CA0E  8D 02 00    STA temp3 
  716  06:CA11  A9 6A       LDA #HORI_CLUE_MAX
  717  06:CA13  8D 03 00    STA temp4
  718  06:CA16  4C 25 CA    JMP .checkHoriBorder
  719                       
  720  06:CA19            .puzzleHoriMin:
  721  06:CA19  BD 22 CD    LDA MouseMinimums, x
  722  06:CA1C  8D 02 00    STA temp3 
  723  06:CA1F  BD 28 CD    LDA MouseMaximums, x
  724  06:CA22  8D 03 00    STA temp4
  725                       
  726  06:CA25            .checkHoriBorder:
  727  06:CA25  8A          TXA
  728  06:CA26  48          PHA
  729                       
  730  06:CA27  A9 00       LDA #$00
  731  06:CA29  8D 06 00    STA temp7
  732                       
  733  06:CA2C  A2 03       LDX #SPRITE_XPOS
  734  06:CA2E  BD 00 02    LDA SPRITE_DATA, x
  735  06:CA31  18          CLC
  736  06:CA32  6D 00 00    ADC temp1
  737                       ;;check against borders
  738  06:CA35  CD 02 00    CMP temp3
  739  06:CA38  D0 18       BNE .checkHoriMax
  740                       ;;equal - check if mouse index is in clue area
  741  06:CA3A  8D 05 00    STA temp6
  742  06:CA3D  AD 08 00    LDA tempx
  743  06:CA40  0D 09 00    ORA tempy
  744  06:CA43  D0 27       BNE .moveVert
  745  06:CA45  EE 06 00    INC temp7
  746  06:CA48  AD 05 00    LDA temp6
  747  06:CA4B  18          CLC
  748  06:CA4C  6D 00 00    ADC temp1
  749  06:CA4F  4C 69 CA    JMP .moveSpriteHori
  750                       
  751  06:CA52            .checkHoriMax:
  752  06:CA52  CD 03 00    CMP temp4
  753  06:CA55  D0 12       BNE .moveSpriteHori
  754                       
  755  06:CA57  8D 05 00    STA temp6
  756  06:CA5A  AD 08 00    LDA tempx
  757  06:CA5D  F0 0D       BEQ .moveVert
  758  06:CA5F  EE 06 00    INC temp7
  759  06:CA62  AD 05 00    LDA temp6
  760  06:CA65  18          CLC
  761  06:CA66  6D 00 00    ADC temp1
  762                       
  763  06:CA69            .moveSpriteHori:
  764  06:CA69  9D 00 02    STA SPRITE_DATA, x
  765                     
  766  06:CA6C            .moveVert:
  767                     
  768  06:CA6C  68          PLA
  769  06:CA6D  AA          TAX
  770  06:CA6E  E8          INX
  771                       
  772  06:CA6F  AD 09 00    LDA tempy
  773  06:CA72  F0 0D       BEQ .puzzleVertMin
  774  06:CA74  A9 12       LDA #VERT_CLUE_MIN
  775  06:CA76  8D 02 00    STA temp3 
  776  06:CA79  A9 5A       LDA #VERT_CLUE_MAX
  777  06:CA7B  8D 03 00    STA temp4
  778  06:CA7E  4C 8D CA    JMP .checkVertBorder
  779                       
  780  06:CA81            .puzzleVertMin:
  781  06:CA81  BD 22 CD    LDA MouseMinimums, x
  782  06:CA84  8D 02 00    STA temp3
  783  06:CA87  BD 28 CD    LDA MouseMaximums, x
  784  06:CA8A  8D 03 00    STA temp4
  785                     
  786                     
  787  06:CA8D            .checkVertBorder:
  788                     
  789  06:CA8D  A9 00       LDA #$00
  790  06:CA8F  8D 07 00    STA temp8
  791                     
  792  06:CA92  A2 00       LDX #SPRITE_YPOS
  793  06:CA94  BD 00 02    LDA SPRITE_DATA, x
  794  06:CA97  18          CLC
  795  06:CA98  6D 01 00    ADC temp2
  796                       ;;check against borders
  797  06:CA9B  CD 02 00    CMP temp3
  798  06:CA9E  D0 18       BNE .checkVertMax
  799                       ;;equal - check if mouse index is in clue area
  800  06:CAA0  8D 05 00    STA temp6
  801  06:CAA3  AD 09 00    LDA tempy
  802  06:CAA6  0D 08 00    ORA tempx
  803  06:CAA9  D0 27       BNE .leave
  804  06:CAAB  EE 07 00    INC temp8
  805  06:CAAE  AD 05 00    LDA temp6
  806  06:CAB1  18          CLC
  807  06:CAB2  6D 01 00    ADC temp2
  808  06:CAB5  4C CF CA    JMP .moveSpriteVert
  809                       
  810  06:CAB8            .checkVertMax:
  811  06:CAB8  CD 03 00    CMP temp4
  812  06:CABB  D0 12       BNE .moveSpriteVert
  813  06:CABD  8D 05 00    STA temp6
  814  06:CAC0  AD 09 00    LDA tempy
  815  06:CAC3  F0 0D       BEQ .leave
  816  06:CAC5  EE 07 00    INC temp8
  817  06:CAC8  AD 05 00    LDA temp6
  818  06:CACB  18          CLC
  819  06:CACC  6D 01 00    ADC temp2
  820                       
  821  06:CACF            .moveSpriteVert:
  822  06:CACF  9D 00 02    STA SPRITE_DATA, x
  823                     
  824  06:CAD2            .leave:
  825  06:CAD2  60          RTS
  826                             
  827  06:CAD3            UpdateMouseScreenPos:
  828                     
  829  06:CAD3  AD 06 00    LDA temp7
  830  06:CAD6  F0 08       BEQ .skipHoriFlip
  831                       
  832  06:CAD8  AD 08 00    LDA tempx
  833  06:CADB  49 10       EOR #$10
  834  06:CADD  8D 08 00    STA tempx
  835                       
  836  06:CAE0            .skipHoriFlip:
  837                     
  838  06:CAE0  AD 07 00    LDA temp8
  839  06:CAE3  F0 08       BEQ .skipVertFlip
  840                     
  841  06:CAE5  AD 09 00    LDA tempy
  842  06:CAE8  49 10       EOR #$10
  843  06:CAEA  8D 09 00    STA tempy
  844                     
  845  06:CAED            .skipVertFlip:
  846                     
  847                     
  848  06:CAED  A2 00       LDX #$00
  849  06:CAEF  BD 00 02    LDA SPRITE_DATA, x;ypos       ;yyyy y...
  850  06:CAF2  4A          LSR A                                         ;0yyy yy..
  851  06:CAF3  4A          LSR A                                         ;00yy yyy.
  852  06:CAF4  4A          LSR A                                         ;000y yyyy
  853  06:CAF5  8D 00 00    STA temp1
  854  06:CAF8  8D CA 00    STA mouse_index+1                     ;vertical
  855  06:CAFB  E8          INX
  856  06:CAFC  E8          INX
  857  06:CAFD  E8          INX   
  858  06:CAFE  BD 00 02    LDA SPRITE_DATA, x ;xpos  ;  xxxx x...
  859  06:CB01  29 F8       AND #$F8                       ;              ;  xxxx x000
  860  06:CB03  8D 01 00    STA temp2                      ;      ;  
  861  06:CB06  4E 00 00    LSR temp1                      ;              ;  0000 yyyy y
  862  06:CB09  6E 01 00    ROR temp2                      ;      ;  yxxx xx00
  863  06:CB0C  4E 00 00    LSR temp1                      ;              ;  0000 0yyy y
  864  06:CB0F  6E 01 00    ROR temp2                      ;              ;  yyxx xxx0
  865  06:CB12  4E 00 00    LSR temp1              ;              ;  0000 00yy y
  866  06:CB15  6E 01 00    ROR temp2                      ;              ;  yyyx xxxx
  867  06:CB18  AD 01 00    LDA temp2
  868  06:CB1B  29 1F       AND #$1F
  869  06:CB1D  8D C9 00    STA mouse_index                       ;horizontal
  870                       
  871  06:CB20  AD C9 00    LDA mouse_index
  872  06:CB23  38          SEC 
  873  06:CB24  E9 0E       SBC #$0E
  874  06:CB26  0D 08 00    ORA tempx
  875  06:CB29  8D C9 00    STA mouse_index
  876                       
  877  06:CB2C  AD CA 00    LDA mouse_index+1
  878  06:CB2F  38          SEC 
  879  06:CB30  E9 0C       SBC #$0C
  880  06:CB32  0D 09 00    ORA tempy
  881  06:CB35  8D CA 00    STA mouse_index+1
  882                       
  883                       ;subtract starting offsets for mouse index
  884                       
  885  06:CB38  AD 00 00    LDA temp1                      ;              ;  0000 00yy
  886  06:CB3B  09 60       ORA #$60                       ;              ;  0110 00yy
  887                       
  888  06:CB3D  8D C8 00    STA mouse_location+1
  889  06:CB40  AD 01 00    LDA temp2
  890  06:CB43  8D C7 00    STA mouse_location
  891                       
  892  06:CB46            .leave:
  893  06:CB46  60          RTS
  894                       
  895  06:CB47            UpdateTimeDisplay:
  896                     
  897  06:CB47  AD 0B 00    LDA scaledTime
  898  06:CB4A  C9 3C       CMP #60
  899  06:CB4C  D0 48       BNE .leave
  900                       
  901  06:CB4E  A9 00       LDA #$00
  902  06:CB50  8D 0B 00    STA scaledTime
  903                       
  904  06:CB53  EE 03 70    INC GameTime
  905  06:CB56  AD 03 70    LDA GameTime
  906  06:CB59  C9 0A       CMP #10
  907  06:CB5B  D0 32       BNE .printTime
  908                       
  909  06:CB5D  A9 00       LDA #$00
  910  06:CB5F  8D 03 70    STA GameTime
  911  06:CB62  EE 04 70    INC GameTime+1
  912  06:CB65  AD 04 70    LDA GameTime+1
  913  06:CB68  C9 06       CMP #6
  914  06:CB6A  D0 23       BNE .printTime
  915                       
  916  06:CB6C  A9 00       LDA #$00
  917  06:CB6E  8D 04 70    STA GameTime+1
  918  06:CB71  EE 05 70    INC GameTime+2
  919  06:CB74  AD 05 70    LDA GameTime+2
  920  06:CB77  C9 0A       CMP #10
  921  06:CB79  D0 14       BNE .printTime
  922                       
  923  06:CB7B  A9 00       LDA #$00
  924  06:CB7D  8D 05 70    STA GameTime+2
  925  06:CB80  EE 06 70    INC GameTime+3
  926  06:CB83  AD 06 70    LDA GameTime+3
  927  06:CB86  C9 0A       CMP #10
  928  06:CB88  D0 05       BNE .printTime
  929                       
  930  06:CB8A  A9 00       LDA #$00
  931  06:CB8C  8D 06 70    STA GameTime+3
  932                         
  933                       
  934  06:CB8F            .printTime:
  935                     
  936  06:CB8F  A9 20       LDA #HIGH(TIMER_LOC)
  937  06:CB91  A2 E5       LDX #LOW(TIMER_LOC)
  938                     
  939  06:CB93  20 9C D6    JSR ApplyGameTimeToPPUString
  940                       
  941                       
  942  06:CB96            .leave: 
  943  06:CB96  60          RTS  
  944                       
  945  06:CB97            UpdatePause:
  946                     
  947                     ;;load screen
  948                     ;;update selection
  949                     ;; close - remove screen, then upause
  950                     ;; quit - jump to fade out
  951  06:CB97  AD CC 00    LDA pauseState
  952  06:CB9A  20 47 D0    JSR Dynamic_Jump
  953                     
  954  06:CB9D            UpdatePauseJumpTable:  
  955                     
  956  06:CB9D  5E CC       .word ExitPause                       ;fail safe
  957  06:CB9F  A5 CB       .word UpdateLoadPauseScreen
  958  06:CBA1  C1 CB       .word UpdatePauseScreen
  959  06:CBA3  42 CC       .word UpdateUnloadPauseScreen
  960                       
  961  06:CBA5            UpdateLoadPauseScreen:
  962                       
  963  06:CBA5  20 6B D4    JSR LoadPauseScreen
  964  06:CBA8  AD C1 00    LDA clueOffsetShift
  965  06:CBAB  C9 06       CMP #$06
  966  06:CBAD  D0 11       BNE .leave
  967                       
  968  06:CBAF            .changePauseState:
  969                     
  970  06:CBAF  A9 60       LDA #PAUSE_YES
  971  06:CBB1  A2 01       LDX #$01
  972  06:CBB3  20 FB C2    JSR SetSpriteXPosition  
  973  06:CBB6  A9 01       LDA #$01
  974  06:CBB8  A2 01       LDX #$01
  975  06:CBBA  20 06 C3    JSR SetSpriteImage
  976                       
  977  06:CBBD  EE CC 00    INC pauseState
  978  06:CBC0            .leave:
  979  06:CBC0  60          RTS
  980                       
  981  06:CBC1            UpdatePauseScreen:
  982                       
  983  06:CBC1  AD 1C 00    LDA gamepadPressed
  984  06:CBC4  C9 08       CMP #GAMEPAD_START
  985  06:CBC6  F0 2C       BEQ .unPause
  986  06:CBC8  C9 02       CMP #GAMEPAD_B
  987  06:CBCA  F0 28       BEQ .unPause
  988  06:CBCC  C9 01       CMP #GAMEPAD_A
  989  06:CBCE  F0 4D       BEQ .checkA
  990                       
  991                       ;;update pointer
  992                       
  993  06:CBD0  AD 1C 00    LDA gamepadPressed
  994  06:CBD3  29 C0       AND #GAMEPAD_HORI
  995                       ;;binary system- left and right don't really matter, we'll just toggle the position
  996  06:CBD5  F0 6A       BEQ .leave
  997                       
  998  06:CBD7  20 FE C4    JSR PlayMenuCursorSound
  999                       
 1000  06:CBDA  A9 03       LDA #SPRITE_XPOS
 1001  06:CBDC  A2 01       LDX #$01
 1002  06:CBDE  20 1D C3    JSR GetSpriteData
 1003                       
 1004  06:CBE1  C9 60       CMP #PAUSE_YES
 1005  06:CBE3  F0 05       BEQ .loadNo
 1006                       
 1007  06:CBE5  A9 60       LDA #PAUSE_YES
 1008  06:CBE7  4C EC CB    JMP .setPosition
 1009                       
 1010  06:CBEA            .loadNo:
 1011  06:CBEA  A9 88       LDA #PAUSE_NO
 1012                     
 1013  06:CBEC            .setPosition:
 1014                       
 1015  06:CBEC  A2 01       LDX #$01
 1016  06:CBEE  20 FB C2    JSR SetSpriteXPosition  
 1017                     
 1018  06:CBF1  4C 41 CC    JMP .leave 
 1019                     
 1020  06:CBF4            .unPause:
 1021                     
 1022  06:CBF4  A9 00       LDA #$00
 1023  06:CBF6  8D C0 00    STA clueLineIndex
 1024  06:CBF9  8D C1 00    STA clueOffsetShift
 1025                       
 1026  06:CBFC  A9 FF       LDA #$FF
 1027  06:CBFE  A2 01       LDX #$01
 1028  06:CC00  20 06 C3    JSR SetSpriteImage
 1029                     
 1030                       MACROGetLabelPointer $610A, pause_address
                          
       06:CC03  A9 61             LDA #HIGH($610A)
       06:CC05  A2 0A             LDX #LOW($610A)
                                  
       06:CC07  8E B3 00          STX pause_address
       06:CC0A  8D B4 00          STA pause_address+1
                                  
 1031                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:CC0D  A9 21             LDA #HIGH($210A)
       06:CC0F  A2 0A             LDX #LOW($210A)
                                  
       06:CC11  8E B7 00          STX pause_draw_address
       06:CC14  8D B8 00          STA pause_draw_address+1
                                  
 1032                         
 1033  06:CC17  EE CC 00    INC pauseState
 1034  06:CC1A  4C 41 CC    JMP .leave
 1035                      
 1036  06:CC1D            .checkA:
 1037                       
 1038  06:CC1D  A9 03       LDA #SPRITE_XPOS
 1039  06:CC1F  A2 01       LDX #$01
 1040  06:CC21  20 1D C3    JSR GetSpriteData
 1041                       
 1042  06:CC24  C9 88       CMP #PAUSE_NO
 1043  06:CC26  F0 CC       BEQ .unPause
 1044                        
 1045  06:CC28            .quit:
 1046                             
 1047  06:CC28  A9 01       LDA #$01
 1048  06:CC2A  8D 00 70    STA hasContinue
 1049  06:CC2D  A9 00       LDA #$00
 1050  06:CC2F  8D CC 00    STA pauseState
 1051  06:CC32  A9 00       LDA #$00
 1052  06:CC34  8D 0A 00    STA time
 1053  06:CC37  A9 02       LDA #GAMEOVER_IDX
 1054  06:CC39  8D CF 00    STA targetGameMode
 1055  06:CC3C  A9 08       LDA #$08
 1056  06:CC3E  8D 0F 00    STA mode_state
 1057                       
 1058  06:CC41            .leave:
 1059  06:CC41  60          RTS
 1060                       
 1061  06:CC42            UpdateUnloadPauseScreen:
 1062                       
 1063  06:CC42  20 B2 D4    JSR ClearPauseScreen
 1064  06:CC45  AD C1 00    LDA clueOffsetShift
 1065  06:CC48  C9 06       CMP #$06
 1066  06:CC4A  D0 11       BNE .leave
 1067  06:CC4C            .changePauseState:
 1068                     
 1069  06:CC4C  A9 02       LDA #$02
 1070  06:CC4E  A2 00       LDX #$00
 1071  06:CC50  20 06 C3    JSR SetSpriteImage
 1072                       
 1073  06:CC53  A9 03       LDA #GAMEPAD_AB
 1074  06:CC55  8D CD 00    STA pauseInputLock 
 1075                       
 1076  06:CC58  A9 00       LDA #$00
 1077  06:CC5A  8D CC 00    STA pauseState
 1078  06:CC5D            .leave:
 1079  06:CC5D  60          RTS
 1080                       
 1081  06:CC5E            ExitPause:
 1082  06:CC5E  60          RTS
 1083                       
 1084  06:CC5F            CheckNewBestTime:
 1085                     
 1086                       ;let's say we already have the save data in the table address
 1087  06:CC5F  A9 00       LDA #$00
 1088  06:CC61  8D D1 00    STA recordSet
 1089                       
 1090                       
 1091  06:CC64  AD 08 70    LDA puzzle_index
 1092  06:CC67  0A          ASL A
 1093  06:CC68  0A          ASL A
 1094  06:CC69  A8          TAY
 1095  06:CC6A  B1 16       LDA [table_address], y
 1096  06:CC6C  29 80       AND #$80
 1097  06:CC6E  F0 33       BEQ .updateTime
 1098                       ;MACROGetLabelPointer PuzzleSaveLocations, table_address
 1099                       ;LDA bank_index
 1100                       ;ASL A
 1101                       ;TAY
 1102                       ;JSR GetTableAtIndex
 1103                     
 1104  06:CC70  C8          INY 
 1105  06:CC71  C8          INY
 1106  06:CC72  C8          INY   ;start at highest time loc
 1107  06:CC73  AD 06 70    LDA GameTime+3
 1108  06:CC76  D1 16       CMP [table_address], y
 1109  06:CC78  90 29       BCC .updateTime
 1110  06:CC7A  B0 2A       BCS .leave
 1111  06:CC7C  88          DEY
 1112  06:CC7D  AD 05 70    LDA GameTime+2
 1113  06:CC80  D1 16       CMP [table_address], y
 1114  06:CC82  90 1F       BCC .updateTime
 1115  06:CC84  B0 20       BCS .leave
 1116  06:CC86  88          DEY
 1117  06:CC87  AD 04 70    LDA GameTime+1
 1118  06:CC8A  D1 16       CMP [table_address], y
 1119  06:CC8C  90 15       BCC .updateTime
 1120  06:CC8E  B0 16       BCS .leave
 1121  06:CC90  88          DEY
 1122  06:CC91  B1 16       LDA [table_address], y
 1123  06:CC93  29 0F       AND #$0F
 1124  06:CC95  8D 00 00    STA temp1
 1125  06:CC98  AD 03 70    LDA GameTime
 1126  06:CC9B  CD 00 00    CMP temp1
 1127  06:CC9E  90 03       BCC .updateTime
 1128  06:CCA0  4C A6 CC    JMP .leave
 1129                       
 1130  06:CCA3            .updateTime:
 1131                     
 1132  06:CCA3  EE D1 00    INC recordSet
 1133                       
 1134  06:CCA6            .leave:
 1135  06:CCA6  60          RTS
 1136                         
 1137                     
 1138  06:CCA7            CheckAgainstSolution:
 1139                       ;;take Y position, mult by 2 to get starting index in puzzle solution
 1140  06:CCA7  AD CA 00    LDA mouse_index+1
 1141                     ;;if the puzzle is a 5x5, we only have one byte per row, so no need to double this
 1142  06:CCAA  8D 00 00    STA temp1
 1143  06:CCAD  A0 00       LDY #$00
 1144  06:CCAF  B1 AD       LDA [puzzle_address], y
 1145  06:CCB1  F0 03       BEQ .skipDouble
 1146  06:CCB3  0E 00 00    ASL temp1
 1147  06:CCB6            .skipDouble:
 1148  06:CCB6  AD 00 00    LDA temp1
 1149  06:CCB9  18          CLC
 1150  06:CCBA  69 06       ADC #$06 ;; add to get past header
 1151  06:CCBC  8D 00 00    STA temp1
 1152                       
 1153                       ;;div X position by 8 to get the byte index
 1154  06:CCBF  AD C9 00    LDA mouse_index
 1155  06:CCC2  4A          LSR A
 1156  06:CCC3  4A          LSR A
 1157  06:CCC4  4A          LSR A
 1158  06:CCC5  F0 03       BEQ .getMask
 1159                       
 1160  06:CCC7  EE 00 00    INC temp1
 1161                       
 1162  06:CCCA            .getMask:
 1163                       
 1164  06:CCCA  AD C9 00    LDA mouse_index
 1165  06:CCCD  29 07       AND #$07
 1166  06:CCCF  AA          TAX
 1167  06:CCD0  A9 80       LDA #$80
 1168  06:CCD2  E0 00       CPX #$00
 1169  06:CCD4  F0 04       BEQ .storeMask
 1170                     
 1171  06:CCD6            .maskLoop:
 1172  06:CCD6  4A          LSR A
 1173  06:CCD7  CA          DEX
 1174  06:CCD8  D0 FC       BNE .maskLoop
 1175  06:CCDA            .storeMask:
 1176  06:CCDA  8D 01 00    STA temp2
 1177                     
 1178  06:CCDD  AC 00 00    LDY temp1
 1179  06:CCE0  B1 AD       LDA [puzzle_address], y
 1180  06:CCE2  2D 01 00    AND temp2
 1181  06:CCE5  8D 00 00    STA temp1     ;get the 0/non zero solution flag 
 1182                     
 1183  06:CCE8  A0 00       LDY #$00
 1184  06:CCEA  B1 C7       LDA [mouse_location], y
 1185  06:CCEC  8D 02 00    STA temp3
 1186  06:CCEF  29 F0       AND #$F0
 1187  06:CCF1  CD CB 00    CMP currentPaintTile
 1188  06:CCF4  D0 01       BNE .diffTiles
 1189  06:CCF6  60          RTS
 1190                       
 1191  06:CCF7            .diffTiles:
 1192                       ;;tiles are different- check if the current tile is marked as a solution tile
 1193  06:CCF7  C9 70       CMP #$70
 1194  06:CCF9  D0 0B       BNE .checkNewMark
 1195                       ;;if erasing a mark, check if the tile was part of the solution
 1196  06:CCFB  AD 00 00    LDA temp1
 1197  06:CCFE  D0 18       BNE .antiMark
 1198  06:CD00  CE 02 70    DEC nonSolutionCount
 1199  06:CD03  4C 21 CD    JMP .leave
 1200                       
 1201  06:CD06            .checkNewMark:
 1202                     
 1203  06:CD06  AD CB 00    LDA currentPaintTile
 1204  06:CD09  C9 70       CMP #$70
 1205  06:CD0B  D0 14       BNE .leave
 1206                       
 1207  06:CD0D  AD 00 00    LDA temp1
 1208  06:CD10  D0 0C       BNE .proMark
 1209  06:CD12  EE 02 70    INC nonSolutionCount 
 1210  06:CD15  4C 21 CD    JMP .leave 
 1211                       
 1212  06:CD18            .antiMark:
 1213  06:CD18  CE 01 70    DEC solutionCount
 1214  06:CD1B  4C 21 CD    JMP .leave
 1215  06:CD1E            .proMark:   
 1216                       
 1217  06:CD1E  EE 01 70    INC solutionCount
 1218  06:CD21            .leave:
 1219  06:CD21  60          RTS   
 1220                     
 1221                     ;hori, vert
 1222  06:CD22            MouseMinimums:
 1223  06:CD22  6A 5A       .db $6A, $5A
 1224  06:CD24  6A 5A       .db $6A, $5A
 1225  06:CD26  6A 5A       .db $6A, $5A
 1226  06:CD28            MouseMaximums:
 1227  06:CD28  9A 8A       .db $9A, $8A
 1228  06:CD2A  C2 B2       .db $C2, $B2
 1229  06:CD2C  EA DA       .db $EA, $DA
 1230                       
 1231           0012      VERT_CLUE_MIN = $12
 1232           0022      HORI_CLUE_MIN = $22
 1233           006A      HORI_CLUE_MAX = $6A
 1234           005A      VERT_CLUE_MAX = $5A
 1235                       
 1236  06:CD2E            PuzzleScrollHori:
 1237  06:CD2E  01 04 06    .db $01, $04, $06
 1238  06:CD31            PuzzleScrollVert:
 1239  06:CD31  01 03 05    .db $01, $03, $05
 1240                       
 1241  06:CD34            PuzzleHeaderSkips:
 1242                     
 1243  06:CD34  0B 1A 24    .db $0B, $1A, $24
 1244                       
 1245  06:CD37            PuzzleSaveLocations:
 1246  06:CD37  0A 70       .word puzzle_clear_bank0, puzzle_clear_bank1, puzzle_clear_bank2
       06:CD39  76 70     
       06:CD3B  E2 70     
 1247                     
 1248                       
 1249           0060      PAUSE_YES = $60
 1250           0088      PAUSE_NO = $88
 1251                     
 1252                       
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGameOver.asm
  173                       .include "Routines/Game_States/UpdateGameOver.asm"
    1  06:CD3D            UpdateGameOver:
    2                     
    3  06:CD3D  AD 10 00    LDA NMI_locks
    4  06:CD40  F0 01       BEQ .unlocked
    5                       
    6  06:CD42  60          RTS
    7                       
    8  06:CD43            .unlocked:
    9                     
   10  06:CD43  20 47 CD    JSR DoUpdateGameOver 
   11  06:CD46  60          RTS
   12                       
   13  06:CD47            DoUpdateGameOver:
   14                     
   15  06:CD47  AD 0F 00    LDA mode_state
   16  06:CD4A  20 47 D0    JSR Dynamic_Jump
   17                         
   18  06:CD4D            UpdateGameOverJumpTable:
   19                     
   20  06:CD4D  57 CD       .word UpdateGameOverInit
   21  06:CD4F  A6 CD       .word UpdateDrawMessage
   22  06:CD51  CB CD       .word UpdateGameOverWaitInput
   23  06:CD53  90 CE       .word UpdateGameOverFadeOut
   24  06:CD55  A5 CE       .word UpdateGameOverExit
   25                       
   26  06:CD57            UpdateGameOverInit:
   27                     
   28                       ;load the hasContinue flag
   29                       ;choose the message to print based on the flag
   30  06:CD57  A9 04       lda #$04
   31  06:CD59  8D D6 00    sta current_song
   32  06:CD5C  AD D6 00    lda current_song
   33  06:CD5F  20 0B A1    jsr sound_load
   34                       
   35                       MACROGetLabelPointer EndScreens, table_address
                          
       06:CD62  A9 FC             LDA #HIGH(EndScreens)
       06:CD64  A2 CA             LDX #LOW(EndScreens)
                                  
       06:CD66  8E 16 00          STX table_address
       06:CD69  8D 17 00          STA table_address+1
                                  
   36  06:CD6C  AD 00 70    LDA hasContinue
   37  06:CD6F  0A          ASL A
   38  06:CD70  A8          TAY
   39  06:CD71  20 6D D0    JSR GetTableAtIndex
   40                       MACROGetPointer table_address, clues_address
                          
       06:CD74  AD 16 00          LDA table_address
       06:CD77  8D AF 00          STA clues_address
       06:CD7A  AD 17 00          LDA table_address+1
       06:CD7D  8D B0 00          STA clues_address+1
                          
   41                       
   42                       ;this gets us the pointer to the table- now we'll set up the starting draw address
   43  06:CD80  A0 00       LDY #$00
   44  06:CD82  B1 AF       LDA [clues_address], y
   45  06:CD84  8D BD 00    STA clue_draw_address
   46  06:CD87  C8          INY
   47  06:CD88  B1 AF       LDA [clues_address], y
   48  06:CD8A  8D BE 00    STA clue_draw_address+1 
   49                     
   50  06:CD8D  AD AF 00    LDA clues_address
   51  06:CD90  18          CLC
   52  06:CD91  69 02       ADC #$02
   53  06:CD93  8D AF 00    STA clues_address
   54  06:CD96  AD B0 00    LDA clues_address+1
   55  06:CD99  69 00       ADC #$00
   56  06:CD9B  8D B0 00    STA clues_address+1
   57                       
   58  06:CD9E  A9 00       LDA #$00
   59  06:CDA0  8D C0 00    STA clueLineIndex
   60                       ;;table address is now at the first string to draw
   61                         
   62  06:CDA3  EE 0F 00    INC mode_state
   63                     
   64                     ;no RTS, just update a line immediately
   65                     
   66  06:CDA6            UpdateDrawMessage:
   67                     
   68  06:CDA6  AD 00 70    LDA hasContinue
   69                       
   70  06:CDA9  F0 06       BEQ .drawClear
   71                       
   72  06:CDAB  20 1F CF    JSR DrawSaveText
   73                     
   74  06:CDAE  4C B4 CD    JMP .checkLeave
   75                       
   76  06:CDB1            .drawClear
   77                     
   78  06:CDB1  20 B6 CE    JSR DrawClearText 
   79                       
   80  06:CDB4            .checkLeave:
   81  06:CDB4  90 14       BCC .leave
   82                     
   83  06:CDB6            .changeModeState:
   84                     
   85  06:CDB6  AD 00 70    LDA hasContinue
   86  06:CDB9  D0 07       BNE .skipSpriteSet
   87                       
   88  06:CDBB  A9 01       LDA #$01
   89  06:CDBD  A2 00       LDX #$00
   90  06:CDBF  20 06 C3    JSR SetSpriteImage
   91                       
   92  06:CDC2            .skipSpriteSet:
   93  06:CDC2  EE 0F 00    INC mode_state
   94  06:CDC5  A9 00       LDA #$00
   95  06:CDC7  8D 0A 00    STA time
   96  06:CDCA            .leave:
   97  06:CDCA  60          RTS
   98                       
   99                       
  100  06:CDCB            UpdateGameOverWaitInput:
  101                     
  102                       ;;if there was a record set, flash the time
  103  06:CDCB  AD D1 00    LDA recordSet
  104  06:CDCE  F0 03       BEQ .updateWait
  105  06:CDD0  20 45 CF    JSR FlashTime
  106                     
  107  06:CDD3            .updateWait:
  108  06:CDD3  AD 00 70    LDA hasContinue
  109  06:CDD6  F0 06       BEQ .checkOption
  110                       
  111  06:CDD8  AD 1C 00    LDA gamepadPressed
  112  06:CDDB  D0 37       BNE .loadTitle
  113  06:CDDD            .leaveEarly:
  114  06:CDDD  60          RTS
  115                       
  116  06:CDDE            .checkOption:
  117  06:CDDE  AD 1C 00    LDA gamepadPressed
  118  06:CDE1  C9 01       CMP #GAMEPAD_A
  119  06:CDE3  F0 24       BEQ .checkA
  120                       
  121                       ;;update pointer
  122                       
  123  06:CDE5  AD 1C 00    LDA gamepadPressed
  124  06:CDE8  29 C0       AND #GAMEPAD_HORI
  125                       ;;binary system- left and right don't really matter, we'll just toggle the position
  126  06:CDEA  F0 F1       BEQ .leaveEarly
  127  06:CDEC  20 FE C4    JSR PlayMenuCursorSound
  128  06:CDEF  A9 03       LDA #SPRITE_XPOS
  129  06:CDF1  A2 00       LDX #$00
  130  06:CDF3  20 1D C3    JSR GetSpriteData
  131                       
  132  06:CDF6  C9 58       CMP #GO_YES
  133  06:CDF8  F0 05       BEQ .loadNo
  134                       
  135  06:CDFA  A9 58       LDA #GO_YES
  136  06:CDFC  4C 01 CE    JMP .setPosition
  137                       
  138  06:CDFF            .loadNo:
  139  06:CDFF  A9 80       LDA #GO_NO
  140                     
  141  06:CE01            .setPosition:
  142                       
  143  06:CE01  A2 00       LDX #$00
  144  06:CE03  20 FB C2    JSR SetSpriteXPosition  
  145                     
  146  06:CE06  4C 8F CE    JMP .leave 
  147                       
  148  06:CE09            .checkA:
  149                       
  150  06:CE09  A9 03       LDA #SPRITE_XPOS
  151  06:CE0B  A2 00       LDX #$00
  152  06:CE0D  20 1D C3    JSR GetSpriteData
  153                       
  154  06:CE10  C9 80       CMP #GO_NO
  155                       
  156                       ;no? go to main menu
  157                       ;yes? update puzzle index and go to game
  158                       ;if puzzle index is the last of the bank, return to menu anyways- we'll polish with a different message later
  159  06:CE12  D0 0D       BNE .loadNext
  160                       
  161                       ;load the title as the next screen
  162  06:CE14            .loadTitle:
  163  06:CE14  A9 00       LDA #TITLE_IDX
  164  06:CE16  8D CF 00    STA targetGameMode
  165  06:CE19  A9 00       LDA #$00
  166  06:CE1B  8D D0 00    STA targetScreenLoad
  167  06:CE1E  4C 87 CE    JMP .changeModeState
  168                      
  169  06:CE21            .loadNext:  
  170                     
  171  06:CE21  EE 08 70    INC puzzle_index
  172  06:CE24  AD 08 70    LDA puzzle_index
  173  06:CE27  C9 1B       CMP #27
  174  06:CE29  D0 12       BNE .goToNextPuzzle
  175                     
  176                       ;; load a new bank, first
  177  06:CE2B  EE 07 70    INC bank_index
  178  06:CE2E  AD 07 70    LDA bank_index
  179  06:CE31  C9 03       CMP #03
  180  06:CE33  F0 DF       BEQ .loadTitle
  181                       
  182  06:CE35  A9 00       LDA #$00
  183  06:CE37  8D 08 70    STA puzzle_index
  184  06:CE3A  20 E8 C3    JSR LoadBank
  185                       
  186                       
  187  06:CE3D            .goToNextPuzzle:
  188                     
  189                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:CE3D  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:CE3F  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:CE41  8E 16 00          STX table_address
       06:CE44  8D 17 00          STA table_address+1
                                  
  190                       MACROGetDoubleIndex puzzle_index
                          
       06:CE47  AD 08 70          LDA puzzle_index
       06:CE4A  0A                ASL A
       06:CE4B  A8                TAY
                                  
  191  06:CE4C  20 6D D0    JSR GetTableAtIndex
  192                       MACROGetPointer table_address, puzzle_address
                          
       06:CE4F  AD 16 00          LDA table_address
       06:CE52  8D AD 00          STA puzzle_address
       06:CE55  AD 17 00          LDA table_address+1
       06:CE58  8D AE 00          STA puzzle_address+1
                          
  193                       
  194                       MACROGetLabelPointer NAMES_TABLE, table_address
                          
       06:CE5B  A9 A0             LDA #HIGH(NAMES_TABLE)
       06:CE5D  A2 36             LDX #LOW(NAMES_TABLE)
                                  
       06:CE5F  8E 16 00          STX table_address
       06:CE62  8D 17 00          STA table_address+1
                                  
  195                       MACROGetDoubleIndex puzzle_index
                          
       06:CE65  AD 08 70          LDA puzzle_index
       06:CE68  0A                ASL A
       06:CE69  A8                TAY
                                  
  196  06:CE6A  20 6D D0    JSR GetTableAtIndex
  197                       MACROGetPointer table_address, title_address
                          
       06:CE6D  AD 16 00          LDA table_address
       06:CE70  8D B1 00          STA title_address
       06:CE73  AD 17 00          LDA table_address+1
       06:CE76  8D B2 00          STA title_address+1
                          
  198                     
  199  06:CE79  A9 01       LDA #GAME_IDX
  200  06:CE7B  8D CF 00    STA targetGameMode
  201                       
  202  06:CE7E  A0 00       LDY #$00
  203  06:CE80  B1 AD       LDA [puzzle_address], y
  204  06:CE82  09 20       ORA #%00100000
  205  06:CE84  8D D0 00    STA targetScreenLoad
  206                     
  207  06:CE87            .changeModeState:
  208                     
  209  06:CE87  A9 00       LDA #$00
  210  06:CE89  8D 0A 00    STA time
  211  06:CE8C  EE 0F 00    INC mode_state
  212  06:CE8F            .leave:
  213  06:CE8F  60          RTS
  214                     
  215  06:CE90            UpdateGameOverFadeOut:
  216                     
  217  06:CE90  AD 0A 00    LDA time
  218  06:CE93  29 07       AND #$07
  219  06:CE95  D0 0D       BNE .leave
  220                       ;;every 8 frames, decrement the palettes
  221  06:CE97  20 46 D2    JSR FadeOutPalettes
  222  06:CE9A  B0 08       BCS .leave
  223                     
  224  06:CE9C            .changeModeState:
  225  06:CE9C  A9 00       LDA #$00
  226  06:CE9E  8D 0A 00    STA time
  227  06:CEA1  EE 0F 00    INC mode_state
  228  06:CEA4            .leave:
  229  06:CEA4  60          RTS
  230                     
  231  06:CEA5            UpdateGameOverExit:
  232                     
  233  06:CEA5  AD 0A 00    LDA time
  234  06:CEA8  29 0F       AND #$0F
  235  06:CEAA  D0 09       BNE .leave
  236                     
  237  06:CEAC  AD CF 00    LDA targetGameMode
  238  06:CEAF  AE D0 00    LDX targetScreenLoad
  239  06:CEB2  20 76 CF    JSR ChangeGameMode
  240                       
  241  06:CEB5            .leave:
  242  06:CEB5  60          RTS
  243                       
  244  06:CEB6            DrawClearText:
  245                     
  246                       ;;for the clear, we draw multiple lines
  247                       ;;table address location is the print loation
  248                       MACROAddPPUStringEntryTablePtr clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, clues_address
                           
       06:CEB6  A9 01       LDA #$01
       06:CEB8  8D 23 00    STA PPU_PendingWrite
       06:CEBB  AD BE 00    LDA clue_draw_address+1
       06:CEBE  20 C9 D1    JSR WriteToPPUString
       06:CEC1  AD BD 00    LDA clue_draw_address
       06:CEC4  20 C9 D1    JSR WriteToPPUString
       06:CEC7  A9 20       LDA #$20
       06:CEC9  09 00       ORA #DRAW_HORIZONTAL
       06:CECB  20 C9 D1    JSR WriteToPPUString
       06:CECE  AD AF 00    LDA clues_address
       06:CED1  20 C9 D1    JSR WriteToPPUString
       06:CED4  AD B0 00    LDA clues_address+1
       06:CED7  20 C9 D1    JSR WriteToPPUString
                           
  249  06:CEDA  EE C0 00    INC clueLineIndex
  250  06:CEDD  AD C0 00    LDA clueLineIndex
  251  06:CEE0  C9 02       CMP #$02
  252  06:CEE2  F0 07       BEQ .printTime
  253  06:CEE4  C9 04       CMP #$04
  254  06:CEE6  F0 35       BEQ .finish
  255  06:CEE8  4C F2 CE    JMP .updateClueAddress
  256                       
  257  06:CEEB            .printTime:
  258                     
  259  06:CEEB  A9 21       LDA #$21
  260  06:CEED  A2 31       LDX #$31  
  261  06:CEEF  20 9C D6    JSR ApplyGameTimeToPPUString
  262                     
  263  06:CEF2            .updateClueAddress:
  264  06:CEF2  AD BD 00    LDA clue_draw_address
  265  06:CEF5  18          CLC
  266  06:CEF6  69 40       ADC #$40
  267  06:CEF8  8D BD 00    STA clue_draw_address
  268  06:CEFB  AD BE 00    LDA clue_draw_address+1
  269  06:CEFE  69 00       ADC #$00
  270  06:CF00  8D BE 00    STA clue_draw_address+1
  271                       
  272  06:CF03  A0 00       LDY #$00
  273  06:CF05  B1 AF       LDA [clues_address],y
  274  06:CF07  AA          TAX
  275  06:CF08  E8          INX
  276  06:CF09  8A          TXA
  277  06:CF0A  18          CLC
  278  06:CF0B  6D AF 00    ADC clues_address
  279  06:CF0E  8D AF 00    STA clues_address
  280  06:CF11  AD B0 00    LDA clues_address+1
  281  06:CF14  69 00       ADC #$00
  282  06:CF16  8D B0 00    STA clues_address+1
  283                       
  284  06:CF19  18          CLC
  285  06:CF1A  4C 1E CF    JMP .leave
  286  06:CF1D            .finish:
  287                     
  288  06:CF1D  38          SEC
  289  06:CF1E            .leave
  290  06:CF1E  60          RTS
  291                       
  292  06:CF1F            DrawSaveText:
  293                     
  294                       MACROAddPPUStringEntryTablePtr clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, clues_address
                           
       06:CF1F  A9 01       LDA #$01
       06:CF21  8D 23 00    STA PPU_PendingWrite
       06:CF24  AD BE 00    LDA clue_draw_address+1
       06:CF27  20 C9 D1    JSR WriteToPPUString
       06:CF2A  AD BD 00    LDA clue_draw_address
       06:CF2D  20 C9 D1    JSR WriteToPPUString
       06:CF30  A9 20       LDA #$20
       06:CF32  09 00       ORA #DRAW_HORIZONTAL
       06:CF34  20 C9 D1    JSR WriteToPPUString
       06:CF37  AD AF 00    LDA clues_address
       06:CF3A  20 C9 D1    JSR WriteToPPUString
       06:CF3D  AD B0 00    LDA clues_address+1
       06:CF40  20 C9 D1    JSR WriteToPPUString
                           
  295  06:CF43  38          SEC
  296  06:CF44  60          RTS
  297                      
  298  06:CF45            FlashTime:
  299                     
  300  06:CF45  AD 0A 00    LDA time
  301  06:CF48  29 03       AND #$03
  302  06:CF4A  D0 27       BNE .leave
  303                       
  304                       MACROAddPPUStringEntryRawData #$3F, #$02, #DRAW_HORIZONTAL, #$01
                          
       06:CF4C  A9 01       LDA #$01
       06:CF4E  8D 23 00    STA PPU_PendingWrite
       06:CF51  A9 3F       LDA #$3F
       06:CF53  20 C9 D1    JSR WriteToPPUString
       06:CF56  A9 02       LDA #$02
       06:CF58  20 C9 D1    JSR WriteToPPUString
       06:CF5B  A9 00       LDA #DRAW_HORIZONTAL
       06:CF5D  20 C9 D1    JSR WriteToPPUString
       06:CF60  A9 01       LDA #$01 
       06:CF62  20 C9 D1    JSR WriteToPPUString
                            
  305  06:CF65  AD 0A 00    LDA time
  306  06:CF68  4A          LSR A
  307  06:CF69  4A          LSR A
  308  06:CF6A  29 01       AND #$01
  309  06:CF6C  AA          TAX
  310  06:CF6D  BD 74 CF    LDA FlashColors, x
  311  06:CF70  20 C9 D1    JSR WriteToPPUString
  312                      
  313  06:CF73            .leave
  314  06:CF73  60          RTS 
  315                     
  316  06:CF74            FlashColors:
  317                     
  318  06:CF74  2C 16       .db $2C, $16
  319                     
  320                        
  321                     
  322           0058      GO_YES = $58
  323           0080      GO_NO = $80
#[1]   Picross.asm
  174                       
  175                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  176                     ;;     Routines             ;;
  177                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  178                     
  179                     
#[2]   Routines/Common/GameModeRoutines.asm
  180                       .include "Routines/Common/GameModeRoutines.asm"
    1  06:CF76            ChangeGameMode:
    2                       ;A - game mode index
    3                       ;X - high nibble: palette start flag, low nibble: screen index
    4  06:CF76  8D 0E 00    STA game_mode
    5  06:CF79  8E 0D 00    STX mode_loadFlags
    6  06:CF7C  A9 00       LDA #$00
    7  06:CF7E  8D 0F 00    STA mode_state
    8  06:CF81  20 DD D1    JSR ClearPPUString
    9  06:CF84  20 88 CF    JSR LoadGameModeScreen
   10  06:CF87  60          RTS
   11                       
   12  06:CF88            LoadGameModeScreen:
   13                     
   14                       MACROSetFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:CF88  AD 10 00    LDA NMI_locks
       06:CF8B  09 01       ORA #BGLOAD_NMI_LOCK
       06:CF8D  8D 10 00    STA NMI_locks
                                  
   15                       
   16  06:CF90  A9 00       LDA #$00
   17  06:CF92  8D 01 20    STA PPU_MASK    ; disable rendering- reenable on NMI when not updating
   18                     
   19  06:CF95  20 C3 CF    JSR LoadGameModeBackground
   20  06:CF98  20 24 D0    JSR LoadGameModeSprites
   21                     
   22                       MACROClearFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:CF9B  A9 01       LDA #BGLOAD_NMI_LOCK
       06:CF9D  49 FF       EOR #$FF
       06:CF9F  2D 10 00    AND NMI_locks  
       06:CFA2  8D 10 00    STA NMI_locks
                          
   23                     
   24                       
   25                       ;; load the CHR bank for this mode
   26  06:CFA5  20 B0 D2    JSR ResetMapper
   27                       ;;remember, we're loading the SECOND set in each chr bank
   28                       ;;so we'll take the index from the game mode chr table and add one mult 2
   29  06:CFA8  AE 0E 00    LDX game_mode
   30  06:CFAB  BD 41 D0    LDA gameModeInitCHRROMB, x
   31  06:CFAE  0A          ASL A
   32  06:CFAF  18          CLC 
   33  06:CFB0  69 01       ADC #$01
   34  06:CFB2  20 D5 D2    JSR LoadCHRBankB
   35                       
   36  06:CFB5  20 B0 D2    JSR ResetMapper
   37  06:CFB8  AE 0E 00    LDX game_mode
   38  06:CFBB  BD 44 D0    LDA gameModeInitCHRROMA, x
   39  06:CFBE  0A          ASL A
   40  06:CFBF  20 CA D2    JSR LoadCHRBankA
   41                       
   42                       
   43                       
   44  06:CFC2  60          RTS
   45                       
   46  06:CFC3            LoadGameModeBackground:
   47                             
   48                       MACROGetDoubleIndex game_mode
                          
       06:CFC3  AD 0E 00          LDA game_mode
       06:CFC6  0A                ASL A
       06:CFC7  A8                TAY
                                  
   49  06:CFC8  8C 00 00    STY temp1
   50                             
   51                       MACROGetLabelPointer Palettes, table_address
                          
       06:CFCB  A9 E0             LDA #HIGH(Palettes)
       06:CFCD  A2 00             LDX #LOW(Palettes)
                                  
       06:CFCF  8E 16 00          STX table_address
       06:CFD2  8D 17 00          STA table_address+1
                                  
   52  06:CFD5  20 6D D0    JSR GetTableAtIndex
   53                     
   54  06:CFD8  20 7A D0    JSR LoadFullPaletteFromTable
   55                             
   56  06:CFDB  AC 00 00    LDY temp1
   57  06:CFDE  AD 0D 00    LDA mode_loadFlags
   58  06:CFE1  29 40       AND #%01000000 ; copy from saved screen
   59  06:CFE3  F0 0D       BEQ .dontUseSaveCopy
   60                       MACROGetLabelPointer SaveScreen_Copy, table_address
                          
       06:CFE5  A9 68             LDA #HIGH(SaveScreen_Copy)
       06:CFE7  A2 00             LDX #LOW(SaveScreen_Copy)
                                  
       06:CFE9  8E 16 00          STX table_address
       06:CFEC  8D 17 00          STA table_address+1
                                  
   61  06:CFEF  4C 09 D0    JMP .loadTable
   62                       
   63  06:CFF2            .dontUseSaveCopy:
   64                       MACROGetLabelPointer NameTables, table_address
                          
       06:CFF2  A9 E0             LDA #HIGH(NameTables)
       06:CFF4  A2 06             LDX #LOW(NameTables)
                                  
       06:CFF6  8E 16 00          STX table_address
       06:CFF9  8D 17 00          STA table_address+1
                                  
   65  06:CFFC  20 6D D0    JSR GetTableAtIndex
   66  06:CFFF  AD 0D 00    LDA mode_loadFlags
   67  06:D002  29 0F       AND #$0F
   68  06:D004  0A          ASL A
   69  06:D005  A8          TAY
   70  06:D006  20 6D D0    JSR GetTableAtIndex
   71                             
   72  06:D009            .loadTable:
   73  06:D009  A9 00       LDA #$00
   74  06:D00B  20 A9 D0    JSR LoadFullBackgroundFromTable
   75                       
   76  06:D00E  AC 00 00    LDY temp1
   77                       MACROGetLabelPointer NameTables2, table_address
                          
       06:D011  A9 E0             LDA #HIGH(NameTables2)
       06:D013  A2 0C             LDX #LOW(NameTables2)
                                  
       06:D015  8E 16 00          STX table_address
       06:D018  8D 17 00          STA table_address+1
                                  
   78  06:D01B  20 6D D0    JSR GetTableAtIndex
   79                       
   80  06:D01E  A9 01       LDA #$01
   81  06:D020  20 A9 D0    JSR LoadFullBackgroundFromTable
   82                       
   83  06:D023  60          RTS
   84                       
   85  06:D024            LoadGameModeSprites:
   86                     
   87                       MACROGetDoubleIndex game_mode  
                          
       06:D024  AD 0E 00          LDA game_mode
       06:D027  0A                ASL A
       06:D028  A8                TAY
                                  
   88                       MACROGetLabelPointer Sprites, table_address
                          
       06:D029  A9 FD             LDA #HIGH(Sprites)
       06:D02B  A2 28             LDX #LOW(Sprites)
                                  
       06:D02D  8E 16 00          STX table_address
       06:D030  8D 17 00          STA table_address+1
                                  
   89  06:D033  20 6D D0    JSR GetTableAtIndex
   90  06:D036  A0 00       LDY #$00
   91  06:D038  B1 16       LDA [table_address],y
   92  06:D03A  EE 16 00    INC table_address
   93  06:D03D  20 B2 D1    JSR LoadSprites_impl
   94                       
   95  06:D040  60          RTS
   96                       
   97  06:D041            gameModeInitCHRROMB:
   98  06:D041  00 02 02          .db $00, $02, $02
   99  06:D044            gameModeInitCHRROMA:
  100  06:D044  00 02 02          .db $00, $02, $02
  101                             
#[1]   Picross.asm
#[2]   Routines/Utils/PointerUtils.asm
  181                       .include "Routines/Utils/PointerUtils.asm"
    1  06:D047            Dynamic_Jump:
    2                     
    3  06:D047  0A          ASL A                                 ;; double the index passed into A
    4  06:D048  8E 08 00    STX tempx
    5  06:D04B  8C 09 00    STY tempy
    6  06:D04E  A8          TAY
    7  06:D04F  C8          INY  
    8  06:D050  68          PLA
    9  06:D051  8D 18 00    STA jump_address
   10  06:D054  68          PLA 
   11  06:D055  8D 19 00    STA jump_address+1            
   12  06:D058  B1 18       LDA [jump_address], y
   13  06:D05A  AA          TAX
   14  06:D05B  C8          INY
   15  06:D05C  B1 18       LDA [jump_address], y
   16  06:D05E  8E 18 00    STX jump_address
   17  06:D061  8D 19 00    STA jump_address+1
   18  06:D064  AE 08 00    LDX tempx
   19  06:D067  AC 09 00    LDY tempy
   20  06:D06A  6C 18 00    JMP [jump_address]
   21                       
   22  06:D06D            GetTableAtIndex:
   23                     
   24  06:D06D  B1 16             LDA [table_address], y
   25  06:D06F  AA                TAX
   26  06:D070  C8                INY
   27  06:D071  B1 16             LDA [table_address], y
   28                             
   29  06:D073            SetTableAddress:
   30                             
   31                             ;;A is hi, X is lo
   32  06:D073  8E 16 00          STX table_address
   33  06:D076  8D 17 00          STA table_address+1
   34  06:D079  60                RTS
#[1]   Picross.asm
#[2]   Routines/Utils/PPUUtils.asm
  182                       .include "Routines/Utils/PPUUtils.asm"
    1  06:D07A            LoadFullPaletteFromTable:
    2                     
    3                       MACROSetPPUAddress $3F00
                          
       06:D07A  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:D07D  A9 3F       LDA #HIGH($3F00)
       06:D07F  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:D082  A9 00       LDA #LOW($3F00)
       06:D084  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
    4  06:D087  A0 00       LDY #$00              ; start out at 0
    5  06:D089  A2 00       LDX #$00
    6  06:D08B            .loop:
    7  06:D08B  B1 16       LDA [table_address], y        ; load data from address (palette + the value in x)
    8  06:D08D  9D 00 6C    STA Palette_Copy, x
    9  06:D090  48          PHA 
   10  06:D091  AD 0D 00    LDA mode_loadFlags
   11  06:D094  29 10       AND #$10
   12  06:D096  D0 04       BNE .setBlack
   13  06:D098  68          PLA 
   14  06:D099  4C 9F D0    JMP .setPPUData
   15  06:D09C            .setBlack:
   16                     
   17  06:D09C  68          PLA 
   18  06:D09D  A9 0F       LDA #$0F
   19                       
   20  06:D09F            .setPPUData:
   21  06:D09F  8D 07 20    STA PPU_DATA            ; write to PPU
   22  06:D0A2  C8          INY                   ; X = X + 1
   23  06:D0A3  E8          INX
   24  06:D0A4  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   25  06:D0A6  D0 E3       BNE .loop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   26  06:D0A8  60          RTS
   27                     
   28  06:D0A9            LoadFullBackgroundFromTable:
   29                     
   30                         ;;use A as an index for which nametable to write to
   31  06:D0A9  20 FD D1          JSR SetNametableFromIndex
   32  06:D0AC  8A                TXA
   33  06:D0AD  4A                LSR A
   34  06:D0AE  29 01             AND #$01
   35  06:D0B0  D0 17             BNE .copyScreenB
   36                             MACROGetLabelPointer Screen_Copy, pointer_address
                          
       06:D0B2  A9 60             LDA #HIGH(Screen_Copy)
       06:D0B4  A2 00             LDX #LOW(Screen_Copy)
                                  
       06:D0B6  8E 12 00          STX pointer_address
       06:D0B9  8D 13 00          STA pointer_address+1
                                  
   37                             MACROGetLabelPointer SaveScreen_Copy, pointerB_address
                          
       06:D0BC  A9 68             LDA #HIGH(SaveScreen_Copy)
       06:D0BE  A2 00             LDX #LOW(SaveScreen_Copy)
                                  
       06:D0C0  8E 14 00          STX pointerB_address
       06:D0C3  8D 15 00          STA pointerB_address+1
                                  
   38  06:D0C6  4C DC D0          JMP .setCounters
   39                             
   40  06:D0C9            .copyScreenB:
   41                             MACROGetLabelPointer ScreenB_Copy, pointer_address
                          
       06:D0C9  A9 64             LDA #HIGH(ScreenB_Copy)
       06:D0CB  A2 00             LDX #LOW(ScreenB_Copy)
                                  
       06:D0CD  8E 12 00          STX pointer_address
       06:D0D0  8D 13 00          STA pointer_address+1
                                  
   42  06:D0D3  AD 0D 00          LDA mode_loadFlags
   43  06:D0D6  2D 00 00          AND $%11011111
   44  06:D0D9  8D 0D 00          STA mode_loadFlags ;kill the copy flag, just in case
   45                             
   46                             ;;set pointer
   47                             ;; set counters
   48  06:D0DC            .setCounters:
   49  06:D0DC  A0 00             LDY #$00
   50  06:D0DE  A2 00             LDX #$00
   51                             
   52                             ;;start loop
   53                     
   54  06:D0E0            .outerloop:
   55                     
   56  06:D0E0            .innerloop:
   57                     
   58  06:D0E0  B1 16             LDA [table_address], y
   59  06:D0E2  8D 07 20          STA PPU_DATA
   60  06:D0E5  91 12             STA [pointer_address],y
   61  06:D0E7  AD 0D 00      LDA mode_loadFlags
   62  06:D0EA  29 20         AND #%00100000      ;check copy flag
   63  06:D0EC  F0 04             BEQ .skipSaveCopy
   64  06:D0EE  B1 16         LDA [table_address], y
   65  06:D0F0  91 14             STA [pointerB_address],y
   66                     
   67  06:D0F2            .skipSaveCopy:
   68  06:D0F2  C8                INY
   69  06:D0F3  C0 00             CPY #$00
   70  06:D0F5  D0 E9             BNE .innerloop
   71                     
   72  06:D0F7  EE 13 00          INC pointer_address+1
   73  06:D0FA  EE 17 00          INC table_address+1
   74  06:D0FD  EE 15 00          INC pointerB_address+1
   75                             
   76  06:D100  E8                INX
   77  06:D101  E0 04             CPX #$04
   78  06:D103  D0 DB             BNE .outerloop
   79  06:D105  60                RTS
   80                             
   81                     
   82           0000      DATA_LEN = temp1
   83           0001      WRITE_SETTINGS = temp2
   84                             
   85  06:D106            ProcessPPUString:
   86                     
   87  06:D106  AD 23 00          LDA PPU_PendingWrite
   88  06:D109  D0 01             BNE .continueProcess
   89  06:D10B  60                RTS
   90                             
   91  06:D10C            .continueProcess:
   92  06:D10C  A0 00             LDY #$00
   93                             
   94  06:D10E  A9 25             LDA #LOW(PPU_String)
   95  06:D110  8D 12 00          STA pointer_address
   96  06:D113  A9 00             LDA #HIGH(PPU_String)
   97  06:D115  8D 13 00          STA pointer_address + 1
   98                     
   99  06:D118            .outerloop:
  100  06:D118  AD 02 20          LDA PPU_STATUS
  101  06:D11B  B1 12             LDA [pointer_address], y
  102  06:D11D  F0 79             BEQ .finish
  103  06:D11F  8D 06 20          STA PPU_ADDR
  104  06:D122  C8                INY
  105  06:D123  B1 12             LDA [pointer_address], y
  106  06:D125  8D 06 20          STA PPU_ADDR
  107  06:D128  C8            INY 
  108  06:D129  B1 12             LDA [pointer_address], y
  109  06:D12B  8D 01 00          STA WRITE_SETTINGS
  110  06:D12E  C8                INY
  111                             
  112  06:D12F  AD 00 20          LDA PPU_CTRL
  113  06:D132  29 FB             AND #$FB
  114  06:D134  8D 00 20          STA PPU_CTRL
  115                             
  116  06:D137  AD 01 00          LDA WRITE_SETTINGS      ;check horizontal or vertical write
  117  06:D13A  29 80             AND #%10000000
  118  06:D13C  F0 06             BEQ .checkRepeat
  119  06:D13E  0D 00 20          ORA PPU_CTRL 
  120  06:D141  8D 00 20          STA PPU_CTRL 
  121                             
  122                             
  123  06:D144            .checkRepeat:
  124  06:D144  AD 01 00    LDA WRITE_SETTINGS
  125  06:D147  29 40       AND #%01000000
  126  06:D149  F0 19       BEQ .checkTable
  127                       
  128  06:D14B  AD 01 00    LDA WRITE_SETTINGS
  129  06:D14E  29 3F       AND #$3F
  130  06:D150  8D 00 00    STA DATA_LEN
  131                       ;;the usual data length byte is now the repeatable byte
  132  06:D153  A2 00       LDX #$00
  133                       
  134  06:D155            .repeatLoop:
  135  06:D155  B1 12       LDA [pointer_address], y
  136  06:D157  8D 07 20    STA PPU_DATA
  137  06:D15A  E8          INX 
  138  06:D15B  EC 00 00    CPX DATA_LEN
  139  06:D15E  D0 F5       BNE .repeatLoop
  140  06:D160  C8          INY
  141  06:D161  4C 18 D1    JMP .outerloop
  142                             
  143  06:D164            .checkTable:
  144  06:D164  AD 01 00          LDA WRITE_SETTINGS
  145  06:D167  29 20             AND #%00100000
  146  06:D169  F0 16             BEQ .rawData
  147                             
  148  06:D16B  B1 12             LDA [pointer_address], y
  149  06:D16D  8D 16 00          STA table_address
  150  06:D170  C8                INY 
  151  06:D171  B1 12             LDA [pointer_address], y
  152  06:D173  8D 17 00          STA table_address + 1
  153  06:D176  C8                INY
  154  06:D177  98                TYA 
  155  06:D178  48                PHA
  156  06:D179  20 9C D1          JSR WriteToPPUFromTable
  157  06:D17C  68                PLA
  158  06:D17D  A8                TAY
  159  06:D17E  4C 18 D1          JMP .outerloop
  160                             
  161  06:D181            .rawData:
  162                     
  163  06:D181  B1 12             LDA [pointer_address], y
  164  06:D183  C8                INY
  165  06:D184  8D 00 00          STA DATA_LEN
  166                     
  167  06:D187  A2 00             LDX #$00
  168                     
  169  06:D189            .innerloop:
  170                             
  171  06:D189  B1 12             LDA [pointer_address], y
  172  06:D18B  8D 07 20          STA PPU_DATA
  173  06:D18E  C8                INY
  174  06:D18F  E8                INX
  175  06:D190  EC 00 00          CPX DATA_LEN
  176  06:D193  D0 F4             BNE .innerloop
  177  06:D195  4C 18 D1          JMP .outerloop
  178                             
  179  06:D198            .finish:
  180  06:D198  20 DD D1          JSR ClearPPUString
  181  06:D19B            .leave:
  182  06:D19B  60                RTS
  183                             
  184  06:D19C            WriteToPPUFromTable:
  185  06:D19C  A0 00             LDY #$00
  186  06:D19E  B1 16             LDA [table_address], y
  187  06:D1A0  C8                INY
  188  06:D1A1  8D 00 00          STA DATA_LEN
  189  06:D1A4            .innerloop:
  190  06:D1A4  B1 16             LDA [table_address], y
  191  06:D1A6  8D 07 20          STA PPU_DATA
  192  06:D1A9  C8                INY
  193  06:D1AA  CC 00 00          CPY DATA_LEN
  194  06:D1AD  90 F5             BCC .innerloop ;table should have the size in it, but since we count the byte count, we'll want to wait till we go over it
  195  06:D1AF  F0 F3             BEQ .innerloop
  196  06:D1B1  60                RTS
  197                       
  198  06:D1B2            LoadSprites_impl:
  199                       ;;A will be the amount of sprites to load
  200  06:D1B2  8D 00 00    STA DATA_LEN
  201  06:D1B5  0E 00 00    ASL DATA_LEN
  202  06:D1B8  0E 00 00    ASL DATA_LEN
  203                       
  204  06:D1BB  A0 00       LDY #$00              ; start at 0
  205                       
  206  06:D1BD            .loop:
  207  06:D1BD  B1 16       LDA [table_address], y; load data from address (sprites +  x)
  208  06:D1BF  99 00 02    STA SPRITE_DATA, y    ; store into RAM address ($0200 + x)
  209  06:D1C2  C8          INY                   ; X = X + 1
  210  06:D1C3  CC 00 00    CPY DATA_LEN             ; Compare X to hex $10, decimal 16
  211  06:D1C6  D0 F5       BNE .loop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
  212                                             ; if compare was equal to 16, keep going down   
  213  06:D1C8  60          RTS
  214                     
  215                     
  216  06:D1C9            WriteToPPUString:
  217                     
  218  06:D1C9  AE 24 00          LDX PPU_StringIdx
  219  06:D1CC  E0 4F             CPX #PPU_STRINGMAX
  220  06:D1CE  F0 0C             BEQ .finish
  221                             
  222  06:D1D0  9D 25 00          STA PPU_String, x
  223  06:D1D3  EE 24 00          INC PPU_StringIdx
  224  06:D1D6  E8                INX
  225  06:D1D7  A9 00             LDA #$00
  226  06:D1D9  9D 25 00          STA PPU_String, x
  227                                     
  228  06:D1DC            .finish:
  229  06:D1DC  60                RTS
  230                     
  231  06:D1DD            ClearPPUString:
  232                             
  233  06:D1DD  A9 00             LDA #$00
  234  06:D1DF  8D 24 00          STA PPU_StringIdx
  235  06:D1E2  8D 25 00          STA PPU_String
  236  06:D1E5  8D 23 00          STA PPU_PendingWrite
  237  06:D1E8  60                RTS
  238                     
  239  06:D1E9            DetectSprite0:
  240  06:D1E9            WaitNotSprite0:
  241  06:D1E9  AD 02 20    lda PPU_STATUS
  242  06:D1EC  29 40       and #SPRITE_0_MASK
  243  06:D1EE  D0 F9       bne WaitNotSprite0   ; wait until sprite 0 not hit
  244                     
  245  06:D1F0            WaitSprite0:
  246  06:D1F0  AD 02 20    lda $2002
  247  06:D1F3  29 40       and #SPRITE_0_MASK
  248  06:D1F5  F0 F9       beq WaitSprite0      ; wait until sprite 0 is hit
  249                     
  250  06:D1F7  A2 05       ldx #$05                              ;do a scanline wait
  251  06:D1F9            WaitScanline:
  252  06:D1F9  CA          dex
  253  06:D1FA  D0 FD       bne WaitScanline
  254  06:D1FC  60          RTS
  255                     
  256                     
  257  06:D1FD            SetNametableFromIndex:
  258                     
  259  06:D1FD  48          PHA
  260  06:D1FE  AD 02 20    LDA PPU_STATUS
  261  06:D201  68          PLA
  262  06:D202  0A          ASL A
  263  06:D203  AA          TAX
  264  06:D204  BD 99 D2    LDA NameTableMemList+1, x
  265  06:D207  8D 06 20    STA PPU_ADDR
  266  06:D20A  BD 98 D2    LDA NameTableMemList, x
  267  06:D20D  8D 06 20    STA PPU_ADDR
  268  06:D210  60          RTS
  269                       
  270  06:D211            TurnOnSprites:
  271                      
  272  06:D211  AD 1E 00    LDA PPU_Mask
  273  06:D214  09 10       ORA #%00010000
  274  06:D216  8D 1E 00    STA PPU_Mask
  275  06:D219  60          RTS
  276                       
  277  06:D21A            TurnOffSprites:
  278                       
  279  06:D21A  AD 1E 00    LDA PPU_Mask
  280  06:D21D  29 EF       AND #%11101111
  281  06:D21F  8D 1E 00    STA PPU_Mask
  282  06:D222  60          RTS
  283                     
  284  06:D223            UpdatePPUControl:
  285                     
  286  06:D223  AD 1D 00    LDA PPU_Control
  287  06:D226  29 FC       AND #$FC
  288  06:D228  0D 22 00    ORA PPU_NT
  289  06:D22B  8D 00 20    STA PPU_CTRL
  290  06:D22E  AD 1E 00    LDA PPU_Mask
  291  06:D231  8D 01 20    STA PPU_MASK
  292  06:D234  60          RTS
  293                       
  294  06:D235            InitPPUControl:
  295                       
  296                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
  297                       ; enable sprites, enable background, no clipping on left side
  298  06:D235  A9 90       LDA #%10010000
  299  06:D237  8D 00 20    STA PPU_CTRL
  300  06:D23A  8D 1D 00    STA PPU_Control
  301  06:D23D  A9 1E       LDA #%00011110
  302  06:D23F  8D 01 20    STA PPU_MASK
  303  06:D242  8D 1E 00    STA PPU_Mask
  304  06:D245  60          RTS
  305                       
  306  06:D246            FadeOutPalettes:
  307                     
  308                     ;;take the current values, and decrement the lower nibbles
  309                     ;;we can access from the palette copy 
  310                     ;;we'll make this fade out one level per call
  311                     ;;once all the palettes are blacked out we'll return true, so we'll keep the carry flag as a return result
  312                     
  313                     ;;go through the palette copy, decrement, make a raw data PPU string and add all the bytes into it
  314                     ;;for any palette color already in the 0x range, change it to 0f to get black
  315                     
  316                       MACROGetLabelPointer Palette_Copy, table_address
                          
       06:D246  A9 6C             LDA #HIGH(Palette_Copy)
       06:D248  A2 00             LDX #LOW(Palette_Copy)
                                  
       06:D24A  8E 16 00          STX table_address
       06:D24D  8D 17 00          STA table_address+1
                                  
  317                     ;;palette copy address is now X accessable
  318                     
  319  06:D250  A0 00       LDY #$00
  320                       MACROAddPPUStringEntryRawData #$3F, #$00, #DRAW_HORIZONTAL, #$20  
                          
       06:D252  A9 01       LDA #$01
       06:D254  8D 23 00    STA PPU_PendingWrite
       06:D257  A9 3F       LDA #$3F
       06:D259  20 C9 D1    JSR WriteToPPUString
       06:D25C  A9 00       LDA #$00
       06:D25E  20 C9 D1    JSR WriteToPPUString
       06:D261  A9 00       LDA #DRAW_HORIZONTAL
       06:D263  20 C9 D1    JSR WriteToPPUString
       06:D266  A9 20       LDA #$20 
       06:D268  20 C9 D1    JSR WriteToPPUString
                            
  321                     
  322  06:D26B  A9 00       LDA #$00
  323  06:D26D  8D 00 00    STA temp1
  324                       
  325  06:D270            .loop:
  326                     
  327  06:D270  B1 16       LDA [table_address], y
  328  06:D272  C9 0F       CMP #$0F
  329  06:D274  F0 15       BEQ .addToString
  330  06:D276  C9 10       CMP #$10
  331  06:D278  90 0D       BCC .setBlack
  332                       
  333  06:D27A  A9 80       LDA #$80
  334  06:D27C  8D 00 00    STA temp1
  335                       
  336  06:D27F  B1 16       LDA [table_address], y
  337  06:D281  38          SEC
  338  06:D282  E9 10       SBC #$10
  339  06:D284  4C 89 D2    JMP .setColor
  340                     
  341  06:D287            .setBlack:
  342                     
  343  06:D287  A9 0F       LDA #$0F
  344                     
  345  06:D289            .setColor:
  346  06:D289  91 16       STA [table_address], y
  347                     
  348  06:D28B            .addToString:
  349                     
  350  06:D28B  20 C9 D1    JSR WriteToPPUString
  351                     
  352  06:D28E            .incY:
  353                       
  354  06:D28E  C8          INY
  355  06:D28F  C0 20       CPY #$20
  356  06:D291  D0 DD       BNE .loop
  357                     
  358  06:D293  0E 00 00    ASL temp1     ;get carry out, if we have one
  359                     
  360  06:D296  60          RTS
  361                       
  362  06:D297            FadeInPalettes:
  363                     
  364                     ;;need to be able to store off a target palette first
  365                     ;;we can use the palette copy we make during the game mode change as the target
  366  06:D297  60          RTS
  367                     
  368  06:D298            NameTableMemList:
  369  06:D298  00 20       .word $2000, $2400, $2800, $2C00
       06:D29A  00 24     
       06:D29C  00 28     
       06:D29E  00 2C     
  370  06:D2A0            PalettesMemList:
  371  06:D2A0  00 3F       .word $3F00, $3F04, $3F08, $3F0C
       06:D2A2  04 3F     
       06:D2A4  08 3F     
       06:D2A6  0C 3F     
  372  06:D2A8  10 3F       .word $3F10, $3F14, $3F18, $3F1C  
       06:D2AA  14 3F     
       06:D2AC  18 3F     
       06:D2AE  1C 3F     
  373                       
  374           0024      BLANK_TILE = $24
#[1]   Picross.asm
#[2]   Routines/Utils/MapperUtils.asm
  183                       .include "Routines/Utils/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:D2B0            ResetMapper:
    7  06:D2B0  EE B0 D2    inc ResetMapper
    8  06:D2B3  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:D2B4            SetMapperControls:
   23                       ;;A = controls
   24  06:D2B4  AA          TAX
   25  06:D2B5  A9 80       LDA #MAPPERCONTROL
   26  06:D2B7  8D A6 00    STA mapper_address+1
   27  06:D2BA  8A          TXA
   28  06:D2BB  20 E0 D2    JSR SendMapperCommand
   29  06:D2BE  60          RTS
   30                     
   31  06:D2BF            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:D2BF  AA                TAX
   35  06:D2C0  A9 E0             LDA #PRGBANK
   36  06:D2C2  8D A6 00          STA mapper_address+1
   37  06:D2C5  8A                TXA
   38  06:D2C6  20 E0 D2          JSR SendMapperCommand
   39  06:D2C9  60                RTS
   40                             
   41  06:D2CA            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:D2CA  AA                TAX
   44  06:D2CB  A9 A0             LDA #CHRBANK1
   45  06:D2CD  8D A6 00          STA mapper_address+1
   46  06:D2D0  8A                TXA
   47  06:D2D1  20 E0 D2          JSR SendMapperCommand
   48  06:D2D4  60                RTS
   49                             
   50  06:D2D5            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:D2D5  AA                TAX
   53  06:D2D6  A9 C0             LDA #CHRBANK2
   54  06:D2D8  8D A6 00          STA mapper_address+1
   55  06:D2DB  8A                TXA
   56  06:D2DC  20 E0 D2          JSR SendMapperCommand
   57  06:D2DF  60                RTS
   58                             
   59  06:D2E0            SendMapperCommand:
   60                     
   61  06:D2E0  A0 00             LDY #$00
   62                             
   63  06:D2E2  91 A5             STA [mapper_address], y
   64  06:D2E4  4A                LSR A
   65  06:D2E5  91 A5             STA [mapper_address], y
   66  06:D2E7  4A                LSR A
   67  06:D2E8  91 A5             STA [mapper_address], y
   68  06:D2EA  4A                LSR A 
   69  06:D2EB  91 A5             STA [mapper_address], y
   70  06:D2ED  4A                LSR A
   71  06:D2EE  91 A5             STA [mapper_address], y
   72                             
   73  06:D2F0  60                RTS
   74                             
   75  06:D2F1            ResetBanks:
   76                     
   77  06:D2F1  20 B0 D2          JSR ResetMapper
   78  06:D2F4  A9 00             LDA #$00
   79  06:D2F6  20 BF D2          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:D2F9  20 B0 D2          JSR ResetMapper
   83  06:D2FC  A9 00             LDA #$00
   84  06:D2FE  20 CA D2          JSR LoadCHRBankA
   85  06:D301  A9 01             LDA #$01
   86  06:D303  20 D5 D2          JSR LoadCHRBankB
   87  06:D306  60                RTS
   88                             
   89                       
#[1]   Picross.asm
#[2]   Routines/Game_Routines/ScreenEffects.asm
  184                       .include "Routines/Game_Routines/ScreenEffects.asm"
    1  06:D307            PopulateClues:
    2                       
    3  06:D307  A0 00       LDY #$00
    4  06:D309  B1 AD       LDA [puzzle_address], y
    5  06:D30B  AA          TAX
    6  06:D30C  BD F9 D6    LDA PuzzleSizes, x
    7  06:D30F  8D 00 00    STA temp1
    8                       
    9  06:D312            .getByte:
   10  06:D312  AC BF 00    LDY clueTableIndex
   11  06:D315  B1 AF       LDA [clues_address], y
   12  06:D317  D0 07       BNE .checkNewLine
   13  06:D319  EE BF 00    INC clueTableIndex
   14  06:D31C  A9 00       LDA #$00
   15  06:D31E  F0 39       BEQ .drawClue
   16                       ;was 0, set up a draw
   17  06:D320            .checkNewLine
   18  06:D320  C9 FF       CMP #$FF
   19  06:D322  D0 18       BNE .getClue
   20                       
   21                       ;;was FF- need to inc stuff
   22  06:D324  EE BF 00    INC clueTableIndex
   23  06:D327  A9 00       LDA #$00
   24  06:D329  8D C6 00    STA clueParity
   25                       
   26  06:D32C  EE C0 00    INC clueLineIndex
   27  06:D32F  AD C0 00    LDA clueLineIndex
   28  06:D332  CD 00 00    CMP temp1
   29                       ;CMP #$01
   30  06:D335  F0 28       BEQ .leave    ;carry will be set
   31                       
   32  06:D337  20 F6 D3    JSR CreateOffsetFromIndex
   33                      
   34  06:D33A  D0 D6       BNE .getByte
   35                       
   36  06:D33C            .getClue:
   37                       ;;clues go from high nibble to low nibble
   38  06:D33C  48          PHA 
   39  06:D33D  AD C6 00    LDA clueParity
   40  06:D340  D0 0A       BNE .getSecondClue
   41  06:D342  EE C6 00    INC clueParity
   42  06:D345  68          PLA
   43  06:D346  4A          LSR A
   44  06:D347  4A          LSR A
   45  06:D348  4A          LSR A
   46  06:D349  4A          LSR A         ;move clue over to lower nibble
   47  06:D34A  D0 0D       BNE .drawClue
   48                       
   49  06:D34C            .getSecondClue:
   50                     
   51  06:D34C  CE C6 00    DEC clueParity
   52  06:D34F  EE BF 00    INC clueTableIndex
   53  06:D352  68          PLA 
   54  06:D353  29 0F       AND #$0F
   55  06:D355  D0 02       BNE .drawClue
   56                       ;;if 0, skip
   57  06:D357  F0 B9       BEQ .getByte
   58                      
   59  06:D359            .drawClue:
   60                       
   61  06:D359  09 40       ORA #$40
   62  06:D35B  20 60 D3    JSR WriteClueByteToPPUString
   63  06:D35E  18          CLC
   64                       
   65  06:D35F            .leave:
   66  06:D35F  60          RTS
   67                       
   68  06:D360            WriteClueByteToPPUString:
   69                     
   70  06:D360  8D 00 00    STA temp1 ;store off the tile value
   71                     
   72                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:D363  A9 01       LDA #$01
       06:D365  8D 23 00    STA PPU_PendingWrite
       06:D368  AD BE 00    LDA clue_draw_address+1
       06:D36B  20 C9 D1    JSR WriteToPPUString
       06:D36E  AD BD 00    LDA clue_draw_address
       06:D371  20 C9 D1    JSR WriteToPPUString
       06:D374  A9 00       LDA #DRAW_HORIZONTAL
       06:D376  20 C9 D1    JSR WriteToPPUString
       06:D379  A9 01       LDA #$01 
       06:D37B  20 C9 D1    JSR WriteToPPUString
                            
   73  06:D37E  AD 00 00    LDA temp1
   74  06:D381  20 C9 D1    JSR WriteToPPUString
   75                       
   76                       ;;also copy to ... copy
   77  06:D384  AD BD 00    LDA clue_draw_address
   78  06:D387  8D B5 00    STA copy_address
   79  06:D38A  AD BE 00    LDA clue_draw_address+1
   80  06:D38D  29 0F       AND #$0F
   81  06:D38F  09 60       ORA #$60
   82  06:D391  8D B6 00    STA copy_address+1
   83  06:D394  AD 00 00    LDA temp1
   84  06:D397  A0 00       LDY #$00
   85  06:D399  91 B5       STA [copy_address],y
   86  06:D39B  AD B6 00    LDA copy_address+1
   87  06:D39E  18          CLC
   88  06:D39F  69 08       ADC #$08
   89  06:D3A1  8D B6 00    STA copy_address+1
   90  06:D3A4  AD 00 00    LDA temp1
   91  06:D3A7  91 B5       STA [copy_address],y
   92                       
   93  06:D3A9  AD C2 00    LDA clueDrawAdd
   94  06:D3AC  20 D3 D3    JSR SubFromClueDrawAddress
   95                         
   96  06:D3AF  60          RTS
   97                       
   98  06:D3B0            ResetClueDrawAddress:
   99                     
  100                       MACROGetPointer clue_start_address, clue_draw_address
                          
       06:D3B0  AD BB 00          LDA clue_start_address
       06:D3B3  8D BD 00          STA clue_draw_address
       06:D3B6  AD BC 00          LDA clue_start_address+1
       06:D3B9  8D BE 00          STA clue_draw_address+1
                          
  101                       
  102  06:D3BC  60          RTS
  103                       
  104  06:D3BD            AddToClueDrawAddress:
  105                     
  106  06:D3BD  8D 00 00    STA temp1
  107                       
  108  06:D3C0  AD BD 00    LDA clue_draw_address
  109  06:D3C3  18          CLC
  110  06:D3C4  6D 00 00    ADC temp1
  111  06:D3C7  8D BD 00    STA clue_draw_address
  112  06:D3CA  AD BE 00    LDA clue_draw_address+1
  113  06:D3CD  69 00       ADC #$00
  114  06:D3CF  8D BE 00    STA clue_draw_address+1
  115                       
  116  06:D3D2  60          RTS
  117                         
  118  06:D3D3            SubFromClueDrawAddress:
  119                     
  120  06:D3D3  8D 00 00    STA temp1
  121                       
  122  06:D3D6  AD BD 00    LDA clue_draw_address
  123  06:D3D9  38          SEC
  124  06:D3DA  ED 00 00    SBC temp1
  125  06:D3DD  8D BD 00    STA clue_draw_address
  126  06:D3E0  AD BE 00    LDA clue_draw_address+1
  127  06:D3E3  E9 00       SBC #$00
  128  06:D3E5  8D BE 00    STA clue_draw_address+1
  129                       
  130  06:D3E8  60          RTS
  131                       
  132  06:D3E9            AddToClueDrawAddressHi:
  133                     
  134  06:D3E9  8D 00 00    STA temp1
  135                       
  136  06:D3EC  AD BE 00    LDA clue_draw_address+1
  137  06:D3EF  6D 00 00    ADC temp1
  138  06:D3F2  8D BE 00    STA clue_draw_address+1
  139                       
  140  06:D3F5  60          RTS
  141                       
  142  06:D3F6            CreateOffsetFromIndex:
  143                     
  144                       ;;would be this, but we need to be able to go further- so we'll make a doulbe offset
  145  06:D3F6  AD C0 00    LDA clueLineIndex
  146  06:D3F9  8D C3 00    STA clueDrawOffset
  147  06:D3FC  A9 00       LDA #$00
  148  06:D3FE  8D C4 00    STA clueDrawOffset+1
  149                       
  150  06:D401  AD C1 00    LDA clueOffsetShift   
  151  06:D404  F0 0E       BEQ .addOffset
  152                       
  153  06:D406  A2 00       LDX #$00
  154                       
  155  06:D408            .loopShift:
  156  06:D408  0E C3 00    ASL clueDrawOffset
  157  06:D40B  2E C4 00    ROL clueDrawOffset+1
  158  06:D40E  E8          INX
  159  06:D40F  EC C1 00    CPX clueOffsetShift
  160  06:D412  D0 F4       BNE .loopShift
  161                       
  162  06:D414            .addOffset:
  163                       
  164  06:D414  20 B0 D3    JSR ResetClueDrawAddress
  165  06:D417  AD C3 00    LDA clueDrawOffset
  166  06:D41A  20 BD D3    JSR AddToClueDrawAddress 
  167  06:D41D  AD C4 00    LDA clueDrawOffset+1
  168  06:D420  20 E9 D3    JSR AddToClueDrawAddressHi
  169                       
  170  06:D423  60          RTS  
  171                       
  172  06:D424            ClearPuzzle:
  173                     
  174                       ;we'll assume clue draw address has been set to the top of the 1st nametable
  175                      
  176                       MACROGetLabelPointer ClearLineDefs, table_address
                          
       06:D424  A9 D6             LDA #HIGH(ClearLineDefs)
       06:D426  A2 DB             LDX #LOW(ClearLineDefs)
                                  
       06:D428  8E 16 00          STX table_address
       06:D42B  8D 17 00          STA table_address+1
                                  
  177                     
  178  06:D42E  AC C0 00    LDY clueLineIndex
  179  06:D431  B1 16       LDA [table_address], y
  180  06:D433  8D 00 00    STA temp1
  181                       MACROAddPPUStringEntryRepeat clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp1, #$24
                          
       06:D436  A9 01       LDA #$01
       06:D438  8D 23 00    STA PPU_PendingWrite
       06:D43B  AD BE 00    LDA clue_draw_address+1
       06:D43E  20 C9 D1    JSR WriteToPPUString
       06:D441  AD BD 00    LDA clue_draw_address
       06:D444  20 C9 D1    JSR WriteToPPUString
       06:D447  A9 40       LDA #$40
       06:D449  09 00       ORA #DRAW_HORIZONTAL
       06:D44B  0D 00 00    ORA temp1
       06:D44E  20 C9 D1    JSR WriteToPPUString
       06:D451  A9 24       LDA #$24
       06:D453  20 C9 D1    JSR WriteToPPUString
                            
  182                       ;;no need to load anything else
  183                       
  184  06:D456  AD BD 00    LDA clue_draw_address
  185  06:D459  18          CLC
  186  06:D45A  69 20       ADC #32
  187  06:D45C  8D BD 00    STA clue_draw_address
  188  06:D45F  AD BE 00    LDA clue_draw_address+1
  189  06:D462  69 00       ADC #$00
  190  06:D464  8D BE 00    STA clue_draw_address+1
  191                       
  192  06:D467  EE C0 00    INC clueLineIndex
  193  06:D46A  60          RTS
  194                       
  195  06:D46B            LoadPauseScreen:
  196                     
  197                     ;;use clue indexes again
  198                     ;;we want to draw one line at a time
  199                     ;;we have control codes, but those don't matter since we have to build ou the strings before hand
  200                     
  201                     ;load pause table
  202                     ;there are 6 lines of 13 tiles
  203                     ;one byte for the 6 lines, one byte to keep track of our index
  204                       ;STA clueLineIndex 
  205                       ;STA clueOffsetShift
  206                     
  207                     ;;pause_address has the table we want
  208                     ;;pause_draw_address will be the draw location
  209                     
  210                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:D46B  A9 01       LDA #$01
       06:D46D  8D 23 00    STA PPU_PendingWrite
       06:D470  AD B8 00    LDA pause_draw_address+1
       06:D473  20 C9 D1    JSR WriteToPPUString
       06:D476  AD B7 00    LDA pause_draw_address
       06:D479  20 C9 D1    JSR WriteToPPUString
       06:D47C  A9 00       LDA #DRAW_HORIZONTAL
       06:D47E  20 C9 D1    JSR WriteToPPUString
       06:D481  A9 0D       LDA #13 
       06:D483  20 C9 D1    JSR WriteToPPUString
                            
  211                     
  212  06:D486  A2 00       LDX #$00
  213  06:D488  AC C0 00    LDY clueLineIndex
  214  06:D48B            .loop:
  215                      
  216  06:D48B  8A          TXA
  217  06:D48C  48          PHA
  218  06:D48D  B1 B3       LDA [pause_address],y
  219  06:D48F  20 C9 D1    JSR WriteToPPUString
  220  06:D492  68          PLA
  221  06:D493  AA          TAX
  222  06:D494  C8          INY
  223  06:D495  E8          INX 
  224  06:D496  E0 0D       CPX #13
  225  06:D498  D0 F1       BNE .loop
  226                       
  227  06:D49A  8C C0 00    STY clueLineIndex
  228                       
  229  06:D49D  AD B7 00    LDA pause_draw_address
  230  06:D4A0  18          CLC
  231  06:D4A1  69 20       ADC #$20
  232  06:D4A3  8D B7 00    STA pause_draw_address
  233  06:D4A6  AD B8 00    LDA pause_draw_address+1
  234  06:D4A9  69 00       ADC #$00
  235  06:D4AB  8D B8 00    STA pause_draw_address+1
  236                       
  237  06:D4AE  EE C1 00    INC clueOffsetShift
  238  06:D4B1  60          RTS
  239                       
  240                       
  241                     
  242                     
  243  06:D4B2            ClearPauseScreen:  
  244                     
  245                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:D4B2  A9 01       LDA #$01
       06:D4B4  8D 23 00    STA PPU_PendingWrite
       06:D4B7  AD B8 00    LDA pause_draw_address+1
       06:D4BA  20 C9 D1    JSR WriteToPPUString
       06:D4BD  AD B7 00    LDA pause_draw_address
       06:D4C0  20 C9 D1    JSR WriteToPPUString
       06:D4C3  A9 00       LDA #DRAW_HORIZONTAL
       06:D4C5  20 C9 D1    JSR WriteToPPUString
       06:D4C8  A9 0D       LDA #13 
       06:D4CA  20 C9 D1    JSR WriteToPPUString
                            
  246                     
  247  06:D4CD  A2 00       LDX #$00
  248  06:D4CF  A0 00       LDY #$00
  249  06:D4D1            .loop:
  250                      
  251  06:D4D1  8A          TXA
  252  06:D4D2  48          PHA
  253  06:D4D3  B1 B3       LDA [pause_address],y
  254  06:D4D5  20 C9 D1    JSR WriteToPPUString
  255  06:D4D8  68          PLA
  256  06:D4D9  AA          TAX
  257  06:D4DA  C8          INY
  258  06:D4DB  E8          INX 
  259  06:D4DC  E0 0D       CPX #13
  260  06:D4DE  D0 F1       BNE .loop
  261                       
  262                       
  263  06:D4E0  AD B7 00    LDA pause_draw_address
  264  06:D4E3  18          CLC
  265  06:D4E4  69 20       ADC #$20
  266  06:D4E6  8D B7 00    STA pause_draw_address
  267  06:D4E9  AD B8 00    LDA pause_draw_address+1
  268  06:D4EC  69 00       ADC #$00
  269  06:D4EE  8D B8 00    STA pause_draw_address+1
  270                       
  271  06:D4F1  AD B3 00    LDA pause_address
  272  06:D4F4  18          CLC
  273  06:D4F5  69 20       ADC #$20
  274  06:D4F7  8D B3 00    STA pause_address
  275  06:D4FA  AD B4 00    LDA pause_address+1
  276  06:D4FD  69 00       ADC #$00
  277  06:D4FF  8D B4 00    STA pause_address+1
  278                       
  279  06:D502  EE C1 00    INC clueOffsetShift
  280  06:D505  60         RTS
  281  06:D506            DrawImage:
  282                     
  283                       ;;we have clueTableIndex, which should be at the image bytes now
  284                       ;;clue line index will keep track of our place in a byte
  285                        
  286  06:D506  A9 00       LDA #$00
  287  06:D508  8D 00 00    STA temp1
  288  06:D50B  8D 01 00    STA temp2
  289  06:D50E  8D 02 00    STA temp3
  290  06:D511  8D 03 00    STA temp4
  291  06:D514  8D 05 00    STA temp6
  292                       
  293  06:D517  A9 04       LDA #$04
  294  06:D519  8D 04 00    STA temp5
  295                       
  296  06:D51C  A0 00       LDY #$00
  297  06:D51E  B1 AD       LDA [puzzle_address], y
  298  06:D520  AA          TAX
  299  06:D521  BD F9 D6    LDA PuzzleSizes, x
  300  06:D524  8D 06 00    STA temp7
  301  06:D527  BD FC D6    LDA PuzzleImageSizes, x
  302  06:D52A  8D 07 00    STA temp8
  303  06:D52D  4A          LSR A
  304  06:D52E  4A          LSR A
  305  06:D52F  8D 09 00    STA tempy
  306  06:D532  AD 07 00    LDA temp8
  307  06:D535  29 03       AND #$03
  308  06:D537  F0 03       BEQ .skipAdd1
  309  06:D539  EE 09 00    INC tempy  
  310  06:D53C            .skipAdd1:
  311  06:D53C  BD FF D6    LDA ImageDrawWrapOffsets, x
  312  06:D53F  8D 08 00    STA tempx
  313                       
  314  06:D542  AC BF 00    LDY clueTableIndex
  315  06:D545  B1 AF       LDA [clues_address], y
  316                     
  317  06:D547  0A          ASL A
  318  06:D548  2E 00 00    ROL temp1
  319  06:D54B  0A          ASL A
  320  06:D54C  2E 00 00    ROL temp1
  321  06:D54F  0A          ASL A
  322  06:D550  2E 01 00    ROL temp2
  323  06:D553  0A          ASL A
  324  06:D554  2E 01 00    ROL temp2
  325  06:D557  0A          ASL A
  326  06:D558  2E 02 00    ROL temp3
  327  06:D55B  0A          ASL A
  328  06:D55C  2E 02 00    ROL temp3
  329  06:D55F  0A          ASL A
  330  06:D560  2E 03 00    ROL temp4
  331  06:D563  0A          ASL A
  332  06:D564  2E 03 00    ROL temp4
  333                       
  334                     
  335  06:D567  A2 00       LDX #$00
  336  06:D569            .moveUpTiles:
  337  06:D569  BD 00 00    LDA temp1, x
  338  06:D56C  09 24       ORA #$24
  339  06:D56E  9D 00 00    STA temp1, x
  340  06:D571  E8          INX
  341  06:D572  E0 04       CPX #$04
  342  06:D574  D0 F3       BNE .moveUpTiles
  343                       
  344                       
  345  06:D576  AD C1 00    LDA clueOffsetShift
  346  06:D579  18          CLC
  347  06:D57A  69 04       ADC #$04
  348                     
  349  06:D57C  8D C1 00    STA clueOffsetShift
  350                       ;;clue offset shift + 4, check if we went over puzle row length
  351  06:D57F  38          SEC
  352  06:D580  ED 06 00    SBC temp7 ;;subtract 15
  353  06:D583  90 12       BCC .makeStrings
  354  06:D585  F0 10       BEQ .makeStrings
  355                       
  356  06:D587  8D C1 00    STA clueOffsetShift ;loop offset over
  357  06:D58A  8D 05 00    STA temp6 ; length of second string
  358  06:D58D  AD 04 00    LDA temp5
  359  06:D590  38          SEC
  360  06:D591  ED 05 00    SBC temp6 
  361  06:D594  8D 04 00    STA temp5 ;length of first string 
  362                       
  363  06:D597            .makeStrings:
  364                       
  365  06:D597  A2 00       LDX #$00
  366                       
  367  06:D599  AD 04 00    LDA temp5
  368  06:D59C  F0 51       BEQ .makeSecondString
  369  06:D59E  8A          TXA
  370  06:D59F  48          PHA
  371                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp5
                          
       06:D5A0  A9 01       LDA #$01
       06:D5A2  8D 23 00    STA PPU_PendingWrite
       06:D5A5  AD BE 00    LDA clue_draw_address+1
       06:D5A8  20 C9 D1    JSR WriteToPPUString
       06:D5AB  AD BD 00    LDA clue_draw_address
       06:D5AE  20 C9 D1    JSR WriteToPPUString
       06:D5B1  A9 00       LDA #DRAW_HORIZONTAL
       06:D5B3  20 C9 D1    JSR WriteToPPUString
       06:D5B6  AD 04 00    LDA temp5 
       06:D5B9  20 C9 D1    JSR WriteToPPUString
                            
  372  06:D5BC  68          PLA
  373  06:D5BD  AA          TAX
  374                       
  375  06:D5BE            .firstStringLoop:
  376                       
  377  06:D5BE  8A          TXA 
  378  06:D5BF  48          PHA
  379  06:D5C0  BD 00 00    LDA temp1, x
  380  06:D5C3  20 C9 D1    JSR WriteToPPUString
  381                       
  382  06:D5C6  EE C0 00    INC clueLineIndex
  383  06:D5C9  AD C0 00    LDA clueLineIndex
  384  06:D5CC  CD 07 00    CMP temp8
  385  06:D5CF  D0 04       BNE .continueLoop
  386  06:D5D1  68          PLA 
  387  06:D5D2  4C 56 D6    JMP .leave
  388                       
  389  06:D5D5            .continueLoop:
  390  06:D5D5  68          PLA
  391  06:D5D6  AA          TAX
  392  06:D5D7  E8          INX
  393  06:D5D8  EC 04 00    CPX temp5
  394  06:D5DB  D0 E1       BNE .firstStringLoop
  395                       
  396  06:D5DD  AD BD 00    LDA clue_draw_address
  397  06:D5E0  18          CLC
  398  06:D5E1  6D 04 00    ADC temp5
  399  06:D5E4  8D BD 00    STA clue_draw_address
  400  06:D5E7  AD BE 00    LDA clue_draw_address+1
  401  06:D5EA  69 00       ADC #$00
  402  06:D5EC  8D BE 00    STA clue_draw_address+1
  403                       
  404  06:D5EF            .makeSecondString:
  405                     
  406  06:D5EF  AD 05 00    LDA temp6
  407  06:D5F2  F0 62       BEQ .leave
  408                       
  409                       ;;loop draw address to next line
  410  06:D5F4  AD BD 00    LDA clue_draw_address
  411  06:D5F7  18          CLC
  412  06:D5F8  6D 08 00    ADC tempx
  413  06:D5FB  8D BD 00    STA clue_draw_address
  414  06:D5FE  AD BE 00    LDA clue_draw_address+1
  415  06:D601  69 00       ADC #$00
  416  06:D603  8D BE 00    STA clue_draw_address+1
  417  06:D606  8A          TXA
  418  06:D607  48          PHA
  419                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp6
                          
       06:D608  A9 01       LDA #$01
       06:D60A  8D 23 00    STA PPU_PendingWrite
       06:D60D  AD BE 00    LDA clue_draw_address+1
       06:D610  20 C9 D1    JSR WriteToPPUString
       06:D613  AD BD 00    LDA clue_draw_address
       06:D616  20 C9 D1    JSR WriteToPPUString
       06:D619  A9 00       LDA #DRAW_HORIZONTAL
       06:D61B  20 C9 D1    JSR WriteToPPUString
       06:D61E  AD 05 00    LDA temp6 
       06:D621  20 C9 D1    JSR WriteToPPUString
                            
  420  06:D624  68          PLA 
  421  06:D625  AA          TAX
  422                       
  423  06:D626            .secondStringLoop:
  424                     
  425  06:D626  8A          TXA
  426  06:D627  48          PHA 
  427  06:D628  BD 00 00    LDA temp1, x
  428  06:D62B  20 C9 D1    JSR WriteToPPUString
  429                       
  430  06:D62E  EE C0 00    INC clueLineIndex
  431  06:D631  AD C0 00    LDA clueLineIndex
  432  06:D634  CD 07 00    CMP temp8
  433  06:D637  D0 04       BNE .continueSecondLoop
  434                       
  435  06:D639  68          PLA 
  436  06:D63A  4C 56 D6    JMP .leave
  437                       
  438  06:D63D            .continueSecondLoop:
  439  06:D63D  68          PLA
  440  06:D63E  AA          TAX
  441  06:D63F  E8          INX
  442  06:D640  E0 04       CPX #$04
  443  06:D642  D0 E2       BNE .secondStringLoop
  444                       
  445  06:D644  AD BD 00    LDA clue_draw_address
  446  06:D647  18          CLC
  447  06:D648  6D 05 00    ADC temp6
  448  06:D64B  8D BD 00    STA clue_draw_address
  449  06:D64E  AD BE 00    LDA clue_draw_address+1
  450  06:D651  69 00       ADC #$00
  451  06:D653  8D BE 00    STA clue_draw_address+1
  452                       
  453  06:D656            .leave:
  454  06:D656  20 10 C5    JSR PlayNoiseBlipSound
  455  06:D659  EE BF 00    INC clueTableIndex
  456  06:D65C  60          RTS
  457                       
  458  06:D65D            DrawTitle:
  459                     
  460                       ;; title draw address is stored ahead of time, along with title address
  461                       ;; we can use temp1 - 8 to handle this
  462  06:D65D  A0 00       LDY #$00
  463  06:D65F  B1 B1       LDA [title_address],y
  464  06:D661  4A          LSR A
  465  06:D662  8D 09 00    STA tempy
  466                       
  467  06:D665  AD B9 00    LDA title_draw_address
  468  06:D668  38          SEC 
  469  06:D669  ED 09 00    SBC tempy
  470  06:D66C  8D B9 00    STA title_draw_address
  471  06:D66F  AD BA 00    LDA title_draw_address+1
  472  06:D672  E9 00       SBC #$00
  473  06:D674  8D BA 00    STA title_draw_address+1
  474                       
  475                       MACROAddPPUStringEntryTablePtr title_draw_address+1, title_draw_address, #DRAW_HORIZONTAL, title_address
                           
       06:D677  A9 01       LDA #$01
       06:D679  8D 23 00    STA PPU_PendingWrite
       06:D67C  AD BA 00    LDA title_draw_address+1
       06:D67F  20 C9 D1    JSR WriteToPPUString
       06:D682  AD B9 00    LDA title_draw_address
       06:D685  20 C9 D1    JSR WriteToPPUString
       06:D688  A9 20       LDA #$20
       06:D68A  09 00       ORA #DRAW_HORIZONTAL
       06:D68C  20 C9 D1    JSR WriteToPPUString
       06:D68F  AD B1 00    LDA title_address
       06:D692  20 C9 D1    JSR WriteToPPUString
       06:D695  AD B2 00    LDA title_address+1
       06:D698  20 C9 D1    JSR WriteToPPUString
                           
  476                       
  477  06:D69B            .leave:
  478  06:D69B  60          RTS
  479                       
  480  06:D69C            ApplyGameTimeToPPUString:
  481                     
  482  06:D69C  8D 00 00    STA temp1
  483  06:D69F  8E 01 00    STX temp2
  484                     
  485                       MACROAddPPUStringEntryRawData temp1, temp2, #DRAW_HORIZONTAL, #$05
                          
       06:D6A2  A9 01       LDA #$01
       06:D6A4  8D 23 00    STA PPU_PendingWrite
       06:D6A7  AD 00 00    LDA temp1
       06:D6AA  20 C9 D1    JSR WriteToPPUString
       06:D6AD  AD 01 00    LDA temp2
       06:D6B0  20 C9 D1    JSR WriteToPPUString
       06:D6B3  A9 00       LDA #DRAW_HORIZONTAL
       06:D6B5  20 C9 D1    JSR WriteToPPUString
       06:D6B8  A9 05       LDA #$05 
       06:D6BA  20 C9 D1    JSR WriteToPPUString
                            
  486  06:D6BD  AD 06 70    LDA GameTime+3
  487  06:D6C0  20 C9 D1    JSR WriteToPPUString
  488  06:D6C3  AD 05 70    LDA GameTime+2
  489  06:D6C6  20 C9 D1    JSR WriteToPPUString
  490  06:D6C9  A9 61       LDA #$61
  491  06:D6CB  20 C9 D1    JSR WriteToPPUString
  492  06:D6CE  AD 04 70    LDA GameTime+1
  493  06:D6D1  20 C9 D1    JSR WriteToPPUString
  494  06:D6D4  AD 03 70    LDA GameTime
  495  06:D6D7  20 C9 D1    JSR WriteToPPUString
  496                       
  497  06:D6DA  60          RTS
  498                     
  499  06:D6DB            ClearLineDefs:
  500                     
  501  06:D6DB  20 20 20    .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
       06:D6DE  20 20 20  
       06:D6E1  20 20 20  
       06:D6E4  20 20     
  502  06:D6E6  0D 0D 0D    .db $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D
       06:D6E9  0D 0D 0D  
       06:D6EC  0D 0D 0D  
       06:D6EF  0D 0D 0D  
       06:D6F2  0D 0D 0D  
       06:D6F5  0D 0D     
  503  06:D6F7  20 20       .db $20, $20
  504                       
  505  06:D6F9            PuzzleSizes:
  506                       
  507  06:D6F9  05 0A 0F    .db $05, $0A, $0F
  508                       
  509  06:D6FC            PuzzleImageSizes:
  510                     
  511                       ;.db $05, $0A, $0F
  512  06:D6FC  19 64 E1    .db $19, $64, $E1
  513                       
  514  06:D6FF            ImageDrawWrapOffsets:
  515                     
  516  06:D6FF  1B 16 11    .db $1B, $16, $11
  517                      
  518  06:D702            ImageTitleLowerHalfPos:
  519                      
  520  06:D702  70 22       .word $2270, $2313, $23B5
       06:D704  13 23     
       06:D706  B5 23     
#[1]   Picross.asm
  185                       
  186                       
  187                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  188                     ;;     NMI                  ;;
  189                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  190                     
#[2]   Routines/Common/NMI.asm
  191                       .include "Routines/Common/NMI.asm"
    1                      
    2  06:D708            NMI:
    3                     
    4  06:D708  48          PHA                              ;protect the registers
    5  06:D709  8A          TXA
    6  06:D70A  48          PHA
    7  06:D70B  98          TYA
    8  06:D70C  48          PHA
    9                       
   10  06:D70D            nmi_started:
   11  06:D70D  A9 00       LDA #$00
   12  06:D70F  8D 03 20    STA OAM_LO      ; set the low byte (00) of the RAM address
   13  06:D712  A9 02       LDA #$02
   14  06:D714  8D 14 40    STA OAM_HI       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:D717  AD 10 00    LDA NMI_locks
   17  06:D71A  F0 03       BEQ update_controllers
   18  06:D71C  4C 5C D7    JMP WakeUp
   19                     
   20  06:D71F            update_controllers:
   21                       
   22  06:D71F  20 6D D7    JSR ReadControllersSafe
   23  06:D722  20 06 D1    JSR ProcessPPUString
   24                       
   25                       
   26  06:D725  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   27  06:D727  8D 05 20    STA PPU_SCROLL
   28  06:D72A  8D 05 20    STA PPU_SCROLL
   29                       
   30                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   31                       ; enable sprites, enable background, no clipping on left side 
   32  06:D72D  20 23 D2    JSR UpdatePPUControl
   33                     
   34  06:D730            NMIUpdate:
   35                     
   36  06:D730  20 50 D7    JSR StateNMIUpdate
   37                       
   38  06:D733  AD 1D 00    LDA PPU_Control
   39  06:D736  29 FC       AND #$FC
   40  06:D738  0D 21 00    ORA PPU_ScrollNT
   41  06:D73B  8D 00 20    STA PPU_CTRL
   42                       
   43  06:D73E  AD 1F 00    LDA PPU_ScrollX     ;;tell the ppu there is no background scrolling
   44  06:D741  8D 05 20    STA PPU_SCROLL
   45  06:D744  AD 20 00    LDA PPU_ScrollY
   46  06:D747  8D 05 20    STA PPU_SCROLL
   47                       
   48  06:D74A  20 85 A1    jsr sound_play_frame 
   49  06:D74D  4C 5C D7    JMP WakeUp
   50                     
   51  06:D750            StateNMIUpdate:
   52                     
   53                       MACROCallDynamicJump game_mode
                          
       06:D750  AD 0E 00    LDA game_mode
       06:D753  20 47 D0    JSR Dynamic_Jump
                                  
   54                     
   55  06:D756            NMIJumpTable:
   56                     
   57  06:D756  67 D7       .word UpdateTitleNMI
   58  06:D758  6B D7       .word UpdateGameNMI
   59  06:D75A  6C D7       .word UpdateGameOverNMI
   60                     
   61  06:D75C            WakeUp:
   62  06:D75C  A9 00       LDA #$00
   63  06:D75E  8D 0C 00    STA sleeping
   64                       
   65  06:D761  68          PLA             ;restore the registers
   66  06:D762  A8          TAY 
   67  06:D763  68          PLA
   68  06:D764  AA          TAX
   69  06:D765  68          PLA
   70                     
   71  06:D766  40          RTI             ; return from interrupt
   72                       
#[3]   Routines/NMI_States/UpdateTitleNMI.asm
   73                       .include "Routines/NMI_States/UpdateTitleNMI.asm"
    1  06:D767            UpdateTitleNMI:
    2                     
    3                       ;;load bank 0 for BG tiles, so we start with the right tile set
    4                       ;JSR ResetMapper
    5                       ;LDA #$01
    6                       ;JSR LoadCHRBankB
    7                     
    8                     
    9  06:D767  20 E9 D1    JSR DetectSprite0
   10                     
   11                       ;JSR ResetMapper
   12                       ;LDA #$03
   13                       ;JSR LoadCHRBankB
   14                       
   15                     
   16                        
   17  06:D76A  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameNMI.asm
   74                       .include "Routines/NMI_States/UpdateGameNMI.asm"
    1  06:D76B            UpdateGameNMI:
    2  06:D76B  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameOverNMI.asm
   75                       .include "Routines/NMI_States/UpdateGameOverNMI.asm"
    1  06:D76C            UpdateGameOverNMI:
    2  06:D76C  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/Common/ReadControllers.asm
   76                       .include "Routines/Common/ReadControllers.asm"
    1  06:D76D            ReadControllersSafe:
    2  06:D76D  8A                TXA
    3  06:D76E  48                PHA
    4  06:D76F  98                TYA
    5  06:D770  48                PHA
    6                     
    7  06:D771            .firstRead:
    8  06:D771  20 97 D7          JSR ReadControllers
    9  06:D774            .reRead:
   10  06:D774  AD 1A 00          LDA gamepad
   11  06:D777  48                PHA
   12  06:D778  20 97 D7          JSR ReadControllers
   13  06:D77B  68                PLA 
   14  06:D77C  CD 1A 00          CMP gamepad
   15  06:D77F  D0 F3             BNE .reRead
   16                             
   17  06:D781            .finishARead:
   18                             ;;comapre last to current, find the pressed buttons this frame
   19  06:D781  AD 1B 00          LDA gamepadLast
   20  06:D784  49 FF             EOR #$FF
   21  06:D786  2D 1A 00          AND gamepad
   22  06:D789  8D 1C 00          STA gamepadPressed
   23                             
   24                             
   25  06:D78C  AD 1A 00          LDA gamepad
   26  06:D78F  8D 1B 00          STA gamepadLast
   27                             
   28  06:D792  68                PLA
   29  06:D793  A8                TAY
   30  06:D794  68                PLA
   31  06:D795  AA                TAX     
   32  06:D796  60                RTS
   33                             
   34  06:D797            ReadControllers:
   35                     
   36  06:D797  A9 01             LDA #$01        ;load 1
   37  06:D799  8D 16 40          STA $4016       ; turn latch on
   38                             ;STA gamepad2
   39  06:D79C  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   40  06:D79D  8D 16 40          STA $4016       ;turn latch off
   41                             
   42  06:D7A0  A9 80             LDA #$80
   43  06:D7A2  8D 1A 00          STA gamepad
   44                     
   45  06:D7A5            .readControllerABytesLoop:
   46  06:D7A5  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   47  06:D7A8  29 03             AND #%00000011  ;acc: %00000001 c: 0
   48  06:D7AA  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   49                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   50  06:D7AC  6E 1A 00          ROR gamepad             ;gamepad: %11000000
   51                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   52  06:D7AF  90 F4             BCC .readControllerABytesLoop
   53                     
   54                             
   55                     
   56                             
   57  06:D7B1  60                RTS
#[2]   Routines/Common/NMI.asm
#[1]   Picross.asm
  192                       
  193                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  194                     ;;    AUDIO                 ;;
  195                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  196                         ;.include "External/sound_engine.asm"
  197                             ;;test out DPCM here?
  198                     
  199  06:D7B2                    .ds (64-*)&63
  200  06:D7C0            sample0:                                                ;MOTHER bass kick
  201  06:D7C0                    .incbin "DMC/sample0.dmc"
  202  06:D831            sample0End:
  203  06:D831                    .ds (64-*)&63
  204  06:D840            sample1:                                                ;MOTHER snare
  205  06:D840                    .incbin "DMC/sample1.dmc"
  206  06:D931            sample1End:
  207                     
  208  06:D931            SampleStart:
  209  06:D931  5F                .db low(sample0 >> 6)
  210  06:D932  61                .db low(sample1 >> 6)
  211                     
  212  06:D933            SampleLength:
  213  06:D933  07                .db low((sample0End - sample0) >> 4)
  214  06:D934  0F                .db low((sample1End - sample1) >> 4)
  215                     
  216                     ;;**************************;;
  217                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  218                     ;;       PRG ROM DATA       ;;
  219                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  220                     ;;**************************;; 
  221                       
  222           0007        .bank 7
  223           E000        .org $E000
  224                     
#[2]   NameTables/Tables.asm
  225                       .include "NameTables/Tables.asm"
    1  07:E000            Palettes:
    2                     
    3  07:E000  1C E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E002  3C E0     
       07:E004  5C E0     
    4                     
    5  07:E006            NameTables:
    6                     
    7  07:E006  12 E0       .word Title_Screens, Game_Screens, GameOver_Screens
       07:E008  14 E0     
       07:E00A  1A E0     
    8                       
    9  07:E00C            NameTables2:
   10                     
   11  07:E00C  7C E4       .word Title_Second, Blank_Screen, Blank_Screen
       07:E00E  7C F8     
       07:E010  7C F8     
   12                       
   13  07:E012            Title_Screens:
   14                     
   15  07:E012  7C E0       .word Title_Screen
   16                       
   17  07:E014            Game_Screens:
   18                     
   19  07:E014  7C E8       .word Game_5, Game_10, Game_15
       07:E016  7C EC     
       07:E018  7C F0     
   20                       
   21  07:E01A            GameOver_Screens:
   22                     
   23  07:E01A  7C F4       .word GameOver_Screen
   24                     
   25  07:E01C            Title_Palette:
   26                     
   27  07:E01C              .incbin "NameTables/Title_PAL.pal"
   28  07:E02C              .incbin "NameTables/Title_PAL.pal"
   29                       
   30  07:E03C            Game_Palette:
   31                     
   32  07:E03C              .incbin "NameTables/Game_PAL.pal"
   33  07:E04C              .incbin "NameTables/Game_PAL.pal"
   34                       
   35  07:E05C            GameOver_Palette:
   36                     
   37  07:E05C              .incbin "NameTables/GameOver_PAL.pal"
   38  07:E06C              .incbin "NameTables/GameOver_PAL.pal"
   39                       
   40  07:E07C            Title_Screen:
   41                     
   42  07:E07C              .incbin "NameTables/Title_NT.nam"
   43                       
   44  07:E47C            Title_Second:
   45                     
   46  07:E47C              .incbin "NameTables/Title_PuzzMen_NT.nam"
   47                       
   48  07:E87C            Game_5: 
   49                     
   50  07:E87C              .incbin "NameTables/Game_NT_5.nam"
   51                       
   52  07:EC7C            Game_10:
   53  07:EC7C              .incbin "NameTables/Game_NT_10.nam"
   54                       
   55  07:F07C            Game_15:
   56  07:F07C              .incbin "NameTables/Game_NT.nam"
   57                       
   58  07:F47C            GameOver_Screen:
   59                     
   60  07:F47C              .incbin "NameTables/GameOver_NT.nam"
   61                       
   62  07:F87C            Blank_Screen:
   63                     
   64  07:F87C              .incbin "NameTables/Blank_NT.nam"
   65                     
   66  07:FC7C            Pause_Menu:
   67  07:FC7C  28 2A 2A    .db $28,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$29
       07:FC7F  2A 2A 2A  
       07:FC82  2A 2A 2A  
       07:FC85  2A 2A 2A  
       07:FC88  29        
   68  07:FC89  2B 24 1C    .db $2b,$24,$1c,$0a,$1f,$0e,$62,$0e,$21,$12,$1d,$24,$3b
       07:FC8C  0A 1F 0E  
       07:FC8F  62 0E 21  
       07:FC92  12 1D 24  
       07:FC95  3B        
   69  07:FC96  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FC99  24 24 24  
       07:FC9C  24 24 24  
       07:FC9F  24 24 24  
       07:FCA2  3B        
   70  07:FCA3  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FCA6  24 24 24  
       07:FCA9  24 24 24  
       07:FCAC  24 24 24  
       07:FCAF  3B        
   71  07:FCB0  2B 24 24    .db $2b,$24,$24,$22,$0e,$1c,$24,$24,$17,$18,$24,$24,$3b
       07:FCB3  22 0E 1C  
       07:FCB6  24 24 17  
       07:FCB9  18 24 24  
       07:FCBC  3B        
   72  07:FCBD  38 3A 3A    .db $38,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$39
       07:FCC0  3A 3A 3A  
       07:FCC3  3A 3A 3A  
       07:FCC6  3A 3A 3A  
       07:FCC9  39        
   73                     
   74  07:FCCA            EndScreens:
   75                     
   76  07:FCCA  CE FC       .word PuzzleClearLines, PuzzleSavedLines
       07:FCCC  FD FC     
   77                       
   78  07:FCCE            PuzzleClearLines:
   79                     
   80  07:FCCE  EA 20       .db $EA, $20
   81  07:FCD0  0D 19 1E    .db $0D, $19,$1e,$23,$23,$15,$0e,$24,$0c,$15,$0e,$0a,$1b,$64
       07:FCD3  23 23 15  
       07:FCD6  0E 24 0C  
       07:FCD9  15 0E 0A  
       07:FCDC  1B 64     
   82  07:FCDE  07 1D 12    .db $07, $1d,$12,$16,$0e,$61,$24,$24 ;print the time here as a separate call, similar to how it's printed in update game at 2131
       07:FCE1  16 0E 61  
       07:FCE4  24 24     
   83  07:FCE6  0C 17 0E    .db $0C, $17,$0e,$21,$1d,$24,$19,$1e,$23,$23,$15,$0e,$63
       07:FCE9  21 1D 24  
       07:FCEC  19 1E 23  
       07:FCEF  23 15 0E  
       07:FCF2  63        
   84  07:FCF3  09 24 24    .db $09, $24,$24,$22,$0e,$1c,$24,$24,$17,$18
       07:FCF6  22 0E 1C  
       07:FCF9  24 24 17  
       07:FCFC  18        
   85                     
   86  07:FCFD            PuzzleSavedLines:
   87                       
   88  07:FCFD  2A 21       .db $2A, $21 
   89  07:FCFF  0D 19 1E    .db $0D, $19,$1e,$23,$23,$15,$0e,$24,$1c,$0a,$1f,$0e,$0d,$64
       07:FD02  23 23 15  
       07:FD05  0E 24 1C  
       07:FD08  0A 1F 0E  
       07:FD0B  0D 64     
   90                       
   91  07:FD0D            SelectDefaultName:
   92                      
   93  07:FD0D  47 26       .db $47, $26 
   94  07:FD0F  10 63 63    .db $10, $63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63
       07:FD12  63 63 63  
       07:FD15  63 63 63  
       07:FD18  63 63 63  
       07:FD1B  63 63 63  
       07:FD1E  63 63     
   95                     
   96  07:FD20            SelectDefaultTime:
   97                     
   98  07:FD20  8F 26       .db $8F, $26 
   99  07:FD22            DefaultTimeString:
  100  07:FD22  05 60 60    .db $05, $60,$60,$61,$60,$60
       07:FD25  61 60 60  
  101                     
  102                     
  103                      
  104                             
#[1]   Picross.asm
#[2]   Sprites/Sprites.asm
  226                       .include "Sprites/Sprites.asm"
    1                     
    2                     ;;Byte0
    3                     ;;Y position of top of sprite
    4                     ;;Sprite data is delayed by one scanline; 
    5                     ;;you must subtract 1 from the sprite's 
    6                     ;;Y coordinate before writing it here. 
    7                     ;;Hide a sprite by moving it down offscreen, 
    8                     ;;by writing any values between #$EF-#$FF here. 
    9                     ;;Sprites are never displayed on the first line of the picture, 
   10                     ;;and it is impossible to place a sprite partially off the top of the screen.
   11                     
   12                     ;;Byte 1
   13                     ;;Tile index number
   14                     ;;For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of PPUCTRL ($2000).
   15                     ;;For 8x16 sprites (bit 5 of PPUCTRL set), the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
   16                     ;;76543210
   17                     ;;||||||||
   18                     ;;|||||||+- Bank ($0000 or $1000) of tiles
   19                     ;;+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
   20                     
   21                     ;;Byte 2
   22                     ;;Attributes
   23                     ;;76543210
   24                     ;;||||||||
   25                     ;;||||||++- Palette (4 to 7) of sprite
   26                     ;;|||+++--- Unimplemented (read 0)
   27                     ;;||+------ Priority (0: in front of background; 1: behind background)
   28                     ;;|+------- Flip sprite horizontally
   29                     ;;+-------- Flip sprite vertically
   30                     
   31                     ;;Byte 3
   32                     ;;X position of left side of sprite.
   33                     ;;X-scroll values of $F9-FF results in parts of the 
   34                     ;;sprite to be past the right edge of the screen, thus invisible.
   35                     ;;It is not possible to have a sprite partially visible on the left edge. 
   36                     ;;Instead, left-clipping through PPUMASK ($2001) can be used to simulate this effect.
   37  07:FD28            Sprites:
   38  07:FD28  2E FD             .word Title_Sprites, Game_Sprites, GameOver_Sprites
       07:FD2A  47 FD     
       07:FD2C  50 FD     
   39                     
   40  07:FD2E            Title_Sprites:
   41  07:FD2E  06            .db $06
   42  07:FD2F  85 00 00          .db $85,$00,$00,$E8
       07:FD32  E8        
   43  07:FD33  A0 01 00          .db $A0,$01,$00,$60
       07:FD36  60        
   44  07:FD37  9B FF 00          .db $9B,$FF,$00,$A4
       07:FD3A  A4        
   45  07:FD3B  9B FF 00          .db $9B,$FF,$00,$AC
       07:FD3E  AC        
   46  07:FD3F  A3 FF 00          .db $A3,$FF,$00,$A4
       07:FD42  A4        
   47  07:FD43  A3 FF 00          .db $A3,$FF,$00,$AC
       07:FD46  AC        
   48  07:FD47            Game_Sprites:
   49  07:FD47  02            .db $02
   50  07:FD48  62 02 03          .db $62,$02,$03,$72
       07:FD4B  72        
   51  07:FD4C  5F FF 00          .db $5F,$FF,$00,$60
       07:FD4F  60        
   52  07:FD50            GameOver_Sprites:
   53  07:FD50  01                .db $01
   54  07:FD51  67 FF 00          .db $67,$FF,$00,$58
       07:FD54  58        
#[1]   Picross.asm
  227                     
  228           FFFA        .org $FFFA     ;first of the three vectors starts here
  229  07:FFFA  08 D7       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  230                                        ;processor will jump to the label NMI:
  231  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  232                                        ;to the label RESET:
  233  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  234                       
  235                     ;;**************************;;
  236                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  237                     ;;      CHR ROM DATA        ;;
  238                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  239                     ;;**************************;; 
  240                       
  241           0008        .bank 8
  242           0000        .org $0000
  243  08:0000              .incbin "CHRROM/FirstSixteenSprites.chr"
  244  08:0100              .incbin "CHRROM/B0Sprites.chr"  
  245  08:1000              .incbin "CHRROM/BGTiles.chr"
  246                       
  247           0009        .bank 9
  248           0000        .org $0000
  249  09:0000              .incbin "CHRROM/FirstSixteenSprites.chr"
  250  09:0100              .incbin "CHRROM/B1Sprites.chr"  
  251  09:1000              .incbin "CHRROM/BGTiles.chr"
  252                       
  253           000A        .bank 10
  254           0000        .org $0000
  255  0A:0000              .incbin "CHRROM/FirstSixteenSprites.chr"
  256  0A:0100              .incbin "CHRROM/B1Sprites.chr"  
  257  0A:1000              .incbin "CHRROM/BGTiles.chr"
  258                       
  259           000B        .bank 11
  260           0000        .org $0000
  261  0B:0000              .incbin "CHRROM/FirstSixteenSprites.chr"
  262  0B:0100              .incbin "CHRROM/B0Sprites.chr"  
  263  0B:1000              .incbin "CHRROM/BGTiles.chr"
