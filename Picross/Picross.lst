#[1]   Picross.asm
   11                     
   12                     ;;;; Variables and Macros ;;;;
   13                     
#[2]   Defines/Defines.asm
   14                       .include "Defines/Defines.asm"
    1                     ;; define 0 page stuff here, and SRAM stuff if we have it
    2                     
    3           0000        .rsset $0000
#[3]   Defines/GeneralVars.asm
    4                       .include "Defines/GeneralVars.asm"
    1           0000      temp1                   .rs 1
    2           0001      temp2                   .rs 1
    3           0002      temp3                   .rs 1
    4           0003      temp4                   .rs 1
    5           0004      temp5                   .rs 1
    6           0005      temp6                   .rs 1
    7           0006      temp7                   .rs 1
    8           0007      temp8                   .rs 1
    9           0008      tempx                   .rs 1
   10           0009      tempy                   .rs 1
   11           000A      time                    .rs 1
   12           000B      scaledTime              .rs 1
   13           000C      sleeping                .rs 1
   14           000D      mode_loadFlags  .rs 1
   15           000E      game_mode               .rs 1
   16           000F      mode_state              .rs 1
   17           0010      NMI_locks               .rs 1
   18           0011      game_locks              .rs 1
   19           0012      pointer_address .rs 2
   20           0014      table_address   .rs 2
   21           0016      jump_address    .rs 2
   22                     
   23                     ;game modes
   24           0000      TITLE_IDX = $00
   25           0001      GAME_IDX = $01
   26           0002      GAMEOVER_IDX = $02
   27                     
   28                     ;locks for input and rendering
   29           0001      BGLOAD_NMI_LOCK = %00000001
   30           0001      EFFECT_GAME_LOCK = %00000001
   31                     
   32                     
   33                     
#[2]   Defines/Defines.asm
#[3]   Defines/ControllerVars.asm
    5                       .include "Defines/ControllerVars.asm"
    1           0010      GAMEPAD_UP = $10
    2           0020      GAMEPAD_DOWN = $20
    3           0040      GAMEPAD_LEFT = $40
    4           0080      GAMEPAD_RIGHT = $80
    5           0001      GAMEPAD_A = $01
    6           0002      GAMEPAD_B = $02
    7           0004      GAMEPAD_SELECT = $04
    8           0008      GAMEPAD_START = $08
    9                     
   10           00C0      GAMEPAD_HORI = $C0
   11           0030      GAMEPAD_VERT = $30
   12           00F0      GAMEPAD_MOVE = $F0
   13                     
   14           0003      GAMEPAD_AB = $03
   15                     
   16           0009      GAMEPAD_CONFIRM = $09
   17                     
   18           0018      gamepad                 .rs 1
   19           0019      gamepadLast     .rs 1
   20           001A      gamepadPressed  .rs 1
#[2]   Defines/Defines.asm
#[3]   Defines/PPUVariables.asm
    6                       .include "Defines/PPUVariables.asm"
    1           001B      PPU_Control                     .rs 1
    2           001C      PPU_Mask                        .rs 1
    3           001D      PPU_ScrollX                     .rs 1
    4           001E      PPU_ScrollY                     .rs 1
    5           001F      PPU_ScrollNT            .rs 1   ;first two bits
    6           0020      PPU_NT                          .rs 1
    7                     
    8           0021      PPU_PendingWrite        .rs 1
    9           0022      PPU_StringIdx           .rs 1
   10           0023      PPU_String                      .rs 128
   11                     
   12           004F      PPU_STRINGMAX = $4F ;up to size of a full nametable, I think
   13                     
   14           0000      SPRITE_YPOS = $00
   15           0001      SPRITE_ID   = $01
   16           0003      SPRITE_XPOS = $03
   17           0200      SPRITE_DATA = $0200
   18                     
   19           2000      PPU_CTRL = $2000
   20           2001      PPU_MASK = $2001
   21           2002      PPU_STATUS = $2002
   22           2003      OAM_LO = $2003
   23           2004      OAM_DATA = $2004
   24           2005      PPU_SCROLL = $2005
   25           2006      PPU_ADDR = $2006
   26           2007      PPU_DATA = $2007
   27           4014      OAM_HI = $4014
   28                     
   29           0080      DRAW_VERTICAL = $80
   30           0000      DRAW_HORIZONTAL = $00
   31                     
   32           0040      SPRITE_0_MASK = %01000000
#[2]   Defines/Defines.asm
#[3]   Defines/MapperVars.asm
    7                       .include "Defines/MapperVars.asm"
    1           00A3      mapper_address  .rs 2
    2           00A5      currentCHRBankA .rs 1
    3           00A6      currentCHRBankB .rs 1
    4           00A7      currentPRGBank  .rs 1
    5           00A8      mapperDebugVar  .rs 1
    6                     
    7                     
#[2]   Defines/Defines.asm
#[3]   Defines/TitleVariables.asm
    8                       .include "Defines/TitleVariables.asm"
    1                     
#[2]   Defines/Defines.asm
#[3]   Defines/GameVariables.asm
    9                       .include "Defines/GameVariables.asm"
    1           A000      PUZZLE_TABLE = $A000
    2           A01B      NAMES_TABLE = $A01B
    3           A036      SPRITES_TABLE = $A036
    4                     
    5           00A9      puzzle_address          .rs 2
    6           00AB      clues_address           .rs 2
    7           00AD      pause_address           .rs 2
    8           00AF      copy_address        .rs 2
    9           00B1      pause_draw_address  .rs 2
   10           00B3      clue_start_address      .rs 2
   11           00B5      clue_draw_address       .rs 2
   12           00B7      clueTableIndex          .rs 1
   13           00B8      clueLineIndex           .rs 1
   14           00B9      clueOffsetShift         .rs 1
   15           00BA      clueDrawAdd                     .rs 1
   16           00BB      clueDrawOffset          .rs 2
   17           00BD      clueDrawDecSize         .rs 1
   18           00BE      clueParity                      .rs 1
   19           00BF      mouse_location          .rs 2
   20           00C1      mouse_index                     .rs 2
   21           00C3      currentPaintTile        .rs 1
   22           00C4      solutionCount           .rs 1
   23           00C5      nonSolutionCount        .rs 1
   24           00C6      pauseState                      .rs 1
   25           00C7      holdTimer                       .rs 1
   26           00C8      GameTime                        .rs 4   ;in order - second, ten second, minute, 10 minute - max out at 99 minutes
   27           00CC      targetGameMode          .rs 1
#[2]   Defines/Defines.asm
   10                     ;; 0100 is the stack
   11                     ;; 0200 is sprite ram
   12           0300        .rsset $0300
   13           0400        .rsset $0400
   14           0500        .rsset $0500
   15           0600        .rsset $0600
   16           0700        .rsset $0700
   17           6000        .rsset $6000
#[3]   Defines/ScreenStateVariables.asm
   18                       .include "Defines/ScreenStateVariables.asm"
    1           6000      Screen_Copy             .rs 1024
    2           6400      ScreenB_Copy    .rs 1024
    3           6800      Palette_Copy    .rs 32
#[2]   Defines/Defines.asm
   19           7000        .rsset $7000
#[3]   Defines/SaveVariables.asm
   20                       .include "Defines/SaveVariables.asm"
    1           7000      bank_index      .rs 1
    2           7001      puzzle_index .rs 1
    3                     ;we can save these for the continue
    4                     ;we'll save out data for the puzzles- just need to know if it's 1) complete and 2) the time
    5                     ;we can do that in 4 bytes each, so 324 bytes
    6           7002      puzzle_clear_data .rs 324
    7                     
#[2]   Defines/Defines.asm
   21                     
#[1]   Picross.asm
#[2]   Macros/Macros.asm
   15                       .include "Macros/Macros.asm"
    1                             ;; include list of macros here
    2                             
#[3]   Macros/PPUMacros.asm
    3                             .include "Macros/PPUMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetPPUControl .macro
    6                     
    7                       LDA #\1  ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    8                       STA PPU_CTRL
    9                       LDA #\2   ; enable sprites, enable background, no clipping on left side
   10                       STA PPU_MASK
   11                             
   12                       .endm
   13                       
   14                     MACROSetPPUAddress .macro
   15                     
   16                       LDA PPU_STATUS             ; read PPU status to reset the high/low latch
   17                       LDA #HIGH(\1)
   18                       STA PPU_ADDR            ; write the high byte of $2000 address
   19                       LDA #LOW(\1)
   20                       STA PPU_ADDR           ; write the low byte of $2000 address
   21                       
   22                       .endm
   23                         
   24                     
   25                     MACROAddPPUStringEntryRawData .macro
   26                     
   27                       LDA #$01
   28                       STA PPU_PendingWrite
   29                       LDA \1
   30                       JSR WriteToPPUString
   31                       LDA \2
   32                       JSR WriteToPPUString
   33                       LDA \3
   34                       JSR WriteToPPUString
   35                       LDA \4 
   36                       JSR WriteToPPUString
   37                       
   38                       .endm
   39                     
   40                     MACROAddPPUStringEntryRepeat .macro
   41                     
   42                       LDA #$01
   43                       STA PPU_PendingWrite
   44                       LDA \1
   45                       JSR WriteToPPUString
   46                       LDA \2
   47                       JSR WriteToPPUString
   48                       LDA #$40
   49                       ORA \3
   50                       ORA \4
   51                       JSR WriteToPPUString
   52                       LDA \5
   53                       JSR WriteToPPUString
   54                       
   55                       .endm
   56                       
   57                     MACROAddPPUStringEntryTable .macro
   58                      
   59                       LDA #$01
   60                       STA PPU_PendingWrite
   61                       LDA \1
   62                       JSR WriteToPPUString
   63                       LDA \2
   64                       JSR WriteToPPUString
   65                       LDA #$20
   66                       ORA \3
   67                       JSR WriteToPPUString
   68                       LDA #LOW(\4)
   69                       JSR WriteToPPUString
   70                       LDA #HIGH(\4)
   71                       JSR WriteToPPUString
   72                      
   73                       .endm
   74                     
   75                     
#[2]   Macros/Macros.asm
#[3]   Macros/CallDynamicJump.asm
    4                             .include "Macros/CallDynamicJump.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROCallDynamicJump .macro
    6                     
    7                       LDA \1
    8                       JSR Dynamic_Jump
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetDoubleIndex.asm
    5                             .include "Macros/GetDoubleIndex.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = index to double
    3                     ;; all registers clobbered, as well as table_address
    4                     MACROGetDoubleIndex .macro
    5                     
    6                             LDA \1
    7                             ASL A
    8                             TAY
    9                             
   10                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/GetLabelPointer.asm
    6                             .include "Macros/GetLabelPointer.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = label we want address of
    3                     ;; \2 = address to store address to
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROGetLabelPointer .macro
    6                     
    7                             LDA #HIGH(\1)
    8                             LDX #LOW(\1)
    9                             
   10                             STX \2
   11                             STA \2+1
   12                             
   13                       .endm
   14                       
   15                     MACROGetPointer .macro
   16                     
   17                             LDA \1
   18                             STA \2
   19                             LDA \1+1
   20                             STA \2+1
   21                     
   22                       .endm
#[2]   Macros/Macros.asm
#[3]   Macros/FlagMacros.asm
    7                             .include "Macros/FlagMacros.asm"
    1                     ;;macro to load a full name table
    2                     ;; \1 = address to set
    3                     ;; \2 = flags to set
    4                     ;; all registers clobbered, as well as table_address
    5                     MACROSetFlags .macro
    6                     
    7                       LDA \1
    8                       ORA #\2
    9                       STA \1
   10                             
   11                       .endm
   12                       
   13                     MACROClearFlags .macro
   14                     
   15                       LDA #\2
   16                       EOR #$FF
   17                       AND \1  
   18                       STA \1
   19                     
   20                       .endm
#[2]   Macros/Macros.asm
#[1]   Picross.asm
   16                     
   17                     ;;**************************;;
   18                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19                     ;;       PRG ROM            ;;
   20                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   21                     ;;**************************;; 
   22                     
#[2]   Banks/Bank0.asm
   23                       .include "Banks/Bank0.asm"
    1                     
    2                     
    3           0000        .bank 0
    4           8000        .org $8000
    5                       
#[3]   Puzzles/house.asm
    6                       .include "Puzzles/house.asm" 
    1  00:8000            house:
    2  00:8000  02 82 00    .db $02, $82, $00, $21
       00:8003  21        
    3  00:8004  01 E0 0F    .db $01, $E0, $0F, $00, $78, $36, $C1, $08, $03, $80, $E7, $CE, $ED, $EE, $47, $44, $47, $44, $FF, $FE, $FF, $FE, $FF, $FE, $AB, $AA, $03, $80, $FF, $FE
       00:8007  00 78 36  
       00:800A  C1 08 03  
       00:800D  80 E7 CE  
       00:8010  ED EE 47  
       00:8013  44 47 44  
       00:8016  FF FE FF  
       00:8019  FE FF FE  
       00:801C  AB AA 03  
       00:801F  80 FF FE  
    4  00:8022  14 21 FF    .db $14, $21, $FF, $17, $20, $FF, $14, $21, $FF, $13, $10, $FF, $14, $12, $FF, $17, $10, $FF, $82, $10, $FF, $C2, $FF, $63, $10, $FF, $17, $10, $FF, $14, $11, $10, $FF, $13, $10, $FF, $14, $21, $FF, $17, $10, $FF, $14, $21, $FF
       00:8025  17 20 FF  
       00:8028  14 21 FF  
       00:802B  13 10 FF  
       00:802E  14 12 FF  
       00:8031  17 10 FF  
       00:8034  82 10 FF  
       00:8037  C2 FF 63  
       00:803A  10 FF 17  
       00:803D  10 FF 14  
       00:8040  11 10 FF  
       00:8043  13 10 FF  
       00:8046  14 21 FF  
       00:8049  17 10 FF  
       00:804C  14 21 FF  
    5  00:804F  40 FF 40    .db $40, $FF, $40, $FF, $22, $40, $FF, $11, $20, $FF, $30, $FF, $35, $30, $FF, $34, $23, $FF, $11, $31, $FF, $11, $31, $FF, $F0, $FF, $F0, $FF, $F0, $FF, $11, $13, $11, $10, $FF, $30, $FF, $F0, $FF
       00:8052  FF 22 40  
       00:8055  FF 11 20  
       00:8058  FF 30 FF  
       00:805B  35 30 FF  
       00:805E  34 23 FF  
       00:8061  11 31 FF  
       00:8064  11 31 FF  
       00:8067  F0 FF F0  
       00:806A  FF F0 FF  
       00:806D  11 13 11  
       00:8070  10 FF 30  
       00:8073  FF F0 FF  
    6  00:8076            houseImage:
    7  00:8076  AA AB FE   .db $AA, $AB, $FE, $AA, $AB, $FE, $AA, $AB, $FE, $AA, $FB, $FE, $AA, $2A, $BA, $AA, $A3, $2A, $A9, $5A, $3F, $29, $54, $63, $3F, $24, $62, $AF, $CE, $A2, $8A, $BF, $3A, $89, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $77, $75, $77, $77, $FF, $D5, $FF, $F5, $55, $55, $55, $40, $FF
       00:8079  AA AB FE  
       00:807C  AA AB FE  
       00:807F  AA FB FE  
       00:8082  AA 2A BA  
       00:8085  AA A3 2A  
       00:8088  A9 5A 3F  
       00:808B  29 54 63  
       00:808E  3F 24 62  
       00:8091  AF CE A2  
       00:8094  8A BF 3A  
       00:8097  89 55 55  
       00:809A  55 55 55  
       00:809D  55 55 55  
       00:80A0  55 55 55  
       00:80A3  77 75 77  
       00:80A6  77 FF D5  
       00:80A9  FF F5 55  
       00:80AC  55 55 40  
       00:80AF  FF        
    8  00:80B0            houseName:
    9  00:80B0  05 11 18    .db $05, $11, $18, $1E, $1C, $0E, $FF
       00:80B3  1E 1C 0E  
       00:80B6  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test.asm
    7                       .include "Puzzles/test.asm"
    1  00:80B7            test:
    2  00:80B7  02 01 00    .db $02, $01, $00, $00
       00:80BA  00        
    3  00:80BB  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:80BE  00 00 00  
       00:80C1  00 00 00  
       00:80C4  00 00 00  
       00:80C7  00 00 00  
       00:80CA  00 00 00  
       00:80CD  00 00 00  
       00:80D0  00 00 00  
       00:80D3  00 00 00  
       00:80D6  00 00 00  
    4  00:80D9  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80DC  FF 00 FF  
       00:80DF  00 FF 00  
       00:80E2  FF 00 FF  
       00:80E5  00 FF 00  
       00:80E8  FF 00 FF  
       00:80EB  00 FF 00  
       00:80EE  FF 00 FF  
       00:80F1  00 FF 00  
       00:80F4  FF 00 FF  
    5  00:80F7  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:80FA  FF 00 FF  
       00:80FD  00 FF 00  
       00:8100  FF 00 FF  
       00:8103  00 FF 00  
       00:8106  FF 00 FF  
       00:8109  00 FF 00  
       00:810C  FF 00 FF  
       00:810F  00 FF 00  
       00:8112  FF 00 FF  
    6  00:8115            testImage:
    7  00:8115  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8118  1B 1B 1B  
       00:811B  1B 1B 1B  
       00:811E  1B 1B 1B  
       00:8121  1B 1B 1B  
       00:8124  1B 1B 1B  
       00:8127  1B 1B 1B  
       00:812A  1B 1B 1B  
       00:812D  1B 1B 1B  
       00:8130  1B 1B 1B  
       00:8133  1B 1B 1B  
       00:8136  1B 1B 1B  
       00:8139  1B 1B 1B  
       00:813C  1B 1B 1B  
       00:813F  1B 1B 1B  
       00:8142  1B 1B 1B  
       00:8145  1B 1B 1B  
       00:8148  1B 1B 1B  
       00:814B  1B 1B 00  
       00:814E  FF        
    8  00:814F            testName:
    9  00:814F  04 1D 0E    .db $04, $1D, $0E, $1C, $1D, $FF
       00:8152  1C 1D FF  
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test5.asm
    8                       .include "Puzzles/test5.asm"
    1  00:8155            test5:
    2  00:8155  00 01 00    .db $00, $01, $00, $32
       00:8158  32        
    3  00:8159  80 00 00    .db $80, $00, $00, $00, $00
       00:815C  00 00     
    4  00:815E  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:8161  FF 00 FF  
       00:8164  00 FF 00  
       00:8167  FF        
    5  00:8168  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:816B  FF 00 FF  
       00:816E  00 FF 00  
       00:8171  FF        
    6  00:8172            test5Image:
    7  00:8172  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $00, $FF
       00:8175  1B 1B 1B  
       00:8178  00 FF     
    8  00:817A            test5Name:
    9  00:817A  05 1D 0E    .db $05, $1D, $0E, $1C, $1D, $05, $FF
       00:817D  1C 1D 05  
       00:8180  FF        
#[2]   Banks/Bank0.asm
#[3]   Puzzles/test10.asm
    9                       .include "Puzzles/test10.asm"
    1  00:8181            test10:
    2  00:8181  01 01 00    .db $01, $01, $00, $16
       00:8184  16        
    3  00:8185  80 00 00    .db $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
       00:8188  00 00 00  
       00:818B  00 00 00  
       00:818E  00 00 00  
       00:8191  00 00 00  
       00:8194  00 00 00  
       00:8197  00 00     
    4  00:8199  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:819C  FF 00 FF  
       00:819F  00 FF 00  
       00:81A2  FF 00 FF  
       00:81A5  00 FF 00  
       00:81A8  FF 00 FF  
       00:81AB  00 FF     
    5  00:81AD  10 FF 00    .db $10, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF, $00, $FF
       00:81B0  FF 00 FF  
       00:81B3  00 FF 00  
       00:81B6  FF 00 FF  
       00:81B9  00 FF 00  
       00:81BC  FF 00 FF  
       00:81BF  00 FF     
    6  00:81C1            test10Image:
    7  00:81C1  1B 1B 1B   .db $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $FF
       00:81C4  1B 1B 1B  
       00:81C7  1B 1B 1B  
       00:81CA  1B 1B 1B  
       00:81CD  1B 1B 1B  
       00:81D0  1B 1B 1B  
       00:81D3  1B 1B 1B  
       00:81D6  1B 1B 1B  
       00:81D9  1B FF     
    8  00:81DB            test10Name:
    9  00:81DB  06 1D 0E    .db $06, $1D, $0E, $1C, $1D, $01, $00, $FF
       00:81DE  1C 1D 01  
       00:81E1  00 FF     
#[2]   Banks/Bank0.asm
   10                     
   11           0001        .bank 1
   12           A000        .org $A000
   13                     ;puzzles
   14  01:A000  55 81       .word test5, test10, test, test, test, test, test, test, test
       01:A002  81 81     
       01:A004  B7 80     
       01:A006  B7 80     
       01:A008  B7 80     
       01:A00A  B7 80     
       01:A00C  B7 80     
       01:A00E  B7 80     
       01:A010  B7 80     
   15  01:A012  00 80       .word house, test, test, test, test, test, test, test, test
       01:A014  B7 80     
       01:A016  B7 80     
       01:A018  B7 80     
       01:A01A  B7 80     
       01:A01C  B7 80     
       01:A01E  B7 80     
       01:A020  B7 80     
       01:A022  B7 80     
   16  01:A024  00 80       .word house, test, test, test, test, test, test, test, test
       01:A026  B7 80     
       01:A028  B7 80     
       01:A02A  B7 80     
       01:A02C  B7 80     
       01:A02E  B7 80     
       01:A030  B7 80     
       01:A032  B7 80     
       01:A034  B7 80     
   17                     ;puzzle names
   18  01:A036  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A038  4F 81     
       01:A03A  4F 81     
       01:A03C  4F 81     
       01:A03E  4F 81     
       01:A040  4F 81     
       01:A042  4F 81     
       01:A044  4F 81     
       01:A046  4F 81     
   19  01:A048  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A04A  4F 81     
       01:A04C  4F 81     
       01:A04E  4F 81     
       01:A050  4F 81     
       01:A052  4F 81     
       01:A054  4F 81     
       01:A056  4F 81     
       01:A058  4F 81     
   20  01:A05A  B0 80       .word houseName, testName, testName, testName, testName, testName, testName, testName, testName
       01:A05C  4F 81     
       01:A05E  4F 81     
       01:A060  4F 81     
       01:A062  4F 81     
       01:A064  4F 81     
       01:A066  4F 81     
       01:A068  4F 81     
       01:A06A  4F 81     
   21                     ;puzzle sprites
   22  01:A06C  00 00 00    .db $00, $00, $00, $00
       01:A06F  00        
   23  01:A070  00 00 00    .db $00, $00, $00, $00
       01:A073  00        
   24  01:A074  00 00 00    .db $00, $00, $00, $00
       01:A077  00        
   25  01:A078  00 00 00    .db $00, $00, $00, $00
       01:A07B  00        
   26  01:A07C  00 00 00    .db $00, $00, $00, $00
       01:A07F  00        
   27  01:A080  00 00 00    .db $00, $00, $00, $00
       01:A083  00        
   28  01:A084  00 00 00    .db $00, $00, $00, $00
       01:A087  00        
   29  01:A088  00 00 00    .db $00, $00, $00, $00
       01:A08B  00        
   30  01:A08C  00 00 00    .db $00, $00, $00, $00
       01:A08F  00        
   31  01:A090  00 00 00    .db $00, $00, $00, $00
       01:A093  00        
   32  01:A094  00 00 00    .db $00, $00, $00, $00
       01:A097  00        
   33  01:A098  00 00 00    .db $00, $00, $00, $00
       01:A09B  00        
   34  01:A09C  00 00 00    .db $00, $00, $00, $00
       01:A09F  00        
   35  01:A0A0  00 00 00    .db $00, $00, $00, $00
       01:A0A3  00        
   36  01:A0A4  00 00 00    .db $00, $00, $00, $00
       01:A0A7  00        
   37  01:A0A8  00 00 00    .db $00, $00, $00, $00
       01:A0AB  00        
   38  01:A0AC  00 00 00    .db $00, $00, $00, $00
       01:A0AF  00        
   39  01:A0B0  00 00 00    .db $00, $00, $00, $00
       01:A0B3  00        
   40  01:A0B4  00 00 00    .db $00, $00, $00, $00
       01:A0B7  00        
   41  01:A0B8  00 00 00    .db $00, $00, $00, $00
       01:A0BB  00        
   42  01:A0BC  00 00 00    .db $00, $00, $00, $00
       01:A0BF  00        
   43  01:A0C0  00 00 00    .db $00, $00, $00, $00
       01:A0C3  00        
   44  01:A0C4  00 00 00    .db $00, $00, $00, $00
       01:A0C7  00        
   45  01:A0C8  00 00 00    .db $00, $00, $00, $00
       01:A0CB  00        
   46  01:A0CC  00 00 00    .db $00, $00, $00, $00
       01:A0CF  00        
   47  01:A0D0  00 00 00    .db $00, $00, $00, $00
       01:A0D3  00        
   48  01:A0D4  00 00 00    .db $00, $00, $00, $00
       01:A0D7  00        
   49                       
   50                       
   51           BFFA        .org $BFFA     ;first of the three vectors starts here
   52  01:BFFA  2E D0       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   53                                        ;processor will jump to the label NMI:
   54  01:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   55                                        ;to the label RESET:
   56  01:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank1.asm
   24                       .include "Banks/Bank1.asm"
    1           0002        .bank 2
    2           8000        .org $8000
    3                       
#[3]   Puzzles/frog.asm
    4                       .include "Puzzles/frog.asm"
    1  02:8000            frog:
    2  02:8000  02 62 00    .db $02, $62, $00, $19
       02:8003  19        
    3  02:8004  00 00 00    .db $00, $00, $00, $00, $18, $30, $24, $48, $2C, $68, $1F, $F0, $3F, $F8, $7F, $FC, $7F, $FC, $60, $0C, $33, $98, $18, $30, $0F, $E0, $3C, $78, $78, $3C
       02:8007  00 18 30  
       02:800A  24 48 2C  
       02:800D  68 1F F0  
       02:8010  3F F8 7F  
       02:8013  FC 7F FC  
       02:8016  60 0C 33  
       02:8019  98 18 30  
       02:801C  0F E0 3C  
       02:801F  78 78 3C  
    4  02:8022  00 FF 13    .db $00, $FF, $13, $FF, $25, $20, $FF, $22, $41, $FF, $45, $10, $FF, $26, $FF, $11, $40, $FF, $11, $40, $FF, $11, $40, $FF, $26, $FF, $45, $10, $FF, $22, $41, $FF, $25, $20, $FF, $13, $FF, $00, $FF
       02:8025  FF 25 20  
       02:8028  FF 22 41  
       02:802B  FF 45 10  
       02:802E  FF 26 FF  
       02:8031  11 40 FF  
       02:8034  11 40 FF  
       02:8037  11 40 FF  
       02:803A  26 FF 45  
       02:803D  10 FF 22  
       02:8040  41 FF 25  
       02:8043  20 FF 13  
       02:8046  FF 00 FF  
    5  02:8049  00 FF 00    .db $00, $FF, $00, $FF, $22, $FF, $11, $11, $FF, $12, $21, $FF, $90, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $22, $FF, $23, $20, $FF, $22, $FF, $70, $FF, $44, $FF, $44, $FF
       02:804C  FF 22 FF  
       02:804F  11 11 FF  
       02:8052  12 21 FF  
       02:8055  90 FF B0  
       02:8058  FF D0 FF  
       02:805B  D0 FF 22  
       02:805E  FF 23 20  
       02:8061  FF 22 FF  
       02:8064  70 FF 44  
       02:8067  FF 44 FF  
    6  02:806A            frogImage:
    7  02:806A  55 55 55   .db $55, $55, $55, $55, $55, $55, $55, $55, $69, $55, $A5, $56, $F9, $5B, $E5, $5B, $25, $63, $95, $5A, $AA, $A9, $55, $AA, $22, $A9, $5A, $AA, $AA, $A9, $6A, $AA, $AA, $A5, $A0, $00, $02, $95, $A0, $54, $29, $55, $A0, $02, $95, $55, $AA, $A9, $55, $6A, $BF, $AA, $56, $AB, $FF, $AA, $40, $FF
       02:806D  55 55 55  
       02:8070  55 55 69  
       02:8073  55 A5 56  
       02:8076  F9 5B E5  
       02:8079  5B 25 63  
       02:807C  95 5A AA  
       02:807F  A9 55 AA  
       02:8082  22 A9 5A  
       02:8085  AA AA A9  
       02:8088  6A AA AA  
       02:808B  A5 A0 00  
       02:808E  02 95 A0  
       02:8091  54 29 55  
       02:8094  A0 02 95  
       02:8097  55 AA A9  
       02:809A  55 6A BF  
       02:809D  AA 56 AB  
       02:80A0  FF AA 40  
       02:80A3  FF        
    8  02:80A4            frogName:
    9  02:80A4  04 0F 1B    .db $04, $0F, $1B, $18, $10, $FF
       02:80A7  18 10 FF  
#[2]   Banks/Bank1.asm
    5                     
    6           0003        .bank 3
    7           A000        .org $A000
    8                      
    9                     ;puzzles
   10  03:A000  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A002  00 80     
       03:A004  00 80     
       03:A006  00 80     
       03:A008  00 80     
       03:A00A  00 80     
       03:A00C  00 80     
       03:A00E  00 80     
       03:A010  00 80     
   11  03:A012  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A014  00 80     
       03:A016  00 80     
       03:A018  00 80     
       03:A01A  00 80     
       03:A01C  00 80     
       03:A01E  00 80     
       03:A020  00 80     
       03:A022  00 80     
   12  03:A024  00 80       .word frog, frog, frog, frog, frog, frog, frog, frog, frog
       03:A026  00 80     
       03:A028  00 80     
       03:A02A  00 80     
       03:A02C  00 80     
       03:A02E  00 80     
       03:A030  00 80     
       03:A032  00 80     
       03:A034  00 80     
   13                     ;puzzle names
   14  03:A036  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A038  A4 80     
       03:A03A  A4 80     
       03:A03C  A4 80     
       03:A03E  A4 80     
       03:A040  A4 80     
       03:A042  A4 80     
       03:A044  A4 80     
       03:A046  A4 80     
   15  03:A048  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A04A  A4 80     
       03:A04C  A4 80     
       03:A04E  A4 80     
       03:A050  A4 80     
       03:A052  A4 80     
       03:A054  A4 80     
       03:A056  A4 80     
       03:A058  A4 80     
   16  03:A05A  A4 80       .word frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName, frogName
       03:A05C  A4 80     
       03:A05E  A4 80     
       03:A060  A4 80     
       03:A062  A4 80     
       03:A064  A4 80     
       03:A066  A4 80     
       03:A068  A4 80     
       03:A06A  A4 80     
   17                     ;puzzle sprites
   18  03:A06C  00 00 00    .db $00, $00, $00, $00
       03:A06F  00        
   19  03:A070  00 00 00    .db $00, $00, $00, $00
       03:A073  00        
   20  03:A074  00 00 00    .db $00, $00, $00, $00
       03:A077  00        
   21  03:A078  00 00 00    .db $00, $00, $00, $00
       03:A07B  00        
   22  03:A07C  00 00 00    .db $00, $00, $00, $00
       03:A07F  00        
   23  03:A080  00 00 00    .db $00, $00, $00, $00
       03:A083  00        
   24  03:A084  00 00 00    .db $00, $00, $00, $00
       03:A087  00        
   25  03:A088  00 00 00    .db $00, $00, $00, $00
       03:A08B  00        
   26  03:A08C  00 00 00    .db $00, $00, $00, $00
       03:A08F  00        
   27  03:A090  00 00 00    .db $00, $00, $00, $00
       03:A093  00        
   28  03:A094  00 00 00    .db $00, $00, $00, $00
       03:A097  00        
   29  03:A098  00 00 00    .db $00, $00, $00, $00
       03:A09B  00        
   30  03:A09C  00 00 00    .db $00, $00, $00, $00
       03:A09F  00        
   31  03:A0A0  00 00 00    .db $00, $00, $00, $00
       03:A0A3  00        
   32  03:A0A4  00 00 00    .db $00, $00, $00, $00
       03:A0A7  00        
   33  03:A0A8  00 00 00    .db $00, $00, $00, $00
       03:A0AB  00        
   34  03:A0AC  00 00 00    .db $00, $00, $00, $00
       03:A0AF  00        
   35  03:A0B0  00 00 00    .db $00, $00, $00, $00
       03:A0B3  00        
   36  03:A0B4  00 00 00    .db $00, $00, $00, $00
       03:A0B7  00        
   37  03:A0B8  00 00 00    .db $00, $00, $00, $00
       03:A0BB  00        
   38  03:A0BC  00 00 00    .db $00, $00, $00, $00
       03:A0BF  00        
   39  03:A0C0  00 00 00    .db $00, $00, $00, $00
       03:A0C3  00        
   40  03:A0C4  00 00 00    .db $00, $00, $00, $00
       03:A0C7  00        
   41  03:A0C8  00 00 00    .db $00, $00, $00, $00
       03:A0CB  00        
   42  03:A0CC  00 00 00    .db $00, $00, $00, $00
       03:A0CF  00        
   43  03:A0D0  00 00 00    .db $00, $00, $00, $00
       03:A0D3  00        
   44  03:A0D4  00 00 00    .db $00, $00, $00, $00
       03:A0D7  00        
   45                       
   46                       
   47           BFFA        .org $BFFA     ;first of the three vectors starts here
   48  03:BFFA  2E D0       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   49                                        ;processor will jump to the label NMI:
   50  03:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   51                                        ;to the label RESET:
   52  03:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
#[2]   Banks/Bank2.asm
   25                       .include "Banks/Bank2.asm"
    1           0004        .bank 4
    2           8000        .org $8000
    3                       
#[3]   Puzzles/cat.asm
    4                       .include "Puzzles/cat.asm"
    1  04:8000            cat:
    2  04:8000  02 7E 00    .db $02, $7E, $00, $2B
       04:8003  2B        
    3  04:8004  00 00 0C    .db $00, $00, $0C, $60, $1E, $F0, $3E, $F8, $3F, $F8, $7F, $FC, $7F, $FC, $47, $C4, $7B, $BC, $7F, $FC, $7C, $7C, $76, $DC, $39, $38, $1F, $F0, $00, $00
       04:8007  60 1E F0  
       04:800A  3E F8 3F  
       04:800D  F8 7F FC  
       04:8010  7F FC 47  
       04:8013  C4 7B BC  
       04:8016  7F FC 7C  
       04:8019  7C 76 DC  
       04:801C  39 38 1F  
       04:801F  F0 00 00  
    4  04:8022  00 FF 70    .db $00, $FF, $70, $FF, $54, $FF, $65, $FF, $23, $60, $FF, $13, $70, $FF, $11, $80, $FF, $26, $FF, $11, $80, $FF, $13, $70, $FF, $23, $60, $FF, $65, $FF, $54, $FF, $70, $FF, $00, $FF
       04:8025  FF 54 FF  
       04:8028  65 FF 23  
       04:802B  60 FF 13  
       04:802E  70 FF 11  
       04:8031  80 FF 26  
       04:8034  FF 11 80  
       04:8037  FF 13 70  
       04:803A  FF 23 60  
       04:803D  FF 65 FF  
       04:8040  54 FF 70  
       04:8043  FF 00 FF  
    5  04:8046  00 FF 22    .db $00, $FF, $22, $FF, $44, $FF, $55, $FF, $B0, $FF, $D0, $FF, $D0, $FF, $15, $10, $FF, $43, $40, $FF, $D0, $FF, $55, $FF, $32, $23, $FF, $31, $30, $FF, $90, $FF, $00, $FF
       04:8049  FF 44 FF  
       04:804C  55 FF B0  
       04:804F  FF D0 FF  
       04:8052  D0 FF 15  
       04:8055  10 FF 43  
       04:8058  40 FF D0  
       04:805B  FF 55 FF  
       04:805E  32 23 FF  
       04:8061  31 30 FF  
       04:8064  90 FF 00  
       04:8067  FF        
    6  04:8068            catImage:
    7  04:8068  55 55 55   .db $55, $55, $55, $55, $56, $95, $A5, $55, $6A, $9A, $A5, $56, $AA, $6A, $A5, $5A, $AA, $AA, $95, $AA, $66, $6A, $96, $AA, $9A, $AA, $58, $0A, $E8, $09, $6A, $8F, $CA, $A5, $9A, $FF, $E9, $96, $AF, $57, $EA, $59, $CF, $7C, $D9, $5F, $C3, $0F, $D5, $5F, $FF, $FD, $55, $55, $55, $55, $40, $FF
       04:806B  55 56 95  
       04:806E  A5 55 6A  
       04:8071  9A A5 56  
       04:8074  AA 6A A5  
       04:8077  5A AA AA  
       04:807A  95 AA 66  
       04:807D  6A 96 AA  
       04:8080  9A AA 58  
       04:8083  0A E8 09  
       04:8086  6A 8F CA  
       04:8089  A5 9A FF  
       04:808C  E9 96 AF  
       04:808F  57 EA 59  
       04:8092  CF 7C D9  
       04:8095  5F C3 0F  
       04:8098  D5 5F FF  
       04:809B  FD 55 55  
       04:809E  55 55 40  
       04:80A1  FF        
    8  04:80A2            catName:
    9  04:80A2  03 0C 0A    .db $03, $0C, $0A, $1D, $FF
       04:80A5  1D FF     
#[2]   Banks/Bank2.asm
    5                     
    6           0005        .bank 5
    7           A000        .org $A000
    8                       
    9                     ;puzzles
   10  05:A000  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A002  00 80     
       05:A004  00 80     
       05:A006  00 80     
       05:A008  00 80     
       05:A00A  00 80     
       05:A00C  00 80     
       05:A00E  00 80     
       05:A010  00 80     
   11  05:A012  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat 
       05:A014  00 80     
       05:A016  00 80     
       05:A018  00 80     
       05:A01A  00 80     
       05:A01C  00 80     
       05:A01E  00 80     
       05:A020  00 80     
       05:A022  00 80     
   12  05:A024  00 80       .word cat, cat, cat, cat, cat, cat, cat, cat, cat
       05:A026  00 80     
       05:A028  00 80     
       05:A02A  00 80     
       05:A02C  00 80     
       05:A02E  00 80     
       05:A030  00 80     
       05:A032  00 80     
       05:A034  00 80     
   13                     ;puzzle names
   14  05:A036  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A038  A2 80     
       05:A03A  A2 80     
       05:A03C  A2 80     
       05:A03E  A2 80     
       05:A040  A2 80     
       05:A042  A2 80     
       05:A044  A2 80     
       05:A046  A2 80     
   15  05:A048  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName 
       05:A04A  A2 80     
       05:A04C  A2 80     
       05:A04E  A2 80     
       05:A050  A2 80     
       05:A052  A2 80     
       05:A054  A2 80     
       05:A056  A2 80     
       05:A058  A2 80     
   16  05:A05A  A2 80       .word catName, catName, catName, catName, catName, catName, catName, catName, catName
       05:A05C  A2 80     
       05:A05E  A2 80     
       05:A060  A2 80     
       05:A062  A2 80     
       05:A064  A2 80     
       05:A066  A2 80     
       05:A068  A2 80     
       05:A06A  A2 80     
   17                     ;puzzle sprites
   18  05:A06C  00 00 00    .db $00, $00, $00, $00
       05:A06F  00        
   19  05:A070  00 00 00    .db $00, $00, $00, $00
       05:A073  00        
   20  05:A074  00 00 00    .db $00, $00, $00, $00
       05:A077  00        
   21  05:A078  00 00 00    .db $00, $00, $00, $00
       05:A07B  00        
   22  05:A07C  00 00 00    .db $00, $00, $00, $00
       05:A07F  00        
   23  05:A080  00 00 00    .db $00, $00, $00, $00
       05:A083  00        
   24  05:A084  00 00 00    .db $00, $00, $00, $00
       05:A087  00        
   25  05:A088  00 00 00    .db $00, $00, $00, $00
       05:A08B  00        
   26  05:A08C  00 00 00    .db $00, $00, $00, $00
       05:A08F  00        
   27  05:A090  00 00 00    .db $00, $00, $00, $00
       05:A093  00        
   28  05:A094  00 00 00    .db $00, $00, $00, $00
       05:A097  00        
   29  05:A098  00 00 00    .db $00, $00, $00, $00
       05:A09B  00        
   30  05:A09C  00 00 00    .db $00, $00, $00, $00
       05:A09F  00        
   31  05:A0A0  00 00 00    .db $00, $00, $00, $00
       05:A0A3  00        
   32  05:A0A4  00 00 00    .db $00, $00, $00, $00
       05:A0A7  00        
   33  05:A0A8  00 00 00    .db $00, $00, $00, $00
       05:A0AB  00        
   34  05:A0AC  00 00 00    .db $00, $00, $00, $00
       05:A0AF  00        
   35  05:A0B0  00 00 00    .db $00, $00, $00, $00
       05:A0B3  00        
   36  05:A0B4  00 00 00    .db $00, $00, $00, $00
       05:A0B7  00        
   37  05:A0B8  00 00 00    .db $00, $00, $00, $00
       05:A0BB  00        
   38  05:A0BC  00 00 00    .db $00, $00, $00, $00
       05:A0BF  00        
   39  05:A0C0  00 00 00    .db $00, $00, $00, $00
       05:A0C3  00        
   40  05:A0C4  00 00 00    .db $00, $00, $00, $00
       05:A0C7  00        
   41  05:A0C8  00 00 00    .db $00, $00, $00, $00
       05:A0CB  00        
   42  05:A0CC  00 00 00    .db $00, $00, $00, $00
       05:A0CF  00        
   43  05:A0D0  00 00 00    .db $00, $00, $00, $00
       05:A0D3  00        
   44  05:A0D4  00 00 00    .db $00, $00, $00, $00
       05:A0D7  00        
   45                     
   46           BFFA        .org $BFFA     ;first of the three vectors starts here
   47  05:BFFA  2E D0       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
   48                                        ;processor will jump to the label NMI:
   49  05:BFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
   50                                        ;to the label RESET:
   51  05:BFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
#[1]   Picross.asm
   26                     
   27           0006        .bank 6
   28           C000        .org $C000 
   29                     
   30                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31                     ;;     Initialization       ;;
   32                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33                     
#[2]   Routines/Common/Init.asm
   34                       .include "Routines/Common/Init.asm"
    1  06:C000            RESET:
    2  06:C000  78          SEI          ; disable IRQs
    3  06:C001  D8          CLD          ; disable decimal mode
    4  06:C002  A2 40       LDX #$40
    5  06:C004  8E 17 40    STX $4017    ; disable APU frame IRQ
    6  06:C007  A2 FF       LDX #$FF
    7  06:C009  9A          TXS          ; Set up stack
    8  06:C00A  E8          INX          ; now X = 0
    9  06:C00B  8E 00 20    STX $2000    ; disable NMI
   10  06:C00E  8E 01 20    STX $2001    ; disable rendering
   11  06:C011  8E 10 40    STX $4010    ; disable DMC IRQs
   12                     
   13  06:C014            vblankwait1:       ; First wait for vblank to make sure PPU is ready
   14  06:C014  2C 02 20    BIT $2002
   15  06:C017  10 FB       BPL vblankwait1
   16                     
   17  06:C019            clrmem:
   18  06:C019  A9 00       LDA #$00
   19  06:C01B  9D 00 00    STA $0000, x
   20  06:C01E  9D 00 01    STA $0100, x
   21  06:C021  9D 00 03    STA $0300, x
   22  06:C024  9D 00 04    STA $0400, x
   23  06:C027  9D 00 05    STA $0500, x
   24  06:C02A  9D 00 06    STA $0600, x
   25  06:C02D  9D 00 07    STA $0700, x
   26  06:C030  A9 FE       LDA #$FE
   27  06:C032  9D 00 02    STA $0200, x
   28  06:C035  E8          INX
   29  06:C036  D0 E1       BNE clrmem
   30                        
   31  06:C038  20 6B CC    JSR ResetMapper
   32  06:C03B  A9 1E       LDA #$1E ; vertical mirroring, fixed $C000, 8 KB CHR pages
   33  06:C03D  20 6F CC    JSR SetMapperControls
   34                       
   35  06:C040  20 AC CC    JSR ResetBanks
   36                       
   37  06:C043            vblankwait2:      ; Second wait for vblank, PPU is ready after this
   38  06:C043  2C 02 20    BIT $2002
   39  06:C046  10 FB       BPL vblankwait2
#[1]   Picross.asm
   35                     
   36  06:C048  A9 00       LDA #TITLE_IDX
   37  06:C04A  A2 00       LDX #$00
   38  06:C04C  20 66 C9    JSR ChangeGameMode
   39  06:C04F  20 F0 CB    JSR InitPPUControl
   40                       
   41                     
   42                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   43                     ;;     Main Program         ;;
   44                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   45                     
   46  06:C052            Forever:
   47                     
   48  06:C052  EE 0C 00    INC sleeping
   49                     
   50  06:C055            .loop
   51  06:C055  AD 0C 00    LDA sleeping
   52  06:C058  D0 FB       BNE .loop
   53                     
   54  06:C05A  EE 0A 00    INC time  
   55  06:C05D  AD C6 00    LDA pauseState
   56  06:C060  D0 03       BNE .skipScaleUpdate
   57  06:C062  EE 0B 00    INC scaledTime
   58  06:C065            .skipScaleUpdate:
   59  06:C065  20 6B C0    JSR GameLoop
   60                     
   61                     
   62  06:C068  4C 52 C0    JMP Forever     ;jump back to Forever, infinite loop
   63                       
   64                     ;; dynamic jump table
   65                     
   66  06:C06B            GameLoop:
   67                     
   68                       MACROCallDynamicJump game_mode
                          
       06:C06B  AD 0E 00    LDA game_mode
       06:C06E  20 23 CA    JSR Dynamic_Jump
                                  
   69                       ;; we'll pop the return address here as the table index, so 
   70                       ;; the routine we pick will return us to whatever called Game Loop
   71                       ;; when it returns
   72                     
   73  06:C071            GameLoopJumpTable:
   74                     
   75  06:C071  77 C0       .word UpdateTitle
   76  06:C073  A7 C2       .word UpdateGame
   77  06:C075  15 C9       .word UpdateGameOver
   78                       
   79                     
   80                       ;;RTS is called in the subroutine
   81                     
   82                       
#[2]   Routines/Game_States/UpdateTitle.asm
   83                       .include "Routines/Game_States/UpdateTitle.asm"
    1  06:C077            UpdateTitle:
    2                     
    3  06:C077  AD 10 00    LDA NMI_locks
    4  06:C07A  F0 01       BEQ .unlocked
    5                       
    6  06:C07C  60          RTS
    7                       
    8  06:C07D            .unlocked:
    9                     
   10  06:C07D  20 81 C0    JSR DoUpdateTitle  
   11  06:C080  60          RTS
   12                       
   13  06:C081            DoUpdateTitle:
   14                     
   15  06:C081  AD 0F 00    LDA mode_state
   16  06:C084  20 23 CA    JSR Dynamic_Jump
   17                         
   18  06:C087            UpdateTitleJumpTable:
   19                     
   20  06:C087  93 C0       .word UpdateTitleInit
   21  06:C089  A4 C0       .word UpdateBankSelection
   22  06:C08B  CB C0       .word UpdateScroll
   23  06:C08D  EF C0       .word UpdatePuzzleSelection
   24  06:C08F  32 C1       .word UpdateScrollBack
   25  06:C091  51 C1       .word UpdateTitleExit
   26                     
   27                       
   28                     ;;title should have two steps- the bank selection and the puzzle selection
   29                     ;;top half of screen can be used as the title screen, and the bottom half will have the selectable options
   30                     ;;
   31                     ;;starting options list: BANK 0, BANK 1, BANK 2
   32                     ;;select one, then scroll over to the right, with numbers for puzzles 
   33                     
   34  06:C093            UpdateTitleInit:
   35                     
   36  06:C093  20 CC CB    JSR TurnOnSprites
   37                       
   38  06:C096  A9 00       LDA #$00
   39  06:C098  8D C1 00    STA mouse_index
   40  06:C09B  A9 00       LDA #$00
   41  06:C09D  8D C2 00    STA mouse_index+1
   42                     
   43  06:C0A0            .changeModeState:
   44                     
   45  06:C0A0  EE 0F 00    INC mode_state
   46  06:C0A3            .leave:
   47  06:C0A3  60          RTS
   48                       
   49  06:C0A4            UpdateBankSelection:
   50                     
   51  06:C0A4  20 F9 C1    JSR UpdateBankPointer
   52                       
   53  06:C0A7  AD 1A 00    LDA gamepadPressed
   54  06:C0AA  29 01       AND #GAMEPAD_A
   55  06:C0AC  F0 1C       BEQ .leave
   56                       
   57  06:C0AE            .changeModeState:
   58                     
   59                       ;;load bank
   60                       
   61  06:C0AE  AD C1 00    LDA mouse_index
   62  06:C0B1  8D 00 70    STA bank_index
   63  06:C0B4  A9 FF       LDA #$FF
   64  06:C0B6  A2 01       LDX #$01
   65  06:C0B8  20 DB C1    JSR SetSpriteImage
   66                        
   67                       ;;load bank
   68  06:C0BB  20 6B CC    JSR ResetMapper
   69  06:C0BE  AD 00 70    LDA bank_index
   70  06:C0C1  8D A7 00    STA currentPRGBank
   71  06:C0C4  20 7A CC    JSR LoadPRGBank
   72                     
   73  06:C0C7  EE 0F 00    INC mode_state
   74  06:C0CA            .leave:
   75  06:C0CA  60          RTS
   76                       
   77  06:C0CB            UpdateScroll:
   78  06:C0CB  EE 1D 00    INC PPU_ScrollX
   79  06:C0CE  EE 1D 00    INC PPU_ScrollX
   80  06:C0D1  EE 1D 00    INC PPU_ScrollX
   81  06:C0D4  EE 1D 00    INC PPU_ScrollX
   82  06:C0D7  D0 15       BNE .leave
   83  06:C0D9  AD 1F 00    LDA PPU_ScrollNT
   84  06:C0DC  49 01       EOR #%00000001
   85  06:C0DE  8D 1F 00    STA PPU_ScrollNT
   86                       
   87  06:C0E1            .changeModeState:
   88  06:C0E1  A9 01       LDA #$01
   89  06:C0E3  A2 01       LDX #$01
   90  06:C0E5  20 DB C1    JSR SetSpriteImage
   91  06:C0E8  20 9D C1    JSR InitPuzzlePointer
   92  06:C0EB  EE 0F 00    INC mode_state
   93  06:C0EE            .leave:
   94  06:C0EE  60          RTS
   95                       
   96  06:C0EF            UpdatePuzzleSelection:
   97                     
   98  06:C0EF  20 38 C2    JSR UpdatePuzzlePointer
   99                       
  100  06:C0F2  AD 1A 00    LDA gamepadPressed
  101  06:C0F5  29 02       AND #GAMEPAD_B
  102  06:C0F7  D0 10       BNE .changeToScrollBack
  103  06:C0F9  AD 1A 00    LDA gamepadPressed
  104  06:C0FC  29 09       AND #GAMEPAD_CONFIRM
  105  06:C0FE  F0 31       BEQ .leave
  106                       
  107  06:C100  EE 0F 00    INC mode_state
  108  06:C103  EE 0F 00    INC mode_state
  109  06:C106  4C 31 C1    JMP .leave
  110                       
  111  06:C109            .changeToScrollBack:
  112                      
  113  06:C109  A9 FF       LDA #$FF
  114  06:C10B  A2 01       LDX #$01
  115  06:C10D  20 DB C1    JSR SetSpriteImage
  116  06:C110  20 95 C1    JSR InitBankPointer
  117  06:C113  AD 00 70    LDA bank_index
  118  06:C116  8D C1 00    STA mouse_index
  119  06:C119  20 2B C2    JSR SetBankPointerFromIndex
  120                       
  121  06:C11C  A9 00       LDA #$00
  122  06:C11E  8D 1E 00    STA PPU_ScrollY
  123  06:C121  A9 FC       LDA #$FC
  124  06:C123  8D 1D 00    STA PPU_ScrollX
  125  06:C126  AD 1F 00    LDA PPU_ScrollNT
  126  06:C129  29 FE       AND #$FE
  127  06:C12B  8D 1F 00    STA PPU_ScrollNT
  128                       
  129  06:C12E  EE 0F 00    INC mode_state
  130  06:C131            .leave:
  131  06:C131  60          RTS
  132                       
  133  06:C132            UpdateScrollBack:
  134                     
  135  06:C132  CE 1D 00    DEC PPU_ScrollX
  136  06:C135  CE 1D 00    DEC PPU_ScrollX
  137  06:C138  CE 1D 00    DEC PPU_ScrollX
  138  06:C13B  CE 1D 00    DEC PPU_ScrollX
  139  06:C13E  D0 10       BNE .leave
  140                       
  141  06:C140            .changeModeState:
  142                     
  143  06:C140  A9 01       LDA #$01
  144  06:C142  A2 01       LDX #$01
  145  06:C144  20 DB C1    JSR SetSpriteImage
  146  06:C147  CE 0F 00    DEC mode_state
  147  06:C14A  CE 0F 00    DEC mode_state
  148  06:C14D  CE 0F 00    DEC mode_state
  149                       
  150  06:C150            .leave:
  151  06:C150  60          RTS
  152                       
  153  06:C151            UpdateTitleExit:
  154                     
  155                       ;;reset screen scroll
  156  06:C151  A9 00       LDA #$00
  157  06:C153  8D 1D 00    STA PPU_ScrollX
  158  06:C156  8D 1F 00    STA PPU_ScrollNT
  159                      
  160                       ;; we can also pick out the puzzle index
  161                       ;; we have the mouse indexes - one vert, one hori
  162                       ;; take vert, mult by 9- alternatively, mult by 8, add index 
  163                       ;; IE - ind = 1, mult 8 = 8, add 1 = 9
  164                       ;; add X index
  165  06:C159  AD C1 00    LDA mouse_index
  166  06:C15C  0A          ASL A
  167  06:C15D  0A          ASL A
  168  06:C15E  0A          ASL A
  169  06:C15F  18          CLC
  170  06:C160  6D C1 00    ADC mouse_index
  171  06:C163  6D C2 00    ADC mouse_index+1
  172  06:C166  8D 01 70    STA puzzle_index
  173                     
  174  06:C169  20 D5 CB    JSR TurnOffSprites
  175                       
  176                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C16C  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C16E  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C170  8E 14 00          STX table_address
       06:C173  8D 15 00          STA table_address+1
                                  
  177                       MACROGetDoubleIndex puzzle_index
                          
       06:C176  AD 01 70          LDA puzzle_index
       06:C179  0A                ASL A
       06:C17A  A8                TAY
                                  
  178  06:C17B  20 49 CA    JSR GetTableAtIndex
  179                       MACROGetPointer table_address, puzzle_address
                          
       06:C17E  AD 14 00          LDA table_address
       06:C181  8D A9 00          STA puzzle_address
       06:C184  AD 15 00          LDA table_address+1
       06:C187  8D AA 00          STA puzzle_address+1
                          
  180                     
  181  06:C18A  A0 00       LDY #$00
  182  06:C18C  B1 A9       LDA [puzzle_address], y
  183  06:C18E  AA          TAX
  184                     
  185  06:C18F  A9 01       LDA #GAME_IDX
  186  06:C191  20 66 C9    JSR ChangeGameMode
  187                       
  188  06:C194            .leave
  189  06:C194  60          RTS
  190                       
  191  06:C195            InitBankPointer:
  192                     
  193  06:C195  A2 A0       LDX #$A0
  194  06:C197  A9 60       LDA #$60
  195  06:C199  20 B0 C1    JSR InitPointer
  196                       
  197  06:C19C  60          RTS  
  198                       
  199  06:C19D            InitPuzzlePointer:
  200                       
  201  06:C19D  A2 AE       LDX #$AE
  202  06:C19F  A9 10       LDA #$10
  203  06:C1A1  20 B0 C1    JSR InitPointer
  204                       
  205  06:C1A4  60          RTS
  206                     
  207  06:C1A5            ResetMouseIndex:
  208                     
  209  06:C1A5  A9 00       LDA #$00
  210  06:C1A7  8D C1 00    STA mouse_index
  211  06:C1AA  A9 00       LDA #$00
  212  06:C1AC  8D C2 00    STA mouse_index+1
  213  06:C1AF  60          RTS
  214                     
  215  06:C1B0            InitPointer:
  216                     
  217  06:C1B0  20 B7 C1    JSR SetPointerPosition
  218  06:C1B3  20 A5 C1    JSR ResetMouseIndex
  219  06:C1B6  60          RTS  
  220                       
  221  06:C1B7            SetPointerPosition:
  222                     
  223  06:C1B7  48          PHA
  224  06:C1B8  8A          TXA
  225  06:C1B9  A2 01       LDX #$01
  226  06:C1BB  20 C5 C1    JSR SetSpriteYPosition
  227  06:C1BE  68          PLA
  228  06:C1BF  A2 01       LDX #$01
  229  06:C1C1  20 D0 C1    JSR SetSpriteXPosition
  230                      
  231  06:C1C4  60          RTS
  232                       
  233  06:C1C5            SetSpriteYPosition:
  234                       
  235  06:C1C5  48          PHA
  236  06:C1C6  A9 00       LDA #SPRITE_YPOS
  237  06:C1C8  20 E6 C1    JSR GetSpriteDataIndexInX
  238  06:C1CB  68          PLA
  239  06:C1CC  9D 00 02    STA SPRITE_DATA, x
  240  06:C1CF  60          RTS
  241                       
  242  06:C1D0            SetSpriteXPosition:  
  243                       
  244  06:C1D0  48          PHA
  245  06:C1D1  A9 03       LDA #SPRITE_XPOS
  246  06:C1D3  20 E6 C1    JSR GetSpriteDataIndexInX
  247  06:C1D6  68          PLA
  248  06:C1D7  9D 00 02    STA SPRITE_DATA, x 
  249  06:C1DA  60          RTS
  250                     
  251  06:C1DB            SetSpriteImage:
  252                     
  253                     ;; A has sprite image index we want
  254                     ;; X has the sprite index
  255  06:C1DB  48          PHA
  256  06:C1DC  A9 01       LDA #SPRITE_ID
  257  06:C1DE  20 E6 C1    JSR GetSpriteDataIndexInX
  258  06:C1E1  68          PLA
  259  06:C1E2  9D 00 02    STA SPRITE_DATA, x
  260  06:C1E5  60          RTS
  261                       
  262  06:C1E6            GetSpriteDataIndexInX:
  263                     
  264                       ;; A has data index we want to get
  265                       ;; X has sprite index
  266  06:C1E6  8D 02 00    STA temp3
  267  06:C1E9  8A          TXA
  268  06:C1EA  0A          ASL A
  269  06:C1EB  0A          ASL A
  270  06:C1EC  18          CLC
  271  06:C1ED  6D 02 00    ADC temp3
  272  06:C1F0  AA          TAX
  273                       
  274  06:C1F1  60          RTS  
  275  06:C1F2            GetSpriteData:
  276                     
  277                       ;;A is data we want
  278                       ;;X is Sprite
  279  06:C1F2  20 E6 C1    JSR GetSpriteDataIndexInX
  280  06:C1F5  BD 00 02    LDA SPRITE_DATA, x
  281  06:C1F8  60          RTS
  282                       
  283  06:C1F9            UpdateBankPointer:
  284                      
  285                       ;;bank pointer is 1D, will loop between 0->3
  286  06:C1F9  AD 1A 00    LDA gamepadPressed
  287  06:C1FC  D0 01       BNE .continue
  288  06:C1FE            .leaveEarly:
  289  06:C1FE  60          RTS
  290                       
  291  06:C1FF            .continue:
  292  06:C1FF  A9 00       LDA #$00
  293  06:C201  8D 00 00    STA temp1
  294                       
  295  06:C204            .parseInputs:
  296  06:C204  AD 1A 00    LDA gamepadPressed
  297  06:C207  29 30       AND #GAMEPAD_VERT
  298  06:C209  F0 F3       BEQ .leaveEarly
  299  06:C20B  0A          ASL A
  300  06:C20C  0A          ASL A
  301  06:C20D            .checkDown:
  302  06:C20D  0A          ASL A
  303  06:C20E  90 03       BCC .checkUp
  304  06:C210  EE 00 00    INC temp1
  305  06:C213            .checkUp:
  306  06:C213  0A          ASL A
  307  06:C214  90 03       BCC .move
  308  06:C216  CE 00 00    DEC temp1
  309  06:C219            .move:
  310                       
  311  06:C219  AD C1 00    LDA mouse_index
  312  06:C21C  18          CLC
  313  06:C21D  6D 00 00    ADC temp1
  314  06:C220  C9 02       CMP #$02
  315  06:C222  F0 04       BEQ .skipMod
  316  06:C224  90 02       BCC .skipMod
  317  06:C226  A9 00       LDA #$00
  318  06:C228            .skipMod:
  319  06:C228  8D C1 00    STA mouse_index
  320                       ;; mult mouse_index by 16
  321  06:C22B            SetBankPointerFromIndex:
  322                     
  323  06:C22B  0A          ASL A
  324  06:C22C  0A          ASL A
  325  06:C22D  0A          ASL A
  326  06:C22E  0A          ASL A
  327  06:C22F  18          CLC
  328  06:C230  69 A0       ADC #$A0
  329  06:C232  A2 01       LDX #$01
  330  06:C234  20 C5 C1    JSR SetSpriteYPosition
  331                     
  332  06:C237            .leave:
  333                       
  334  06:C237  60          RTS
  335                       
  336  06:C238            UpdatePuzzlePointer:
  337                     
  338                       ;;puzzle pointer is 2D, will loop between 0-9 and 0-2
  339  06:C238  AD 1A 00    LDA gamepadPressed
  340  06:C23B  F0 69       BEQ .leave 
  341                       
  342  06:C23D  A9 00       LDA #$00
  343  06:C23F  8D 00 00    STA temp1
  344  06:C242  8D 01 00    STA temp2
  345                       
  346  06:C245            .parseInputs:
  347  06:C245  AD 1A 00    LDA gamepadPressed
  348  06:C248  29 F0       AND #GAMEPAD_MOVE
  349  06:C24A  F0 5A       BEQ .leave
  350  06:C24C  0A          ASL A
  351  06:C24D  90 03       BCC .checkLeft
  352  06:C24F  EE 00 00    INC temp1
  353  06:C252            .checkLeft:
  354  06:C252  0A          ASL A
  355  06:C253  90 03       BCC .checkDown
  356  06:C255  CE 00 00    DEC temp1
  357  06:C258            .checkDown:
  358  06:C258  0A          ASL A
  359  06:C259  90 03       BCC .checkUp
  360  06:C25B  EE 01 00    INC temp2
  361  06:C25E            .checkUp:
  362  06:C25E  0A          ASL A
  363  06:C25F  90 03       BCC .move
  364  06:C261  CE 01 00    DEC temp2
  365                       
  366  06:C264            .move:
  367                     
  368  06:C264  AD C1 00    LDA mouse_index
  369  06:C267  18          CLC
  370  06:C268  6D 01 00    ADC temp2
  371  06:C26B  C9 02       CMP #$02
  372  06:C26D  F0 04       BEQ .skipYMod
  373  06:C26F  90 02       BCC .skipYMod
  374  06:C271  A9 00       LDA #$00
  375  06:C273            .skipYMod:
  376  06:C273  8D C1 00    STA mouse_index
  377                       ;; mult mouse_index by 16
  378  06:C276  0A          ASL A
  379  06:C277  0A          ASL A
  380  06:C278  0A          ASL A
  381  06:C279  0A          ASL A
  382  06:C27A  18          CLC
  383  06:C27B  69 AE       ADC #$AE
  384  06:C27D  A2 01       LDX #$01
  385  06:C27F  20 C5 C1    JSR SetSpriteYPosition
  386                       
  387  06:C282  AD C2 00    LDA mouse_index+1
  388  06:C285  18          CLC
  389  06:C286  6D 00 00    ADC temp1
  390  06:C289  C9 08       CMP #$08
  391  06:C28B  F0 04       BEQ .skipXMod
  392  06:C28D  90 02       BCC .skipXMod
  393  06:C28F  A9 00       LDA #$00
  394  06:C291            .skipXMod:
  395  06:C291  8D C2 00    STA mouse_index+1
  396                       ;; we need to move 3 tiles each- so index * 3 * 8,
  397  06:C294  18          CLC
  398  06:C295  6D C2 00    ADC mouse_index+1
  399  06:C298  6D C2 00    ADC mouse_index+1
  400  06:C29B  0A          ASL A
  401  06:C29C  0A          ASL A
  402  06:C29D  0A          ASL A
  403  06:C29E  18          CLC
  404  06:C29F  69 10       ADC #$10
  405  06:C2A1  A2 01       LDX #$01
  406  06:C2A3  20 D0 C1    JSR SetSpriteXPosition
  407                       
  408  06:C2A6            .leave:
  409                       
  410  06:C2A6  60          RTS
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGame.asm
   84                       .include "Routines/Game_States/UpdateGame.asm"
    1                     ;;VERT_CLUES = $206E
    2                     ;;HORI_CLUES = $2145
    3                     
    4           214E      VERT_CLUES = $214E
    5           218C      HORI_CLUES = $218C
    6           20A8      BANK_LEVEL = $20A8
    7           20E5      TIMER_LOC = $20E5
    8                     
    9           618E      MOUSE_START = $618E
   10                     
   11           0010      HOLD_TIME = $10
   12           0004      HOLD_FREQ = $04
   13                     
   14  06:C2A7            UpdateGame:
   15                     
   16  06:C2A7  AD 10 00    LDA NMI_locks
   17  06:C2AA  F0 01       BEQ .unlocked
   18                       
   19  06:C2AC  60          RTS
   20                       
   21  06:C2AD            .unlocked:
   22                     
   23  06:C2AD  20 B1 C2    JSR DoUpdateGame
   24  06:C2B0  60          RTS
   25                       
   26  06:C2B1            DoUpdateGame:
   27                     
   28  06:C2B1  AD 0F 00    LDA mode_state
   29  06:C2B4  20 23 CA    JSR Dynamic_Jump
   30                       
   31  06:C2B7            UpdateGameJumpTable:
   32                     
   33  06:C2B7  CB C2       .word UpdateGameInit
   34  06:C2B9  77 C3       .word UpdateDrawVertClues
   35  06:C2BB  9F C3       .word UpdateDrawHoriClues
   36  06:C2BD  E5 C3       .word UpdateGamePlay
   37  06:C2BF  B2 C5       .word UpdateClearPuzzle
   38  06:C2C1  C5 C5       .word UpdateMoveScreen
   39  06:C2C3  3E C6       .word UpdateDrawImage
   40  06:C2C5  C4 C6       .word UpdateWaitInput
   41  06:C2C7  DA C6       .word UpdateGameFadeOut
   42  06:C2C9  EF C6       .word UpdateGameExit
   43                     
   44  06:C2CB            UpdateGameInit:
   45                     
   46                       ;; get the puzzle table in the puzzle address
   47                       MACROGetLabelPointer PUZZLE_TABLE, table_address
                          
       06:C2CB  A9 A0             LDA #HIGH(PUZZLE_TABLE)
       06:C2CD  A2 00             LDX #LOW(PUZZLE_TABLE)
                                  
       06:C2CF  8E 14 00          STX table_address
       06:C2D2  8D 15 00          STA table_address+1
                                  
   48                       MACROGetDoubleIndex puzzle_index
                          
       06:C2D5  AD 01 70          LDA puzzle_index
       06:C2D8  0A                ASL A
       06:C2D9  A8                TAY
                                  
   49  06:C2DA  20 49 CA    JSR GetTableAtIndex
   50                       MACROGetPointer table_address, puzzle_address
                          
       06:C2DD  AD 14 00          LDA table_address
       06:C2E0  8D A9 00          STA puzzle_address
       06:C2E3  AD 15 00          LDA table_address+1
       06:C2E6  8D AA 00          STA puzzle_address+1
                          
   51                       MACROGetLabelPointer MOUSE_START, mouse_location
                          
       06:C2E9  A9 61             LDA #HIGH(MOUSE_START)
       06:C2EB  A2 8E             LDX #LOW(MOUSE_START)
                                  
       06:C2ED  8E BF 00          STX mouse_location
       06:C2F0  8D C0 00          STA mouse_location+1
                                  
   52                       
   53                       ;;for clues, we need to get past the header- for a 15x15 puzzle, that's 34 bytes ahead
   54  06:C2F3  A0 00       LDY #$00
   55  06:C2F5  B1 A9       LDA [puzzle_address], y
   56  06:C2F7  AA          TAX
   57  06:C2F8  BD 12 C9    LDA PuzzleHeaderSkips, x
   58  06:C2FB  8D 00 00    STA temp1
   59                       
   60  06:C2FE  AD A9 00    LDA puzzle_address
   61  06:C301  18          CLC
   62  06:C302  6D 00 00    ADC temp1
   63  06:C305  8D AB 00    STA clues_address
   64  06:C308  A9 00       LDA #$00
   65  06:C30A  6D AA 00    ADC puzzle_address+1
   66  06:C30D  8D AC 00    STA clues_address+1
   67                     
   68  06:C310  A9 00       LDA #$00
   69  06:C312  8D B7 00    STA clueTableIndex
   70  06:C315  8D B8 00    STA clueLineIndex
   71  06:C318  8D BE 00    STA clueParity
   72  06:C31B  8D B9 00    STA clueOffsetShift
   73  06:C31E  8D C1 00    STA mouse_index
   74  06:C321  8D C2 00    STA mouse_index+1
   75  06:C324  8D C4 00    STA solutionCount
   76  06:C327  8D C5 00    STA nonSolutionCount
   77  06:C32A  8D C8 00    STA GameTime
   78  06:C32D  8D C9 00    STA GameTime+1
   79  06:C330  8D CA 00    STA GameTime+2
   80  06:C333  8D CB 00    STA GameTime+3
   81                             
   82  06:C336  A9 20       LDA #$20
   83  06:C338  8D BA 00    STA clueDrawAdd
   84                        
   85                       MACROGetLabelPointer VERT_CLUES, clue_start_address
                          
       06:C33B  A9 21             LDA #HIGH(VERT_CLUES)
       06:C33D  A2 4E             LDX #LOW(VERT_CLUES)
                                  
       06:C33F  8E B3 00          STX clue_start_address
       06:C342  8D B4 00          STA clue_start_address+1
                                  
   86  06:C345  20 5D CD    JSR ResetClueDrawAddress
   87                       
   88                       MACROAddPPUStringEntryRawData #HIGH(BANK_LEVEL), #LOW(BANK_LEVEL), #DRAW_HORIZONTAL, #$03
                          
       06:C348  A9 01       LDA #$01
       06:C34A  8D 21 00    STA PPU_PendingWrite
       06:C34D  A9 20       LDA #HIGH(BANK_LEVEL)
       06:C34F  20 84 CB    JSR WriteToPPUString
       06:C352  A9 A8       LDA #LOW(BANK_LEVEL)
       06:C354  20 84 CB    JSR WriteToPPUString
       06:C357  A9 00       LDA #DRAW_HORIZONTAL
       06:C359  20 84 CB    JSR WriteToPPUString
       06:C35C  A9 03       LDA #$03 
       06:C35E  20 84 CB    JSR WriteToPPUString
                            
   89  06:C361  AD 00 70    LDA bank_index
   90  06:C364  20 84 CB    JSR WriteToPPUString
   91  06:C367  A9 60       LDA #$60
   92  06:C369  20 84 CB    JSR WriteToPPUString
   93  06:C36C  AE 01 70    LDX puzzle_index
   94  06:C36F  E8          INX
   95  06:C370  8A          TXA 
   96  06:C371  20 84 CB    JSR WriteToPPUString
   97                       
   98  06:C374  EE 0F 00    INC mode_state
   99                     
  100  06:C377            UpdateDrawVertClues:
  101                       
  102  06:C377  20 C2 CC    JSR PopulateClues
  103  06:C37A  90 22       BCC .leave
  104                       
  105  06:C37C            .changeModeState:
  106                     
  107  06:C37C  A9 00       LDA #$00
  108  06:C37E  8D B8 00    STA clueLineIndex
  109  06:C381  8D BE 00    STA clueParity
  110                       
  111  06:C384  A9 05       LDA #$05
  112  06:C386  8D B9 00    STA clueOffsetShift
  113                       
  114  06:C389  A9 01       LDA #$01
  115  06:C38B  8D BA 00    STA clueDrawAdd
  116                        
  117                       MACROGetLabelPointer HORI_CLUES, clue_start_address
                          
       06:C38E  A9 21             LDA #HIGH(HORI_CLUES)
       06:C390  A2 8C             LDX #LOW(HORI_CLUES)
                                  
       06:C392  8E B3 00          STX clue_start_address
       06:C395  8D B4 00          STA clue_start_address+1
                                  
  118  06:C398  20 5D CD    JSR ResetClueDrawAddress
  119                     
  120  06:C39B  EE 0F 00    INC mode_state
  121  06:C39E            .leave:
  122  06:C39E  60          RTS
  123                       
  124  06:C39F            UpdateDrawHoriClues:
  125                     
  126  06:C39F  20 C2 CC    JSR PopulateClues
  127  06:C3A2  90 40       BCC .leave
  128                     
  129  06:C3A4            .changeModeState:
  130  06:C3A4  20 CC CB    JSR TurnOnSprites
  131                       
  132                       ;;set the timer to 00
  133                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C3A7  A9 01       LDA #$01
       06:C3A9  8D 21 00    STA PPU_PendingWrite
       06:C3AC  A9 20       LDA #HIGH(TIMER_LOC)
       06:C3AE  20 84 CB    JSR WriteToPPUString
       06:C3B1  A9 E5       LDA #LOW(TIMER_LOC)
       06:C3B3  20 84 CB    JSR WriteToPPUString
       06:C3B6  A9 00       LDA #DRAW_HORIZONTAL
       06:C3B8  20 84 CB    JSR WriteToPPUString
       06:C3BB  A9 05       LDA #$05 
       06:C3BD  20 84 CB    JSR WriteToPPUString
                            
  134  06:C3C0  A9 00       LDA #$00
  135  06:C3C2  20 84 CB    JSR WriteToPPUString
  136  06:C3C5  A9 00       LDA #$00
  137  06:C3C7  20 84 CB    JSR WriteToPPUString
  138  06:C3CA  A9 61       LDA #$61
  139  06:C3CC  20 84 CB    JSR WriteToPPUString
  140  06:C3CF  A9 00       LDA #$00
  141  06:C3D1  20 84 CB    JSR WriteToPPUString
  142  06:C3D4  A9 00       LDA #$00
  143  06:C3D6  20 84 CB    JSR WriteToPPUString
  144                       
  145                       ;;reset time
  146  06:C3D9  A9 00       LDA #$00
  147  06:C3DB  8D 0A 00    STA time
  148  06:C3DE  8D 0B 00    STA scaledTime
  149                       
  150  06:C3E1  EE 0F 00    INC mode_state
  151  06:C3E4            .leave:
  152  06:C3E4  60          RTS
  153                       
  154  06:C3E5            UpdateGamePlay:
  155                         
  156  06:C3E5  AD C6 00    LDA pauseState
  157  06:C3E8  F0 04       BEQ .checkPause
  158  06:C3EA  20 45 C8    JSR UpdatePause
  159  06:C3ED  60          RTS
  160                       
  161  06:C3EE            .checkPause:
  162                       
  163  06:C3EE  AD 1A 00    LDA gamepadPressed
  164  06:C3F1  29 08       AND #GAMEPAD_START
  165  06:C3F3  F0 29       BEQ .updatePlay
  166  06:C3F5  A9 01       LDA #$01
  167  06:C3F7  8D C6 00    STA pauseState
  168  06:C3FA  A9 00       LDA #$00
  169  06:C3FC  8D B8 00    STA clueLineIndex 
  170  06:C3FF  8D B9 00    STA clueOffsetShift   
  171                     
  172  06:C402  A9 FF       LDA #$FF
  173  06:C404  A2 00       LDX #$00
  174  06:C406  20 DB C1    JSR SetSpriteImage
  175                     
  176                       ;;we need the pause screen table loaded
  177                       MACROGetLabelPointer Pause_Menu, pause_address
                          
       06:C409  A9 FC             LDA #HIGH(Pause_Menu)
       06:C40B  A2 7C             LDX #LOW(Pause_Menu)
                                  
       06:C40D  8E AD 00          STX pause_address
       06:C410  8D AE 00          STA pause_address+1
                                  
  178                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:C413  A9 21             LDA #HIGH($210A)
       06:C415  A2 0A             LDX #LOW($210A)
                                  
       06:C417  8E B1 00          STX pause_draw_address
       06:C41A  8D B2 00          STA pause_draw_address+1
                                  
  179                       
  180                       
  181  06:C41D  60          RTS
  182                     
  183  06:C41E            .updatePlay:
  184                     
  185  06:C41E  20 C6 C7    JSR UpdateTimeDisplay
  186                             
  187  06:C421  A9 00       LDA #$00
  188  06:C423  8D 00 00    STA temp1
  189  06:C426  8D 01 00    STA temp2
  190  06:C429  8D 02 00    STA temp3
  191                       
  192  06:C42C            .checkPressed:  
  193                     
  194  06:C42C  AD 1A 00    LDA gamepadPressed
  195  06:C42F  29 F0       AND #GAMEPAD_MOVE
  196  06:C431  F0 0B       BEQ .checkHeld
  197                       
  198  06:C433  A9 10       LDA #HOLD_TIME
  199  06:C435  8D C7 00    STA holdTimer 
  200  06:C438  AD 1A 00    LDA gamepadPressed
  201  06:C43B  4C 52 C4    JMP .parseInputs
  202                       
  203  06:C43E            .checkHeld:
  204                       
  205  06:C43E  AD 18 00    LDA gamepad
  206  06:C441  29 F0       AND #GAMEPAD_MOVE
  207  06:C443  F0 2F       BEQ .checkPaintPress
  208                       
  209                       ;;decrement the hold timer
  210  06:C445  CE C7 00    DEC holdTimer
  211  06:C448  D0 2A       BNE .checkPaintPress
  212  06:C44A  A9 04       LDA #HOLD_FREQ
  213  06:C44C  8D C7 00    STA holdTimer
  214  06:C44F  AD 18 00    LDA gamepad
  215                     
  216  06:C452            .parseInputs:
  217                     
  218  06:C452  29 F0       AND #GAMEPAD_MOVE
  219  06:C454  F0 1E       BEQ .checkPaintPress
  220  06:C456  0A          ASL A
  221  06:C457  90 03       BCC .checkLeft
  222  06:C459  EE 00 00    INC temp1
  223  06:C45C            .checkLeft:
  224  06:C45C  0A          ASL A
  225  06:C45D  90 03       BCC .checkDown
  226  06:C45F  CE 00 00    DEC temp1
  227  06:C462            .checkDown:
  228  06:C462  0A          ASL A
  229  06:C463  90 03       BCC .checkUp
  230  06:C465  EE 01 00    INC temp2
  231  06:C468            .checkUp:
  232  06:C468  0A          ASL A
  233  06:C469  90 03       BCC .move
  234  06:C46B  CE 01 00    DEC temp2
  235                       
  236  06:C46E            .move:
  237                      
  238  06:C46E  20 0A C7    JSR MoveMouse
  239  06:C471  20 72 C7    JSR UpdateMouseScreenPos
  240                       
  241  06:C474            .checkPaintPress:
  242                     
  243  06:C474  AD 1A 00    LDA gamepadPressed
  244  06:C477  29 03       AND #GAMEPAD_AB
  245  06:C479  F0 41       BEQ .updatePaint
  246                       ;;A or B pressed, get current tile
  247                       
  248  06:C47B  8D 00 00    STA temp1
  249                       
  250  06:C47E  A0 00       LDY #$00
  251  06:C480  B1 BF       LDA [mouse_location], y
  252  06:C482  8D 01 00    STA temp2
  253                       
  254                         ;;A treats X and Clear as clear
  255                             ;;B treats mark and clear as clear
  256                             ;;clear->mark->x
  257                             
  258                     
  259  06:C485  C9 7C       CMP #$7C      ;check if this is a marked tile
  260  06:C487  B0 0F       BCS .getClearTile
  261                       ;;cleared tile- store off marked tile to paint with instead
  262                       ;;not a clear tile- a mark or an x - check A or B  
  263  06:C489  4E 00 00    LSR temp1
  264  06:C48C  B0 05       BCS .getMarkTile
  265                       
  266  06:C48E            .getXTile:
  267  06:C48E  A9 80       LDA #$80
  268  06:C490  4C B6 C4    JMP .finishGetTile
  269                       
  270  06:C493            .getMarkTile:
  271  06:C493  A9 70       LDA #$70
  272  06:C495  4C B6 C4    JMP .finishGetTile
  273                     
  274  06:C498            .getClearTile:
  275                       
  276  06:C498  4E 00 00    LSR temp1
  277  06:C49B  90 0A       BCC .checkB
  278  06:C49D  AD 01 00    LDA temp2
  279  06:C4A0  C9 8C       CMP #$8C                      ;; check if in X tiles - will be if >=
  280  06:C4A2  90 0D       BCC .clearTile
  281  06:C4A4  4C 93 C4    JMP .getMarkTile
  282                       
  283  06:C4A7            .checkB:
  284                       
  285  06:C4A7  AD 01 00   LDA temp2
  286  06:C4AA  C9 8C      CMP #$8C
  287  06:C4AC  B0 03      BCS .clearTile
  288  06:C4AE  4C 8E C4   JMP .getXTile
  289                       
  290  06:C4B1            .clearTile:
  291  06:C4B1  A9 60       LDA #$60
  292  06:C4B3  4C B6 C4    JMP .finishGetTile
  293                       
  294  06:C4B6            .finishGetTile:
  295  06:C4B6  8D C3 00    STA currentPaintTile
  296  06:C4B9  4C C4 C4    JMP .setTile
  297                     
  298                     ;;we'll keep a copy of the puzzle tiles in memory, since we can't easily access tiles in the PPU
  299                     ;;might be best to just keep an entire copy of the nametable instead of trying to index it and deal with 16 bit math
  300                     ;;we can load the nametable into memory as we draw it
  301                     
  302  06:C4BC            .updatePaint:
  303                     
  304  06:C4BC  AD 18 00    LDA gamepad
  305  06:C4BF  29 03       AND #GAMEPAD_AB
  306  06:C4C1  D0 01       BNE .setTile
  307  06:C4C3  60          RTS  
  308                       
  309  06:C4C4            .setTile:
  310                     
  311                       ;;take Y position, mult by 2 to get starting index in puzzle solution
  312  06:C4C4  AD C2 00    LDA mouse_index+1
  313                     ;;if the puzzle is a 5x5, we only have one byte per row, so no need to double this
  314  06:C4C7  8D 00 00    STA temp1
  315  06:C4CA  A0 00       LDY #$00
  316  06:C4CC  B1 A9       LDA [puzzle_address], y
  317  06:C4CE  F0 03       BEQ .skipDouble
  318  06:C4D0  0E 00 00    ASL temp1
  319  06:C4D3            .skipDouble:
  320  06:C4D3  AD 00 00    LDA temp1
  321  06:C4D6  18          CLC
  322  06:C4D7  69 04       ADC #$04 ;; add to get past header
  323  06:C4D9  8D 00 00    STA temp1
  324                       
  325                       ;;div X position by 8 to get the byte index
  326  06:C4DC  AD C1 00    LDA mouse_index
  327  06:C4DF  4A          LSR A
  328  06:C4E0  4A          LSR A
  329  06:C4E1  4A          LSR A
  330  06:C4E2  F0 03       BEQ .getMask
  331                       
  332  06:C4E4  EE 00 00    INC temp1
  333                       
  334  06:C4E7            .getMask:
  335                       
  336  06:C4E7  AD C1 00    LDA mouse_index
  337  06:C4EA  29 07       AND #$07
  338  06:C4EC  AA          TAX
  339  06:C4ED  A9 80       LDA #$80
  340  06:C4EF  E0 00       CPX #$00
  341  06:C4F1  F0 04       BEQ .storeMask
  342                     
  343  06:C4F3            .maskLoop:
  344  06:C4F3  4A          LSR A
  345  06:C4F4  CA          DEX
  346  06:C4F5  D0 FC       BNE .maskLoop
  347  06:C4F7            .storeMask:
  348  06:C4F7  8D 01 00    STA temp2
  349                     
  350  06:C4FA  AC 00 00    LDY temp1
  351  06:C4FD  B1 A9       LDA [puzzle_address], y
  352  06:C4FF  2D 01 00    AND temp2
  353  06:C502  8D 00 00    STA temp1     ;get the 0/non zero solution flag 
  354                     
  355  06:C505  A0 00       LDY #$00
  356  06:C507  B1 BF       LDA [mouse_location], y
  357  06:C509  8D 02 00    STA temp3
  358  06:C50C  29 F0       AND #$F0
  359  06:C50E  CD C3 00    CMP currentPaintTile
  360  06:C511  D0 01       BNE .diffTiles
  361  06:C513  60          RTS
  362                       
  363  06:C514            .diffTiles:
  364                       ;;tiles are different- check if the current tile is marked as a solution tile
  365  06:C514  C9 70       CMP #$70
  366  06:C516  D0 0B       BNE .checkNewMark
  367                       ;;if erasing a mark, check if the tile was part of the solution
  368  06:C518  AD 00 00    LDA temp1
  369  06:C51B  D0 18       BNE .antiMark
  370  06:C51D  CE C5 00    DEC nonSolutionCount
  371  06:C520  4C 3E C5    JMP .overwriteTile
  372                       
  373  06:C523            .checkNewMark:
  374                     
  375  06:C523  AD C3 00    LDA currentPaintTile
  376  06:C526  C9 70       CMP #$70
  377  06:C528  D0 14       BNE .overwriteTile
  378                       
  379  06:C52A  AD 00 00    LDA temp1
  380  06:C52D  D0 0C       BNE .proMark
  381  06:C52F  EE C5 00    INC nonSolutionCount 
  382  06:C532  4C 3E C5    JMP .overwriteTile  
  383                       
  384  06:C535            .antiMark:
  385  06:C535  CE C4 00    DEC solutionCount
  386  06:C538  4C 3E C5    JMP .overwriteTile
  387  06:C53B            .proMark:   
  388                       
  389  06:C53B  EE C4 00    INC solutionCount
  390                       
  391  06:C53E            .overwriteTile:
  392                       ;;overwrite tile
  393  06:C53E  AD 02 00    LDA temp3
  394  06:C541  29 0F       AND #$0F
  395  06:C543  0D C3 00    ORA currentPaintTile
  396  06:C546  A0 00       LDY #$00
  397  06:C548  91 BF       STA [mouse_location], y
  398  06:C54A  8D 00 00    STA temp1
  399                       
  400  06:C54D  AD C0 00    LDA mouse_location+1
  401  06:C550  29 3F       AND #$3F
  402  06:C552  8D 01 00    STA temp2
  403                         
  404                       MACROAddPPUStringEntryRawData temp2, mouse_location, #DRAW_HORIZONTAL, #$01
                          
       06:C555  A9 01       LDA #$01
       06:C557  8D 21 00    STA PPU_PendingWrite
       06:C55A  AD 01 00    LDA temp2
       06:C55D  20 84 CB    JSR WriteToPPUString
       06:C560  AD BF 00    LDA mouse_location
       06:C563  20 84 CB    JSR WriteToPPUString
       06:C566  A9 00       LDA #DRAW_HORIZONTAL
       06:C568  20 84 CB    JSR WriteToPPUString
       06:C56B  A9 01       LDA #$01 
       06:C56D  20 84 CB    JSR WriteToPPUString
                            
  405  06:C570  AD 00 00    LDA temp1
  406  06:C573  20 84 CB    JSR WriteToPPUString
  407                       
  408                       ;;also copy to ... copy
  409  06:C576  AD B5 00    LDA clue_draw_address
  410  06:C579  8D AF 00    STA copy_address
  411  06:C57C  AD B6 00    LDA clue_draw_address+1
  412  06:C57F  29 0F       AND #$0F
  413  06:C581  09 60       ORA #$60
  414  06:C583  8D B0 00    STA copy_address+1
  415  06:C586  AD 00 00    LDA temp1
  416  06:C589  A0 00       LDY #$00
  417  06:C58B  91 AF       STA [copy_address],y
  418                       
  419  06:C58D            .checkSolution: 
  420                     
  421  06:C58D  A0 01       LDY #$01
  422  06:C58F  B1 A9       LDA [puzzle_address], y
  423  06:C591  CD C4 00    CMP solutionCount
  424  06:C594  D0 1B       BNE .leave
  425  06:C596  AD C5 00    LDA nonSolutionCount
  426  06:C599  F0 03       BEQ .changeModeState
  427                       
  428  06:C59B  4C B1 C5    JMP .leave
  429                       
  430                       ;;update the painting
  431  06:C59E            .changeModeState:
  432                      
  433  06:C59E  20 D5 CB    JSR TurnOffSprites
  434                        
  435  06:C5A1  A9 00       LDA #$00
  436  06:C5A3  8D B5 00    STA clue_draw_address
  437  06:C5A6  8D B8 00    STA clueLineIndex
  438  06:C5A9  A9 20       LDA #$20
  439  06:C5AB  8D B6 00    STA clue_draw_address+1
  440                       
  441  06:C5AE  EE 0F 00    INC mode_state
  442                     
  443  06:C5B1            .leave:
  444                      
  445  06:C5B1  60          RTS
  446                       
  447  06:C5B2            UpdateClearPuzzle:
  448                     
  449  06:C5B2  20 D1 CD    JSR ClearPuzzle
  450  06:C5B5  AD B8 00    LDA clueLineIndex
  451  06:C5B8  C9 1E       CMP #30
  452  06:C5BA  D0 08       BNE .leave
  453                       
  454  06:C5BC            .changeModeState:
  455                     
  456  06:C5BC  A9 00       LDA #$00
  457  06:C5BE  8D B8 00    STA clueLineIndex ;using this as a scroller
  458  06:C5C1  EE 0F 00    INC mode_state
  459                     
  460  06:C5C4            .leave:
  461                      
  462  06:C5C4  60          RTS
  463  06:C5C5            UpdateMoveScreen:
  464                       
  465                       ;for 15x15, move 5 tiles left and 5 tiles up- let's do 1 at a time
  466                       ;we'll take the lower nibble of the clue line index as our scroll counter, and the higher nibble as the x/y flag
  467                       
  468  06:C5C5  A0 00       LDY #$00
  469  06:C5C7  B1 A9       LDA [puzzle_address], y
  470  06:C5C9  AA          TAX
  471  06:C5CA  BD 0C C9    LDA PuzzleScrollHori, x
  472  06:C5CD  8D 00 00    STA temp1
  473  06:C5D0  BD 0F C9    LDA PuzzleScrollVert, x
  474  06:C5D3  8D 01 00    STA temp2
  475                       
  476  06:C5D6  AD B8 00    LDA clueLineIndex
  477  06:C5D9  29 10       AND #$10
  478  06:C5DB  D0 1E       BNE .scrollY
  479                       
  480                       ;;scroll X over
  481  06:C5DD  AD B8 00    LDA clueLineIndex
  482  06:C5E0  29 0F       AND #$0F
  483  06:C5E2  0A          ASL A
  484  06:C5E3  0A          ASL A
  485  06:C5E4  0A          ASL A ;mult by 8
  486  06:C5E5  8D 1D 00    STA PPU_ScrollX
  487                       
  488  06:C5E8  EE B8 00    INC clueLineIndex
  489  06:C5EB  AD B8 00    LDA clueLineIndex
  490  06:C5EE  CD 00 00    CMP temp1
  491  06:C5F1  D0 4A       BNE .leave
  492  06:C5F3  A9 10       LDA #$10
  493  06:C5F5  8D B8 00    STA clueLineIndex
  494  06:C5F8  4C 3D C6    JMP .leave
  495                       
  496  06:C5FB            .scrollY:
  497                     
  498  06:C5FB  AD B8 00    LDA clueLineIndex
  499  06:C5FE  29 0F       AND #$0F
  500  06:C600  0A          ASL A
  501  06:C601  0A          ASL A
  502  06:C602  0A          ASL A ;mult by 8
  503  06:C603  8D 1E 00    STA PPU_ScrollY
  504                     
  505  06:C606  EE B8 00    INC clueLineIndex
  506  06:C609  AD B8 00    LDA clueLineIndex
  507  06:C60C  29 0F       AND #$0F
  508  06:C60E  CD 01 00    CMP temp2
  509  06:C611  D0 2A       BNE .leave
  510                       
  511  06:C613            .changeModeState:
  512                     
  513  06:C613  A9 8E       LDA #$8E
  514  06:C615  8D B5 00    STA clue_draw_address
  515  06:C618  A9 21       LDA #$21
  516  06:C61A  8D B6 00    STA clue_draw_address+1
  517                       
  518  06:C61D  AD AB 00    LDA clues_address
  519  06:C620  18          CLC
  520  06:C621  6D B7 00    ADC clueTableIndex
  521  06:C624  8D AB 00    STA clues_address
  522  06:C627  AD AC 00    LDA clues_address+1
  523  06:C62A  69 00       ADC #$00
  524  06:C62C  8D AC 00    STA clues_address+1
  525                       
  526  06:C62F  A9 00       LDA #$00
  527  06:C631  8D B7 00    STA clueTableIndex
  528  06:C634  8D B8 00    STA clueLineIndex
  529  06:C637  8D B9 00    STA clueOffsetShift
  530                     
  531  06:C63A  EE 0F 00    INC mode_state
  532                     
  533  06:C63D            .leave:
  534                      
  535  06:C63D  60          RTS
  536  06:C63E            UpdateDrawImage:
  537                     
  538                       ;run it twice for a faster draw
  539  06:C63E  20 B3 CE    JSR DrawImage
  540  06:C641  AD B7 00    LDA clueTableIndex
  541  06:C644  CD 09 00    CMP tempy
  542                       ;BEQ .changeModeState
  543                       
  544                       ;JSR DrawImage
  545                       ;LDA clueTableIndex
  546                       ;CMP tempy
  547  06:C647  D0 7A       BNE .leave
  548                       
  549  06:C649            .changeModeState:
  550                     
  551                       ;;do a palette draw
  552                       ;;puzzle address + 03 has the desired palette offset
  553                     
  554  06:C649  A0 03       LDY #$03
  555  06:C64B  B1 A9       LDA [puzzle_address],y
  556  06:C64D  29 0F       AND #$0F
  557  06:C64F  AA          TAX
  558                       
  559  06:C650  B1 A9       LDA [puzzle_address],y
  560  06:C652  29 10       AND #$10
  561  06:C654  F0 15       BEQ .storeBottomVals
  562                       
  563  06:C656  8A          TXA
  564  06:C657  09 10       ORA #$10
  565  06:C659  8D 01 00    STA temp2
  566  06:C65C  8A          TXA
  567  06:C65D  09 20       ORA #$20
  568  06:C65F  8D 02 00    STA temp3
  569  06:C662  8A          TXA
  570  06:C663  09 30       ORA #$30
  571  06:C665  8D 03 00    STA temp4
  572                     
  573  06:C668  4C 7D C6    JMP .checkKeepWhite
  574                       
  575  06:C66B            .storeBottomVals:
  576                     
  577  06:C66B  8A          TXA
  578  06:C66C  09 00       ORA #$00
  579  06:C66E  8D 01 00    STA temp2
  580  06:C671  8A          TXA
  581  06:C672  09 10       ORA #$10
  582  06:C674  8D 02 00    STA temp3
  583  06:C677  8A          TXA
  584  06:C678  09 20       ORA #$20
  585  06:C67A  8D 03 00    STA temp4
  586                       
  587  06:C67D            .checkKeepWhite:
  588                       
  589  06:C67D  B1 A9       LDA [puzzle_address],y
  590  06:C67F  29 20       AND #$20
  591  06:C681  F0 05       BEQ .loadPalToPPUStr
  592                       
  593  06:C683  A9 30       LDA #$30
  594  06:C685  8D 03 00    STA temp4
  595                       
  596                       
  597  06:C688            .loadPalToPPUStr:
  598                       
  599                       MACROAddPPUStringEntryRawData #$3F, #$01, #DRAW_HORIZONTAL, #03
                          
       06:C688  A9 01       LDA #$01
       06:C68A  8D 21 00    STA PPU_PendingWrite
       06:C68D  A9 3F       LDA #$3F
       06:C68F  20 84 CB    JSR WriteToPPUString
       06:C692  A9 01       LDA #$01
       06:C694  20 84 CB    JSR WriteToPPUString
       06:C697  A9 00       LDA #DRAW_HORIZONTAL
       06:C699  20 84 CB    JSR WriteToPPUString
       06:C69C  A9 03       LDA #03 
       06:C69E  20 84 CB    JSR WriteToPPUString
                            
  600  06:C6A1  AD 01 00    LDA temp2
  601  06:C6A4  20 84 CB    JSR WriteToPPUString
  602  06:C6A7  AD 02 00    LDA temp3
  603  06:C6AA  20 84 CB    JSR WriteToPPUString
  604  06:C6AD  AD 03 00    LDA temp4
  605  06:C6B0  20 84 CB    JSR WriteToPPUString
  606                       
  607  06:C6B3  A2 01       LDX #$01
  608  06:C6B5            .copyLoop:
  609                       ;;also store in the copy 
  610  06:C6B5  BD 00 00    LDA temp1, x
  611  06:C6B8  9D 00 68    STA Palette_Copy, x
  612  06:C6BB  E8          INX
  613  06:C6BC  E0 04       CPX #$04
  614  06:C6BE  D0 F5       BNE .copyLoop
  615                       
  616                       
  617  06:C6C0  EE 0F 00    INC mode_state
  618                     
  619  06:C6C3            .leave:
  620                      
  621  06:C6C3  60          RTS
  622                       
  623  06:C6C4            UpdateWaitInput:
  624                     
  625  06:C6C4  AD 1A 00    LDA gamepadPressed
  626  06:C6C7  F0 10       BEQ .leave
  627                       
  628  06:C6C9            .changeModeState:
  629  06:C6C9  A9 00       LDA #$00
  630  06:C6CB  8D 0A 00    STA time
  631  06:C6CE  8D 0B 00    STA scaledTime
  632  06:C6D1  A9 02       LDA #GAMEOVER_IDX
  633  06:C6D3  8D CC 00    STA targetGameMode
  634  06:C6D6  EE 0F 00    INC mode_state
  635                     
  636  06:C6D9            .leave:
  637                      
  638  06:C6D9  60          RTS
  639                       
  640  06:C6DA            UpdateGameFadeOut:
  641                     
  642  06:C6DA  AD 0A 00    LDA time
  643  06:C6DD  29 07       AND #$07
  644  06:C6DF  D0 0D       BNE .leave
  645                       ;;every 8 frames, decrement the palettes
  646  06:C6E1  20 01 CC    JSR FadeOutPalettes
  647  06:C6E4  B0 08       BCS .leave
  648                     
  649  06:C6E6            .changeModeState:
  650  06:C6E6  A9 00       LDA #$00
  651  06:C6E8  8D 0A 00    STA time
  652  06:C6EB  EE 0F 00    INC mode_state
  653  06:C6EE            .leave:
  654  06:C6EE  60          RTS  
  655                     
  656  06:C6EF            UpdateGameExit:
  657                     
  658  06:C6EF  AD 0A 00    LDA time
  659  06:C6F2  29 0F       AND #$0F
  660  06:C6F4  D0 13       BNE .leave
  661                     
  662  06:C6F6  A9 00       LDA #$00
  663  06:C6F8  8D 1D 00    STA PPU_ScrollX
  664  06:C6FB  8D 1E 00    STA PPU_ScrollY
  665  06:C6FE  8D 1F 00    STA PPU_ScrollNT
  666                       
  667  06:C701  AD CC 00    LDA targetGameMode
  668  06:C704  A2 00       LDX #$00
  669  06:C706  20 66 C9    JSR ChangeGameMode
  670  06:C709            .leave:
  671  06:C709  60          RTS
  672                       
  673  06:C70A            MoveMouse:
  674                     
  675  06:C70A  AD 00 00    LDA temp1
  676  06:C70D  0E 00 00    ASL temp1
  677  06:C710  0E 00 00    ASL temp1
  678  06:C713  0E 00 00    ASL temp1
  679                       
  680  06:C716  AD 01 00    LDA temp2
  681  06:C719  0E 01 00    ASL temp2 
  682  06:C71C  0E 01 00    ASL temp2
  683  06:C71F  0E 01 00    ASL temp2
  684                       
  685  06:C722  A0 00       LDY #$00
  686  06:C724  B1 A9       LDA [puzzle_address], y ;puzzle size 0 = 5, 1 = 10, 2 = 15  
  687  06:C726  0A          ASL A
  688  06:C727  AA          TAX
  689  06:C728  BD 00 C9    LDA MouseMinimums, x
  690  06:C72B  8D 02 00    STA temp3
  691  06:C72E  BD 06 C9    LDA MouseMaximums, x
  692  06:C731  8D 03 00    STA temp4
  693  06:C734  8A          TXA
  694  06:C735  48          PHA
  695                       
  696  06:C736  A2 03       LDX #SPRITE_XPOS
  697  06:C738  BD 00 02    LDA SPRITE_DATA, x
  698  06:C73B  18          CLC
  699  06:C73C  6D 00 00    ADC temp1
  700                       ;;check against borders
  701  06:C73F  CD 02 00    CMP temp3
  702  06:C742  F0 08       BEQ .moveVert 
  703  06:C744  CD 03 00    CMP temp4
  704  06:C747  F0 03       BEQ .moveVert
  705  06:C749  9D 00 02    STA SPRITE_DATA, x
  706                     
  707  06:C74C            .moveVert:
  708                     
  709  06:C74C  68          PLA
  710  06:C74D  AA          TAX
  711  06:C74E  E8          INX
  712  06:C74F  BD 00 C9    LDA MouseMinimums, x
  713  06:C752  8D 02 00    STA temp3
  714  06:C755  BD 06 C9    LDA MouseMaximums, x
  715  06:C758  8D 03 00    STA temp4
  716                     
  717  06:C75B  A2 00       LDX #SPRITE_YPOS
  718  06:C75D  BD 00 02    LDA SPRITE_DATA, x
  719  06:C760  18          CLC
  720  06:C761  6D 01 00    ADC temp2
  721                       ;;check against borders
  722  06:C764  CD 02 00    CMP temp3
  723  06:C767  F0 08       BEQ .leave
  724  06:C769  CD 03 00    CMP temp4
  725  06:C76C  F0 03       BEQ .leave
  726  06:C76E  9D 00 02    STA SPRITE_DATA, x
  727                     
  728  06:C771            .leave:
  729  06:C771  60          RTS
  730                             
  731  06:C772            UpdateMouseScreenPos:
  732                     
  733  06:C772  A2 00       LDX #$00
  734  06:C774  BD 00 02    LDA SPRITE_DATA, x;ypos       ;yyyy y...
  735  06:C777  4A          LSR A                                         ;0yyy yy..
  736  06:C778  4A          LSR A                                         ;00yy yyy.
  737  06:C779  4A          LSR A                                         ;000y yyyy
  738  06:C77A  8D 00 00    STA temp1
  739  06:C77D  8D C2 00    STA mouse_index+1
  740  06:C780  E8          INX
  741  06:C781  E8          INX
  742  06:C782  E8          INX   
  743  06:C783  BD 00 02    LDA SPRITE_DATA, x ;xpos  ;  xxxx x...
  744  06:C786  29 F8       AND #$F8                       ;              ;  xxxx x000
  745  06:C788  8D 01 00    STA temp2                      ;      ;  
  746  06:C78B  4E 00 00    LSR temp1                      ;              ;  0000 yyyy y
  747  06:C78E  6E 01 00    ROR temp2                      ;      ;  yxxx xx00
  748  06:C791  4E 00 00    LSR temp1                      ;              ;  0000 0yyy y
  749  06:C794  6E 01 00    ROR temp2                      ;              ;  yyxx xxx0
  750  06:C797  4E 00 00    LSR temp1              ;              ;  0000 00yy y
  751  06:C79A  6E 01 00    ROR temp2                      ;              ;  yyyx xxxx
  752  06:C79D  AD 01 00    LDA temp2
  753  06:C7A0  29 1F       AND #$1F
  754  06:C7A2  8D C1 00    STA mouse_index
  755                       
  756  06:C7A5  AD C1 00    LDA mouse_index
  757  06:C7A8  38          SEC 
  758  06:C7A9  E9 0E       SBC #$0E
  759  06:C7AB  8D C1 00    STA mouse_index
  760                       
  761  06:C7AE  AD C2 00    LDA mouse_index+1
  762  06:C7B1  38          SEC 
  763  06:C7B2  E9 0C       SBC #$0C
  764  06:C7B4  8D C2 00    STA mouse_index+1
  765                       
  766                       ;subtract starting offsets for mouse index
  767                       
  768  06:C7B7  AD 00 00    LDA temp1                      ;              ;  0000 00yy
  769  06:C7BA  09 60       ORA #$60                       ;              ;  0110 00yy
  770                       
  771  06:C7BC  8D C0 00    STA mouse_location+1
  772  06:C7BF  AD 01 00    LDA temp2
  773  06:C7C2  8D BF 00    STA mouse_location
  774                       
  775  06:C7C5            .leave:
  776  06:C7C5  60          RTS
  777                       
  778  06:C7C6            UpdateTimeDisplay:
  779                     
  780  06:C7C6  AD 0B 00    LDA scaledTime
  781  06:C7C9  C9 3C       CMP #60
  782  06:C7CB  D0 77       BNE .leave
  783                       
  784  06:C7CD  A9 00       LDA #$00
  785  06:C7CF  8D 0B 00    STA scaledTime
  786                       
  787  06:C7D2  EE C8 00    INC GameTime
  788  06:C7D5  AD C8 00    LDA GameTime
  789  06:C7D8  C9 0A       CMP #10
  790  06:C7DA  D0 32       BNE .printTime
  791                       
  792  06:C7DC  A9 00       LDA #$00
  793  06:C7DE  8D C8 00    STA GameTime
  794  06:C7E1  EE C9 00    INC GameTime+1
  795  06:C7E4  AD C9 00    LDA GameTime+1
  796  06:C7E7  C9 06       CMP #6
  797  06:C7E9  D0 23       BNE .printTime
  798                       
  799  06:C7EB  A9 00       LDA #$00
  800  06:C7ED  8D C9 00    STA GameTime+1
  801  06:C7F0  EE CA 00    INC GameTime+2
  802  06:C7F3  AD CA 00    LDA GameTime+2
  803  06:C7F6  C9 0A       CMP #10
  804  06:C7F8  D0 14       BNE .printTime
  805                       
  806  06:C7FA  A9 00       LDA #$00
  807  06:C7FC  8D CA 00    STA GameTime+2
  808  06:C7FF  EE CB 00    INC GameTime+3
  809  06:C802  AD CB 00    LDA GameTime+3
  810  06:C805  C9 0A       CMP #10
  811  06:C807  D0 05       BNE .printTime
  812                       
  813  06:C809  A9 00       LDA #$00
  814  06:C80B  8D CB 00    STA GameTime+3
  815                       
  816  06:C80E            .printTime:
  817                     
  818                       MACROAddPPUStringEntryRawData #HIGH(TIMER_LOC), #LOW(TIMER_LOC), #DRAW_HORIZONTAL, #$05
                          
       06:C80E  A9 01       LDA #$01
       06:C810  8D 21 00    STA PPU_PendingWrite
       06:C813  A9 20       LDA #HIGH(TIMER_LOC)
       06:C815  20 84 CB    JSR WriteToPPUString
       06:C818  A9 E5       LDA #LOW(TIMER_LOC)
       06:C81A  20 84 CB    JSR WriteToPPUString
       06:C81D  A9 00       LDA #DRAW_HORIZONTAL
       06:C81F  20 84 CB    JSR WriteToPPUString
       06:C822  A9 05       LDA #$05 
       06:C824  20 84 CB    JSR WriteToPPUString
                            
  819  06:C827  AD CB 00    LDA GameTime+3
  820  06:C82A  20 84 CB    JSR WriteToPPUString
  821  06:C82D  AD CA 00    LDA GameTime+2
  822  06:C830  20 84 CB    JSR WriteToPPUString
  823  06:C833  A9 61       LDA #$61
  824  06:C835  20 84 CB    JSR WriteToPPUString
  825  06:C838  AD C9 00    LDA GameTime+1
  826  06:C83B  20 84 CB    JSR WriteToPPUString
  827  06:C83E  AD C8 00    LDA GameTime
  828  06:C841  20 84 CB    JSR WriteToPPUString
  829                       
  830                       
  831                       
  832  06:C844            .leave: 
  833  06:C844  60          RTS  
  834                       
  835  06:C845            UpdatePause:
  836                     
  837                     ;;load screen
  838                     ;;update selection
  839                     ;; close - remove screen, then upause
  840                     ;; quit - jump to fade out
  841  06:C845  AD C6 00    LDA pauseState
  842  06:C848  20 23 CA    JSR Dynamic_Jump
  843                     
  844  06:C84B            UpdatePauseJumpTable:  
  845                     
  846  06:C84B  FF C8       .word ExitPause                       ;fail safe
  847  06:C84D  53 C8       .word UpdateLoadPauseScreen
  848  06:C84F  6F C8       .word UpdatePauseScreen
  849  06:C851  E8 C8       .word UpdateUnloadPauseScreen
  850                       
  851  06:C853            UpdateLoadPauseScreen:
  852                       
  853  06:C853  20 18 CE    JSR LoadPauseScreen
  854  06:C856  AD B9 00    LDA clueOffsetShift
  855  06:C859  C9 06       CMP #$06
  856  06:C85B  D0 11       BNE .leave
  857                       
  858  06:C85D            .changePauseState:
  859                     
  860  06:C85D  A9 60       LDA #PAUSE_YES
  861  06:C85F  A2 01       LDX #$01
  862  06:C861  20 D0 C1    JSR SetSpriteXPosition  
  863  06:C864  A9 01       LDA #$01
  864  06:C866  A2 01       LDX #$01
  865  06:C868  20 DB C1    JSR SetSpriteImage
  866                       
  867  06:C86B  EE C6 00    INC pauseState
  868  06:C86E            .leave:
  869  06:C86E  60          RTS
  870                       
  871  06:C86F            UpdatePauseScreen:
  872                       
  873  06:C86F  AD 1A 00    LDA gamepadPressed
  874  06:C872  C9 08       CMP #GAMEPAD_START
  875  06:C874  F0 29       BEQ .unPause
  876  06:C876  C9 02       CMP #GAMEPAD_B
  877  06:C878  F0 25       BEQ .unPause
  878  06:C87A  C9 01       CMP #GAMEPAD_A
  879  06:C87C  F0 4A       BEQ .checkA
  880                       
  881                       ;;update pointer
  882                       
  883  06:C87E  AD 1A 00    LDA gamepadPressed
  884  06:C881  29 C0       AND #GAMEPAD_HORI
  885                       ;;binary system- left and right don't really matter, we'll just toggle the position
  886  06:C883  F0 62       BEQ .leave
  887                       
  888  06:C885  A9 03       LDA #SPRITE_XPOS
  889  06:C887  A2 01       LDX #$01
  890  06:C889  20 F2 C1    JSR GetSpriteData
  891                       
  892  06:C88C  C9 60       CMP #PAUSE_YES
  893  06:C88E  F0 05       BEQ .loadNo
  894                       
  895  06:C890  A9 60       LDA #PAUSE_YES
  896  06:C892  4C 97 C8    JMP .setPosition
  897                       
  898  06:C895            .loadNo:
  899  06:C895  A9 88       LDA #PAUSE_NO
  900                     
  901  06:C897            .setPosition
  902                       
  903  06:C897  A2 01       LDX #$01
  904  06:C899  20 D0 C1    JSR SetSpriteXPosition  
  905                     
  906  06:C89C  4C E7 C8    JMP .leave 
  907                     
  908  06:C89F            .unPause:
  909                     
  910  06:C89F  A9 00       LDA #$00
  911  06:C8A1  8D B8 00    STA clueLineIndex
  912  06:C8A4  8D B9 00    STA clueOffsetShift
  913                       
  914  06:C8A7  A9 FF       LDA #$FF
  915  06:C8A9  A2 01       LDX #$01
  916  06:C8AB  20 DB C1    JSR SetSpriteImage
  917                     
  918                       MACROGetLabelPointer $610A, pause_address
                          
       06:C8AE  A9 61             LDA #HIGH($610A)
       06:C8B0  A2 0A             LDX #LOW($610A)
                                  
       06:C8B2  8E AD 00          STX pause_address
       06:C8B5  8D AE 00          STA pause_address+1
                                  
  919                       MACROGetLabelPointer $210A, pause_draw_address
                          
       06:C8B8  A9 21             LDA #HIGH($210A)
       06:C8BA  A2 0A             LDX #LOW($210A)
                                  
       06:C8BC  8E B1 00          STX pause_draw_address
       06:C8BF  8D B2 00          STA pause_draw_address+1
                                  
  920  06:C8C2  EE C6 00    INC pauseState
  921  06:C8C5  4C E7 C8    JMP .leave
  922                      
  923  06:C8C8            .checkA:
  924                       
  925  06:C8C8  A9 03       LDA #SPRITE_XPOS
  926  06:C8CA  A2 01       LDX #$01
  927  06:C8CC  20 F2 C1    JSR GetSpriteData
  928                       
  929  06:C8CF  C9 88       CMP #PAUSE_NO
  930  06:C8D1  F0 CC       BEQ .unPause
  931                        
  932  06:C8D3            .quit:
  933                     
  934  06:C8D3  A9 00       LDA #$00
  935  06:C8D5  8D C6 00    STA pauseState
  936  06:C8D8  A9 00       LDA #$00
  937  06:C8DA  8D 0A 00    STA time
  938  06:C8DD  A9 00       LDA #TITLE_IDX
  939  06:C8DF  8D CC 00    STA targetGameMode
  940  06:C8E2  A9 08       LDA #$08
  941  06:C8E4  8D 0F 00    STA mode_state
  942                       
  943  06:C8E7            .leave:
  944  06:C8E7  60          RTS
  945                       
  946  06:C8E8            UpdateUnloadPauseScreen:
  947                       
  948  06:C8E8  20 5F CE    JSR ClearPauseScreen
  949  06:C8EB  AD B9 00    LDA clueOffsetShift
  950  06:C8EE  C9 06       CMP #$06
  951  06:C8F0  D0 0C       BNE .leave
  952  06:C8F2            .changePauseState:
  953                     
  954  06:C8F2  A9 02       LDA #$02
  955  06:C8F4  A2 00       LDX #$00
  956  06:C8F6  20 DB C1    JSR SetSpriteImage
  957                       
  958  06:C8F9  A9 00       LDA #$00
  959  06:C8FB  8D C6 00    STA pauseState
  960  06:C8FE            .leave:
  961  06:C8FE  60          RTS
  962                       
  963  06:C8FF            ExitPause:
  964  06:C8FF  60          RTS
  965                       
  966                     ;hori, vert
  967  06:C900            MouseMinimums:
  968  06:C900  6A 5A       .db $6A, $5A
  969  06:C902  6A 5A       .db $6A, $5A
  970  06:C904  6A 5A       .db $6A, $5A
  971  06:C906            MouseMaximums:
  972  06:C906  9A 8A       .db $9A, $8A
  973  06:C908  C2 B2       .db $C2, $B2
  974  06:C90A  EA DA       .db $EA, $DA
  975                       
  976  06:C90C            PuzzleScrollHori:
  977  06:C90C  01 04 06    .db $01, $04, $06
  978  06:C90F            PuzzleScrollVert:
  979  06:C90F  01 03 05    .db $01, $03, $05
  980                       
  981  06:C912            PuzzleHeaderSkips:
  982                     
  983  06:C912  09 18 22    .db $09, $18, $22
  984                       
  985           0060      PAUSE_YES = $60
  986           0088      PAUSE_NO = $88
  987                     
  988                       
#[1]   Picross.asm
#[2]   Routines/Game_States/UpdateGameOver.asm
   85                       .include "Routines/Game_States/UpdateGameOver.asm"
    1  06:C915            UpdateGameOver:
    2                     
    3  06:C915  AD 10 00    LDA NMI_locks
    4  06:C918  F0 01       BEQ .unlocked
    5                       
    6  06:C91A  60          RTS
    7                       
    8  06:C91B            .unlocked:
    9                     
   10  06:C91B  20 1F C9    JSR DoUpdateGameOver 
   11  06:C91E  60          RTS
   12                       
   13  06:C91F            DoUpdateGameOver:
   14                     
   15  06:C91F  AD 0F 00    LDA mode_state
   16  06:C922  20 23 CA    JSR Dynamic_Jump
   17                         
   18  06:C925            UpdateGameOverJumpTable:
   19                     
   20  06:C925  2D C9       .word UpdateGameOverInit
   21  06:C927  34 C9       .word UpdateGameOverWaitInput
   22  06:C929  42 C9       .word UpdateGameOverFadeOut
   23  06:C92B  57 C9       .word UpdateGameOverExit
   24                       
   25  06:C92D            UpdateGameOverInit:
   26                     
   27  06:C92D  20 CC CB    JSR TurnOnSprites
   28  06:C930  EE 0F 00    INC mode_state
   29  06:C933  60          RTS
   30                     
   31  06:C934            UpdateGameOverWaitInput:
   32                     
   33  06:C934  AD 1A 00    LDA gamepadPressed
   34  06:C937  F0 08       BEQ .leave
   35                     
   36  06:C939            .changeModeState:
   37                     
   38  06:C939  A9 00       LDA #$00
   39  06:C93B  8D 0A 00    STA time
   40  06:C93E  EE 0F 00    INC mode_state
   41  06:C941            .leave:
   42  06:C941  60          RTS
   43                     
   44  06:C942            UpdateGameOverFadeOut:
   45                     
   46  06:C942  AD 0A 00    LDA time
   47  06:C945  29 07       AND #$07
   48  06:C947  D0 0D       BNE .leave
   49                       ;;every 8 frames, decrement the palettes
   50  06:C949  20 01 CC    JSR FadeOutPalettes
   51  06:C94C  B0 08       BCS .leave
   52                     
   53  06:C94E            .changeModeState:
   54  06:C94E  A9 00       LDA #$00
   55  06:C950  8D 0A 00    STA time
   56  06:C953  EE 0F 00    INC mode_state
   57  06:C956            .leave:
   58  06:C956  60          RTS
   59                     
   60  06:C957            UpdateGameOverExit:
   61                     
   62  06:C957  AD 0A 00    LDA time
   63  06:C95A  29 0F       AND #$0F
   64  06:C95C  D0 07       BNE .leave
   65                     
   66  06:C95E  A9 00       LDA #TITLE_IDX
   67  06:C960  A2 00       LDX #$00
   68  06:C962  20 66 C9    JSR ChangeGameMode
   69                       
   70  06:C965            .leave:
   71  06:C965  60          RTS
#[1]   Picross.asm
   86                       
   87                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   88                     ;;     Routines             ;;
   89                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   90                     
   91                     
#[2]   Routines/Common/GameModeRoutines.asm
   92                       .include "Routines/Common/GameModeRoutines.asm"
    1  06:C966            ChangeGameMode:
    2                       ;A - game mode index
    3                       ;X - high nibble: palette start flag, low nibble: screen index
    4  06:C966  8D 0E 00    STA game_mode
    5  06:C969  8E 0D 00    STX mode_loadFlags
    6  06:C96C  A9 00       LDA #$00
    7  06:C96E  8D 0F 00    STA mode_state
    8  06:C971  20 98 CB    JSR ClearPPUString
    9  06:C974  20 78 C9    JSR LoadGameModeScreen
   10  06:C977  60          RTS
   11                       
   12  06:C978            LoadGameModeScreen:
   13                     
   14                       MACROSetFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:C978  AD 10 00    LDA NMI_locks
       06:C97B  09 01       ORA #BGLOAD_NMI_LOCK
       06:C97D  8D 10 00    STA NMI_locks
                                  
   15                       
   16  06:C980  A9 00       LDA #$00
   17  06:C982  8D 01 20    STA PPU_MASK    ; disable rendering- reenable on NMI when not updating
   18                     
   19  06:C985  20 B3 C9    JSR LoadGameModeBackground
   20  06:C988  20 00 CA    JSR LoadGameModeSprites
   21                     
   22                       MACROClearFlags NMI_locks, BGLOAD_NMI_LOCK
                          
       06:C98B  A9 01       LDA #BGLOAD_NMI_LOCK
       06:C98D  49 FF       EOR #$FF
       06:C98F  2D 10 00    AND NMI_locks  
       06:C992  8D 10 00    STA NMI_locks
                          
   23                     
   24                       
   25                       ;; load the CHR bank for this mode
   26  06:C995  20 6B CC    JSR ResetMapper
   27                       ;;remember, we're loading the SECOND set in each chr bank
   28                       ;;so we'll take the index from the game mode chr table and add one mult 2
   29  06:C998  AE 0E 00    LDX game_mode
   30  06:C99B  BD 1D CA    LDA gameModeInitCHRROMB, x
   31  06:C99E  0A          ASL A
   32  06:C99F  18          CLC 
   33  06:C9A0  69 01       ADC #$01
   34  06:C9A2  20 90 CC    JSR LoadCHRBankB
   35                       
   36  06:C9A5  20 6B CC    JSR ResetMapper
   37  06:C9A8  AE 0E 00    LDX game_mode
   38  06:C9AB  BD 20 CA    LDA gameModeInitCHRROMA, x
   39  06:C9AE  0A          ASL A
   40  06:C9AF  20 85 CC    JSR LoadCHRBankA
   41                       
   42                       
   43                       
   44  06:C9B2  60          RTS
   45                       
   46  06:C9B3            LoadGameModeBackground:
   47                             
   48                       MACROGetDoubleIndex game_mode
                          
       06:C9B3  AD 0E 00          LDA game_mode
       06:C9B6  0A                ASL A
       06:C9B7  A8                TAY
                                  
   49  06:C9B8  8C 00 00    STY temp1
   50                             
   51                       MACROGetLabelPointer Palettes, table_address
                          
       06:C9BB  A9 E0             LDA #HIGH(Palettes)
       06:C9BD  A2 00             LDX #LOW(Palettes)
                                  
       06:C9BF  8E 14 00          STX table_address
       06:C9C2  8D 15 00          STA table_address+1
                                  
   52  06:C9C5  20 49 CA    JSR GetTableAtIndex
   53                     
   54  06:C9C8  20 56 CA    JSR LoadFullPaletteFromTable
   55                             
   56  06:C9CB  AC 00 00    LDY temp1
   57                       MACROGetLabelPointer NameTables, table_address
                          
       06:C9CE  A9 E0             LDA #HIGH(NameTables)
       06:C9D0  A2 06             LDX #LOW(NameTables)
                                  
       06:C9D2  8E 14 00          STX table_address
       06:C9D5  8D 15 00          STA table_address+1
                                  
   58  06:C9D8  20 49 CA    JSR GetTableAtIndex
   59  06:C9DB  AD 0D 00    LDA mode_loadFlags
   60  06:C9DE  29 0F       AND #$0F
   61  06:C9E0  0A          ASL A
   62  06:C9E1  A8          TAY
   63  06:C9E2  20 49 CA    JSR GetTableAtIndex
   64                             
   65  06:C9E5  A9 00       LDA #$00
   66  06:C9E7  20 85 CA    JSR LoadFullBackgroundFromTable
   67                       
   68  06:C9EA  AC 00 00    LDY temp1
   69                       MACROGetLabelPointer NameTables2, table_address
                          
       06:C9ED  A9 E0             LDA #HIGH(NameTables2)
       06:C9EF  A2 0C             LDX #LOW(NameTables2)
                                  
       06:C9F1  8E 14 00          STX table_address
       06:C9F4  8D 15 00          STA table_address+1
                                  
   70  06:C9F7  20 49 CA    JSR GetTableAtIndex
   71                       
   72  06:C9FA  A9 01       LDA #$01
   73  06:C9FC  20 85 CA    JSR LoadFullBackgroundFromTable
   74                       
   75  06:C9FF  60          RTS
   76                       
   77  06:CA00            LoadGameModeSprites:
   78                     
   79                       MACROGetDoubleIndex game_mode  
                          
       06:CA00  AD 0E 00          LDA game_mode
       06:CA03  0A                ASL A
       06:CA04  A8                TAY
                                  
   80                       MACROGetLabelPointer Sprites, table_address
                          
       06:CA05  A9 FC             LDA #HIGH(Sprites)
       06:CA07  A2 CA             LDX #LOW(Sprites)
                                  
       06:CA09  8E 14 00          STX table_address
       06:CA0C  8D 15 00          STA table_address+1
                                  
   81  06:CA0F  20 49 CA    JSR GetTableAtIndex
   82  06:CA12  A0 00       LDY #$00
   83  06:CA14  B1 14       LDA [table_address],y
   84  06:CA16  EE 14 00    INC table_address
   85  06:CA19  20 6D CB    JSR LoadSprites_impl
   86                       
   87  06:CA1C  60          RTS
   88                       
   89  06:CA1D            gameModeInitCHRROMB:
   90  06:CA1D  00 02 02          .db $00, $02, $02
   91  06:CA20            gameModeInitCHRROMA:
   92  06:CA20  00 02 02          .db $00, $02, $02
   93                             
#[1]   Picross.asm
#[2]   Routines/Utils/PointerUtils.asm
   93                       .include "Routines/Utils/PointerUtils.asm"
    1  06:CA23            Dynamic_Jump:
    2                     
    3  06:CA23  0A          ASL A                                 ;; double the index passed into A
    4  06:CA24  8E 08 00    STX tempx
    5  06:CA27  8C 09 00    STY tempy
    6  06:CA2A  A8          TAY
    7  06:CA2B  C8          INY  
    8  06:CA2C  68          PLA
    9  06:CA2D  8D 16 00    STA jump_address
   10  06:CA30  68          PLA 
   11  06:CA31  8D 17 00    STA jump_address+1            
   12  06:CA34  B1 16       LDA [jump_address], y
   13  06:CA36  AA          TAX
   14  06:CA37  C8          INY
   15  06:CA38  B1 16       LDA [jump_address], y
   16  06:CA3A  8E 16 00    STX jump_address
   17  06:CA3D  8D 17 00    STA jump_address+1
   18  06:CA40  AE 08 00    LDX tempx
   19  06:CA43  AC 09 00    LDY tempy
   20  06:CA46  6C 16 00    JMP [jump_address]
   21                       
   22  06:CA49            GetTableAtIndex:
   23                     
   24  06:CA49  B1 14             LDA [table_address], y
   25  06:CA4B  AA                TAX
   26  06:CA4C  C8                INY
   27  06:CA4D  B1 14             LDA [table_address], y
   28                             
   29  06:CA4F            SetTableAddress:
   30                             
   31                             ;;A is hi, X is lo
   32  06:CA4F  8E 14 00          STX table_address
   33  06:CA52  8D 15 00          STA table_address+1
   34  06:CA55  60                RTS
#[1]   Picross.asm
#[2]   Routines/Utils/PPUUtils.asm
   94                       .include "Routines/Utils/PPUUtils.asm"
    1  06:CA56            LoadFullPaletteFromTable:
    2                     
    3                       MACROSetPPUAddress $3F00
                          
       06:CA56  AD 02 20    LDA PPU_STATUS             ; read PPU status to reset the high/low latch
       06:CA59  A9 3F       LDA #HIGH($3F00)
       06:CA5B  8D 06 20    STA PPU_ADDR            ; write the high byte of $2000 address
       06:CA5E  A9 00       LDA #LOW($3F00)
       06:CA60  8D 06 20    STA PPU_ADDR           ; write the low byte of $2000 address
                            
    4  06:CA63  A0 00       LDY #$00              ; start out at 0
    5  06:CA65  A2 00       LDX #$00
    6  06:CA67            .loop:
    7  06:CA67  B1 14       LDA [table_address], y        ; load data from address (palette + the value in x)
    8  06:CA69  9D 00 68    STA Palette_Copy, x
    9  06:CA6C  48          PHA 
   10  06:CA6D  AD 0D 00    LDA mode_loadFlags
   11  06:CA70  29 10       AND #$10
   12  06:CA72  D0 04       BNE .setBlack
   13  06:CA74  68          PLA 
   14  06:CA75  4C 7B CA    JMP .setPPUData
   15  06:CA78            .setBlack:
   16                     
   17  06:CA78  68          PLA 
   18  06:CA79  A9 0F       LDA #$0F
   19                       
   20  06:CA7B            .setPPUData:
   21  06:CA7B  8D 07 20    STA PPU_DATA            ; write to PPU
   22  06:CA7E  C8          INY                   ; X = X + 1
   23  06:CA7F  E8          INX
   24  06:CA80  C0 20       CPY #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
   25  06:CA82  D0 E3       BNE .loop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
   26  06:CA84  60          RTS
   27                     
   28  06:CA85            LoadFullBackgroundFromTable:
   29                     
   30                         ;;use A as an index for which nametable to write to
   31  06:CA85  20 B8 CB          JSR SetNametableFromIndex
   32  06:CA88  8A                TXA
   33  06:CA89  4A                LSR A
   34  06:CA8A  29 01             AND #$01
   35  06:CA8C  D0 0D             BNE .copyScreenB
   36                             MACROGetLabelPointer Screen_Copy, pointer_address
                          
       06:CA8E  A9 60             LDA #HIGH(Screen_Copy)
       06:CA90  A2 00             LDX #LOW(Screen_Copy)
                                  
       06:CA92  8E 12 00          STX pointer_address
       06:CA95  8D 13 00          STA pointer_address+1
                                  
   37  06:CA98  4C A5 CA          JMP .setCounters
   38                             
   39  06:CA9B            .copyScreenB:
   40                             MACROGetLabelPointer ScreenB_Copy, pointer_address
                          
       06:CA9B  A9 64             LDA #HIGH(ScreenB_Copy)
       06:CA9D  A2 00             LDX #LOW(ScreenB_Copy)
                                  
       06:CA9F  8E 12 00          STX pointer_address
       06:CAA2  8D 13 00          STA pointer_address+1
                                  
   41                             
   42                             ;;set pointer
   43                             ;; set counters
   44  06:CAA5            .setCounters:
   45  06:CAA5  A0 00             LDY #$00
   46  06:CAA7  A2 00             LDX #$00
   47                             
   48                             ;;start loop
   49                     
   50  06:CAA9            .outerloop:
   51                     
   52  06:CAA9            .innerloop:
   53                     
   54  06:CAA9  B1 14             LDA [table_address], y
   55  06:CAAB  8D 07 20          STA PPU_DATA
   56  06:CAAE  91 12             STA [pointer_address],y
   57  06:CAB0  C8                INY
   58  06:CAB1  C0 00             CPY #$00
   59  06:CAB3  D0 F4             BNE .innerloop
   60                     
   61  06:CAB5  EE 13 00          INC pointer_address+1
   62  06:CAB8  EE 15 00          INC table_address+1
   63                             
   64  06:CABB  E8                INX
   65  06:CABC  E0 04             CPX #$04
   66  06:CABE  D0 E9             BNE .outerloop
   67  06:CAC0  60                RTS
   68                             
   69                     
   70           0000      DATA_LEN = temp1
   71           0001      WRITE_SETTINGS = temp2
   72                             
   73  06:CAC1            ProcessPPUString:
   74                     
   75  06:CAC1  AD 21 00          LDA PPU_PendingWrite
   76  06:CAC4  D0 01             BNE .continueProcess
   77  06:CAC6  60                RTS
   78                             
   79  06:CAC7            .continueProcess:
   80  06:CAC7  A0 00             LDY #$00
   81                             
   82  06:CAC9  A9 23             LDA #LOW(PPU_String)
   83  06:CACB  8D 12 00          STA pointer_address
   84  06:CACE  A9 00             LDA #HIGH(PPU_String)
   85  06:CAD0  8D 13 00          STA pointer_address + 1
   86                     
   87  06:CAD3            .outerloop:
   88  06:CAD3  AD 02 20          LDA PPU_STATUS
   89  06:CAD6  B1 12             LDA [pointer_address], y
   90  06:CAD8  F0 79             BEQ .finish
   91  06:CADA  8D 06 20          STA PPU_ADDR
   92  06:CADD  C8                INY
   93  06:CADE  B1 12             LDA [pointer_address], y
   94  06:CAE0  8D 06 20          STA PPU_ADDR
   95  06:CAE3  C8            INY 
   96  06:CAE4  B1 12             LDA [pointer_address], y
   97  06:CAE6  8D 01 00          STA WRITE_SETTINGS
   98  06:CAE9  C8                INY
   99                             
  100  06:CAEA  AD 00 20          LDA PPU_CTRL
  101  06:CAED  29 FB             AND #$FB
  102  06:CAEF  8D 00 20          STA PPU_CTRL
  103                             
  104  06:CAF2  AD 01 00          LDA WRITE_SETTINGS      ;check horizontal or vertical write
  105  06:CAF5  29 80             AND #%10000000
  106  06:CAF7  F0 06             BEQ .checkRepeat
  107  06:CAF9  0D 00 20          ORA PPU_CTRL 
  108  06:CAFC  8D 00 20          STA PPU_CTRL 
  109                             
  110                             
  111  06:CAFF            .checkRepeat:
  112  06:CAFF  AD 01 00    LDA WRITE_SETTINGS
  113  06:CB02  29 40       AND #%01000000
  114  06:CB04  F0 19       BEQ .checkTable
  115                       
  116  06:CB06  AD 01 00    LDA WRITE_SETTINGS
  117  06:CB09  29 3F       AND #$3F
  118  06:CB0B  8D 00 00    STA DATA_LEN
  119                       ;;the usual data length byte is now the repeatable byte
  120  06:CB0E  A2 00       LDX #$00
  121                       
  122  06:CB10            .repeatLoop:
  123  06:CB10  B1 12       LDA [pointer_address], y
  124  06:CB12  8D 07 20    STA PPU_DATA
  125  06:CB15  E8          INX 
  126  06:CB16  EC 00 00    CPX DATA_LEN
  127  06:CB19  D0 F5       BNE .repeatLoop
  128  06:CB1B  C8          INY
  129  06:CB1C  4C D3 CA    JMP .outerloop
  130                             
  131  06:CB1F            .checkTable:
  132  06:CB1F  AD 01 00          LDA WRITE_SETTINGS
  133  06:CB22  29 20             AND #%00100000
  134  06:CB24  F0 16             BEQ .rawData
  135                             
  136  06:CB26  B1 12             LDA [pointer_address], y
  137  06:CB28  8D 14 00          STA table_address
  138  06:CB2B  C8                INY 
  139  06:CB2C  B1 12             LDA [pointer_address], y
  140  06:CB2E  8D 15 00          STA table_address + 1
  141  06:CB31  C8                INY
  142  06:CB32  98                TYA 
  143  06:CB33  48                PHA
  144  06:CB34  20 57 CB          JSR WriteToPPUFromTable
  145  06:CB37  68                PLA
  146  06:CB38  A8                TAY
  147  06:CB39  4C D3 CA          JMP .outerloop
  148                             
  149  06:CB3C            .rawData:
  150                     
  151  06:CB3C  B1 12             LDA [pointer_address], y
  152  06:CB3E  C8                INY
  153  06:CB3F  8D 00 00          STA DATA_LEN
  154                     
  155  06:CB42  A2 00             LDX #$00
  156                     
  157  06:CB44            .innerloop:
  158                             
  159  06:CB44  B1 12             LDA [pointer_address], y
  160  06:CB46  8D 07 20          STA PPU_DATA
  161  06:CB49  C8                INY
  162  06:CB4A  E8                INX
  163  06:CB4B  EC 00 00          CPX DATA_LEN
  164  06:CB4E  D0 F4             BNE .innerloop
  165  06:CB50  4C D3 CA          JMP .outerloop
  166                             
  167  06:CB53            .finish:
  168  06:CB53  20 98 CB          JSR ClearPPUString
  169  06:CB56            .leave:
  170  06:CB56  60                RTS
  171                             
  172  06:CB57            WriteToPPUFromTable:
  173  06:CB57  A0 00             LDY #$00
  174  06:CB59  B1 14             LDA [table_address], y
  175  06:CB5B  C8                INY
  176  06:CB5C  8D 00 00          STA DATA_LEN
  177  06:CB5F            .innerloop:
  178  06:CB5F  B1 14             LDA [table_address], y
  179  06:CB61  8D 07 20          STA PPU_DATA
  180  06:CB64  C8                INY
  181  06:CB65  CC 00 00          CPY DATA_LEN
  182  06:CB68  90 F5             BCC .innerloop ;table should have the size in it, but since we count the byte count, we'll want to wait till we go over it
  183  06:CB6A  F0 F3             BEQ .innerloop
  184  06:CB6C  60                RTS
  185                       
  186  06:CB6D            LoadSprites_impl:
  187                       ;;A will be the amount of sprites to load
  188  06:CB6D  8D 00 00    STA DATA_LEN
  189  06:CB70  0E 00 00    ASL DATA_LEN
  190  06:CB73  0E 00 00    ASL DATA_LEN
  191                       
  192  06:CB76  A0 00       LDY #$00              ; start at 0
  193                       
  194  06:CB78            .loop:
  195  06:CB78  B1 14       LDA [table_address], y; load data from address (sprites +  x)
  196  06:CB7A  99 00 02    STA SPRITE_DATA, y    ; store into RAM address ($0200 + x)
  197  06:CB7D  C8          INY                   ; X = X + 1
  198  06:CB7E  CC 00 00    CPY DATA_LEN             ; Compare X to hex $10, decimal 16
  199  06:CB81  D0 F5       BNE .loop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
  200                                             ; if compare was equal to 16, keep going down   
  201  06:CB83  60          RTS
  202                     
  203                     
  204  06:CB84            WriteToPPUString:
  205                     
  206  06:CB84  AE 22 00          LDX PPU_StringIdx
  207  06:CB87  E0 4F             CPX #PPU_STRINGMAX
  208  06:CB89  F0 0C             BEQ .finish
  209                             
  210  06:CB8B  9D 23 00          STA PPU_String, x
  211  06:CB8E  EE 22 00          INC PPU_StringIdx
  212  06:CB91  E8                INX
  213  06:CB92  A9 00             LDA #$00
  214  06:CB94  9D 23 00          STA PPU_String, x
  215                                     
  216  06:CB97            .finish:
  217  06:CB97  60                RTS
  218                     
  219  06:CB98            ClearPPUString:
  220                             
  221  06:CB98  A9 00             LDA #$00
  222  06:CB9A  8D 22 00          STA PPU_StringIdx
  223  06:CB9D  8D 23 00          STA PPU_String
  224  06:CBA0  8D 21 00          STA PPU_PendingWrite
  225  06:CBA3  60                RTS
  226                     
  227  06:CBA4            DetectSprite0:
  228  06:CBA4            WaitNotSprite0:
  229  06:CBA4  AD 02 20    lda PPU_STATUS
  230  06:CBA7  29 40       and #SPRITE_0_MASK
  231  06:CBA9  D0 F9       bne WaitNotSprite0   ; wait until sprite 0 not hit
  232                     
  233  06:CBAB            WaitSprite0:
  234  06:CBAB  AD 02 20    lda $2002
  235  06:CBAE  29 40       and #SPRITE_0_MASK
  236  06:CBB0  F0 F9       beq WaitSprite0      ; wait until sprite 0 is hit
  237                     
  238  06:CBB2  A2 05       ldx #$05                              ;do a scanline wait
  239  06:CBB4            WaitScanline:
  240  06:CBB4  CA          dex
  241  06:CBB5  D0 FD       bne WaitScanline
  242  06:CBB7  60          RTS
  243                     
  244                     
  245  06:CBB8            SetNametableFromIndex:
  246                     
  247  06:CBB8  48          PHA
  248  06:CBB9  AD 02 20    LDA PPU_STATUS
  249  06:CBBC  68          PLA
  250  06:CBBD  0A          ASL A
  251  06:CBBE  AA          TAX
  252  06:CBBF  BD 54 CC    LDA NameTableMemList+1, x
  253  06:CBC2  8D 06 20    STA PPU_ADDR
  254  06:CBC5  BD 53 CC    LDA NameTableMemList, x
  255  06:CBC8  8D 06 20    STA PPU_ADDR
  256  06:CBCB  60          RTS
  257                       
  258  06:CBCC            TurnOnSprites:
  259                      
  260  06:CBCC  AD 1C 00    LDA PPU_Mask
  261  06:CBCF  09 10       ORA #%00010000
  262  06:CBD1  8D 1C 00    STA PPU_Mask
  263  06:CBD4  60          RTS
  264                       
  265  06:CBD5            TurnOffSprites:
  266                       
  267  06:CBD5  AD 1C 00    LDA PPU_Mask
  268  06:CBD8  29 EF       AND #%11101111
  269  06:CBDA  8D 1C 00    STA PPU_Mask
  270  06:CBDD  60          RTS
  271                     
  272  06:CBDE            UpdatePPUControl:
  273                     
  274  06:CBDE  AD 1B 00    LDA PPU_Control
  275  06:CBE1  29 FC       AND #$FC
  276  06:CBE3  0D 20 00    ORA PPU_NT
  277  06:CBE6  8D 00 20    STA PPU_CTRL
  278  06:CBE9  AD 1C 00    LDA PPU_Mask
  279  06:CBEC  8D 01 20    STA PPU_MASK
  280  06:CBEF  60          RTS
  281                       
  282  06:CBF0            InitPPUControl:
  283                       
  284                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
  285                       ; enable sprites, enable background, no clipping on left side
  286  06:CBF0  A9 90       LDA #%10010000
  287  06:CBF2  8D 00 20    STA PPU_CTRL
  288  06:CBF5  8D 1B 00    STA PPU_Control
  289  06:CBF8  A9 1E       LDA #%00011110
  290  06:CBFA  8D 01 20    STA PPU_MASK
  291  06:CBFD  8D 1C 00    STA PPU_Mask
  292  06:CC00  60          RTS
  293                       
  294  06:CC01            FadeOutPalettes:
  295                     
  296                     ;;take the current values, and decrement the lower nibbles
  297                     ;;we can access from the palette copy 
  298                     ;;we'll make this fade out one level per call
  299                     ;;once all the palettes are blacked out we'll return true, so we'll keep the carry flag as a return result
  300                     
  301                     ;;go through the palette copy, decrement, make a raw data PPU string and add all the bytes into it
  302                     ;;for any palette color already in the 0x range, change it to 0f to get black
  303                     
  304                       MACROGetLabelPointer Palette_Copy, table_address
                          
       06:CC01  A9 68             LDA #HIGH(Palette_Copy)
       06:CC03  A2 00             LDX #LOW(Palette_Copy)
                                  
       06:CC05  8E 14 00          STX table_address
       06:CC08  8D 15 00          STA table_address+1
                                  
  305                     ;;palette copy address is now X accessable
  306                     
  307  06:CC0B  A0 00       LDY #$00
  308                       MACROAddPPUStringEntryRawData #$3F, #$00, #DRAW_HORIZONTAL, #$20  
                          
       06:CC0D  A9 01       LDA #$01
       06:CC0F  8D 21 00    STA PPU_PendingWrite
       06:CC12  A9 3F       LDA #$3F
       06:CC14  20 84 CB    JSR WriteToPPUString
       06:CC17  A9 00       LDA #$00
       06:CC19  20 84 CB    JSR WriteToPPUString
       06:CC1C  A9 00       LDA #DRAW_HORIZONTAL
       06:CC1E  20 84 CB    JSR WriteToPPUString
       06:CC21  A9 20       LDA #$20 
       06:CC23  20 84 CB    JSR WriteToPPUString
                            
  309                     
  310  06:CC26  A9 00       LDA #$00
  311  06:CC28  8D 00 00    STA temp1
  312                       
  313  06:CC2B            .loop:
  314                     
  315  06:CC2B  B1 14       LDA [table_address], y
  316  06:CC2D  C9 0F       CMP #$0F
  317  06:CC2F  F0 15       BEQ .addToString
  318  06:CC31  C9 10       CMP #$10
  319  06:CC33  90 0D       BCC .setBlack
  320                       
  321  06:CC35  A9 80       LDA #$80
  322  06:CC37  8D 00 00    STA temp1
  323                       
  324  06:CC3A  B1 14       LDA [table_address], y
  325  06:CC3C  38          SEC
  326  06:CC3D  E9 10       SBC #$10
  327  06:CC3F  4C 44 CC    JMP .setColor
  328                     
  329  06:CC42            .setBlack:
  330                     
  331  06:CC42  A9 0F       LDA #$0F
  332                     
  333  06:CC44            .setColor:
  334  06:CC44  91 14       STA [table_address], y
  335                     
  336  06:CC46            .addToString:
  337                     
  338  06:CC46  20 84 CB    JSR WriteToPPUString
  339                     
  340  06:CC49            .incY:
  341                       
  342  06:CC49  C8          INY
  343  06:CC4A  C0 20       CPY #$20
  344  06:CC4C  D0 DD       BNE .loop
  345                     
  346  06:CC4E  0E 00 00    ASL temp1     ;get carry out, if we have one
  347                     
  348  06:CC51  60          RTS
  349                       
  350  06:CC52            FadeInPalettes:
  351                     
  352                     ;;need to be able to store off a target palette first
  353                     ;;we can use the palette copy we make during the game mode change as the target
  354  06:CC52  60          RTS
  355                     
  356  06:CC53            NameTableMemList:
  357  06:CC53  00 20       .word $2000, $2400, $2800, $2C00
       06:CC55  00 24     
       06:CC57  00 28     
       06:CC59  00 2C     
  358  06:CC5B            PalettesMemList:
  359  06:CC5B  00 3F       .word $3F00, $3F04, $3F08, $3F0C
       06:CC5D  04 3F     
       06:CC5F  08 3F     
       06:CC61  0C 3F     
  360  06:CC63  10 3F       .word $3F10, $3F14, $3F18, $3F1C  
       06:CC65  14 3F     
       06:CC67  18 3F     
       06:CC69  1C 3F     
  361                       
  362           0024      BLANK_TILE = $24
#[1]   Picross.asm
#[2]   Routines/Utils/MapperUtils.asm
   95                       .include "Routines/Utils/MapperUtils.asm"
    1           0080      MAPPERCONTROL = $80
    2           00A0      CHRBANK1 = $A0
    3           00C0      CHRBANK2 = $C0
    4           00E0      PRGBANK = $E0
    5                     
    6  06:CC6B            ResetMapper:
    7  06:CC6B  EE 6B CC    inc ResetMapper
    8  06:CC6E  60          RTS
    9                       
   10                     ;;now, set up the controls for the mapper
   11                     ;;4bit0
   12                     ;;-----
   13                     ;;CPPMM
   14                     ;;|||||
   15                     ;;|||++- Mirroring (0: one-screen, lower bank; 1: one-screen, upper bank;
   16                     ;;|||               2: vertical; 3: horizontal)
   17                     ;;|++--- PRG ROM bank mode (0, 1: switch 32 KB at $8000, ignoring low bit of bank number;
   18                     ;;|                         2: fix first bank at $8000 and switch 16 KB bank at $C000;
   19                     ;;|                         3: fix last bank at $C000 and switch 16 KB bank at $8000)
   20                     ;;+----- CHR ROM bank mode (0: switch 8 KB at a time; 1: switch two separate 4 KB banks)
   21                        
   22  06:CC6F            SetMapperControls:
   23                       ;;A = controls
   24  06:CC6F  AA          TAX
   25  06:CC70  A9 80       LDA #MAPPERCONTROL
   26  06:CC72  8D A4 00    STA mapper_address+1
   27  06:CC75  8A          TXA
   28  06:CC76  20 9B CC    JSR SendMapperCommand
   29  06:CC79  60          RTS
   30                     
   31  06:CC7A            LoadPRGBank:
   32                     
   33                             ;;A is the desired PRG number
   34  06:CC7A  AA                TAX
   35  06:CC7B  A9 E0             LDA #PRGBANK
   36  06:CC7D  8D A4 00          STA mapper_address+1
   37  06:CC80  8A                TXA
   38  06:CC81  20 9B CC          JSR SendMapperCommand
   39  06:CC84  60                RTS
   40                             
   41  06:CC85            LoadCHRBankA:
   42                             ;;A is the desired CHR bank
   43  06:CC85  AA                TAX
   44  06:CC86  A9 A0             LDA #CHRBANK1
   45  06:CC88  8D A4 00          STA mapper_address+1
   46  06:CC8B  8A                TXA
   47  06:CC8C  20 9B CC          JSR SendMapperCommand
   48  06:CC8F  60                RTS
   49                             
   50  06:CC90            LoadCHRBankB:
   51                             ;;A is the desired CHR bank
   52  06:CC90  AA                TAX
   53  06:CC91  A9 C0             LDA #CHRBANK2
   54  06:CC93  8D A4 00          STA mapper_address+1
   55  06:CC96  8A                TXA
   56  06:CC97  20 9B CC          JSR SendMapperCommand
   57  06:CC9A  60                RTS
   58                             
   59  06:CC9B            SendMapperCommand:
   60                     
   61  06:CC9B  A0 00             LDY #$00
   62                             
   63  06:CC9D  91 A3             STA [mapper_address], y
   64  06:CC9F  4A                LSR A
   65  06:CCA0  91 A3             STA [mapper_address], y
   66  06:CCA2  4A                LSR A
   67  06:CCA3  91 A3             STA [mapper_address], y
   68  06:CCA5  4A                LSR A 
   69  06:CCA6  91 A3             STA [mapper_address], y
   70  06:CCA8  4A                LSR A
   71  06:CCA9  91 A3             STA [mapper_address], y
   72                             
   73  06:CCAB  60                RTS
   74                             
   75  06:CCAC            ResetBanks:
   76                     
   77  06:CCAC  20 6B CC          JSR ResetMapper
   78  06:CCAF  A9 00             LDA #$00
   79  06:CCB1  20 7A CC          JSR LoadPRGBank
   80                       
   81                             ;;as a test, load up the initial CHR banks
   82  06:CCB4  20 6B CC          JSR ResetMapper
   83  06:CCB7  A9 00             LDA #$00
   84  06:CCB9  20 85 CC          JSR LoadCHRBankA
   85  06:CCBC  A9 01             LDA #$01
   86  06:CCBE  20 90 CC          JSR LoadCHRBankB
   87  06:CCC1  60                RTS
   88                             
   89                       
#[1]   Picross.asm
#[2]   Routines/Game_Routines/ScreenEffects.asm
   96                       .include "Routines/Game_Routines/ScreenEffects.asm"
    1  06:CCC2            PopulateClues:
    2                       
    3  06:CCC2  A0 00       LDY #$00
    4  06:CCC4  B1 A9       LDA [puzzle_address], y
    5  06:CCC6  AA          TAX
    6  06:CCC7  BD 25 D0    LDA PuzzleSizes, x
    7  06:CCCA  8D 00 00    STA temp1
    8                       
    9  06:CCCD            .getByte:
   10  06:CCCD  AC B7 00    LDY clueTableIndex
   11  06:CCD0  B1 AB       LDA [clues_address], y
   12  06:CCD2  D0 07       BNE .checkNewLine
   13  06:CCD4  EE B7 00    INC clueTableIndex
   14  06:CCD7  A9 00       LDA #$00
   15  06:CCD9  F0 39       BEQ .drawClue
   16                       ;was 0, set up a draw
   17  06:CCDB            .checkNewLine
   18  06:CCDB  C9 FF       CMP #$FF
   19  06:CCDD  D0 18       BNE .getClue
   20                       
   21                       ;;was FF- need to inc stuff
   22  06:CCDF  EE B7 00    INC clueTableIndex
   23  06:CCE2  A9 00       LDA #$00
   24  06:CCE4  8D BE 00    STA clueParity
   25                       
   26  06:CCE7  EE B8 00    INC clueLineIndex
   27  06:CCEA  AD B8 00    LDA clueLineIndex
   28  06:CCED  CD 00 00    CMP temp1
   29                       ;CMP #$01
   30  06:CCF0  F0 28       BEQ .leave    ;carry will be set
   31                       
   32  06:CCF2  20 A3 CD    JSR CreateOffsetFromIndex
   33                      
   34  06:CCF5  D0 D6       BNE .getByte
   35                       
   36  06:CCF7            .getClue:
   37                       ;;clues go from high nibble to low nibble
   38  06:CCF7  48          PHA 
   39  06:CCF8  AD BE 00    LDA clueParity
   40  06:CCFB  D0 0A       BNE .getSecondClue
   41  06:CCFD  EE BE 00    INC clueParity
   42  06:CD00  68          PLA
   43  06:CD01  4A          LSR A
   44  06:CD02  4A          LSR A
   45  06:CD03  4A          LSR A
   46  06:CD04  4A          LSR A         ;move clue over to lower nibble
   47  06:CD05  D0 0D       BNE .drawClue
   48                       
   49  06:CD07            .getSecondClue:
   50                     
   51  06:CD07  CE BE 00    DEC clueParity
   52  06:CD0A  EE B7 00    INC clueTableIndex
   53  06:CD0D  68          PLA 
   54  06:CD0E  29 0F       AND #$0F
   55  06:CD10  D0 02       BNE .drawClue
   56                       ;;if 0, skip
   57  06:CD12  F0 B9       BEQ .getByte
   58                      
   59  06:CD14            .drawClue:
   60                       
   61  06:CD14  09 40       ORA #$40
   62  06:CD16  20 1B CD    JSR WriteClueByteToPPUString
   63  06:CD19  18          CLC
   64                       
   65  06:CD1A            .leave:
   66  06:CD1A  60          RTS
   67                       
   68  06:CD1B            WriteClueByteToPPUString:
   69                     
   70  06:CD1B  8D 00 00    STA temp1 ;store off the tile value
   71                     
   72                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, #$01
                          
       06:CD1E  A9 01       LDA #$01
       06:CD20  8D 21 00    STA PPU_PendingWrite
       06:CD23  AD B6 00    LDA clue_draw_address+1
       06:CD26  20 84 CB    JSR WriteToPPUString
       06:CD29  AD B5 00    LDA clue_draw_address
       06:CD2C  20 84 CB    JSR WriteToPPUString
       06:CD2F  A9 00       LDA #DRAW_HORIZONTAL
       06:CD31  20 84 CB    JSR WriteToPPUString
       06:CD34  A9 01       LDA #$01 
       06:CD36  20 84 CB    JSR WriteToPPUString
                            
   73  06:CD39  AD 00 00    LDA temp1
   74  06:CD3C  20 84 CB    JSR WriteToPPUString
   75                       
   76                       ;;also copy to ... copy
   77  06:CD3F  AD B5 00    LDA clue_draw_address
   78  06:CD42  8D AF 00    STA copy_address
   79  06:CD45  AD B6 00    LDA clue_draw_address+1
   80  06:CD48  29 0F       AND #$0F
   81  06:CD4A  09 60       ORA #$60
   82  06:CD4C  8D B0 00    STA copy_address+1
   83  06:CD4F  AD 00 00    LDA temp1
   84  06:CD52  A0 00       LDY #$00
   85  06:CD54  91 AF       STA [copy_address],y
   86                       
   87  06:CD56  AD BA 00    LDA clueDrawAdd
   88  06:CD59  20 80 CD    JSR SubFromClueDrawAddress
   89                         
   90  06:CD5C  60          RTS
   91                       
   92  06:CD5D            ResetClueDrawAddress:
   93                     
   94                       MACROGetPointer clue_start_address, clue_draw_address
                          
       06:CD5D  AD B3 00          LDA clue_start_address
       06:CD60  8D B5 00          STA clue_draw_address
       06:CD63  AD B4 00          LDA clue_start_address+1
       06:CD66  8D B6 00          STA clue_draw_address+1
                          
   95                       
   96  06:CD69  60          RTS
   97                       
   98  06:CD6A            AddToClueDrawAddress:
   99                     
  100  06:CD6A  8D 00 00    STA temp1
  101                       
  102  06:CD6D  AD B5 00    LDA clue_draw_address
  103  06:CD70  18          CLC
  104  06:CD71  6D 00 00    ADC temp1
  105  06:CD74  8D B5 00    STA clue_draw_address
  106  06:CD77  AD B6 00    LDA clue_draw_address+1
  107  06:CD7A  69 00       ADC #$00
  108  06:CD7C  8D B6 00    STA clue_draw_address+1
  109                       
  110  06:CD7F  60          RTS
  111                         
  112  06:CD80            SubFromClueDrawAddress:
  113                     
  114  06:CD80  8D 00 00    STA temp1
  115                       
  116  06:CD83  AD B5 00    LDA clue_draw_address
  117  06:CD86  38          SEC
  118  06:CD87  ED 00 00    SBC temp1
  119  06:CD8A  8D B5 00    STA clue_draw_address
  120  06:CD8D  AD B6 00    LDA clue_draw_address+1
  121  06:CD90  E9 00       SBC #$00
  122  06:CD92  8D B6 00    STA clue_draw_address+1
  123                       
  124  06:CD95  60          RTS
  125                       
  126  06:CD96            AddToClueDrawAddressHi:
  127                     
  128  06:CD96  8D 00 00    STA temp1
  129                       
  130  06:CD99  AD B6 00    LDA clue_draw_address+1
  131  06:CD9C  6D 00 00    ADC temp1
  132  06:CD9F  8D B6 00    STA clue_draw_address+1
  133                       
  134  06:CDA2  60          RTS
  135                       
  136  06:CDA3            CreateOffsetFromIndex:
  137                     
  138                       ;;would be this, but we need to be able to go further- so we'll make a doulbe offset
  139  06:CDA3  AD B8 00    LDA clueLineIndex
  140  06:CDA6  8D BB 00    STA clueDrawOffset
  141  06:CDA9  A9 00       LDA #$00
  142  06:CDAB  8D BC 00    STA clueDrawOffset+1
  143                       
  144  06:CDAE  AD B9 00    LDA clueOffsetShift   
  145  06:CDB1  F0 0E       BEQ .addOffset
  146                       
  147  06:CDB3  A2 00       LDX #$00
  148                       
  149  06:CDB5            .loopShift:
  150  06:CDB5  0E BB 00    ASL clueDrawOffset
  151  06:CDB8  2E BC 00    ROL clueDrawOffset+1
  152  06:CDBB  E8          INX
  153  06:CDBC  EC B9 00    CPX clueOffsetShift
  154  06:CDBF  D0 F4       BNE .loopShift
  155                       
  156  06:CDC1            .addOffset:
  157                       
  158  06:CDC1  20 5D CD    JSR ResetClueDrawAddress
  159  06:CDC4  AD BB 00    LDA clueDrawOffset
  160  06:CDC7  20 6A CD    JSR AddToClueDrawAddress 
  161  06:CDCA  AD BC 00    LDA clueDrawOffset+1
  162  06:CDCD  20 96 CD    JSR AddToClueDrawAddressHi
  163                       
  164  06:CDD0  60          RTS  
  165                       
  166  06:CDD1            ClearPuzzle:
  167                     
  168                       ;we'll assume clue draw address has been set to the top of the 1st nametable
  169                      
  170                       MACROGetLabelPointer ClearLineDefs, table_address
                          
       06:CDD1  A9 D0             LDA #HIGH(ClearLineDefs)
       06:CDD3  A2 07             LDX #LOW(ClearLineDefs)
                                  
       06:CDD5  8E 14 00          STX table_address
       06:CDD8  8D 15 00          STA table_address+1
                                  
  171                     
  172  06:CDDB  AC B8 00    LDY clueLineIndex
  173  06:CDDE  B1 14       LDA [table_address], y
  174  06:CDE0  8D 00 00    STA temp1
  175                       MACROAddPPUStringEntryRepeat clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp1, #$24
                          
       06:CDE3  A9 01       LDA #$01
       06:CDE5  8D 21 00    STA PPU_PendingWrite
       06:CDE8  AD B6 00    LDA clue_draw_address+1
       06:CDEB  20 84 CB    JSR WriteToPPUString
       06:CDEE  AD B5 00    LDA clue_draw_address
       06:CDF1  20 84 CB    JSR WriteToPPUString
       06:CDF4  A9 40       LDA #$40
       06:CDF6  09 00       ORA #DRAW_HORIZONTAL
       06:CDF8  0D 00 00    ORA temp1
       06:CDFB  20 84 CB    JSR WriteToPPUString
       06:CDFE  A9 24       LDA #$24
       06:CE00  20 84 CB    JSR WriteToPPUString
                            
  176                       ;;no need to load anything else
  177                       
  178  06:CE03  AD B5 00    LDA clue_draw_address
  179  06:CE06  18          CLC
  180  06:CE07  69 20       ADC #32
  181  06:CE09  8D B5 00    STA clue_draw_address
  182  06:CE0C  AD B6 00    LDA clue_draw_address+1
  183  06:CE0F  69 00       ADC #$00
  184  06:CE11  8D B6 00    STA clue_draw_address+1
  185                       
  186  06:CE14  EE B8 00    INC clueLineIndex
  187  06:CE17  60          RTS
  188                       
  189  06:CE18            LoadPauseScreen:
  190                     
  191                     ;;use clue indexes again
  192                     ;;we want to draw one line at a time
  193                     ;;we have control codes, but those don't matter since we have to build ou the strings before hand
  194                     
  195                     ;load pause table
  196                     ;there are 6 lines of 13 tiles
  197                     ;one byte for the 6 lines, one byte to keep track of our index
  198                       ;STA clueLineIndex 
  199                       ;STA clueOffsetShift
  200                     
  201                     ;;pause_address has the table we want
  202                     ;;pause_draw_address will be the draw location
  203                     
  204                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:CE18  A9 01       LDA #$01
       06:CE1A  8D 21 00    STA PPU_PendingWrite
       06:CE1D  AD B2 00    LDA pause_draw_address+1
       06:CE20  20 84 CB    JSR WriteToPPUString
       06:CE23  AD B1 00    LDA pause_draw_address
       06:CE26  20 84 CB    JSR WriteToPPUString
       06:CE29  A9 00       LDA #DRAW_HORIZONTAL
       06:CE2B  20 84 CB    JSR WriteToPPUString
       06:CE2E  A9 0D       LDA #13 
       06:CE30  20 84 CB    JSR WriteToPPUString
                            
  205                     
  206  06:CE33  A2 00       LDX #$00
  207  06:CE35  AC B8 00    LDY clueLineIndex
  208  06:CE38            .loop:
  209                      
  210  06:CE38  8A          TXA
  211  06:CE39  48          PHA
  212  06:CE3A  B1 AD       LDA [pause_address],y
  213  06:CE3C  20 84 CB    JSR WriteToPPUString
  214  06:CE3F  68          PLA
  215  06:CE40  AA          TAX
  216  06:CE41  C8          INY
  217  06:CE42  E8          INX 
  218  06:CE43  E0 0D       CPX #13
  219  06:CE45  D0 F1       BNE .loop
  220                       
  221  06:CE47  8C B8 00    STY clueLineIndex
  222                       
  223  06:CE4A  AD B1 00    LDA pause_draw_address
  224  06:CE4D  18          CLC
  225  06:CE4E  69 20       ADC #$20
  226  06:CE50  8D B1 00    STA pause_draw_address
  227  06:CE53  AD B2 00    LDA pause_draw_address+1
  228  06:CE56  69 00       ADC #$00
  229  06:CE58  8D B2 00    STA pause_draw_address+1
  230                       
  231  06:CE5B  EE B9 00    INC clueOffsetShift
  232  06:CE5E  60          RTS
  233                       
  234                       
  235                     
  236                     
  237  06:CE5F            ClearPauseScreen:  
  238                     
  239                       MACROAddPPUStringEntryRawData pause_draw_address+1, pause_draw_address, #DRAW_HORIZONTAL, #13
                          
       06:CE5F  A9 01       LDA #$01
       06:CE61  8D 21 00    STA PPU_PendingWrite
       06:CE64  AD B2 00    LDA pause_draw_address+1
       06:CE67  20 84 CB    JSR WriteToPPUString
       06:CE6A  AD B1 00    LDA pause_draw_address
       06:CE6D  20 84 CB    JSR WriteToPPUString
       06:CE70  A9 00       LDA #DRAW_HORIZONTAL
       06:CE72  20 84 CB    JSR WriteToPPUString
       06:CE75  A9 0D       LDA #13 
       06:CE77  20 84 CB    JSR WriteToPPUString
                            
  240                     
  241  06:CE7A  A2 00       LDX #$00
  242  06:CE7C  A0 00       LDY #$00
  243  06:CE7E            .loop:
  244                      
  245  06:CE7E  8A          TXA
  246  06:CE7F  48          PHA
  247  06:CE80  B1 AD       LDA [pause_address],y
  248  06:CE82  20 84 CB    JSR WriteToPPUString
  249  06:CE85  68          PLA
  250  06:CE86  AA          TAX
  251  06:CE87  C8          INY
  252  06:CE88  E8          INX 
  253  06:CE89  E0 0D       CPX #13
  254  06:CE8B  D0 F1       BNE .loop
  255                       
  256                       
  257  06:CE8D  AD B1 00    LDA pause_draw_address
  258  06:CE90  18          CLC
  259  06:CE91  69 20       ADC #$20
  260  06:CE93  8D B1 00    STA pause_draw_address
  261  06:CE96  AD B2 00    LDA pause_draw_address+1
  262  06:CE99  69 00       ADC #$00
  263  06:CE9B  8D B2 00    STA pause_draw_address+1
  264                       
  265  06:CE9E  AD AD 00    LDA pause_address
  266  06:CEA1  18          CLC
  267  06:CEA2  69 20       ADC #$20
  268  06:CEA4  8D AD 00    STA pause_address
  269  06:CEA7  AD AE 00    LDA pause_address+1
  270  06:CEAA  69 00       ADC #$00
  271  06:CEAC  8D AE 00    STA pause_address+1
  272                       
  273  06:CEAF  EE B9 00    INC clueOffsetShift
  274  06:CEB2  60         RTS
  275  06:CEB3            DrawImage:
  276                     
  277                       ;;we have clueTableIndex, which should be at the image bytes now
  278                       ;;clue line index will keep track of our place in a byte
  279                        
  280  06:CEB3  A9 00       LDA #$00
  281  06:CEB5  8D 00 00    STA temp1
  282  06:CEB8  8D 01 00    STA temp2
  283  06:CEBB  8D 02 00    STA temp3
  284  06:CEBE  8D 03 00    STA temp4
  285  06:CEC1  8D 05 00    STA temp6
  286                       
  287  06:CEC4  A9 04       LDA #$04
  288  06:CEC6  8D 04 00    STA temp5
  289                       
  290  06:CEC9  A0 00       LDY #$00
  291  06:CECB  B1 A9       LDA [puzzle_address], y
  292  06:CECD  AA          TAX
  293  06:CECE  BD 25 D0    LDA PuzzleSizes, x
  294  06:CED1  8D 06 00    STA temp7
  295  06:CED4  BD 28 D0    LDA PuzzleImageSizes, x
  296  06:CED7  8D 07 00    STA temp8
  297  06:CEDA  4A          LSR A
  298  06:CEDB  4A          LSR A
  299  06:CEDC  8D 09 00    STA tempy
  300  06:CEDF  AD 07 00    LDA temp8
  301  06:CEE2  29 03       AND #$03
  302  06:CEE4  F0 03       BEQ .skipAdd1
  303  06:CEE6  EE 09 00    INC tempy  
  304  06:CEE9            .skipAdd1:
  305  06:CEE9  BD 2B D0    LDA ImageDrawWrapOffsets, x
  306  06:CEEC  8D 08 00    STA tempx
  307                       
  308  06:CEEF  AC B7 00    LDY clueTableIndex
  309  06:CEF2  B1 AB       LDA [clues_address], y
  310                     
  311  06:CEF4  0A          ASL A
  312  06:CEF5  2E 00 00    ROL temp1
  313  06:CEF8  0A          ASL A
  314  06:CEF9  2E 00 00    ROL temp1
  315  06:CEFC  0A          ASL A
  316  06:CEFD  2E 01 00    ROL temp2
  317  06:CF00  0A          ASL A
  318  06:CF01  2E 01 00    ROL temp2
  319  06:CF04  0A          ASL A
  320  06:CF05  2E 02 00    ROL temp3
  321  06:CF08  0A          ASL A
  322  06:CF09  2E 02 00    ROL temp3
  323  06:CF0C  0A          ASL A
  324  06:CF0D  2E 03 00    ROL temp4
  325  06:CF10  0A          ASL A
  326  06:CF11  2E 03 00    ROL temp4
  327                       
  328                     
  329  06:CF14  A2 00       LDX #$00
  330  06:CF16            .moveUpTiles:
  331  06:CF16  BD 00 00    LDA temp1, x
  332  06:CF19  09 24       ORA #$24
  333  06:CF1B  9D 00 00    STA temp1, x
  334  06:CF1E  E8          INX
  335  06:CF1F  E0 04       CPX #$04
  336  06:CF21  D0 F3       BNE .moveUpTiles
  337                       
  338                       
  339  06:CF23  AD B9 00    LDA clueOffsetShift
  340  06:CF26  18          CLC
  341  06:CF27  69 04       ADC #$04
  342                     
  343  06:CF29  8D B9 00    STA clueOffsetShift
  344                       ;;clue offset shift + 4, check if we went over puzle row length
  345  06:CF2C  38          SEC
  346  06:CF2D  ED 06 00    SBC temp7 ;;subtract 15
  347  06:CF30  90 12       BCC .makeStrings
  348  06:CF32  F0 10       BEQ .makeStrings
  349                       
  350  06:CF34  8D B9 00    STA clueOffsetShift ;loop offset over
  351  06:CF37  8D 05 00    STA temp6 ; length of second string
  352  06:CF3A  AD 04 00    LDA temp5
  353  06:CF3D  38          SEC
  354  06:CF3E  ED 05 00    SBC temp6 
  355  06:CF41  8D 04 00    STA temp5 ;length of first string 
  356                       
  357  06:CF44            .makeStrings:
  358                       
  359  06:CF44  A2 00       LDX #$00
  360                       
  361  06:CF46  AD 04 00    LDA temp5
  362  06:CF49  F0 51       BEQ .makeSecondString
  363  06:CF4B  8A          TXA
  364  06:CF4C  48          PHA
  365                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp5
                          
       06:CF4D  A9 01       LDA #$01
       06:CF4F  8D 21 00    STA PPU_PendingWrite
       06:CF52  AD B6 00    LDA clue_draw_address+1
       06:CF55  20 84 CB    JSR WriteToPPUString
       06:CF58  AD B5 00    LDA clue_draw_address
       06:CF5B  20 84 CB    JSR WriteToPPUString
       06:CF5E  A9 00       LDA #DRAW_HORIZONTAL
       06:CF60  20 84 CB    JSR WriteToPPUString
       06:CF63  AD 04 00    LDA temp5 
       06:CF66  20 84 CB    JSR WriteToPPUString
                            
  366  06:CF69  68          PLA
  367  06:CF6A  AA          TAX
  368                       
  369  06:CF6B            .firstStringLoop:
  370                       
  371  06:CF6B  8A          TXA 
  372  06:CF6C  48          PHA
  373  06:CF6D  BD 00 00    LDA temp1, x
  374  06:CF70  20 84 CB    JSR WriteToPPUString
  375                       
  376  06:CF73  EE B8 00    INC clueLineIndex
  377  06:CF76  AD B8 00    LDA clueLineIndex
  378  06:CF79  CD 07 00    CMP temp8
  379  06:CF7C  D0 04       BNE .continueLoop
  380  06:CF7E  68          PLA 
  381  06:CF7F  4C 03 D0    JMP .leave
  382                       
  383  06:CF82            .continueLoop:
  384  06:CF82  68          PLA
  385  06:CF83  AA          TAX
  386  06:CF84  E8          INX
  387  06:CF85  EC 04 00    CPX temp5
  388  06:CF88  D0 E1       BNE .firstStringLoop
  389                       
  390  06:CF8A  AD B5 00    LDA clue_draw_address
  391  06:CF8D  18          CLC
  392  06:CF8E  6D 04 00    ADC temp5
  393  06:CF91  8D B5 00    STA clue_draw_address
  394  06:CF94  AD B6 00    LDA clue_draw_address+1
  395  06:CF97  69 00       ADC #$00
  396  06:CF99  8D B6 00    STA clue_draw_address+1
  397                       
  398  06:CF9C            .makeSecondString:
  399                     
  400  06:CF9C  AD 05 00    LDA temp6
  401  06:CF9F  F0 62       BEQ .leave
  402                       
  403                       ;;loop draw address to next line
  404  06:CFA1  AD B5 00    LDA clue_draw_address
  405  06:CFA4  18          CLC
  406  06:CFA5  6D 08 00    ADC tempx
  407  06:CFA8  8D B5 00    STA clue_draw_address
  408  06:CFAB  AD B6 00    LDA clue_draw_address+1
  409  06:CFAE  69 00       ADC #$00
  410  06:CFB0  8D B6 00    STA clue_draw_address+1
  411  06:CFB3  8A          TXA
  412  06:CFB4  48          PHA
  413                       MACROAddPPUStringEntryRawData clue_draw_address+1, clue_draw_address, #DRAW_HORIZONTAL, temp6
                          
       06:CFB5  A9 01       LDA #$01
       06:CFB7  8D 21 00    STA PPU_PendingWrite
       06:CFBA  AD B6 00    LDA clue_draw_address+1
       06:CFBD  20 84 CB    JSR WriteToPPUString
       06:CFC0  AD B5 00    LDA clue_draw_address
       06:CFC3  20 84 CB    JSR WriteToPPUString
       06:CFC6  A9 00       LDA #DRAW_HORIZONTAL
       06:CFC8  20 84 CB    JSR WriteToPPUString
       06:CFCB  AD 05 00    LDA temp6 
       06:CFCE  20 84 CB    JSR WriteToPPUString
                            
  414  06:CFD1  68          PLA 
  415  06:CFD2  AA          TAX
  416                       
  417  06:CFD3            .secondStringLoop:
  418                     
  419  06:CFD3  8A          TXA
  420  06:CFD4  48          PHA 
  421  06:CFD5  BD 00 00    LDA temp1, x
  422  06:CFD8  20 84 CB    JSR WriteToPPUString
  423                       
  424  06:CFDB  EE B8 00    INC clueLineIndex
  425  06:CFDE  AD B8 00    LDA clueLineIndex
  426  06:CFE1  CD 07 00    CMP temp8
  427  06:CFE4  D0 04       BNE .continueSecondLoop
  428                       
  429  06:CFE6  68          PLA 
  430  06:CFE7  4C 03 D0    JMP .leave
  431                       
  432  06:CFEA            .continueSecondLoop:
  433  06:CFEA  68          PLA
  434  06:CFEB  AA          TAX
  435  06:CFEC  E8          INX
  436  06:CFED  E0 04       CPX #$04
  437  06:CFEF  D0 E2       BNE .secondStringLoop
  438                       
  439  06:CFF1  AD B5 00    LDA clue_draw_address
  440  06:CFF4  18          CLC
  441  06:CFF5  6D 05 00    ADC temp6
  442  06:CFF8  8D B5 00    STA clue_draw_address
  443  06:CFFB  AD B6 00    LDA clue_draw_address+1
  444  06:CFFE  69 00       ADC #$00
  445  06:D000  8D B6 00    STA clue_draw_address+1
  446                       
  447  06:D003            .leave:
  448  06:D003  EE B7 00    INC clueTableIndex
  449  06:D006  60          RTS
  450                     
  451  06:D007            ClearLineDefs:
  452                     
  453  06:D007  20 20 20    .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
       06:D00A  20 20 20  
       06:D00D  20 20 20  
       06:D010  20 20     
  454  06:D012  0D 0D 0D    .db $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D
       06:D015  0D 0D 0D  
       06:D018  0D 0D 0D  
       06:D01B  0D 0D 0D  
       06:D01E  0D 0D 0D  
       06:D021  0D 0D     
  455  06:D023  20 20       .db $20, $20
  456                       
  457  06:D025            PuzzleSizes:
  458                       
  459  06:D025  05 0A 0F    .db $05, $0A, $0F
  460                       
  461  06:D028            PuzzleImageSizes:
  462                     
  463                       ;.db $05, $0A, $0F
  464  06:D028  19 64 E1    .db $19, $64, $E1
  465                       
  466  06:D02B            ImageDrawWrapOffsets:
  467                     
  468  06:D02B  1B 16 11   .db $1B, $16, $11
#[1]   Picross.asm
   97                       
   98                       
   99                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  100                     ;;     NMI                  ;;
  101                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  102                     
#[2]   Routines/Common/NMI.asm
  103                       .include "Routines/Common/NMI.asm"
    1                      
    2  06:D02E            NMI:
    3                     
    4  06:D02E  48          PHA                              ;protect the registers
    5  06:D02F  8A          TXA
    6  06:D030  48          PHA
    7  06:D031  98          TYA
    8  06:D032  48          PHA
    9                       
   10  06:D033            nmi_started:
   11  06:D033  A9 00       LDA #$00
   12  06:D035  8D 03 20    STA OAM_LO      ; set the low byte (00) of the RAM address
   13  06:D038  A9 02       LDA #$02
   14  06:D03A  8D 14 40    STA OAM_HI       ; set the high byte (02) of the RAM address, start the transfer
   15                     
   16  06:D03D  AD 10 00    LDA NMI_locks
   17  06:D040  F0 03       BEQ update_controllers
   18  06:D042  4C B1 D0    JMP WakeUp
   19                     
   20  06:D045            update_controllers:
   21                     
#[3]   Routines/Common/ReadControllers.asm
   22                       .include "Routines/Common/ReadControllers.asm"
    1                     
    2  06:D045  8A            TXA
    3  06:D046  48                PHA
    4  06:D047  98                TYA
    5  06:D048  48                PHA
    6                     
    7  06:D049  A2 00             LDX #$00
    8                     
    9  06:D04B            GamePadCheck:
   10  06:D04B  A9 01             LDA #$01        ;load 1
   11  06:D04D  8D 16 40          STA $4016       ; turn latch on
   12                             ;STA gamepad2
   13  06:D050  4A                LSR     A               ; move acc it over for a 0 bit, better than loading 0 to the acc, I guess
   14  06:D051  8D 16 40          STA $4016       ;turn latch off
   15                             
   16                             ;do a ring counter technique- load %10000000 into both
   17  06:D054  A9 80             LDA #$80
   18  06:D056  8D 18 00          STA gamepad
   19                     
   20  06:D059            ReadControllerABytesLoop:
   21  06:D059  AD 16 40          LDA $4016               ;acc: %00000001 c: 0
   22  06:D05C  29 03             AND #%00000011  ;acc: %00000001 c: 0
   23  06:D05E  C9 01             CMP #%00000001  ;acc: %00000001 c: 1
   24                             ;ror shifts everything right one position: carry->bit 7, bit 0-> carry
   25  06:D060  6E 18 00          ROR gamepad             ;gamepad: %11000000
   26                             ;eventually, the ROR sends out the 1 instead of all the leading 0s, BCC (branch carry clear) gets the 1 and does not loop
   27  06:D063  90 F4             BCC ReadControllerABytesLoop
   28                             
   29                             ;;comapre last to current, find the pressed buttons this frame
   30  06:D065  AD 19 00          LDA gamepadLast
   31  06:D068  49 FF             EOR #$FF
   32  06:D06A  2D 18 00          AND gamepad
   33  06:D06D  8D 1A 00          STA gamepadPressed
   34                             
   35                             
   36  06:D070  AD 18 00          LDA gamepad
   37  06:D073  8D 19 00          STA gamepadLast
   38                             
   39                             ;return x and y... before resetting them all over again- always good to make sure we're clean
   40  06:D076  68                PLA
   41  06:D077  A8                TAY
   42  06:D078  68                PLA
   43  06:D079  AA                TAX     
#[2]   Routines/Common/NMI.asm
   23                       
   24  06:D07A  20 C1 CA    JSR ProcessPPUString
   25                       
   26                       
   27  06:D07D  A9 00       LDA #$00        ;;tell the ppu there is no background scrolling
   28  06:D07F  8D 05 20    STA PPU_SCROLL
   29  06:D082  8D 05 20    STA PPU_SCROLL
   30                       
   31                       ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
   32                       ; enable sprites, enable background, no clipping on left side 
   33  06:D085  20 DE CB    JSR UpdatePPUControl
   34                     
   35  06:D088            NMIUpdate:
   36                     
   37  06:D088  20 A5 D0    JSR StateNMIUpdate
   38                       
   39  06:D08B  AD 1B 00    LDA PPU_Control
   40  06:D08E  29 FC       AND #$FC
   41  06:D090  0D 1F 00    ORA PPU_ScrollNT
   42  06:D093  8D 00 20    STA PPU_CTRL
   43                       
   44  06:D096  AD 1D 00    LDA PPU_ScrollX     ;;tell the ppu there is no background scrolling
   45  06:D099  8D 05 20    STA PPU_SCROLL
   46  06:D09C  AD 1E 00    LDA PPU_ScrollY
   47  06:D09F  8D 05 20    STA PPU_SCROLL
   48                     
   49  06:D0A2  4C B1 D0    JMP WakeUp
   50                     
   51  06:D0A5            StateNMIUpdate:
   52                     
   53                       MACROCallDynamicJump game_mode
                          
       06:D0A5  AD 0E 00    LDA game_mode
       06:D0A8  20 23 CA    JSR Dynamic_Jump
                                  
   54                     
   55  06:D0AB            NMIJumpTable:
   56                     
   57  06:D0AB  BC D0       .word UpdateTitleNMI
   58  06:D0AD  C0 D0       .word UpdateGameNMI
   59  06:D0AF  C1 D0       .word UpdateGameOverNMI
   60                     
   61  06:D0B1            WakeUp:
   62  06:D0B1  A9 00       LDA #$00
   63  06:D0B3  8D 0C 00    STA sleeping
   64                       
   65  06:D0B6  68          PLA             ;restore the registers
   66  06:D0B7  A8          TAY 
   67  06:D0B8  68          PLA
   68  06:D0B9  AA          TAX
   69  06:D0BA  68          PLA
   70                     
   71  06:D0BB  40          RTI             ; return from interrupt
   72                       
#[3]   Routines/NMI_States/UpdateTitleNMI.asm
   73                       .include "Routines/NMI_States/UpdateTitleNMI.asm"
    1  06:D0BC            UpdateTitleNMI:
    2                     
    3                       ;;load bank 0 for BG tiles, so we start with the right tile set
    4                       ;JSR ResetMapper
    5                       ;LDA #$01
    6                       ;JSR LoadCHRBankB
    7                     
    8                     
    9  06:D0BC  20 A4 CB    JSR DetectSprite0
   10                     
   11                       ;JSR ResetMapper
   12                       ;LDA #$03
   13                       ;JSR LoadCHRBankB
   14                       
   15                     
   16                        
   17  06:D0BF  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameNMI.asm
   74                       .include "Routines/NMI_States/UpdateGameNMI.asm"
    1  06:D0C0            UpdateGameNMI:
    2  06:D0C0  60          RTS
#[2]   Routines/Common/NMI.asm
#[3]   Routines/NMI_States/UpdateGameOverNMI.asm
   75                       .include "Routines/NMI_States/UpdateGameOverNMI.asm"
    1  06:D0C1            UpdateGameOverNMI:
    2  06:D0C1  60          RTS
#[2]   Routines/Common/NMI.asm
#[1]   Picross.asm
  104                       
  105                     ;;**************************;;
  106                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  107                     ;;       PRG ROM DATA       ;;
  108                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  109                     ;;**************************;; 
  110                       
  111           0007        .bank 7
  112           E000        .org $E000
  113                     
#[2]   NameTables/Tables.asm
  114                       .include "NameTables/Tables.asm"
    1  07:E000            Palettes:
    2                     
    3  07:E000  1C E0       .word Title_Palette, Game_Palette, GameOver_Palette
       07:E002  3C E0     
       07:E004  5C E0     
    4                     
    5  07:E006            NameTables:
    6                     
    7  07:E006  12 E0       .word Title_Screens, Game_Screens, GameOver_Screens
       07:E008  14 E0     
       07:E00A  1A E0     
    8                       
    9  07:E00C            NameTables2:
   10                     
   11  07:E00C  7C E4       .word Title_Second, Blank_Screen, Blank_Screen
       07:E00E  7C F8     
       07:E010  7C F8     
   12                       
   13  07:E012            Title_Screens:
   14                     
   15  07:E012  7C E0       .word Title_Screen
   16                       
   17  07:E014            Game_Screens:
   18                     
   19  07:E014  7C E8       .word Game_5, Game_10, Game_15
       07:E016  7C EC     
       07:E018  7C F0     
   20                       
   21  07:E01A            GameOver_Screens:
   22                     
   23  07:E01A  7C F4       .word GameOver_Screen
   24                     
   25  07:E01C            Title_Palette:
   26                     
   27  07:E01C              .incbin "NameTables/Title_PAL.pal"
   28  07:E02C              .incbin "NameTables/Title_PAL.pal"
   29                       
   30  07:E03C            Game_Palette:
   31                     
   32  07:E03C              .incbin "NameTables/Game_PAL.pal"
   33  07:E04C              .incbin "NameTables/Game_PAL.pal"
   34                       
   35  07:E05C            GameOver_Palette:
   36                     
   37  07:E05C              .incbin "NameTables/GameOver_PAL.pal"
   38  07:E06C              .incbin "NameTables/GameOver_PAL.pal"
   39                       
   40  07:E07C            Title_Screen:
   41                     
   42  07:E07C              .incbin "NameTables/Title_NT.nam"
   43                       
   44  07:E47C            Title_Second:
   45                     
   46  07:E47C              .incbin "NameTables/Title_PuzzMen_NT.nam"
   47                       
   48  07:E87C            Game_5: 
   49                     
   50  07:E87C              .incbin "NameTables/Game_NT_5.nam"
   51                       
   52  07:EC7C            Game_10:
   53  07:EC7C              .incbin "NameTables/Game_NT_10.nam"
   54                       
   55  07:F07C            Game_15:
   56  07:F07C              .incbin "NameTables/Game_NT.nam"
   57                       
   58  07:F47C            GameOver_Screen:
   59                     
   60  07:F47C              .incbin "NameTables/GameOver_NT.nam"
   61                       
   62  07:F87C            Blank_Screen:
   63                     
   64  07:F87C              .incbin "NameTables/Blank_NT.nam"
   65                     
   66  07:FC7C            Pause_Menu:
   67  07:FC7C  28 2A 2A    .db $28,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$29
       07:FC7F  2A 2A 2A  
       07:FC82  2A 2A 2A  
       07:FC85  2A 2A 2A  
       07:FC88  29        
   68  07:FC89  2B 24 1C    .db $2b,$24,$1c,$0a,$1f,$0e,$62,$0e,$21,$12,$1d,$24,$3b
       07:FC8C  0A 1F 0E  
       07:FC8F  62 0E 21  
       07:FC92  12 1D 24  
       07:FC95  3B        
   69  07:FC96  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FC99  24 24 24  
       07:FC9C  24 24 24  
       07:FC9F  24 24 24  
       07:FCA2  3B        
   70  07:FCA3  2B 24 24    .db $2b,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$3b
       07:FCA6  24 24 24  
       07:FCA9  24 24 24  
       07:FCAC  24 24 24  
       07:FCAF  3B        
   71  07:FCB0  2B 24 24    .db $2b,$24,$24,$22,$0e,$1c,$24,$24,$17,$18,$24,$24,$3b
       07:FCB3  22 0E 1C  
       07:FCB6  24 24 17  
       07:FCB9  18 24 24  
       07:FCBC  3B        
   72  07:FCBD  38 3A 3A    .db $38,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$3a,$39
       07:FCC0  3A 3A 3A  
       07:FCC3  3A 3A 3A  
       07:FCC6  3A 3A 3A  
       07:FCC9  39        
   73                     
   74                       
   75                     
   76                       
   77                      
   78                             
#[1]   Picross.asm
#[2]   Sprites/Sprites.asm
  115                       .include "Sprites/Sprites.asm"
    1                     
    2                     ;;Byte0
    3                     ;;Y position of top of sprite
    4                     ;;Sprite data is delayed by one scanline; 
    5                     ;;you must subtract 1 from the sprite's 
    6                     ;;Y coordinate before writing it here. 
    7                     ;;Hide a sprite by moving it down offscreen, 
    8                     ;;by writing any values between #$EF-#$FF here. 
    9                     ;;Sprites are never displayed on the first line of the picture, 
   10                     ;;and it is impossible to place a sprite partially off the top of the screen.
   11                     
   12                     ;;Byte 1
   13                     ;;Tile index number
   14                     ;;For 8x8 sprites, this is the tile number of this sprite within the pattern table selected in bit 3 of PPUCTRL ($2000).
   15                     ;;For 8x16 sprites (bit 5 of PPUCTRL set), the PPU ignores the pattern table selection and selects a pattern table from bit 0 of this number.
   16                     ;;76543210
   17                     ;;||||||||
   18                     ;;|||||||+- Bank ($0000 or $1000) of tiles
   19                     ;;+++++++-- Tile number of top of sprite (0 to 254; bottom half gets the next tile)
   20                     
   21                     ;;Byte 2
   22                     ;;Attributes
   23                     ;;76543210
   24                     ;;||||||||
   25                     ;;||||||++- Palette (4 to 7) of sprite
   26                     ;;|||+++--- Unimplemented (read 0)
   27                     ;;||+------ Priority (0: in front of background; 1: behind background)
   28                     ;;|+------- Flip sprite horizontally
   29                     ;;+-------- Flip sprite vertically
   30                     
   31                     ;;Byte 3
   32                     ;;X position of left side of sprite.
   33                     ;;X-scroll values of $F9-FF results in parts of the 
   34                     ;;sprite to be past the right edge of the screen, thus invisible.
   35                     ;;It is not possible to have a sprite partially visible on the left edge. 
   36                     ;;Instead, left-clipping through PPUMASK ($2001) can be used to simulate this effect.
   37  07:FCCA            Sprites:
   38  07:FCCA  D0 FC             .word Title_Sprites, Game_Sprites, GameOver_Sprites
       07:FCCC  D9 FC     
       07:FCCE  E2 FC     
   39                     
   40  07:FCD0            Title_Sprites:
   41  07:FCD0  02            .db $02
   42  07:FCD1  85 00 00          .db $85,$00,$00,$E8
       07:FCD4  E8        
   43  07:FCD5  A0 01 00          .db $A0,$01,$00,$60
       07:FCD8  60        
   44  07:FCD9            Game_Sprites:
   45  07:FCD9  02            .db $02
   46  07:FCDA  62 02 03          .db $62,$02,$03,$72
       07:FCDD  72        
   47  07:FCDE  5F FF 00          .db $5F,$FF,$00,$60
       07:FCE1  60        
   48  07:FCE2            GameOver_Sprites:
   49  07:FCE2  01                .db $01
   50  07:FCE3  00 00 00          .db $00,$00,$00,$00
       07:FCE6  00        
#[1]   Picross.asm
  116                     
  117           FFFA        .org $FFFA     ;first of the three vectors starts here
  118  07:FFFA  2E D0       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
  119                                        ;processor will jump to the label NMI:
  120  07:FFFC  00 C0       .dw RESET      ;when the processor first turns on or is reset, it will jump
  121                                        ;to the label RESET:
  122  07:FFFE  00 00       .dw 0          ;external interrupt IRQ is not used in this tutorial
  123                       
  124                     ;;**************************;;
  125                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  126                     ;;      CHR ROM DATA        ;;
  127                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  128                     ;;**************************;; 
  129                       
  130           0008        .bank 8
  131           0000        .org $0000
  132  08:0000              .incbin "CHRROM/Bank0.chr"   ;includes 8KB graphics file from SMB1
  133                       
  134           0009        .bank 9
  135           0000        .org $0000
  136  09:0000              .incbin "CHRROM/Bank1.chr"
  137                       
  138           000A        .bank 10
  139           0000        .org $0000
  140  0A:0000              .incbin "CHRROM/Bank2.chr"
  141                       
  142           000B        .bank 11
  143           0000        .org $0000
  144  0B:0000              .incbin "CHRROM/Bank3.chr"
